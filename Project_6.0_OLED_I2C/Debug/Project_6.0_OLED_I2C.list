
Project_6.0_OLED_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023fc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d9c  080024bc  080024bc  000124bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003258  08003258  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003258  08003258  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003258  08003258  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003258  08003258  00013258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800325c  0800325c  0001325c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003260  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000470  20000014  08003274  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000484  08003274  00020484  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007006  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000173a  00000000  00000000  00027042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000738  00000000  00000000  00028780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00018a56  00000000  00000000  00028eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000a122  00000000  00000000  0004190e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008bc27  00000000  00000000  0004ba30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000d7657  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000658  00000000  00000000  000d76a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001818  00000000  00000000  000d7d00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080024a4 	.word	0x080024a4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	080024a4 	.word	0x080024a4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b090      	sub	sp, #64	; 0x40
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	volatile uint8_t msg[64] = {'\0'};
 8000226:	003b      	movs	r3, r7
 8000228:	2200      	movs	r2, #0
 800022a:	601a      	str	r2, [r3, #0]
 800022c:	3304      	adds	r3, #4
 800022e:	223c      	movs	r2, #60	; 0x3c
 8000230:	2100      	movs	r1, #0
 8000232:	0018      	movs	r0, r3
 8000234:	f002 f92e 	bl	8002494 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000238:	f000 fbbe 	bl	80009b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023c:	f000 f824 	bl	8000288 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000240:	f000 f8ba 	bl	80003b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000244:	f000 f878 	bl	8000338 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 8000248:	f000 f8d4 	bl	80003f4 <SSD1306_Init>

  SSD1306_GotoXY (10,0);
 800024c:	2100      	movs	r1, #0
 800024e:	200a      	movs	r0, #10
 8000250:	f000 f97c 	bl	800054c <SSD1306_GotoXY>
  SSD1306_Puts ("Hello", &Font_11x18, 1);
 8000254:	4909      	ldr	r1, [pc, #36]	; (800027c <main+0x5c>)
 8000256:	4b0a      	ldr	r3, [pc, #40]	; (8000280 <main+0x60>)
 8000258:	2201      	movs	r2, #1
 800025a:	0018      	movs	r0, r3
 800025c:	f000 fa56 	bl	800070c <SSD1306_Puts>
  SSD1306_GotoXY (30,30);
 8000260:	211e      	movs	r1, #30
 8000262:	201e      	movs	r0, #30
 8000264:	f000 f972 	bl	800054c <SSD1306_GotoXY>
  SSD1306_Puts ("World", &Font_11x18, 1);
 8000268:	4904      	ldr	r1, [pc, #16]	; (800027c <main+0x5c>)
 800026a:	4b06      	ldr	r3, [pc, #24]	; (8000284 <main+0x64>)
 800026c:	2201      	movs	r2, #1
 800026e:	0018      	movs	r0, r3
 8000270:	f000 fa4c 	bl	800070c <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8000274:	f000 f922 	bl	80004bc <SSD1306_UpdateScreen>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000278:	e7fe      	b.n	8000278 <main+0x58>
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	20000000 	.word	0x20000000
 8000280:	080024bc 	.word	0x080024bc
 8000284:	080024c4 	.word	0x080024c4

08000288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000288:	b590      	push	{r4, r7, lr}
 800028a:	b099      	sub	sp, #100	; 0x64
 800028c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028e:	242c      	movs	r4, #44	; 0x2c
 8000290:	193b      	adds	r3, r7, r4
 8000292:	0018      	movs	r0, r3
 8000294:	2334      	movs	r3, #52	; 0x34
 8000296:	001a      	movs	r2, r3
 8000298:	2100      	movs	r1, #0
 800029a:	f002 f8fb 	bl	8002494 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029e:	231c      	movs	r3, #28
 80002a0:	18fb      	adds	r3, r7, r3
 80002a2:	0018      	movs	r0, r3
 80002a4:	2310      	movs	r3, #16
 80002a6:	001a      	movs	r2, r3
 80002a8:	2100      	movs	r1, #0
 80002aa:	f002 f8f3 	bl	8002494 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ae:	003b      	movs	r3, r7
 80002b0:	0018      	movs	r0, r3
 80002b2:	231c      	movs	r3, #28
 80002b4:	001a      	movs	r2, r3
 80002b6:	2100      	movs	r1, #0
 80002b8:	f002 f8ec 	bl	8002494 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002bc:	0021      	movs	r1, r4
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	2202      	movs	r2, #2
 80002c2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	2201      	movs	r2, #1
 80002c8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2210      	movs	r2, #16
 80002ce:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	2200      	movs	r2, #0
 80002d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	0018      	movs	r0, r3
 80002da:	f001 fad9 	bl	8001890 <HAL_RCC_OscConfig>
 80002de:	1e03      	subs	r3, r0, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002e2:	f000 f881 	bl	80003e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e6:	211c      	movs	r1, #28
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	2207      	movs	r2, #7
 80002ec:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	2200      	movs	r2, #0
 80002f2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2200      	movs	r2, #0
 80002f8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	2200      	movs	r2, #0
 80002fe:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000300:	187b      	adds	r3, r7, r1
 8000302:	2100      	movs	r1, #0
 8000304:	0018      	movs	r0, r3
 8000306:	f001 fe49 	bl	8001f9c <HAL_RCC_ClockConfig>
 800030a:	1e03      	subs	r3, r0, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800030e:	f000 f86b 	bl	80003e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000312:	003b      	movs	r3, r7
 8000314:	2220      	movs	r2, #32
 8000316:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000318:	003b      	movs	r3, r7
 800031a:	2200      	movs	r2, #0
 800031c:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800031e:	003b      	movs	r3, r7
 8000320:	0018      	movs	r0, r3
 8000322:	f001 ff95 	bl	8002250 <HAL_RCCEx_PeriphCLKConfig>
 8000326:	1e03      	subs	r3, r0, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800032a:	f000 f85d 	bl	80003e8 <Error_Handler>
  }
}
 800032e:	46c0      	nop			; (mov r8, r8)
 8000330:	46bd      	mov	sp, r7
 8000332:	b019      	add	sp, #100	; 0x64
 8000334:	bd90      	pop	{r4, r7, pc}
	...

08000338 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800033c:	4b1b      	ldr	r3, [pc, #108]	; (80003ac <MX_I2C1_Init+0x74>)
 800033e:	4a1c      	ldr	r2, [pc, #112]	; (80003b0 <MX_I2C1_Init+0x78>)
 8000340:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8000342:	4b1a      	ldr	r3, [pc, #104]	; (80003ac <MX_I2C1_Init+0x74>)
 8000344:	4a1b      	ldr	r2, [pc, #108]	; (80003b4 <MX_I2C1_Init+0x7c>)
 8000346:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000348:	4b18      	ldr	r3, [pc, #96]	; (80003ac <MX_I2C1_Init+0x74>)
 800034a:	2200      	movs	r2, #0
 800034c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800034e:	4b17      	ldr	r3, [pc, #92]	; (80003ac <MX_I2C1_Init+0x74>)
 8000350:	2201      	movs	r2, #1
 8000352:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000354:	4b15      	ldr	r3, [pc, #84]	; (80003ac <MX_I2C1_Init+0x74>)
 8000356:	2200      	movs	r2, #0
 8000358:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800035a:	4b14      	ldr	r3, [pc, #80]	; (80003ac <MX_I2C1_Init+0x74>)
 800035c:	2200      	movs	r2, #0
 800035e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000360:	4b12      	ldr	r3, [pc, #72]	; (80003ac <MX_I2C1_Init+0x74>)
 8000362:	2200      	movs	r2, #0
 8000364:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000366:	4b11      	ldr	r3, [pc, #68]	; (80003ac <MX_I2C1_Init+0x74>)
 8000368:	2200      	movs	r2, #0
 800036a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800036c:	4b0f      	ldr	r3, [pc, #60]	; (80003ac <MX_I2C1_Init+0x74>)
 800036e:	2200      	movs	r2, #0
 8000370:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000372:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <MX_I2C1_Init+0x74>)
 8000374:	0018      	movs	r0, r3
 8000376:	f000 fdaf 	bl	8000ed8 <HAL_I2C_Init>
 800037a:	1e03      	subs	r3, r0, #0
 800037c:	d001      	beq.n	8000382 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800037e:	f000 f833 	bl	80003e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000382:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <MX_I2C1_Init+0x74>)
 8000384:	2100      	movs	r1, #0
 8000386:	0018      	movs	r0, r3
 8000388:	f001 f9ea 	bl	8001760 <HAL_I2CEx_ConfigAnalogFilter>
 800038c:	1e03      	subs	r3, r0, #0
 800038e:	d001      	beq.n	8000394 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000390:	f000 f82a 	bl	80003e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000394:	4b05      	ldr	r3, [pc, #20]	; (80003ac <MX_I2C1_Init+0x74>)
 8000396:	2100      	movs	r1, #0
 8000398:	0018      	movs	r0, r3
 800039a:	f001 fa2d 	bl	80017f8 <HAL_I2CEx_ConfigDigitalFilter>
 800039e:	1e03      	subs	r3, r0, #0
 80003a0:	d001      	beq.n	80003a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003a2:	f000 f821 	bl	80003e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003a6:	46c0      	nop			; (mov r8, r8)
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	20000030 	.word	0x20000030
 80003b0:	40005400 	.word	0x40005400
 80003b4:	0000020b 	.word	0x0000020b

080003b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003be:	4b09      	ldr	r3, [pc, #36]	; (80003e4 <MX_GPIO_Init+0x2c>)
 80003c0:	695a      	ldr	r2, [r3, #20]
 80003c2:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <MX_GPIO_Init+0x2c>)
 80003c4:	2180      	movs	r1, #128	; 0x80
 80003c6:	02c9      	lsls	r1, r1, #11
 80003c8:	430a      	orrs	r2, r1
 80003ca:	615a      	str	r2, [r3, #20]
 80003cc:	4b05      	ldr	r3, [pc, #20]	; (80003e4 <MX_GPIO_Init+0x2c>)
 80003ce:	695a      	ldr	r2, [r3, #20]
 80003d0:	2380      	movs	r3, #128	; 0x80
 80003d2:	02db      	lsls	r3, r3, #11
 80003d4:	4013      	ands	r3, r2
 80003d6:	607b      	str	r3, [r7, #4]
 80003d8:	687b      	ldr	r3, [r7, #4]

}
 80003da:	46c0      	nop			; (mov r8, r8)
 80003dc:	46bd      	mov	sp, r7
 80003de:	b002      	add	sp, #8
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	46c0      	nop			; (mov r8, r8)
 80003e4:	40021000 	.word	0x40021000

080003e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ec:	b672      	cpsid	i
}
 80003ee:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f0:	e7fe      	b.n	80003f0 <Error_Handler+0x8>
	...

080003f4 <SSD1306_Init>:
} SSD1306_t;

static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	HAL_I2C_IsDeviceReady(&hi2c1, OLED_I2C_ADDR, 1,200);
 80003f8:	482e      	ldr	r0, [pc, #184]	; (80004b4 <SSD1306_Init+0xc0>)
 80003fa:	23c8      	movs	r3, #200	; 0xc8
 80003fc:	2201      	movs	r2, #1
 80003fe:	2178      	movs	r1, #120	; 0x78
 8000400:	f000 ff08 	bl	8001214 <HAL_I2C_IsDeviceReady>

	SSD1306_WRITECOMMAND(0x20);
 8000404:	2020      	movs	r0, #32
 8000406:	f000 f9a7 	bl	8000758 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x10);
 800040a:	2010      	movs	r0, #16
 800040c:	f000 f9a4 	bl	8000758 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xB0);
 8000410:	20b0      	movs	r0, #176	; 0xb0
 8000412:	f000 f9a1 	bl	8000758 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xC8);
 8000416:	20c8      	movs	r0, #200	; 0xc8
 8000418:	f000 f99e 	bl	8000758 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x00);
 800041c:	2000      	movs	r0, #0
 800041e:	f000 f99b 	bl	8000758 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x10);
 8000422:	2010      	movs	r0, #16
 8000424:	f000 f998 	bl	8000758 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x40);
 8000428:	2040      	movs	r0, #64	; 0x40
 800042a:	f000 f995 	bl	8000758 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x81);
 800042e:	2081      	movs	r0, #129	; 0x81
 8000430:	f000 f992 	bl	8000758 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xFF);
 8000434:	20ff      	movs	r0, #255	; 0xff
 8000436:	f000 f98f 	bl	8000758 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xA1);
 800043a:	20a1      	movs	r0, #161	; 0xa1
 800043c:	f000 f98c 	bl	8000758 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xA6);
 8000440:	20a6      	movs	r0, #166	; 0xa6
 8000442:	f000 f989 	bl	8000758 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xA8);
 8000446:	20a8      	movs	r0, #168	; 0xa8
 8000448:	f000 f986 	bl	8000758 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x3F); //
 800044c:	203f      	movs	r0, #63	; 0x3f
 800044e:	f000 f983 	bl	8000758 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xA4);
 8000452:	20a4      	movs	r0, #164	; 0xa4
 8000454:	f000 f980 	bl	8000758 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xD3);
 8000458:	20d3      	movs	r0, #211	; 0xd3
 800045a:	f000 f97d 	bl	8000758 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x00);
 800045e:	2000      	movs	r0, #0
 8000460:	f000 f97a 	bl	8000758 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xD5);
 8000464:	20d5      	movs	r0, #213	; 0xd5
 8000466:	f000 f977 	bl	8000758 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xD9);
 800046a:	20d9      	movs	r0, #217	; 0xd9
 800046c:	f000 f974 	bl	8000758 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x22);
 8000470:	2022      	movs	r0, #34	; 0x22
 8000472:	f000 f971 	bl	8000758 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xDA);
 8000476:	20da      	movs	r0, #218	; 0xda
 8000478:	f000 f96e 	bl	8000758 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xDB);
 800047c:	20db      	movs	r0, #219	; 0xdb
 800047e:	f000 f96b 	bl	8000758 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000482:	208d      	movs	r0, #141	; 0x8d
 8000484:	f000 f968 	bl	8000758 <SSD1306_WRITECOMMAND>
	SSD1306_WRITECOMMAND(0xAF);
 8000488:	20af      	movs	r0, #175	; 0xaf
 800048a:	f000 f965 	bl	8000758 <SSD1306_WRITECOMMAND>

	SSD1306_WRITECOMMAND(0x21);
 800048e:	2021      	movs	r0, #33	; 0x21
 8000490:	f000 f962 	bl	8000758 <SSD1306_WRITECOMMAND>


	 //Clear screen
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000494:	2000      	movs	r0, #0
 8000496:	f000 f83f 	bl	8000518 <SSD1306_Fill>

	// Update screen
	SSD1306_UpdateScreen();
 800049a:	f000 f80f 	bl	80004bc <SSD1306_UpdateScreen>

	// Set default values
	SSD1306.CurrentX = 0;
 800049e:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <SSD1306_Init+0xc4>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80004a4:	4b04      	ldr	r3, [pc, #16]	; (80004b8 <SSD1306_Init+0xc4>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	805a      	strh	r2, [r3, #2]

}
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	0018      	movs	r0, r3
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	20000030 	.word	0x20000030
 80004b8:	2000047c 	.word	0x2000047c

080004bc <SSD1306_UpdateScreen>:


void SSD1306_UpdateScreen(void) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80004c2:	1dfb      	adds	r3, r7, #7
 80004c4:	2200      	movs	r2, #0
 80004c6:	701a      	strb	r2, [r3, #0]
 80004c8:	e01a      	b.n	8000500 <SSD1306_UpdateScreen+0x44>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80004ca:	1dfb      	adds	r3, r7, #7
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	33b0      	adds	r3, #176	; 0xb0
 80004d0:	0018      	movs	r0, r3
 80004d2:	f000 f941 	bl	8000758 <SSD1306_WRITECOMMAND>
		SSD1306_WRITECOMMAND(0x00);
 80004d6:	2000      	movs	r0, #0
 80004d8:	f000 f93e 	bl	8000758 <SSD1306_WRITECOMMAND>
		SSD1306_WRITECOMMAND(0x10);
 80004dc:	2010      	movs	r0, #16
 80004de:	f000 f93b 	bl	8000758 <SSD1306_WRITECOMMAND>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80004e2:	1dfb      	adds	r3, r7, #7
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	01da      	lsls	r2, r3, #7
 80004e8:	4b0a      	ldr	r3, [pc, #40]	; (8000514 <SSD1306_UpdateScreen+0x58>)
 80004ea:	18d3      	adds	r3, r2, r3
 80004ec:	2280      	movs	r2, #128	; 0x80
 80004ee:	0019      	movs	r1, r3
 80004f0:	2040      	movs	r0, #64	; 0x40
 80004f2:	f000 f94d 	bl	8000790 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80004f6:	1dfb      	adds	r3, r7, #7
 80004f8:	781a      	ldrb	r2, [r3, #0]
 80004fa:	1dfb      	adds	r3, r7, #7
 80004fc:	3201      	adds	r2, #1
 80004fe:	701a      	strb	r2, [r3, #0]
 8000500:	1dfb      	adds	r3, r7, #7
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b07      	cmp	r3, #7
 8000506:	d9e0      	bls.n	80004ca <SSD1306_UpdateScreen+0xe>
	}
}
 8000508:	46c0      	nop			; (mov r8, r8)
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	46bd      	mov	sp, r7
 800050e:	b002      	add	sp, #8
 8000510:	bd80      	pop	{r7, pc}
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	2000007c 	.word	0x2000007c

08000518 <SSD1306_Fill>:


void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	0002      	movs	r2, r0
 8000520:	1dfb      	adds	r3, r7, #7
 8000522:	701a      	strb	r2, [r3, #0]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000524:	1dfb      	adds	r3, r7, #7
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d101      	bne.n	8000530 <SSD1306_Fill+0x18>
 800052c:	2300      	movs	r3, #0
 800052e:	e000      	b.n	8000532 <SSD1306_Fill+0x1a>
 8000530:	23ff      	movs	r3, #255	; 0xff
 8000532:	2280      	movs	r2, #128	; 0x80
 8000534:	00d2      	lsls	r2, r2, #3
 8000536:	4804      	ldr	r0, [pc, #16]	; (8000548 <SSD1306_Fill+0x30>)
 8000538:	0019      	movs	r1, r3
 800053a:	f001 ffab 	bl	8002494 <memset>
}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	46bd      	mov	sp, r7
 8000542:	b002      	add	sp, #8
 8000544:	bd80      	pop	{r7, pc}
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	2000007c 	.word	0x2000007c

0800054c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	0002      	movs	r2, r0
 8000554:	1dbb      	adds	r3, r7, #6
 8000556:	801a      	strh	r2, [r3, #0]
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	1c0a      	adds	r2, r1, #0
 800055c:	801a      	strh	r2, [r3, #0]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800055e:	4b06      	ldr	r3, [pc, #24]	; (8000578 <SSD1306_GotoXY+0x2c>)
 8000560:	1dba      	adds	r2, r7, #6
 8000562:	8812      	ldrh	r2, [r2, #0]
 8000564:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8000566:	4b04      	ldr	r3, [pc, #16]	; (8000578 <SSD1306_GotoXY+0x2c>)
 8000568:	1d3a      	adds	r2, r7, #4
 800056a:	8812      	ldrh	r2, [r2, #0]
 800056c:	805a      	strh	r2, [r3, #2]
}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	46bd      	mov	sp, r7
 8000572:	b002      	add	sp, #8
 8000574:	bd80      	pop	{r7, pc}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	2000047c 	.word	0x2000047c

0800057c <SSD1306_DrawPixel>:



void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800057c:	b590      	push	{r4, r7, lr}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	0004      	movs	r4, r0
 8000584:	0008      	movs	r0, r1
 8000586:	0011      	movs	r1, r2
 8000588:	1dbb      	adds	r3, r7, #6
 800058a:	1c22      	adds	r2, r4, #0
 800058c:	801a      	strh	r2, [r3, #0]
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	1c02      	adds	r2, r0, #0
 8000592:	801a      	strh	r2, [r3, #0]
 8000594:	1cfb      	adds	r3, r7, #3
 8000596:	1c0a      	adds	r2, r1, #0
 8000598:	701a      	strb	r2, [r3, #0]



	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800059a:	1cfb      	adds	r3, r7, #3
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d11e      	bne.n	80005e0 <SSD1306_DrawPixel+0x64>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);      // pixel on
 80005a2:	1dbb      	adds	r3, r7, #6
 80005a4:	881a      	ldrh	r2, [r3, #0]
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	08db      	lsrs	r3, r3, #3
 80005ac:	b298      	uxth	r0, r3
 80005ae:	0003      	movs	r3, r0
 80005b0:	01db      	lsls	r3, r3, #7
 80005b2:	18d3      	adds	r3, r2, r3
 80005b4:	4a1c      	ldr	r2, [pc, #112]	; (8000628 <SSD1306_DrawPixel+0xac>)
 80005b6:	5cd3      	ldrb	r3, [r2, r3]
 80005b8:	b25a      	sxtb	r2, r3
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	881b      	ldrh	r3, [r3, #0]
 80005be:	2107      	movs	r1, #7
 80005c0:	400b      	ands	r3, r1
 80005c2:	2101      	movs	r1, #1
 80005c4:	4099      	lsls	r1, r3
 80005c6:	000b      	movs	r3, r1
 80005c8:	b25b      	sxtb	r3, r3
 80005ca:	4313      	orrs	r3, r2
 80005cc:	b259      	sxtb	r1, r3
 80005ce:	1dbb      	adds	r3, r7, #6
 80005d0:	881a      	ldrh	r2, [r3, #0]
 80005d2:	0003      	movs	r3, r0
 80005d4:	01db      	lsls	r3, r3, #7
 80005d6:	18d3      	adds	r3, r2, r3
 80005d8:	b2c9      	uxtb	r1, r1
 80005da:	4a13      	ldr	r2, [pc, #76]	; (8000628 <SSD1306_DrawPixel+0xac>)
 80005dc:	54d1      	strb	r1, [r2, r3]
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));	  // pixel off
	}
}
 80005de:	e01f      	b.n	8000620 <SSD1306_DrawPixel+0xa4>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));	  // pixel off
 80005e0:	1dbb      	adds	r3, r7, #6
 80005e2:	881a      	ldrh	r2, [r3, #0]
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	08db      	lsrs	r3, r3, #3
 80005ea:	b298      	uxth	r0, r3
 80005ec:	0003      	movs	r3, r0
 80005ee:	01db      	lsls	r3, r3, #7
 80005f0:	18d3      	adds	r3, r2, r3
 80005f2:	4a0d      	ldr	r2, [pc, #52]	; (8000628 <SSD1306_DrawPixel+0xac>)
 80005f4:	5cd3      	ldrb	r3, [r2, r3]
 80005f6:	b25b      	sxtb	r3, r3
 80005f8:	1d3a      	adds	r2, r7, #4
 80005fa:	8812      	ldrh	r2, [r2, #0]
 80005fc:	2107      	movs	r1, #7
 80005fe:	400a      	ands	r2, r1
 8000600:	2101      	movs	r1, #1
 8000602:	4091      	lsls	r1, r2
 8000604:	000a      	movs	r2, r1
 8000606:	b252      	sxtb	r2, r2
 8000608:	43d2      	mvns	r2, r2
 800060a:	b252      	sxtb	r2, r2
 800060c:	4013      	ands	r3, r2
 800060e:	b259      	sxtb	r1, r3
 8000610:	1dbb      	adds	r3, r7, #6
 8000612:	881a      	ldrh	r2, [r3, #0]
 8000614:	0003      	movs	r3, r0
 8000616:	01db      	lsls	r3, r3, #7
 8000618:	18d3      	adds	r3, r2, r3
 800061a:	b2c9      	uxtb	r1, r1
 800061c:	4a02      	ldr	r2, [pc, #8]	; (8000628 <SSD1306_DrawPixel+0xac>)
 800061e:	54d1      	strb	r1, [r2, r3]
}
 8000620:	46c0      	nop			; (mov r8, r8)
 8000622:	46bd      	mov	sp, r7
 8000624:	b003      	add	sp, #12
 8000626:	bd90      	pop	{r4, r7, pc}
 8000628:	2000007c 	.word	0x2000007c

0800062c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
 8000632:	6039      	str	r1, [r7, #0]
 8000634:	0011      	movs	r1, r2
 8000636:	1dfb      	adds	r3, r7, #7
 8000638:	1c02      	adds	r2, r0, #0
 800063a:	701a      	strb	r2, [r3, #0]
 800063c:	1dbb      	adds	r3, r7, #6
 800063e:	1c0a      	adds	r2, r1, #0
 8000640:	701a      	strb	r2, [r3, #0]
	uint32_t i, b, j;


	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]
 8000646:	e04a      	b.n	80006de <SSD1306_Putc+0xb2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	685a      	ldr	r2, [r3, #4]
 800064c:	1dfb      	adds	r3, r7, #7
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	3b20      	subs	r3, #32
 8000652:	6839      	ldr	r1, [r7, #0]
 8000654:	7849      	ldrb	r1, [r1, #1]
 8000656:	434b      	muls	r3, r1
 8000658:	0019      	movs	r1, r3
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	18cb      	adds	r3, r1, r3
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	18d3      	adds	r3, r2, r3
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
 800066a:	e02f      	b.n	80006cc <SSD1306_Putc+0xa0>
			if ((b << j) & 0x8000) {
 800066c:	68fa      	ldr	r2, [r7, #12]
 800066e:	693b      	ldr	r3, [r7, #16]
 8000670:	409a      	lsls	r2, r3
 8000672:	2380      	movs	r3, #128	; 0x80
 8000674:	021b      	lsls	r3, r3, #8
 8000676:	4013      	ands	r3, r2
 8000678:	d011      	beq.n	800069e <SSD1306_Putc+0x72>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800067a:	4b23      	ldr	r3, [pc, #140]	; (8000708 <SSD1306_Putc+0xdc>)
 800067c:	881a      	ldrh	r2, [r3, #0]
 800067e:	693b      	ldr	r3, [r7, #16]
 8000680:	b29b      	uxth	r3, r3
 8000682:	18d3      	adds	r3, r2, r3
 8000684:	b298      	uxth	r0, r3
 8000686:	4b20      	ldr	r3, [pc, #128]	; (8000708 <SSD1306_Putc+0xdc>)
 8000688:	885a      	ldrh	r2, [r3, #2]
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	b29b      	uxth	r3, r3
 800068e:	18d3      	adds	r3, r2, r3
 8000690:	b299      	uxth	r1, r3
 8000692:	1dbb      	adds	r3, r7, #6
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	001a      	movs	r2, r3
 8000698:	f7ff ff70 	bl	800057c <SSD1306_DrawPixel>
 800069c:	e013      	b.n	80006c6 <SSD1306_Putc+0x9a>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800069e:	4b1a      	ldr	r3, [pc, #104]	; (8000708 <SSD1306_Putc+0xdc>)
 80006a0:	881a      	ldrh	r2, [r3, #0]
 80006a2:	693b      	ldr	r3, [r7, #16]
 80006a4:	b29b      	uxth	r3, r3
 80006a6:	18d3      	adds	r3, r2, r3
 80006a8:	b298      	uxth	r0, r3
 80006aa:	4b17      	ldr	r3, [pc, #92]	; (8000708 <SSD1306_Putc+0xdc>)
 80006ac:	885a      	ldrh	r2, [r3, #2]
 80006ae:	697b      	ldr	r3, [r7, #20]
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	18d3      	adds	r3, r2, r3
 80006b4:	b299      	uxth	r1, r3
 80006b6:	1dbb      	adds	r3, r7, #6
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	425a      	negs	r2, r3
 80006bc:	4153      	adcs	r3, r2
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	001a      	movs	r2, r3
 80006c2:	f7ff ff5b 	bl	800057c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80006c6:	693b      	ldr	r3, [r7, #16]
 80006c8:	3301      	adds	r3, #1
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	001a      	movs	r2, r3
 80006d2:	693b      	ldr	r3, [r7, #16]
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d3c9      	bcc.n	800066c <SSD1306_Putc+0x40>
	for (i = 0; i < Font->FontHeight; i++) {
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	3301      	adds	r3, #1
 80006dc:	617b      	str	r3, [r7, #20]
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	785b      	ldrb	r3, [r3, #1]
 80006e2:	001a      	movs	r2, r3
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d3ae      	bcc.n	8000648 <SSD1306_Putc+0x1c>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80006ea:	4b07      	ldr	r3, [pc, #28]	; (8000708 <SSD1306_Putc+0xdc>)
 80006ec:	881a      	ldrh	r2, [r3, #0]
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	b29b      	uxth	r3, r3
 80006f4:	18d3      	adds	r3, r2, r3
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	4b03      	ldr	r3, [pc, #12]	; (8000708 <SSD1306_Putc+0xdc>)
 80006fa:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80006fc:	1dfb      	adds	r3, r7, #7
 80006fe:	781b      	ldrb	r3, [r3, #0]
}
 8000700:	0018      	movs	r0, r3
 8000702:	46bd      	mov	sp, r7
 8000704:	b006      	add	sp, #24
 8000706:	bd80      	pop	{r7, pc}
 8000708:	2000047c 	.word	0x2000047c

0800070c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	1dfb      	adds	r3, r7, #7
 8000718:	701a      	strb	r2, [r3, #0]
	/* Write characters */
	while (*str) {
 800071a:	e013      	b.n	8000744 <SSD1306_Puts+0x38>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	7818      	ldrb	r0, [r3, #0]
 8000720:	1dfb      	adds	r3, r7, #7
 8000722:	781a      	ldrb	r2, [r3, #0]
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	0019      	movs	r1, r3
 8000728:	f7ff ff80 	bl	800062c <SSD1306_Putc>
 800072c:	0003      	movs	r3, r0
 800072e:	001a      	movs	r2, r3
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	429a      	cmp	r2, r3
 8000736:	d002      	beq.n	800073e <SSD1306_Puts+0x32>
			/* Return error */
			return *str;
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	e008      	b.n	8000750 <SSD1306_Puts+0x44>
		}

		/* Increase string pointer */
		str++;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	3301      	adds	r3, #1
 8000742:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d1e7      	bne.n	800071c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	781b      	ldrb	r3, [r3, #0]
}
 8000750:	0018      	movs	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	b004      	add	sp, #16
 8000756:	bd80      	pop	{r7, pc}

08000758 <SSD1306_WRITECOMMAND>:
}




void SSD1306_WRITECOMMAND(uint8_t command) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af02      	add	r7, sp, #8
 800075e:	0002      	movs	r2, r0
 8000760:	1dfb      	adds	r3, r7, #7
 8000762:	701a      	strb	r2, [r3, #0]
	uint8_t dt[2];
	dt[0] = 0x00;
 8000764:	210c      	movs	r1, #12
 8000766:	187b      	adds	r3, r7, r1
 8000768:	2200      	movs	r2, #0
 800076a:	701a      	strb	r2, [r3, #0]
	dt[1] = command;
 800076c:	187b      	adds	r3, r7, r1
 800076e:	1dfa      	adds	r2, r7, #7
 8000770:	7812      	ldrb	r2, [r2, #0]
 8000772:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, OLED_I2C_ADDR, dt, 2, 10);
 8000774:	187a      	adds	r2, r7, r1
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <SSD1306_WRITECOMMAND+0x34>)
 8000778:	230a      	movs	r3, #10
 800077a:	9300      	str	r3, [sp, #0]
 800077c:	2302      	movs	r3, #2
 800077e:	2178      	movs	r1, #120	; 0x78
 8000780:	f000 fc40 	bl	8001004 <HAL_I2C_Master_Transmit>
}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	b004      	add	sp, #16
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000030 	.word	0x20000030

08000790 <ssd1306_I2C_WriteMulti>:




void ssd1306_I2C_WriteMulti(uint8_t reg, uint8_t* data, uint16_t count) {
 8000790:	b590      	push	{r4, r7, lr}
 8000792:	b0c7      	sub	sp, #284	; 0x11c
 8000794:	af02      	add	r7, sp, #8
 8000796:	6039      	str	r1, [r7, #0]
 8000798:	0011      	movs	r1, r2
 800079a:	4b27      	ldr	r3, [pc, #156]	; (8000838 <ssd1306_I2C_WriteMulti+0xa8>)
 800079c:	2488      	movs	r4, #136	; 0x88
 800079e:	0064      	lsls	r4, r4, #1
 80007a0:	191b      	adds	r3, r3, r4
 80007a2:	19db      	adds	r3, r3, r7
 80007a4:	1c02      	adds	r2, r0, #0
 80007a6:	701a      	strb	r2, [r3, #0]
 80007a8:	4b24      	ldr	r3, [pc, #144]	; (800083c <ssd1306_I2C_WriteMulti+0xac>)
 80007aa:	0020      	movs	r0, r4
 80007ac:	181b      	adds	r3, r3, r0
 80007ae:	19db      	adds	r3, r3, r7
 80007b0:	1c0a      	adds	r2, r1, #0
 80007b2:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80007b4:	4b22      	ldr	r3, [pc, #136]	; (8000840 <ssd1306_I2C_WriteMulti+0xb0>)
 80007b6:	181b      	adds	r3, r3, r0
 80007b8:	19db      	adds	r3, r3, r7
 80007ba:	4a1f      	ldr	r2, [pc, #124]	; (8000838 <ssd1306_I2C_WriteMulti+0xa8>)
 80007bc:	1812      	adds	r2, r2, r0
 80007be:	19d2      	adds	r2, r2, r7
 80007c0:	7812      	ldrb	r2, [r2, #0]
 80007c2:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80007c4:	2310      	movs	r3, #16
 80007c6:	33ff      	adds	r3, #255	; 0xff
 80007c8:	18fb      	adds	r3, r7, r3
 80007ca:	2200      	movs	r2, #0
 80007cc:	701a      	strb	r2, [r3, #0]
 80007ce:	e014      	b.n	80007fa <ssd1306_I2C_WriteMulti+0x6a>
dt[i+1] = data[i];
 80007d0:	2010      	movs	r0, #16
 80007d2:	30ff      	adds	r0, #255	; 0xff
 80007d4:	183b      	adds	r3, r7, r0
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	683a      	ldr	r2, [r7, #0]
 80007da:	18d2      	adds	r2, r2, r3
 80007dc:	183b      	adds	r3, r7, r0
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	3301      	adds	r3, #1
 80007e2:	7811      	ldrb	r1, [r2, #0]
 80007e4:	4a16      	ldr	r2, [pc, #88]	; (8000840 <ssd1306_I2C_WriteMulti+0xb0>)
 80007e6:	2488      	movs	r4, #136	; 0x88
 80007e8:	0064      	lsls	r4, r4, #1
 80007ea:	1912      	adds	r2, r2, r4
 80007ec:	19d2      	adds	r2, r2, r7
 80007ee:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80007f0:	183b      	adds	r3, r7, r0
 80007f2:	781a      	ldrb	r2, [r3, #0]
 80007f4:	183b      	adds	r3, r7, r0
 80007f6:	3201      	adds	r2, #1
 80007f8:	701a      	strb	r2, [r3, #0]
 80007fa:	2310      	movs	r3, #16
 80007fc:	33ff      	adds	r3, #255	; 0xff
 80007fe:	18fb      	adds	r3, r7, r3
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	b29b      	uxth	r3, r3
 8000804:	4a0d      	ldr	r2, [pc, #52]	; (800083c <ssd1306_I2C_WriteMulti+0xac>)
 8000806:	2188      	movs	r1, #136	; 0x88
 8000808:	0049      	lsls	r1, r1, #1
 800080a:	1852      	adds	r2, r2, r1
 800080c:	19d2      	adds	r2, r2, r7
 800080e:	8812      	ldrh	r2, [r2, #0]
 8000810:	429a      	cmp	r2, r3
 8000812:	d8dd      	bhi.n	80007d0 <ssd1306_I2C_WriteMulti+0x40>
HAL_I2C_Master_Transmit(&hi2c1, OLED_I2C_ADDR, dt, count+1, 10);
 8000814:	4b09      	ldr	r3, [pc, #36]	; (800083c <ssd1306_I2C_WriteMulti+0xac>)
 8000816:	185b      	adds	r3, r3, r1
 8000818:	19db      	adds	r3, r3, r7
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	3301      	adds	r3, #1
 800081e:	b29b      	uxth	r3, r3
 8000820:	220c      	movs	r2, #12
 8000822:	18ba      	adds	r2, r7, r2
 8000824:	4807      	ldr	r0, [pc, #28]	; (8000844 <ssd1306_I2C_WriteMulti+0xb4>)
 8000826:	210a      	movs	r1, #10
 8000828:	9100      	str	r1, [sp, #0]
 800082a:	2178      	movs	r1, #120	; 0x78
 800082c:	f000 fbea 	bl	8001004 <HAL_I2C_Master_Transmit>
}
 8000830:	46c0      	nop			; (mov r8, r8)
 8000832:	46bd      	mov	sp, r7
 8000834:	b045      	add	sp, #276	; 0x114
 8000836:	bd90      	pop	{r4, r7, pc}
 8000838:	fffffef7 	.word	0xfffffef7
 800083c:	fffffef4 	.word	0xfffffef4
 8000840:	fffffefc 	.word	0xfffffefc
 8000844:	20000030 	.word	0x20000030

08000848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <HAL_MspInit+0x44>)
 8000850:	699a      	ldr	r2, [r3, #24]
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <HAL_MspInit+0x44>)
 8000854:	2101      	movs	r1, #1
 8000856:	430a      	orrs	r2, r1
 8000858:	619a      	str	r2, [r3, #24]
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <HAL_MspInit+0x44>)
 800085c:	699b      	ldr	r3, [r3, #24]
 800085e:	2201      	movs	r2, #1
 8000860:	4013      	ands	r3, r2
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <HAL_MspInit+0x44>)
 8000868:	69da      	ldr	r2, [r3, #28]
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <HAL_MspInit+0x44>)
 800086c:	2180      	movs	r1, #128	; 0x80
 800086e:	0549      	lsls	r1, r1, #21
 8000870:	430a      	orrs	r2, r1
 8000872:	61da      	str	r2, [r3, #28]
 8000874:	4b05      	ldr	r3, [pc, #20]	; (800088c <HAL_MspInit+0x44>)
 8000876:	69da      	ldr	r2, [r3, #28]
 8000878:	2380      	movs	r3, #128	; 0x80
 800087a:	055b      	lsls	r3, r3, #21
 800087c:	4013      	ands	r3, r2
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	b002      	add	sp, #8
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	40021000 	.word	0x40021000

08000890 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000890:	b590      	push	{r4, r7, lr}
 8000892:	b08b      	sub	sp, #44	; 0x2c
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	2414      	movs	r4, #20
 800089a:	193b      	adds	r3, r7, r4
 800089c:	0018      	movs	r0, r3
 800089e:	2314      	movs	r3, #20
 80008a0:	001a      	movs	r2, r3
 80008a2:	2100      	movs	r1, #0
 80008a4:	f001 fdf6 	bl	8002494 <memset>
  if(hi2c->Instance==I2C1)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a1c      	ldr	r2, [pc, #112]	; (8000920 <HAL_I2C_MspInit+0x90>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d131      	bne.n	8000916 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <HAL_I2C_MspInit+0x94>)
 80008b4:	695a      	ldr	r2, [r3, #20]
 80008b6:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <HAL_I2C_MspInit+0x94>)
 80008b8:	2180      	movs	r1, #128	; 0x80
 80008ba:	02c9      	lsls	r1, r1, #11
 80008bc:	430a      	orrs	r2, r1
 80008be:	615a      	str	r2, [r3, #20]
 80008c0:	4b18      	ldr	r3, [pc, #96]	; (8000924 <HAL_I2C_MspInit+0x94>)
 80008c2:	695a      	ldr	r2, [r3, #20]
 80008c4:	2380      	movs	r3, #128	; 0x80
 80008c6:	02db      	lsls	r3, r3, #11
 80008c8:	4013      	ands	r3, r2
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008ce:	0021      	movs	r1, r4
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	22c0      	movs	r2, #192	; 0xc0
 80008d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2212      	movs	r2, #18
 80008da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	2203      	movs	r2, #3
 80008e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	2201      	movs	r2, #1
 80008ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ee:	187b      	adds	r3, r7, r1
 80008f0:	4a0d      	ldr	r2, [pc, #52]	; (8000928 <HAL_I2C_MspInit+0x98>)
 80008f2:	0019      	movs	r1, r3
 80008f4:	0010      	movs	r0, r2
 80008f6:	f000 f977 	bl	8000be8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008fa:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <HAL_I2C_MspInit+0x94>)
 80008fc:	69da      	ldr	r2, [r3, #28]
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <HAL_I2C_MspInit+0x94>)
 8000900:	2180      	movs	r1, #128	; 0x80
 8000902:	0389      	lsls	r1, r1, #14
 8000904:	430a      	orrs	r2, r1
 8000906:	61da      	str	r2, [r3, #28]
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <HAL_I2C_MspInit+0x94>)
 800090a:	69da      	ldr	r2, [r3, #28]
 800090c:	2380      	movs	r3, #128	; 0x80
 800090e:	039b      	lsls	r3, r3, #14
 8000910:	4013      	ands	r3, r2
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	46bd      	mov	sp, r7
 800091a:	b00b      	add	sp, #44	; 0x2c
 800091c:	bd90      	pop	{r4, r7, pc}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	40005400 	.word	0x40005400
 8000924:	40021000 	.word	0x40021000
 8000928:	48000400 	.word	0x48000400

0800092c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <NMI_Handler+0x4>

08000932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000936:	e7fe      	b.n	8000936 <HardFault_Handler+0x4>

08000938 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000950:	f000 f87a 	bl	8000a48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000954:	46c0      	nop			; (mov r8, r8)
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000964:	480d      	ldr	r0, [pc, #52]	; (800099c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000966:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000968:	480d      	ldr	r0, [pc, #52]	; (80009a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800096a:	490e      	ldr	r1, [pc, #56]	; (80009a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800096c:	4a0e      	ldr	r2, [pc, #56]	; (80009a8 <LoopForever+0xe>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000970:	e002      	b.n	8000978 <LoopCopyDataInit>

08000972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000976:	3304      	adds	r3, #4

08000978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800097a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800097c:	d3f9      	bcc.n	8000972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097e:	4a0b      	ldr	r2, [pc, #44]	; (80009ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000980:	4c0b      	ldr	r4, [pc, #44]	; (80009b0 <LoopForever+0x16>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000984:	e001      	b.n	800098a <LoopFillZerobss>

08000986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000988:	3204      	adds	r2, #4

0800098a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800098a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800098c:	d3fb      	bcc.n	8000986 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800098e:	f7ff ffe4 	bl	800095a <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000992:	f001 fd5b 	bl	800244c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000996:	f7ff fc43 	bl	8000220 <main>

0800099a <LoopForever>:

LoopForever:
    b LoopForever
 800099a:	e7fe      	b.n	800099a <LoopForever>
  ldr   r0, =_estack
 800099c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80009a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80009a8:	08003260 	.word	0x08003260
  ldr r2, =_sbss
 80009ac:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80009b0:	20000484 	.word	0x20000484

080009b4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009b4:	e7fe      	b.n	80009b4 <ADC1_COMP_IRQHandler>
	...

080009b8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009bc:	4b07      	ldr	r3, [pc, #28]	; (80009dc <HAL_Init+0x24>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_Init+0x24>)
 80009c2:	2110      	movs	r1, #16
 80009c4:	430a      	orrs	r2, r1
 80009c6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80009c8:	2003      	movs	r0, #3
 80009ca:	f000 f809 	bl	80009e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009ce:	f7ff ff3b 	bl	8000848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009d2:	2300      	movs	r3, #0
}
 80009d4:	0018      	movs	r0, r3
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	40022000 	.word	0x40022000

080009e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009e8:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <HAL_InitTick+0x5c>)
 80009ea:	681c      	ldr	r4, [r3, #0]
 80009ec:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <HAL_InitTick+0x60>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	0019      	movs	r1, r3
 80009f2:	23fa      	movs	r3, #250	; 0xfa
 80009f4:	0098      	lsls	r0, r3, #2
 80009f6:	f7ff fb87 	bl	8000108 <__udivsi3>
 80009fa:	0003      	movs	r3, r0
 80009fc:	0019      	movs	r1, r3
 80009fe:	0020      	movs	r0, r4
 8000a00:	f7ff fb82 	bl	8000108 <__udivsi3>
 8000a04:	0003      	movs	r3, r0
 8000a06:	0018      	movs	r0, r3
 8000a08:	f000 f8e1 	bl	8000bce <HAL_SYSTICK_Config>
 8000a0c:	1e03      	subs	r3, r0, #0
 8000a0e:	d001      	beq.n	8000a14 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a10:	2301      	movs	r3, #1
 8000a12:	e00f      	b.n	8000a34 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2b03      	cmp	r3, #3
 8000a18:	d80b      	bhi.n	8000a32 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a1a:	6879      	ldr	r1, [r7, #4]
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	425b      	negs	r3, r3
 8000a20:	2200      	movs	r2, #0
 8000a22:	0018      	movs	r0, r3
 8000a24:	f000 f8be 	bl	8000ba4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_InitTick+0x64>)
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	e000      	b.n	8000a34 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
}
 8000a34:	0018      	movs	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	b003      	add	sp, #12
 8000a3a:	bd90      	pop	{r4, r7, pc}
 8000a3c:	20000008 	.word	0x20000008
 8000a40:	20000010 	.word	0x20000010
 8000a44:	2000000c 	.word	0x2000000c

08000a48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a4c:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <HAL_IncTick+0x1c>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	001a      	movs	r2, r3
 8000a52:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <HAL_IncTick+0x20>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	18d2      	adds	r2, r2, r3
 8000a58:	4b03      	ldr	r3, [pc, #12]	; (8000a68 <HAL_IncTick+0x20>)
 8000a5a:	601a      	str	r2, [r3, #0]
}
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	20000010 	.word	0x20000010
 8000a68:	20000480 	.word	0x20000480

08000a6c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a70:	4b02      	ldr	r3, [pc, #8]	; (8000a7c <HAL_GetTick+0x10>)
 8000a72:	681b      	ldr	r3, [r3, #0]
}
 8000a74:	0018      	movs	r0, r3
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	20000480 	.word	0x20000480

08000a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a80:	b590      	push	{r4, r7, lr}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	0002      	movs	r2, r0
 8000a88:	6039      	str	r1, [r7, #0]
 8000a8a:	1dfb      	adds	r3, r7, #7
 8000a8c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a8e:	1dfb      	adds	r3, r7, #7
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2b7f      	cmp	r3, #127	; 0x7f
 8000a94:	d828      	bhi.n	8000ae8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a96:	4a2f      	ldr	r2, [pc, #188]	; (8000b54 <__NVIC_SetPriority+0xd4>)
 8000a98:	1dfb      	adds	r3, r7, #7
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	b25b      	sxtb	r3, r3
 8000a9e:	089b      	lsrs	r3, r3, #2
 8000aa0:	33c0      	adds	r3, #192	; 0xc0
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	589b      	ldr	r3, [r3, r2]
 8000aa6:	1dfa      	adds	r2, r7, #7
 8000aa8:	7812      	ldrb	r2, [r2, #0]
 8000aaa:	0011      	movs	r1, r2
 8000aac:	2203      	movs	r2, #3
 8000aae:	400a      	ands	r2, r1
 8000ab0:	00d2      	lsls	r2, r2, #3
 8000ab2:	21ff      	movs	r1, #255	; 0xff
 8000ab4:	4091      	lsls	r1, r2
 8000ab6:	000a      	movs	r2, r1
 8000ab8:	43d2      	mvns	r2, r2
 8000aba:	401a      	ands	r2, r3
 8000abc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	019b      	lsls	r3, r3, #6
 8000ac2:	22ff      	movs	r2, #255	; 0xff
 8000ac4:	401a      	ands	r2, r3
 8000ac6:	1dfb      	adds	r3, r7, #7
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	0018      	movs	r0, r3
 8000acc:	2303      	movs	r3, #3
 8000ace:	4003      	ands	r3, r0
 8000ad0:	00db      	lsls	r3, r3, #3
 8000ad2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ad4:	481f      	ldr	r0, [pc, #124]	; (8000b54 <__NVIC_SetPriority+0xd4>)
 8000ad6:	1dfb      	adds	r3, r7, #7
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	b25b      	sxtb	r3, r3
 8000adc:	089b      	lsrs	r3, r3, #2
 8000ade:	430a      	orrs	r2, r1
 8000ae0:	33c0      	adds	r3, #192	; 0xc0
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ae6:	e031      	b.n	8000b4c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ae8:	4a1b      	ldr	r2, [pc, #108]	; (8000b58 <__NVIC_SetPriority+0xd8>)
 8000aea:	1dfb      	adds	r3, r7, #7
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	0019      	movs	r1, r3
 8000af0:	230f      	movs	r3, #15
 8000af2:	400b      	ands	r3, r1
 8000af4:	3b08      	subs	r3, #8
 8000af6:	089b      	lsrs	r3, r3, #2
 8000af8:	3306      	adds	r3, #6
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	18d3      	adds	r3, r2, r3
 8000afe:	3304      	adds	r3, #4
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	1dfa      	adds	r2, r7, #7
 8000b04:	7812      	ldrb	r2, [r2, #0]
 8000b06:	0011      	movs	r1, r2
 8000b08:	2203      	movs	r2, #3
 8000b0a:	400a      	ands	r2, r1
 8000b0c:	00d2      	lsls	r2, r2, #3
 8000b0e:	21ff      	movs	r1, #255	; 0xff
 8000b10:	4091      	lsls	r1, r2
 8000b12:	000a      	movs	r2, r1
 8000b14:	43d2      	mvns	r2, r2
 8000b16:	401a      	ands	r2, r3
 8000b18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	019b      	lsls	r3, r3, #6
 8000b1e:	22ff      	movs	r2, #255	; 0xff
 8000b20:	401a      	ands	r2, r3
 8000b22:	1dfb      	adds	r3, r7, #7
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	0018      	movs	r0, r3
 8000b28:	2303      	movs	r3, #3
 8000b2a:	4003      	ands	r3, r0
 8000b2c:	00db      	lsls	r3, r3, #3
 8000b2e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b30:	4809      	ldr	r0, [pc, #36]	; (8000b58 <__NVIC_SetPriority+0xd8>)
 8000b32:	1dfb      	adds	r3, r7, #7
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	001c      	movs	r4, r3
 8000b38:	230f      	movs	r3, #15
 8000b3a:	4023      	ands	r3, r4
 8000b3c:	3b08      	subs	r3, #8
 8000b3e:	089b      	lsrs	r3, r3, #2
 8000b40:	430a      	orrs	r2, r1
 8000b42:	3306      	adds	r3, #6
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	18c3      	adds	r3, r0, r3
 8000b48:	3304      	adds	r3, #4
 8000b4a:	601a      	str	r2, [r3, #0]
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b003      	add	sp, #12
 8000b52:	bd90      	pop	{r4, r7, pc}
 8000b54:	e000e100 	.word	0xe000e100
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	1e5a      	subs	r2, r3, #1
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	045b      	lsls	r3, r3, #17
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d301      	bcc.n	8000b74 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b70:	2301      	movs	r3, #1
 8000b72:	e010      	b.n	8000b96 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b74:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <SysTick_Config+0x44>)
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	3a01      	subs	r2, #1
 8000b7a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	425b      	negs	r3, r3
 8000b80:	2103      	movs	r1, #3
 8000b82:	0018      	movs	r0, r3
 8000b84:	f7ff ff7c 	bl	8000a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <SysTick_Config+0x44>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b8e:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <SysTick_Config+0x44>)
 8000b90:	2207      	movs	r2, #7
 8000b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	0018      	movs	r0, r3
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	b002      	add	sp, #8
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	e000e010 	.word	0xe000e010

08000ba4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60b9      	str	r1, [r7, #8]
 8000bac:	607a      	str	r2, [r7, #4]
 8000bae:	210f      	movs	r1, #15
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	1c02      	adds	r2, r0, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	b25b      	sxtb	r3, r3
 8000bbe:	0011      	movs	r1, r2
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f7ff ff5d 	bl	8000a80 <__NVIC_SetPriority>
}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	b004      	add	sp, #16
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f7ff ffbf 	bl	8000b5c <SysTick_Config>
 8000bde:	0003      	movs	r3, r0
}
 8000be0:	0018      	movs	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	b002      	add	sp, #8
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bf6:	e155      	b.n	8000ea4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	697a      	ldr	r2, [r7, #20]
 8000c00:	4091      	lsls	r1, r2
 8000c02:	000a      	movs	r2, r1
 8000c04:	4013      	ands	r3, r2
 8000c06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d100      	bne.n	8000c10 <HAL_GPIO_Init+0x28>
 8000c0e:	e146      	b.n	8000e9e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	2203      	movs	r2, #3
 8000c16:	4013      	ands	r3, r2
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d005      	beq.n	8000c28 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	2203      	movs	r2, #3
 8000c22:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c24:	2b02      	cmp	r3, #2
 8000c26:	d130      	bne.n	8000c8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	2203      	movs	r2, #3
 8000c34:	409a      	lsls	r2, r3
 8000c36:	0013      	movs	r3, r2
 8000c38:	43da      	mvns	r2, r3
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	68da      	ldr	r2, [r3, #12]
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	409a      	lsls	r2, r3
 8000c4a:	0013      	movs	r3, r2
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c5e:	2201      	movs	r2, #1
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	409a      	lsls	r2, r3
 8000c64:	0013      	movs	r3, r2
 8000c66:	43da      	mvns	r2, r3
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	091b      	lsrs	r3, r3, #4
 8000c74:	2201      	movs	r2, #1
 8000c76:	401a      	ands	r2, r3
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	409a      	lsls	r2, r3
 8000c7c:	0013      	movs	r3, r2
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	2203      	movs	r2, #3
 8000c90:	4013      	ands	r3, r2
 8000c92:	2b03      	cmp	r3, #3
 8000c94:	d017      	beq.n	8000cc6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	2203      	movs	r2, #3
 8000ca2:	409a      	lsls	r2, r3
 8000ca4:	0013      	movs	r3, r2
 8000ca6:	43da      	mvns	r2, r3
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	4013      	ands	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	689a      	ldr	r2, [r3, #8]
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	0013      	movs	r3, r2
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	2203      	movs	r2, #3
 8000ccc:	4013      	ands	r3, r2
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d123      	bne.n	8000d1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	08da      	lsrs	r2, r3, #3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	3208      	adds	r2, #8
 8000cda:	0092      	lsls	r2, r2, #2
 8000cdc:	58d3      	ldr	r3, [r2, r3]
 8000cde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	2207      	movs	r2, #7
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	220f      	movs	r2, #15
 8000cea:	409a      	lsls	r2, r3
 8000cec:	0013      	movs	r3, r2
 8000cee:	43da      	mvns	r2, r3
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	691a      	ldr	r2, [r3, #16]
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	2107      	movs	r1, #7
 8000cfe:	400b      	ands	r3, r1
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	409a      	lsls	r2, r3
 8000d04:	0013      	movs	r3, r2
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	08da      	lsrs	r2, r3, #3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3208      	adds	r2, #8
 8000d14:	0092      	lsls	r2, r2, #2
 8000d16:	6939      	ldr	r1, [r7, #16]
 8000d18:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	2203      	movs	r2, #3
 8000d26:	409a      	lsls	r2, r3
 8000d28:	0013      	movs	r3, r2
 8000d2a:	43da      	mvns	r2, r3
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	2203      	movs	r2, #3
 8000d38:	401a      	ands	r2, r3
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	409a      	lsls	r2, r3
 8000d40:	0013      	movs	r3, r2
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685a      	ldr	r2, [r3, #4]
 8000d52:	23c0      	movs	r3, #192	; 0xc0
 8000d54:	029b      	lsls	r3, r3, #10
 8000d56:	4013      	ands	r3, r2
 8000d58:	d100      	bne.n	8000d5c <HAL_GPIO_Init+0x174>
 8000d5a:	e0a0      	b.n	8000e9e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5c:	4b57      	ldr	r3, [pc, #348]	; (8000ebc <HAL_GPIO_Init+0x2d4>)
 8000d5e:	699a      	ldr	r2, [r3, #24]
 8000d60:	4b56      	ldr	r3, [pc, #344]	; (8000ebc <HAL_GPIO_Init+0x2d4>)
 8000d62:	2101      	movs	r1, #1
 8000d64:	430a      	orrs	r2, r1
 8000d66:	619a      	str	r2, [r3, #24]
 8000d68:	4b54      	ldr	r3, [pc, #336]	; (8000ebc <HAL_GPIO_Init+0x2d4>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	4013      	ands	r3, r2
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d74:	4a52      	ldr	r2, [pc, #328]	; (8000ec0 <HAL_GPIO_Init+0x2d8>)
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	089b      	lsrs	r3, r3, #2
 8000d7a:	3302      	adds	r3, #2
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	589b      	ldr	r3, [r3, r2]
 8000d80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	2203      	movs	r2, #3
 8000d86:	4013      	ands	r3, r2
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	220f      	movs	r2, #15
 8000d8c:	409a      	lsls	r2, r3
 8000d8e:	0013      	movs	r3, r2
 8000d90:	43da      	mvns	r2, r3
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	4013      	ands	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	2390      	movs	r3, #144	; 0x90
 8000d9c:	05db      	lsls	r3, r3, #23
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d019      	beq.n	8000dd6 <HAL_GPIO_Init+0x1ee>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a47      	ldr	r2, [pc, #284]	; (8000ec4 <HAL_GPIO_Init+0x2dc>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d013      	beq.n	8000dd2 <HAL_GPIO_Init+0x1ea>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a46      	ldr	r2, [pc, #280]	; (8000ec8 <HAL_GPIO_Init+0x2e0>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d00d      	beq.n	8000dce <HAL_GPIO_Init+0x1e6>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a45      	ldr	r2, [pc, #276]	; (8000ecc <HAL_GPIO_Init+0x2e4>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d007      	beq.n	8000dca <HAL_GPIO_Init+0x1e2>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a44      	ldr	r2, [pc, #272]	; (8000ed0 <HAL_GPIO_Init+0x2e8>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d101      	bne.n	8000dc6 <HAL_GPIO_Init+0x1de>
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	e008      	b.n	8000dd8 <HAL_GPIO_Init+0x1f0>
 8000dc6:	2305      	movs	r3, #5
 8000dc8:	e006      	b.n	8000dd8 <HAL_GPIO_Init+0x1f0>
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e004      	b.n	8000dd8 <HAL_GPIO_Init+0x1f0>
 8000dce:	2302      	movs	r3, #2
 8000dd0:	e002      	b.n	8000dd8 <HAL_GPIO_Init+0x1f0>
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e000      	b.n	8000dd8 <HAL_GPIO_Init+0x1f0>
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	697a      	ldr	r2, [r7, #20]
 8000dda:	2103      	movs	r1, #3
 8000ddc:	400a      	ands	r2, r1
 8000dde:	0092      	lsls	r2, r2, #2
 8000de0:	4093      	lsls	r3, r2
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000de8:	4935      	ldr	r1, [pc, #212]	; (8000ec0 <HAL_GPIO_Init+0x2d8>)
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	089b      	lsrs	r3, r3, #2
 8000dee:	3302      	adds	r3, #2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000df6:	4b37      	ldr	r3, [pc, #220]	; (8000ed4 <HAL_GPIO_Init+0x2ec>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	43da      	mvns	r2, r3
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	4013      	ands	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685a      	ldr	r2, [r3, #4]
 8000e0a:	2380      	movs	r3, #128	; 0x80
 8000e0c:	025b      	lsls	r3, r3, #9
 8000e0e:	4013      	ands	r3, r2
 8000e10:	d003      	beq.n	8000e1a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e1a:	4b2e      	ldr	r3, [pc, #184]	; (8000ed4 <HAL_GPIO_Init+0x2ec>)
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000e20:	4b2c      	ldr	r3, [pc, #176]	; (8000ed4 <HAL_GPIO_Init+0x2ec>)
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	43da      	mvns	r2, r3
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685a      	ldr	r2, [r3, #4]
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	029b      	lsls	r3, r3, #10
 8000e38:	4013      	ands	r3, r2
 8000e3a:	d003      	beq.n	8000e44 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e44:	4b23      	ldr	r3, [pc, #140]	; (8000ed4 <HAL_GPIO_Init+0x2ec>)
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e4a:	4b22      	ldr	r3, [pc, #136]	; (8000ed4 <HAL_GPIO_Init+0x2ec>)
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	43da      	mvns	r2, r3
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685a      	ldr	r2, [r3, #4]
 8000e5e:	2380      	movs	r3, #128	; 0x80
 8000e60:	035b      	lsls	r3, r3, #13
 8000e62:	4013      	ands	r3, r2
 8000e64:	d003      	beq.n	8000e6e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e6e:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <HAL_GPIO_Init+0x2ec>)
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e74:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <HAL_GPIO_Init+0x2ec>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	43da      	mvns	r2, r3
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	4013      	ands	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685a      	ldr	r2, [r3, #4]
 8000e88:	2380      	movs	r3, #128	; 0x80
 8000e8a:	039b      	lsls	r3, r3, #14
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	d003      	beq.n	8000e98 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e98:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <HAL_GPIO_Init+0x2ec>)
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	40da      	lsrs	r2, r3
 8000eac:	1e13      	subs	r3, r2, #0
 8000eae:	d000      	beq.n	8000eb2 <HAL_GPIO_Init+0x2ca>
 8000eb0:	e6a2      	b.n	8000bf8 <HAL_GPIO_Init+0x10>
  } 
}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	46c0      	nop			; (mov r8, r8)
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	b006      	add	sp, #24
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	40010000 	.word	0x40010000
 8000ec4:	48000400 	.word	0x48000400
 8000ec8:	48000800 	.word	0x48000800
 8000ecc:	48000c00 	.word	0x48000c00
 8000ed0:	48001000 	.word	0x48001000
 8000ed4:	40010400 	.word	0x40010400

08000ed8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d101      	bne.n	8000eea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e082      	b.n	8000ff0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2241      	movs	r2, #65	; 0x41
 8000eee:	5c9b      	ldrb	r3, [r3, r2]
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d107      	bne.n	8000f06 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2240      	movs	r2, #64	; 0x40
 8000efa:	2100      	movs	r1, #0
 8000efc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	0018      	movs	r0, r3
 8000f02:	f7ff fcc5 	bl	8000890 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2241      	movs	r2, #65	; 0x41
 8000f0a:	2124      	movs	r1, #36	; 0x24
 8000f0c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2101      	movs	r1, #1
 8000f1a:	438a      	bics	r2, r1
 8000f1c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	685a      	ldr	r2, [r3, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4934      	ldr	r1, [pc, #208]	; (8000ff8 <HAL_I2C_Init+0x120>)
 8000f28:	400a      	ands	r2, r1
 8000f2a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	689a      	ldr	r2, [r3, #8]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4931      	ldr	r1, [pc, #196]	; (8000ffc <HAL_I2C_Init+0x124>)
 8000f38:	400a      	ands	r2, r1
 8000f3a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d108      	bne.n	8000f56 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	689a      	ldr	r2, [r3, #8]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2180      	movs	r1, #128	; 0x80
 8000f4e:	0209      	lsls	r1, r1, #8
 8000f50:	430a      	orrs	r2, r1
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	e007      	b.n	8000f66 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689a      	ldr	r2, [r3, #8]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2184      	movs	r1, #132	; 0x84
 8000f60:	0209      	lsls	r1, r1, #8
 8000f62:	430a      	orrs	r2, r1
 8000f64:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d104      	bne.n	8000f78 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2280      	movs	r2, #128	; 0x80
 8000f74:	0112      	lsls	r2, r2, #4
 8000f76:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	685a      	ldr	r2, [r3, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	491f      	ldr	r1, [pc, #124]	; (8001000 <HAL_I2C_Init+0x128>)
 8000f84:	430a      	orrs	r2, r1
 8000f86:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	68da      	ldr	r2, [r3, #12]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	491a      	ldr	r1, [pc, #104]	; (8000ffc <HAL_I2C_Init+0x124>)
 8000f94:	400a      	ands	r2, r1
 8000f96:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	691a      	ldr	r2, [r3, #16]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	695b      	ldr	r3, [r3, #20]
 8000fa0:	431a      	orrs	r2, r3
 8000fa2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	430a      	orrs	r2, r1
 8000fb0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69d9      	ldr	r1, [r3, #28]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6a1a      	ldr	r2, [r3, #32]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2101      	movs	r1, #1
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2241      	movs	r2, #65	; 0x41
 8000fdc:	2120      	movs	r1, #32
 8000fde:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2242      	movs	r2, #66	; 0x42
 8000fea:	2100      	movs	r1, #0
 8000fec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000fee:	2300      	movs	r3, #0
}
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	b002      	add	sp, #8
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	f0ffffff 	.word	0xf0ffffff
 8000ffc:	ffff7fff 	.word	0xffff7fff
 8001000:	02008000 	.word	0x02008000

08001004 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001004:	b590      	push	{r4, r7, lr}
 8001006:	b089      	sub	sp, #36	; 0x24
 8001008:	af02      	add	r7, sp, #8
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	0008      	movs	r0, r1
 800100e:	607a      	str	r2, [r7, #4]
 8001010:	0019      	movs	r1, r3
 8001012:	230a      	movs	r3, #10
 8001014:	18fb      	adds	r3, r7, r3
 8001016:	1c02      	adds	r2, r0, #0
 8001018:	801a      	strh	r2, [r3, #0]
 800101a:	2308      	movs	r3, #8
 800101c:	18fb      	adds	r3, r7, r3
 800101e:	1c0a      	adds	r2, r1, #0
 8001020:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2241      	movs	r2, #65	; 0x41
 8001026:	5c9b      	ldrb	r3, [r3, r2]
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b20      	cmp	r3, #32
 800102c:	d000      	beq.n	8001030 <HAL_I2C_Master_Transmit+0x2c>
 800102e:	e0e7      	b.n	8001200 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2240      	movs	r2, #64	; 0x40
 8001034:	5c9b      	ldrb	r3, [r3, r2]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d101      	bne.n	800103e <HAL_I2C_Master_Transmit+0x3a>
 800103a:	2302      	movs	r3, #2
 800103c:	e0e1      	b.n	8001202 <HAL_I2C_Master_Transmit+0x1fe>
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2240      	movs	r2, #64	; 0x40
 8001042:	2101      	movs	r1, #1
 8001044:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001046:	f7ff fd11 	bl	8000a6c <HAL_GetTick>
 800104a:	0003      	movs	r3, r0
 800104c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800104e:	2380      	movs	r3, #128	; 0x80
 8001050:	0219      	lsls	r1, r3, #8
 8001052:	68f8      	ldr	r0, [r7, #12]
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2319      	movs	r3, #25
 800105a:	2201      	movs	r2, #1
 800105c:	f000 fa16 	bl	800148c <I2C_WaitOnFlagUntilTimeout>
 8001060:	1e03      	subs	r3, r0, #0
 8001062:	d001      	beq.n	8001068 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e0cc      	b.n	8001202 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2241      	movs	r2, #65	; 0x41
 800106c:	2121      	movs	r1, #33	; 0x21
 800106e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	2242      	movs	r2, #66	; 0x42
 8001074:	2110      	movs	r1, #16
 8001076:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2200      	movs	r2, #0
 800107c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2208      	movs	r2, #8
 8001088:	18ba      	adds	r2, r7, r2
 800108a:	8812      	ldrh	r2, [r2, #0]
 800108c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2200      	movs	r2, #0
 8001092:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001098:	b29b      	uxth	r3, r3
 800109a:	2bff      	cmp	r3, #255	; 0xff
 800109c:	d911      	bls.n	80010c2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	22ff      	movs	r2, #255	; 0xff
 80010a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	2380      	movs	r3, #128	; 0x80
 80010ac:	045c      	lsls	r4, r3, #17
 80010ae:	230a      	movs	r3, #10
 80010b0:	18fb      	adds	r3, r7, r3
 80010b2:	8819      	ldrh	r1, [r3, #0]
 80010b4:	68f8      	ldr	r0, [r7, #12]
 80010b6:	4b55      	ldr	r3, [pc, #340]	; (800120c <HAL_I2C_Master_Transmit+0x208>)
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	0023      	movs	r3, r4
 80010bc:	f000 fb1a 	bl	80016f4 <I2C_TransferConfig>
 80010c0:	e075      	b.n	80011ae <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	2380      	movs	r3, #128	; 0x80
 80010d4:	049c      	lsls	r4, r3, #18
 80010d6:	230a      	movs	r3, #10
 80010d8:	18fb      	adds	r3, r7, r3
 80010da:	8819      	ldrh	r1, [r3, #0]
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	4b4b      	ldr	r3, [pc, #300]	; (800120c <HAL_I2C_Master_Transmit+0x208>)
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	0023      	movs	r3, r4
 80010e4:	f000 fb06 	bl	80016f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80010e8:	e061      	b.n	80011ae <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010ea:	697a      	ldr	r2, [r7, #20]
 80010ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	0018      	movs	r0, r3
 80010f2:	f000 fa0a 	bl	800150a <I2C_WaitOnTXISFlagUntilTimeout>
 80010f6:	1e03      	subs	r3, r0, #0
 80010f8:	d001      	beq.n	80010fe <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e081      	b.n	8001202 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001102:	781a      	ldrb	r2, [r3, #0]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110e:	1c5a      	adds	r2, r3, #1
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001118:	b29b      	uxth	r3, r3
 800111a:	3b01      	subs	r3, #1
 800111c:	b29a      	uxth	r2, r3
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001126:	3b01      	subs	r3, #1
 8001128:	b29a      	uxth	r2, r3
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001132:	b29b      	uxth	r3, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	d03a      	beq.n	80011ae <HAL_I2C_Master_Transmit+0x1aa>
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800113c:	2b00      	cmp	r3, #0
 800113e:	d136      	bne.n	80011ae <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001140:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001142:	68f8      	ldr	r0, [r7, #12]
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	0013      	movs	r3, r2
 800114a:	2200      	movs	r2, #0
 800114c:	2180      	movs	r1, #128	; 0x80
 800114e:	f000 f99d 	bl	800148c <I2C_WaitOnFlagUntilTimeout>
 8001152:	1e03      	subs	r3, r0, #0
 8001154:	d001      	beq.n	800115a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e053      	b.n	8001202 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800115e:	b29b      	uxth	r3, r3
 8001160:	2bff      	cmp	r3, #255	; 0xff
 8001162:	d911      	bls.n	8001188 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	22ff      	movs	r2, #255	; 0xff
 8001168:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800116e:	b2da      	uxtb	r2, r3
 8001170:	2380      	movs	r3, #128	; 0x80
 8001172:	045c      	lsls	r4, r3, #17
 8001174:	230a      	movs	r3, #10
 8001176:	18fb      	adds	r3, r7, r3
 8001178:	8819      	ldrh	r1, [r3, #0]
 800117a:	68f8      	ldr	r0, [r7, #12]
 800117c:	2300      	movs	r3, #0
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	0023      	movs	r3, r4
 8001182:	f000 fab7 	bl	80016f4 <I2C_TransferConfig>
 8001186:	e012      	b.n	80011ae <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800118c:	b29a      	uxth	r2, r3
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001196:	b2da      	uxtb	r2, r3
 8001198:	2380      	movs	r3, #128	; 0x80
 800119a:	049c      	lsls	r4, r3, #18
 800119c:	230a      	movs	r3, #10
 800119e:	18fb      	adds	r3, r7, r3
 80011a0:	8819      	ldrh	r1, [r3, #0]
 80011a2:	68f8      	ldr	r0, [r7, #12]
 80011a4:	2300      	movs	r3, #0
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	0023      	movs	r3, r4
 80011aa:	f000 faa3 	bl	80016f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d198      	bne.n	80010ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011b8:	697a      	ldr	r2, [r7, #20]
 80011ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	0018      	movs	r0, r3
 80011c0:	f000 f9e2 	bl	8001588 <I2C_WaitOnSTOPFlagUntilTimeout>
 80011c4:	1e03      	subs	r3, r0, #0
 80011c6:	d001      	beq.n	80011cc <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e01a      	b.n	8001202 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2220      	movs	r2, #32
 80011d2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	685a      	ldr	r2, [r3, #4]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	490c      	ldr	r1, [pc, #48]	; (8001210 <HAL_I2C_Master_Transmit+0x20c>)
 80011e0:	400a      	ands	r2, r1
 80011e2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	2241      	movs	r2, #65	; 0x41
 80011e8:	2120      	movs	r1, #32
 80011ea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2242      	movs	r2, #66	; 0x42
 80011f0:	2100      	movs	r1, #0
 80011f2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2240      	movs	r2, #64	; 0x40
 80011f8:	2100      	movs	r1, #0
 80011fa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80011fc:	2300      	movs	r3, #0
 80011fe:	e000      	b.n	8001202 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001200:	2302      	movs	r3, #2
  }
}
 8001202:	0018      	movs	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	b007      	add	sp, #28
 8001208:	bd90      	pop	{r4, r7, pc}
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	80002000 	.word	0x80002000
 8001210:	fe00e800 	.word	0xfe00e800

08001214 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	; 0x28
 8001218:	af02      	add	r7, sp, #8
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	607a      	str	r2, [r7, #4]
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	230a      	movs	r3, #10
 8001222:	18fb      	adds	r3, r7, r3
 8001224:	1c0a      	adds	r2, r1, #0
 8001226:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2241      	movs	r2, #65	; 0x41
 8001230:	5c9b      	ldrb	r3, [r3, r2]
 8001232:	b2db      	uxtb	r3, r3
 8001234:	2b20      	cmp	r3, #32
 8001236:	d000      	beq.n	800123a <HAL_I2C_IsDeviceReady+0x26>
 8001238:	e0fe      	b.n	8001438 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	699a      	ldr	r2, [r3, #24]
 8001240:	2380      	movs	r3, #128	; 0x80
 8001242:	021b      	lsls	r3, r3, #8
 8001244:	401a      	ands	r2, r3
 8001246:	2380      	movs	r3, #128	; 0x80
 8001248:	021b      	lsls	r3, r3, #8
 800124a:	429a      	cmp	r2, r3
 800124c:	d101      	bne.n	8001252 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800124e:	2302      	movs	r3, #2
 8001250:	e0f3      	b.n	800143a <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2240      	movs	r2, #64	; 0x40
 8001256:	5c9b      	ldrb	r3, [r3, r2]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d101      	bne.n	8001260 <HAL_I2C_IsDeviceReady+0x4c>
 800125c:	2302      	movs	r3, #2
 800125e:	e0ec      	b.n	800143a <HAL_I2C_IsDeviceReady+0x226>
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2240      	movs	r2, #64	; 0x40
 8001264:	2101      	movs	r1, #1
 8001266:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2241      	movs	r2, #65	; 0x41
 800126c:	2124      	movs	r1, #36	; 0x24
 800126e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2200      	movs	r2, #0
 8001274:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d107      	bne.n	800128e <HAL_I2C_IsDeviceReady+0x7a>
 800127e:	230a      	movs	r3, #10
 8001280:	18fb      	adds	r3, r7, r3
 8001282:	881b      	ldrh	r3, [r3, #0]
 8001284:	059b      	lsls	r3, r3, #22
 8001286:	0d9b      	lsrs	r3, r3, #22
 8001288:	4a6e      	ldr	r2, [pc, #440]	; (8001444 <HAL_I2C_IsDeviceReady+0x230>)
 800128a:	431a      	orrs	r2, r3
 800128c:	e007      	b.n	800129e <HAL_I2C_IsDeviceReady+0x8a>
 800128e:	230a      	movs	r3, #10
 8001290:	18fb      	adds	r3, r7, r3
 8001292:	881b      	ldrh	r3, [r3, #0]
 8001294:	059b      	lsls	r3, r3, #22
 8001296:	0d9b      	lsrs	r3, r3, #22
 8001298:	22a0      	movs	r2, #160	; 0xa0
 800129a:	0192      	lsls	r2, r2, #6
 800129c:	431a      	orrs	r2, r3
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80012a4:	f7ff fbe2 	bl	8000a6c <HAL_GetTick>
 80012a8:	0003      	movs	r3, r0
 80012aa:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	2220      	movs	r2, #32
 80012b4:	4013      	ands	r3, r2
 80012b6:	3b20      	subs	r3, #32
 80012b8:	425a      	negs	r2, r3
 80012ba:	4153      	adcs	r3, r2
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	231f      	movs	r3, #31
 80012c0:	18fb      	adds	r3, r7, r3
 80012c2:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	2210      	movs	r2, #16
 80012cc:	4013      	ands	r3, r2
 80012ce:	3b10      	subs	r3, #16
 80012d0:	425a      	negs	r2, r3
 80012d2:	4153      	adcs	r3, r2
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	231e      	movs	r3, #30
 80012d8:	18fb      	adds	r3, r7, r3
 80012da:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80012dc:	e035      	b.n	800134a <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	3301      	adds	r3, #1
 80012e2:	d01a      	beq.n	800131a <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80012e4:	f7ff fbc2 	bl	8000a6c <HAL_GetTick>
 80012e8:	0002      	movs	r2, r0
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	683a      	ldr	r2, [r7, #0]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d302      	bcc.n	80012fa <HAL_I2C_IsDeviceReady+0xe6>
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d10f      	bne.n	800131a <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2241      	movs	r2, #65	; 0x41
 80012fe:	2120      	movs	r1, #32
 8001300:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	2220      	movs	r2, #32
 8001308:	431a      	orrs	r2, r3
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2240      	movs	r2, #64	; 0x40
 8001312:	2100      	movs	r1, #0
 8001314:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e08f      	b.n	800143a <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	2220      	movs	r2, #32
 8001322:	4013      	ands	r3, r2
 8001324:	3b20      	subs	r3, #32
 8001326:	425a      	negs	r2, r3
 8001328:	4153      	adcs	r3, r2
 800132a:	b2da      	uxtb	r2, r3
 800132c:	231f      	movs	r3, #31
 800132e:	18fb      	adds	r3, r7, r3
 8001330:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	2210      	movs	r2, #16
 800133a:	4013      	ands	r3, r2
 800133c:	3b10      	subs	r3, #16
 800133e:	425a      	negs	r2, r3
 8001340:	4153      	adcs	r3, r2
 8001342:	b2da      	uxtb	r2, r3
 8001344:	231e      	movs	r3, #30
 8001346:	18fb      	adds	r3, r7, r3
 8001348:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800134a:	231f      	movs	r3, #31
 800134c:	18fb      	adds	r3, r7, r3
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d104      	bne.n	800135e <HAL_I2C_IsDeviceReady+0x14a>
 8001354:	231e      	movs	r3, #30
 8001356:	18fb      	adds	r3, r7, r3
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0bf      	beq.n	80012de <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	2210      	movs	r2, #16
 8001366:	4013      	ands	r3, r2
 8001368:	2b10      	cmp	r3, #16
 800136a:	d01a      	beq.n	80013a2 <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	0013      	movs	r3, r2
 8001376:	2200      	movs	r2, #0
 8001378:	2120      	movs	r1, #32
 800137a:	f000 f887 	bl	800148c <I2C_WaitOnFlagUntilTimeout>
 800137e:	1e03      	subs	r3, r0, #0
 8001380:	d001      	beq.n	8001386 <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e059      	b.n	800143a <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2220      	movs	r2, #32
 800138c:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2241      	movs	r2, #65	; 0x41
 8001392:	2120      	movs	r1, #32
 8001394:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2240      	movs	r2, #64	; 0x40
 800139a:	2100      	movs	r1, #0
 800139c:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 800139e:	2300      	movs	r3, #0
 80013a0:	e04b      	b.n	800143a <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80013a2:	683a      	ldr	r2, [r7, #0]
 80013a4:	68f8      	ldr	r0, [r7, #12]
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	0013      	movs	r3, r2
 80013ac:	2200      	movs	r2, #0
 80013ae:	2120      	movs	r1, #32
 80013b0:	f000 f86c 	bl	800148c <I2C_WaitOnFlagUntilTimeout>
 80013b4:	1e03      	subs	r3, r0, #0
 80013b6:	d001      	beq.n	80013bc <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e03e      	b.n	800143a <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2210      	movs	r2, #16
 80013c2:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2220      	movs	r2, #32
 80013ca:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d119      	bne.n	8001408 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	685a      	ldr	r2, [r3, #4]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2180      	movs	r1, #128	; 0x80
 80013e0:	01c9      	lsls	r1, r1, #7
 80013e2:	430a      	orrs	r2, r1
 80013e4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	68f8      	ldr	r0, [r7, #12]
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	0013      	movs	r3, r2
 80013f0:	2200      	movs	r2, #0
 80013f2:	2120      	movs	r1, #32
 80013f4:	f000 f84a 	bl	800148c <I2C_WaitOnFlagUntilTimeout>
 80013f8:	1e03      	subs	r3, r0, #0
 80013fa:	d001      	beq.n	8001400 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e01c      	b.n	800143a <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2220      	movs	r2, #32
 8001406:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	3301      	adds	r3, #1
 800140c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	429a      	cmp	r2, r3
 8001414:	d900      	bls.n	8001418 <HAL_I2C_IsDeviceReady+0x204>
 8001416:	e72e      	b.n	8001276 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2241      	movs	r2, #65	; 0x41
 800141c:	2120      	movs	r1, #32
 800141e:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001424:	2220      	movs	r2, #32
 8001426:	431a      	orrs	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2240      	movs	r2, #64	; 0x40
 8001430:	2100      	movs	r1, #0
 8001432:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e000      	b.n	800143a <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 8001438:	2302      	movs	r3, #2
  }
}
 800143a:	0018      	movs	r0, r3
 800143c:	46bd      	mov	sp, r7
 800143e:	b008      	add	sp, #32
 8001440:	bd80      	pop	{r7, pc}
 8001442:	46c0      	nop			; (mov r8, r8)
 8001444:	02002000 	.word	0x02002000

08001448 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	2202      	movs	r2, #2
 8001458:	4013      	ands	r3, r2
 800145a:	2b02      	cmp	r3, #2
 800145c:	d103      	bne.n	8001466 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2200      	movs	r2, #0
 8001464:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	2201      	movs	r2, #1
 800146e:	4013      	ands	r3, r2
 8001470:	2b01      	cmp	r3, #1
 8001472:	d007      	beq.n	8001484 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	699a      	ldr	r2, [r3, #24]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2101      	movs	r1, #1
 8001480:	430a      	orrs	r2, r1
 8001482:	619a      	str	r2, [r3, #24]
  }
}
 8001484:	46c0      	nop			; (mov r8, r8)
 8001486:	46bd      	mov	sp, r7
 8001488:	b002      	add	sp, #8
 800148a:	bd80      	pop	{r7, pc}

0800148c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	603b      	str	r3, [r7, #0]
 8001498:	1dfb      	adds	r3, r7, #7
 800149a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800149c:	e021      	b.n	80014e2 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	3301      	adds	r3, #1
 80014a2:	d01e      	beq.n	80014e2 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014a4:	f7ff fae2 	bl	8000a6c <HAL_GetTick>
 80014a8:	0002      	movs	r2, r0
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d302      	bcc.n	80014ba <I2C_WaitOnFlagUntilTimeout+0x2e>
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d113      	bne.n	80014e2 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	2220      	movs	r2, #32
 80014c0:	431a      	orrs	r2, r3
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2241      	movs	r2, #65	; 0x41
 80014ca:	2120      	movs	r1, #32
 80014cc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2242      	movs	r2, #66	; 0x42
 80014d2:	2100      	movs	r1, #0
 80014d4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2240      	movs	r2, #64	; 0x40
 80014da:	2100      	movs	r1, #0
 80014dc:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e00f      	b.n	8001502 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	68ba      	ldr	r2, [r7, #8]
 80014ea:	4013      	ands	r3, r2
 80014ec:	68ba      	ldr	r2, [r7, #8]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	425a      	negs	r2, r3
 80014f2:	4153      	adcs	r3, r2
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	001a      	movs	r2, r3
 80014f8:	1dfb      	adds	r3, r7, #7
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d0ce      	beq.n	800149e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001500:	2300      	movs	r3, #0
}
 8001502:	0018      	movs	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	b004      	add	sp, #16
 8001508:	bd80      	pop	{r7, pc}

0800150a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b084      	sub	sp, #16
 800150e:	af00      	add	r7, sp, #0
 8001510:	60f8      	str	r0, [r7, #12]
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001516:	e02b      	b.n	8001570 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	68b9      	ldr	r1, [r7, #8]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	0018      	movs	r0, r3
 8001520:	f000 f86e 	bl	8001600 <I2C_IsAcknowledgeFailed>
 8001524:	1e03      	subs	r3, r0, #0
 8001526:	d001      	beq.n	800152c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e029      	b.n	8001580 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	3301      	adds	r3, #1
 8001530:	d01e      	beq.n	8001570 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001532:	f7ff fa9b 	bl	8000a6c <HAL_GetTick>
 8001536:	0002      	movs	r2, r0
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	68ba      	ldr	r2, [r7, #8]
 800153e:	429a      	cmp	r2, r3
 8001540:	d302      	bcc.n	8001548 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d113      	bne.n	8001570 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154c:	2220      	movs	r2, #32
 800154e:	431a      	orrs	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2241      	movs	r2, #65	; 0x41
 8001558:	2120      	movs	r1, #32
 800155a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2242      	movs	r2, #66	; 0x42
 8001560:	2100      	movs	r1, #0
 8001562:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2240      	movs	r2, #64	; 0x40
 8001568:	2100      	movs	r1, #0
 800156a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e007      	b.n	8001580 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	2202      	movs	r2, #2
 8001578:	4013      	ands	r3, r2
 800157a:	2b02      	cmp	r3, #2
 800157c:	d1cc      	bne.n	8001518 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800157e:	2300      	movs	r3, #0
}
 8001580:	0018      	movs	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	b004      	add	sp, #16
 8001586:	bd80      	pop	{r7, pc}

08001588 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001594:	e028      	b.n	80015e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	68b9      	ldr	r1, [r7, #8]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	0018      	movs	r0, r3
 800159e:	f000 f82f 	bl	8001600 <I2C_IsAcknowledgeFailed>
 80015a2:	1e03      	subs	r3, r0, #0
 80015a4:	d001      	beq.n	80015aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e026      	b.n	80015f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015aa:	f7ff fa5f 	bl	8000a6c <HAL_GetTick>
 80015ae:	0002      	movs	r2, r0
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	68ba      	ldr	r2, [r7, #8]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d302      	bcc.n	80015c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d113      	bne.n	80015e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c4:	2220      	movs	r2, #32
 80015c6:	431a      	orrs	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2241      	movs	r2, #65	; 0x41
 80015d0:	2120      	movs	r1, #32
 80015d2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2242      	movs	r2, #66	; 0x42
 80015d8:	2100      	movs	r1, #0
 80015da:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2240      	movs	r2, #64	; 0x40
 80015e0:	2100      	movs	r1, #0
 80015e2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e007      	b.n	80015f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	2220      	movs	r2, #32
 80015f0:	4013      	ands	r3, r2
 80015f2:	2b20      	cmp	r3, #32
 80015f4:	d1cf      	bne.n	8001596 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	0018      	movs	r0, r3
 80015fa:	46bd      	mov	sp, r7
 80015fc:	b004      	add	sp, #16
 80015fe:	bd80      	pop	{r7, pc}

08001600 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	2210      	movs	r2, #16
 8001614:	4013      	ands	r3, r2
 8001616:	2b10      	cmp	r3, #16
 8001618:	d164      	bne.n	80016e4 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	685a      	ldr	r2, [r3, #4]
 8001620:	2380      	movs	r3, #128	; 0x80
 8001622:	049b      	lsls	r3, r3, #18
 8001624:	401a      	ands	r2, r3
 8001626:	2380      	movs	r3, #128	; 0x80
 8001628:	049b      	lsls	r3, r3, #18
 800162a:	429a      	cmp	r2, r3
 800162c:	d02b      	beq.n	8001686 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2180      	movs	r1, #128	; 0x80
 800163a:	01c9      	lsls	r1, r1, #7
 800163c:	430a      	orrs	r2, r1
 800163e:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001640:	e021      	b.n	8001686 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	3301      	adds	r3, #1
 8001646:	d01e      	beq.n	8001686 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001648:	f7ff fa10 	bl	8000a6c <HAL_GetTick>
 800164c:	0002      	movs	r2, r0
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	429a      	cmp	r2, r3
 8001656:	d302      	bcc.n	800165e <I2C_IsAcknowledgeFailed+0x5e>
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d113      	bne.n	8001686 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	2220      	movs	r2, #32
 8001664:	431a      	orrs	r2, r3
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2241      	movs	r2, #65	; 0x41
 800166e:	2120      	movs	r1, #32
 8001670:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2242      	movs	r2, #66	; 0x42
 8001676:	2100      	movs	r1, #0
 8001678:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2240      	movs	r2, #64	; 0x40
 800167e:	2100      	movs	r1, #0
 8001680:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e02f      	b.n	80016e6 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	2220      	movs	r2, #32
 800168e:	4013      	ands	r3, r2
 8001690:	2b20      	cmp	r3, #32
 8001692:	d1d6      	bne.n	8001642 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2210      	movs	r2, #16
 800169a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2220      	movs	r2, #32
 80016a2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	0018      	movs	r0, r3
 80016a8:	f7ff fece 	bl	8001448 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	490e      	ldr	r1, [pc, #56]	; (80016f0 <I2C_IsAcknowledgeFailed+0xf0>)
 80016b8:	400a      	ands	r2, r1
 80016ba:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c0:	2204      	movs	r2, #4
 80016c2:	431a      	orrs	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2241      	movs	r2, #65	; 0x41
 80016cc:	2120      	movs	r1, #32
 80016ce:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2242      	movs	r2, #66	; 0x42
 80016d4:	2100      	movs	r1, #0
 80016d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2240      	movs	r2, #64	; 0x40
 80016dc:	2100      	movs	r1, #0
 80016de:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e000      	b.n	80016e6 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	0018      	movs	r0, r3
 80016e8:	46bd      	mov	sp, r7
 80016ea:	b004      	add	sp, #16
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	fe00e800 	.word	0xfe00e800

080016f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80016f4:	b590      	push	{r4, r7, lr}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	0008      	movs	r0, r1
 80016fe:	0011      	movs	r1, r2
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	240a      	movs	r4, #10
 8001704:	193b      	adds	r3, r7, r4
 8001706:	1c02      	adds	r2, r0, #0
 8001708:	801a      	strh	r2, [r3, #0]
 800170a:	2009      	movs	r0, #9
 800170c:	183b      	adds	r3, r7, r0
 800170e:	1c0a      	adds	r2, r1, #0
 8001710:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	6a3a      	ldr	r2, [r7, #32]
 800171a:	0d51      	lsrs	r1, r2, #21
 800171c:	2280      	movs	r2, #128	; 0x80
 800171e:	00d2      	lsls	r2, r2, #3
 8001720:	400a      	ands	r2, r1
 8001722:	490e      	ldr	r1, [pc, #56]	; (800175c <I2C_TransferConfig+0x68>)
 8001724:	430a      	orrs	r2, r1
 8001726:	43d2      	mvns	r2, r2
 8001728:	401a      	ands	r2, r3
 800172a:	0011      	movs	r1, r2
 800172c:	193b      	adds	r3, r7, r4
 800172e:	881b      	ldrh	r3, [r3, #0]
 8001730:	059b      	lsls	r3, r3, #22
 8001732:	0d9a      	lsrs	r2, r3, #22
 8001734:	183b      	adds	r3, r7, r0
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	0418      	lsls	r0, r3, #16
 800173a:	23ff      	movs	r3, #255	; 0xff
 800173c:	041b      	lsls	r3, r3, #16
 800173e:	4003      	ands	r3, r0
 8001740:	431a      	orrs	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	431a      	orrs	r2, r3
 8001746:	6a3b      	ldr	r3, [r7, #32]
 8001748:	431a      	orrs	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	430a      	orrs	r2, r1
 8001750:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	46bd      	mov	sp, r7
 8001756:	b005      	add	sp, #20
 8001758:	bd90      	pop	{r4, r7, pc}
 800175a:	46c0      	nop			; (mov r8, r8)
 800175c:	03ff63ff 	.word	0x03ff63ff

08001760 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2241      	movs	r2, #65	; 0x41
 800176e:	5c9b      	ldrb	r3, [r3, r2]
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b20      	cmp	r3, #32
 8001774:	d138      	bne.n	80017e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2240      	movs	r2, #64	; 0x40
 800177a:	5c9b      	ldrb	r3, [r3, r2]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d101      	bne.n	8001784 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001780:	2302      	movs	r3, #2
 8001782:	e032      	b.n	80017ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2240      	movs	r2, #64	; 0x40
 8001788:	2101      	movs	r1, #1
 800178a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2241      	movs	r2, #65	; 0x41
 8001790:	2124      	movs	r1, #36	; 0x24
 8001792:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2101      	movs	r1, #1
 80017a0:	438a      	bics	r2, r1
 80017a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4911      	ldr	r1, [pc, #68]	; (80017f4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80017b0:	400a      	ands	r2, r1
 80017b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6819      	ldr	r1, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	430a      	orrs	r2, r1
 80017c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2101      	movs	r1, #1
 80017d0:	430a      	orrs	r2, r1
 80017d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2241      	movs	r2, #65	; 0x41
 80017d8:	2120      	movs	r1, #32
 80017da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2240      	movs	r2, #64	; 0x40
 80017e0:	2100      	movs	r1, #0
 80017e2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80017e4:	2300      	movs	r3, #0
 80017e6:	e000      	b.n	80017ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80017e8:	2302      	movs	r3, #2
  }
}
 80017ea:	0018      	movs	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	b002      	add	sp, #8
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	ffffefff 	.word	0xffffefff

080017f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2241      	movs	r2, #65	; 0x41
 8001806:	5c9b      	ldrb	r3, [r3, r2]
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b20      	cmp	r3, #32
 800180c:	d139      	bne.n	8001882 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2240      	movs	r2, #64	; 0x40
 8001812:	5c9b      	ldrb	r3, [r3, r2]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d101      	bne.n	800181c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001818:	2302      	movs	r3, #2
 800181a:	e033      	b.n	8001884 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2240      	movs	r2, #64	; 0x40
 8001820:	2101      	movs	r1, #1
 8001822:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2241      	movs	r2, #65	; 0x41
 8001828:	2124      	movs	r1, #36	; 0x24
 800182a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2101      	movs	r1, #1
 8001838:	438a      	bics	r2, r1
 800183a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4a11      	ldr	r2, [pc, #68]	; (800188c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001848:	4013      	ands	r3, r2
 800184a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	021b      	lsls	r3, r3, #8
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	4313      	orrs	r3, r2
 8001854:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2101      	movs	r1, #1
 800186a:	430a      	orrs	r2, r1
 800186c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2241      	movs	r2, #65	; 0x41
 8001872:	2120      	movs	r1, #32
 8001874:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2240      	movs	r2, #64	; 0x40
 800187a:	2100      	movs	r1, #0
 800187c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800187e:	2300      	movs	r3, #0
 8001880:	e000      	b.n	8001884 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001882:	2302      	movs	r3, #2
  }
}
 8001884:	0018      	movs	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	b004      	add	sp, #16
 800188a:	bd80      	pop	{r7, pc}
 800188c:	fffff0ff 	.word	0xfffff0ff

08001890 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d102      	bne.n	80018a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	f000 fb76 	bl	8001f90 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2201      	movs	r2, #1
 80018aa:	4013      	ands	r3, r2
 80018ac:	d100      	bne.n	80018b0 <HAL_RCC_OscConfig+0x20>
 80018ae:	e08e      	b.n	80019ce <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80018b0:	4bc5      	ldr	r3, [pc, #788]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	220c      	movs	r2, #12
 80018b6:	4013      	ands	r3, r2
 80018b8:	2b04      	cmp	r3, #4
 80018ba:	d00e      	beq.n	80018da <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018bc:	4bc2      	ldr	r3, [pc, #776]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	220c      	movs	r2, #12
 80018c2:	4013      	ands	r3, r2
 80018c4:	2b08      	cmp	r3, #8
 80018c6:	d117      	bne.n	80018f8 <HAL_RCC_OscConfig+0x68>
 80018c8:	4bbf      	ldr	r3, [pc, #764]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	23c0      	movs	r3, #192	; 0xc0
 80018ce:	025b      	lsls	r3, r3, #9
 80018d0:	401a      	ands	r2, r3
 80018d2:	2380      	movs	r3, #128	; 0x80
 80018d4:	025b      	lsls	r3, r3, #9
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d10e      	bne.n	80018f8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018da:	4bbb      	ldr	r3, [pc, #748]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	2380      	movs	r3, #128	; 0x80
 80018e0:	029b      	lsls	r3, r3, #10
 80018e2:	4013      	ands	r3, r2
 80018e4:	d100      	bne.n	80018e8 <HAL_RCC_OscConfig+0x58>
 80018e6:	e071      	b.n	80019cc <HAL_RCC_OscConfig+0x13c>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d000      	beq.n	80018f2 <HAL_RCC_OscConfig+0x62>
 80018f0:	e06c      	b.n	80019cc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	f000 fb4c 	bl	8001f90 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d107      	bne.n	8001910 <HAL_RCC_OscConfig+0x80>
 8001900:	4bb1      	ldr	r3, [pc, #708]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4bb0      	ldr	r3, [pc, #704]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 8001906:	2180      	movs	r1, #128	; 0x80
 8001908:	0249      	lsls	r1, r1, #9
 800190a:	430a      	orrs	r2, r1
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	e02f      	b.n	8001970 <HAL_RCC_OscConfig+0xe0>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d10c      	bne.n	8001932 <HAL_RCC_OscConfig+0xa2>
 8001918:	4bab      	ldr	r3, [pc, #684]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4baa      	ldr	r3, [pc, #680]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 800191e:	49ab      	ldr	r1, [pc, #684]	; (8001bcc <HAL_RCC_OscConfig+0x33c>)
 8001920:	400a      	ands	r2, r1
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	4ba8      	ldr	r3, [pc, #672]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4ba7      	ldr	r3, [pc, #668]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 800192a:	49a9      	ldr	r1, [pc, #676]	; (8001bd0 <HAL_RCC_OscConfig+0x340>)
 800192c:	400a      	ands	r2, r1
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	e01e      	b.n	8001970 <HAL_RCC_OscConfig+0xe0>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b05      	cmp	r3, #5
 8001938:	d10e      	bne.n	8001958 <HAL_RCC_OscConfig+0xc8>
 800193a:	4ba3      	ldr	r3, [pc, #652]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	4ba2      	ldr	r3, [pc, #648]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 8001940:	2180      	movs	r1, #128	; 0x80
 8001942:	02c9      	lsls	r1, r1, #11
 8001944:	430a      	orrs	r2, r1
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	4b9f      	ldr	r3, [pc, #636]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4b9e      	ldr	r3, [pc, #632]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 800194e:	2180      	movs	r1, #128	; 0x80
 8001950:	0249      	lsls	r1, r1, #9
 8001952:	430a      	orrs	r2, r1
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	e00b      	b.n	8001970 <HAL_RCC_OscConfig+0xe0>
 8001958:	4b9b      	ldr	r3, [pc, #620]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4b9a      	ldr	r3, [pc, #616]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 800195e:	499b      	ldr	r1, [pc, #620]	; (8001bcc <HAL_RCC_OscConfig+0x33c>)
 8001960:	400a      	ands	r2, r1
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	4b98      	ldr	r3, [pc, #608]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	4b97      	ldr	r3, [pc, #604]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 800196a:	4999      	ldr	r1, [pc, #612]	; (8001bd0 <HAL_RCC_OscConfig+0x340>)
 800196c:	400a      	ands	r2, r1
 800196e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d014      	beq.n	80019a2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001978:	f7ff f878 	bl	8000a6c <HAL_GetTick>
 800197c:	0003      	movs	r3, r0
 800197e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001982:	f7ff f873 	bl	8000a6c <HAL_GetTick>
 8001986:	0002      	movs	r2, r0
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b64      	cmp	r3, #100	; 0x64
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e2fd      	b.n	8001f90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001994:	4b8c      	ldr	r3, [pc, #560]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	2380      	movs	r3, #128	; 0x80
 800199a:	029b      	lsls	r3, r3, #10
 800199c:	4013      	ands	r3, r2
 800199e:	d0f0      	beq.n	8001982 <HAL_RCC_OscConfig+0xf2>
 80019a0:	e015      	b.n	80019ce <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a2:	f7ff f863 	bl	8000a6c <HAL_GetTick>
 80019a6:	0003      	movs	r3, r0
 80019a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019ac:	f7ff f85e 	bl	8000a6c <HAL_GetTick>
 80019b0:	0002      	movs	r2, r0
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b64      	cmp	r3, #100	; 0x64
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e2e8      	b.n	8001f90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019be:	4b82      	ldr	r3, [pc, #520]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	2380      	movs	r3, #128	; 0x80
 80019c4:	029b      	lsls	r3, r3, #10
 80019c6:	4013      	ands	r3, r2
 80019c8:	d1f0      	bne.n	80019ac <HAL_RCC_OscConfig+0x11c>
 80019ca:	e000      	b.n	80019ce <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019cc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2202      	movs	r2, #2
 80019d4:	4013      	ands	r3, r2
 80019d6:	d100      	bne.n	80019da <HAL_RCC_OscConfig+0x14a>
 80019d8:	e06c      	b.n	8001ab4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80019da:	4b7b      	ldr	r3, [pc, #492]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	220c      	movs	r2, #12
 80019e0:	4013      	ands	r3, r2
 80019e2:	d00e      	beq.n	8001a02 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80019e4:	4b78      	ldr	r3, [pc, #480]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	220c      	movs	r2, #12
 80019ea:	4013      	ands	r3, r2
 80019ec:	2b08      	cmp	r3, #8
 80019ee:	d11f      	bne.n	8001a30 <HAL_RCC_OscConfig+0x1a0>
 80019f0:	4b75      	ldr	r3, [pc, #468]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	23c0      	movs	r3, #192	; 0xc0
 80019f6:	025b      	lsls	r3, r3, #9
 80019f8:	401a      	ands	r2, r3
 80019fa:	2380      	movs	r3, #128	; 0x80
 80019fc:	021b      	lsls	r3, r3, #8
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d116      	bne.n	8001a30 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a02:	4b71      	ldr	r3, [pc, #452]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2202      	movs	r2, #2
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d005      	beq.n	8001a18 <HAL_RCC_OscConfig+0x188>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d001      	beq.n	8001a18 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e2bb      	b.n	8001f90 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a18:	4b6b      	ldr	r3, [pc, #428]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	22f8      	movs	r2, #248	; 0xf8
 8001a1e:	4393      	bics	r3, r2
 8001a20:	0019      	movs	r1, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	00da      	lsls	r2, r3, #3
 8001a28:	4b67      	ldr	r3, [pc, #412]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a2e:	e041      	b.n	8001ab4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d024      	beq.n	8001a82 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a38:	4b63      	ldr	r3, [pc, #396]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b62      	ldr	r3, [pc, #392]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 8001a3e:	2101      	movs	r1, #1
 8001a40:	430a      	orrs	r2, r1
 8001a42:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a44:	f7ff f812 	bl	8000a6c <HAL_GetTick>
 8001a48:	0003      	movs	r3, r0
 8001a4a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a4c:	e008      	b.n	8001a60 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a4e:	f7ff f80d 	bl	8000a6c <HAL_GetTick>
 8001a52:	0002      	movs	r2, r0
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e297      	b.n	8001f90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a60:	4b59      	ldr	r3, [pc, #356]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2202      	movs	r2, #2
 8001a66:	4013      	ands	r3, r2
 8001a68:	d0f1      	beq.n	8001a4e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a6a:	4b57      	ldr	r3, [pc, #348]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	22f8      	movs	r2, #248	; 0xf8
 8001a70:	4393      	bics	r3, r2
 8001a72:	0019      	movs	r1, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	00da      	lsls	r2, r3, #3
 8001a7a:	4b53      	ldr	r3, [pc, #332]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	e018      	b.n	8001ab4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a82:	4b51      	ldr	r3, [pc, #324]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	4b50      	ldr	r3, [pc, #320]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 8001a88:	2101      	movs	r1, #1
 8001a8a:	438a      	bics	r2, r1
 8001a8c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8e:	f7fe ffed 	bl	8000a6c <HAL_GetTick>
 8001a92:	0003      	movs	r3, r0
 8001a94:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a98:	f7fe ffe8 	bl	8000a6c <HAL_GetTick>
 8001a9c:	0002      	movs	r2, r0
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e272      	b.n	8001f90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aaa:	4b47      	ldr	r3, [pc, #284]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2202      	movs	r2, #2
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d1f1      	bne.n	8001a98 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2208      	movs	r2, #8
 8001aba:	4013      	ands	r3, r2
 8001abc:	d036      	beq.n	8001b2c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d019      	beq.n	8001afa <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ac6:	4b40      	ldr	r3, [pc, #256]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 8001ac8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001aca:	4b3f      	ldr	r3, [pc, #252]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 8001acc:	2101      	movs	r1, #1
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad2:	f7fe ffcb 	bl	8000a6c <HAL_GetTick>
 8001ad6:	0003      	movs	r3, r0
 8001ad8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001adc:	f7fe ffc6 	bl	8000a6c <HAL_GetTick>
 8001ae0:	0002      	movs	r2, r0
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e250      	b.n	8001f90 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aee:	4b36      	ldr	r3, [pc, #216]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 8001af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af2:	2202      	movs	r2, #2
 8001af4:	4013      	ands	r3, r2
 8001af6:	d0f1      	beq.n	8001adc <HAL_RCC_OscConfig+0x24c>
 8001af8:	e018      	b.n	8001b2c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001afa:	4b33      	ldr	r3, [pc, #204]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 8001afc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001afe:	4b32      	ldr	r3, [pc, #200]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 8001b00:	2101      	movs	r1, #1
 8001b02:	438a      	bics	r2, r1
 8001b04:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b06:	f7fe ffb1 	bl	8000a6c <HAL_GetTick>
 8001b0a:	0003      	movs	r3, r0
 8001b0c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b10:	f7fe ffac 	bl	8000a6c <HAL_GetTick>
 8001b14:	0002      	movs	r2, r0
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e236      	b.n	8001f90 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b22:	4b29      	ldr	r3, [pc, #164]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 8001b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b26:	2202      	movs	r2, #2
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d1f1      	bne.n	8001b10 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2204      	movs	r2, #4
 8001b32:	4013      	ands	r3, r2
 8001b34:	d100      	bne.n	8001b38 <HAL_RCC_OscConfig+0x2a8>
 8001b36:	e0b5      	b.n	8001ca4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b38:	201f      	movs	r0, #31
 8001b3a:	183b      	adds	r3, r7, r0
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b40:	4b21      	ldr	r3, [pc, #132]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 8001b42:	69da      	ldr	r2, [r3, #28]
 8001b44:	2380      	movs	r3, #128	; 0x80
 8001b46:	055b      	lsls	r3, r3, #21
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d110      	bne.n	8001b6e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b4c:	4b1e      	ldr	r3, [pc, #120]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 8001b4e:	69da      	ldr	r2, [r3, #28]
 8001b50:	4b1d      	ldr	r3, [pc, #116]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 8001b52:	2180      	movs	r1, #128	; 0x80
 8001b54:	0549      	lsls	r1, r1, #21
 8001b56:	430a      	orrs	r2, r1
 8001b58:	61da      	str	r2, [r3, #28]
 8001b5a:	4b1b      	ldr	r3, [pc, #108]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 8001b5c:	69da      	ldr	r2, [r3, #28]
 8001b5e:	2380      	movs	r3, #128	; 0x80
 8001b60:	055b      	lsls	r3, r3, #21
 8001b62:	4013      	ands	r3, r2
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b68:	183b      	adds	r3, r7, r0
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6e:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <HAL_RCC_OscConfig+0x344>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	2380      	movs	r3, #128	; 0x80
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	4013      	ands	r3, r2
 8001b78:	d11a      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b7a:	4b16      	ldr	r3, [pc, #88]	; (8001bd4 <HAL_RCC_OscConfig+0x344>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <HAL_RCC_OscConfig+0x344>)
 8001b80:	2180      	movs	r1, #128	; 0x80
 8001b82:	0049      	lsls	r1, r1, #1
 8001b84:	430a      	orrs	r2, r1
 8001b86:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b88:	f7fe ff70 	bl	8000a6c <HAL_GetTick>
 8001b8c:	0003      	movs	r3, r0
 8001b8e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b92:	f7fe ff6b 	bl	8000a6c <HAL_GetTick>
 8001b96:	0002      	movs	r2, r0
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b64      	cmp	r3, #100	; 0x64
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e1f5      	b.n	8001f90 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <HAL_RCC_OscConfig+0x344>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	2380      	movs	r3, #128	; 0x80
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	4013      	ands	r3, r2
 8001bae:	d0f0      	beq.n	8001b92 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d10f      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x348>
 8001bb8:	4b03      	ldr	r3, [pc, #12]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 8001bba:	6a1a      	ldr	r2, [r3, #32]
 8001bbc:	4b02      	ldr	r3, [pc, #8]	; (8001bc8 <HAL_RCC_OscConfig+0x338>)
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	621a      	str	r2, [r3, #32]
 8001bc4:	e036      	b.n	8001c34 <HAL_RCC_OscConfig+0x3a4>
 8001bc6:	46c0      	nop			; (mov r8, r8)
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	fffeffff 	.word	0xfffeffff
 8001bd0:	fffbffff 	.word	0xfffbffff
 8001bd4:	40007000 	.word	0x40007000
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d10c      	bne.n	8001bfa <HAL_RCC_OscConfig+0x36a>
 8001be0:	4bca      	ldr	r3, [pc, #808]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001be2:	6a1a      	ldr	r2, [r3, #32]
 8001be4:	4bc9      	ldr	r3, [pc, #804]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001be6:	2101      	movs	r1, #1
 8001be8:	438a      	bics	r2, r1
 8001bea:	621a      	str	r2, [r3, #32]
 8001bec:	4bc7      	ldr	r3, [pc, #796]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001bee:	6a1a      	ldr	r2, [r3, #32]
 8001bf0:	4bc6      	ldr	r3, [pc, #792]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001bf2:	2104      	movs	r1, #4
 8001bf4:	438a      	bics	r2, r1
 8001bf6:	621a      	str	r2, [r3, #32]
 8001bf8:	e01c      	b.n	8001c34 <HAL_RCC_OscConfig+0x3a4>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	2b05      	cmp	r3, #5
 8001c00:	d10c      	bne.n	8001c1c <HAL_RCC_OscConfig+0x38c>
 8001c02:	4bc2      	ldr	r3, [pc, #776]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001c04:	6a1a      	ldr	r2, [r3, #32]
 8001c06:	4bc1      	ldr	r3, [pc, #772]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001c08:	2104      	movs	r1, #4
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	621a      	str	r2, [r3, #32]
 8001c0e:	4bbf      	ldr	r3, [pc, #764]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001c10:	6a1a      	ldr	r2, [r3, #32]
 8001c12:	4bbe      	ldr	r3, [pc, #760]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001c14:	2101      	movs	r1, #1
 8001c16:	430a      	orrs	r2, r1
 8001c18:	621a      	str	r2, [r3, #32]
 8001c1a:	e00b      	b.n	8001c34 <HAL_RCC_OscConfig+0x3a4>
 8001c1c:	4bbb      	ldr	r3, [pc, #748]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001c1e:	6a1a      	ldr	r2, [r3, #32]
 8001c20:	4bba      	ldr	r3, [pc, #744]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001c22:	2101      	movs	r1, #1
 8001c24:	438a      	bics	r2, r1
 8001c26:	621a      	str	r2, [r3, #32]
 8001c28:	4bb8      	ldr	r3, [pc, #736]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001c2a:	6a1a      	ldr	r2, [r3, #32]
 8001c2c:	4bb7      	ldr	r3, [pc, #732]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001c2e:	2104      	movs	r1, #4
 8001c30:	438a      	bics	r2, r1
 8001c32:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d014      	beq.n	8001c66 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c3c:	f7fe ff16 	bl	8000a6c <HAL_GetTick>
 8001c40:	0003      	movs	r3, r0
 8001c42:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c44:	e009      	b.n	8001c5a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c46:	f7fe ff11 	bl	8000a6c <HAL_GetTick>
 8001c4a:	0002      	movs	r2, r0
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	4aaf      	ldr	r2, [pc, #700]	; (8001f10 <HAL_RCC_OscConfig+0x680>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e19a      	b.n	8001f90 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c5a:	4bac      	ldr	r3, [pc, #688]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	2202      	movs	r2, #2
 8001c60:	4013      	ands	r3, r2
 8001c62:	d0f0      	beq.n	8001c46 <HAL_RCC_OscConfig+0x3b6>
 8001c64:	e013      	b.n	8001c8e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c66:	f7fe ff01 	bl	8000a6c <HAL_GetTick>
 8001c6a:	0003      	movs	r3, r0
 8001c6c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c6e:	e009      	b.n	8001c84 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c70:	f7fe fefc 	bl	8000a6c <HAL_GetTick>
 8001c74:	0002      	movs	r2, r0
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	4aa5      	ldr	r2, [pc, #660]	; (8001f10 <HAL_RCC_OscConfig+0x680>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e185      	b.n	8001f90 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c84:	4ba1      	ldr	r3, [pc, #644]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	2202      	movs	r2, #2
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d1f0      	bne.n	8001c70 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c8e:	231f      	movs	r3, #31
 8001c90:	18fb      	adds	r3, r7, r3
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d105      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c98:	4b9c      	ldr	r3, [pc, #624]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001c9a:	69da      	ldr	r2, [r3, #28]
 8001c9c:	4b9b      	ldr	r3, [pc, #620]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001c9e:	499d      	ldr	r1, [pc, #628]	; (8001f14 <HAL_RCC_OscConfig+0x684>)
 8001ca0:	400a      	ands	r2, r1
 8001ca2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2210      	movs	r2, #16
 8001caa:	4013      	ands	r3, r2
 8001cac:	d063      	beq.n	8001d76 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d12a      	bne.n	8001d0c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001cb6:	4b95      	ldr	r3, [pc, #596]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001cb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cba:	4b94      	ldr	r3, [pc, #592]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001cbc:	2104      	movs	r1, #4
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001cc2:	4b92      	ldr	r3, [pc, #584]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001cc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cc6:	4b91      	ldr	r3, [pc, #580]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001cc8:	2101      	movs	r1, #1
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cce:	f7fe fecd 	bl	8000a6c <HAL_GetTick>
 8001cd2:	0003      	movs	r3, r0
 8001cd4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001cd8:	f7fe fec8 	bl	8000a6c <HAL_GetTick>
 8001cdc:	0002      	movs	r2, r0
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e152      	b.n	8001f90 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001cea:	4b88      	ldr	r3, [pc, #544]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cee:	2202      	movs	r2, #2
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d0f1      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001cf4:	4b85      	ldr	r3, [pc, #532]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf8:	22f8      	movs	r2, #248	; 0xf8
 8001cfa:	4393      	bics	r3, r2
 8001cfc:	0019      	movs	r1, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	00da      	lsls	r2, r3, #3
 8001d04:	4b81      	ldr	r3, [pc, #516]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001d06:	430a      	orrs	r2, r1
 8001d08:	635a      	str	r2, [r3, #52]	; 0x34
 8001d0a:	e034      	b.n	8001d76 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	695b      	ldr	r3, [r3, #20]
 8001d10:	3305      	adds	r3, #5
 8001d12:	d111      	bne.n	8001d38 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001d14:	4b7d      	ldr	r3, [pc, #500]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001d16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d18:	4b7c      	ldr	r3, [pc, #496]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001d1a:	2104      	movs	r1, #4
 8001d1c:	438a      	bics	r2, r1
 8001d1e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001d20:	4b7a      	ldr	r3, [pc, #488]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d24:	22f8      	movs	r2, #248	; 0xf8
 8001d26:	4393      	bics	r3, r2
 8001d28:	0019      	movs	r1, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	00da      	lsls	r2, r3, #3
 8001d30:	4b76      	ldr	r3, [pc, #472]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001d32:	430a      	orrs	r2, r1
 8001d34:	635a      	str	r2, [r3, #52]	; 0x34
 8001d36:	e01e      	b.n	8001d76 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d38:	4b74      	ldr	r3, [pc, #464]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001d3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d3c:	4b73      	ldr	r3, [pc, #460]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001d3e:	2104      	movs	r1, #4
 8001d40:	430a      	orrs	r2, r1
 8001d42:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001d44:	4b71      	ldr	r3, [pc, #452]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001d46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d48:	4b70      	ldr	r3, [pc, #448]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	438a      	bics	r2, r1
 8001d4e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d50:	f7fe fe8c 	bl	8000a6c <HAL_GetTick>
 8001d54:	0003      	movs	r3, r0
 8001d56:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d5a:	f7fe fe87 	bl	8000a6c <HAL_GetTick>
 8001d5e:	0002      	movs	r2, r0
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e111      	b.n	8001f90 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001d6c:	4b67      	ldr	r3, [pc, #412]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d70:	2202      	movs	r2, #2
 8001d72:	4013      	ands	r3, r2
 8001d74:	d1f1      	bne.n	8001d5a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2220      	movs	r2, #32
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d05c      	beq.n	8001e3a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001d80:	4b62      	ldr	r3, [pc, #392]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	220c      	movs	r2, #12
 8001d86:	4013      	ands	r3, r2
 8001d88:	2b0c      	cmp	r3, #12
 8001d8a:	d00e      	beq.n	8001daa <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001d8c:	4b5f      	ldr	r3, [pc, #380]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	220c      	movs	r2, #12
 8001d92:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001d94:	2b08      	cmp	r3, #8
 8001d96:	d114      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001d98:	4b5c      	ldr	r3, [pc, #368]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	23c0      	movs	r3, #192	; 0xc0
 8001d9e:	025b      	lsls	r3, r3, #9
 8001da0:	401a      	ands	r2, r3
 8001da2:	23c0      	movs	r3, #192	; 0xc0
 8001da4:	025b      	lsls	r3, r3, #9
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d10b      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001daa:	4b58      	ldr	r3, [pc, #352]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001dac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dae:	2380      	movs	r3, #128	; 0x80
 8001db0:	025b      	lsls	r3, r3, #9
 8001db2:	4013      	ands	r3, r2
 8001db4:	d040      	beq.n	8001e38 <HAL_RCC_OscConfig+0x5a8>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d03c      	beq.n	8001e38 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e0e6      	b.n	8001f90 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d01b      	beq.n	8001e02 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001dca:	4b50      	ldr	r3, [pc, #320]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001dcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dce:	4b4f      	ldr	r3, [pc, #316]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001dd0:	2180      	movs	r1, #128	; 0x80
 8001dd2:	0249      	lsls	r1, r1, #9
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd8:	f7fe fe48 	bl	8000a6c <HAL_GetTick>
 8001ddc:	0003      	movs	r3, r0
 8001dde:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001de2:	f7fe fe43 	bl	8000a6c <HAL_GetTick>
 8001de6:	0002      	movs	r2, r0
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e0cd      	b.n	8001f90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001df4:	4b45      	ldr	r3, [pc, #276]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001df6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001df8:	2380      	movs	r3, #128	; 0x80
 8001dfa:	025b      	lsls	r3, r3, #9
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCC_OscConfig+0x552>
 8001e00:	e01b      	b.n	8001e3a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001e02:	4b42      	ldr	r3, [pc, #264]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001e04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e06:	4b41      	ldr	r3, [pc, #260]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001e08:	4943      	ldr	r1, [pc, #268]	; (8001f18 <HAL_RCC_OscConfig+0x688>)
 8001e0a:	400a      	ands	r2, r1
 8001e0c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0e:	f7fe fe2d 	bl	8000a6c <HAL_GetTick>
 8001e12:	0003      	movs	r3, r0
 8001e14:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e18:	f7fe fe28 	bl	8000a6c <HAL_GetTick>
 8001e1c:	0002      	movs	r2, r0
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e0b2      	b.n	8001f90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001e2a:	4b38      	ldr	r3, [pc, #224]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001e2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e2e:	2380      	movs	r3, #128	; 0x80
 8001e30:	025b      	lsls	r3, r3, #9
 8001e32:	4013      	ands	r3, r2
 8001e34:	d1f0      	bne.n	8001e18 <HAL_RCC_OscConfig+0x588>
 8001e36:	e000      	b.n	8001e3a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001e38:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d100      	bne.n	8001e44 <HAL_RCC_OscConfig+0x5b4>
 8001e42:	e0a4      	b.n	8001f8e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e44:	4b31      	ldr	r3, [pc, #196]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	220c      	movs	r2, #12
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	d100      	bne.n	8001e52 <HAL_RCC_OscConfig+0x5c2>
 8001e50:	e078      	b.n	8001f44 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d14c      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e5a:	4b2c      	ldr	r3, [pc, #176]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	4b2b      	ldr	r3, [pc, #172]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001e60:	492e      	ldr	r1, [pc, #184]	; (8001f1c <HAL_RCC_OscConfig+0x68c>)
 8001e62:	400a      	ands	r2, r1
 8001e64:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e66:	f7fe fe01 	bl	8000a6c <HAL_GetTick>
 8001e6a:	0003      	movs	r3, r0
 8001e6c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e70:	f7fe fdfc 	bl	8000a6c <HAL_GetTick>
 8001e74:	0002      	movs	r2, r0
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e086      	b.n	8001f90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e82:	4b22      	ldr	r3, [pc, #136]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	2380      	movs	r3, #128	; 0x80
 8001e88:	049b      	lsls	r3, r3, #18
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d1f0      	bne.n	8001e70 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e8e:	4b1f      	ldr	r3, [pc, #124]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e92:	220f      	movs	r2, #15
 8001e94:	4393      	bics	r3, r2
 8001e96:	0019      	movs	r1, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e9c:	4b1b      	ldr	r3, [pc, #108]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ea2:	4b1a      	ldr	r3, [pc, #104]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	4a1e      	ldr	r2, [pc, #120]	; (8001f20 <HAL_RCC_OscConfig+0x690>)
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	0019      	movs	r1, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ebc:	4b13      	ldr	r3, [pc, #76]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001ec2:	2180      	movs	r1, #128	; 0x80
 8001ec4:	0449      	lsls	r1, r1, #17
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eca:	f7fe fdcf 	bl	8000a6c <HAL_GetTick>
 8001ece:	0003      	movs	r3, r0
 8001ed0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ed4:	f7fe fdca 	bl	8000a6c <HAL_GetTick>
 8001ed8:	0002      	movs	r2, r0
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e054      	b.n	8001f90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ee6:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	2380      	movs	r3, #128	; 0x80
 8001eec:	049b      	lsls	r3, r3, #18
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d0f0      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x644>
 8001ef2:	e04c      	b.n	8001f8e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef4:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <HAL_RCC_OscConfig+0x67c>)
 8001efa:	4908      	ldr	r1, [pc, #32]	; (8001f1c <HAL_RCC_OscConfig+0x68c>)
 8001efc:	400a      	ands	r2, r1
 8001efe:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f00:	f7fe fdb4 	bl	8000a6c <HAL_GetTick>
 8001f04:	0003      	movs	r3, r0
 8001f06:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f08:	e015      	b.n	8001f36 <HAL_RCC_OscConfig+0x6a6>
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	00001388 	.word	0x00001388
 8001f14:	efffffff 	.word	0xefffffff
 8001f18:	fffeffff 	.word	0xfffeffff
 8001f1c:	feffffff 	.word	0xfeffffff
 8001f20:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f24:	f7fe fda2 	bl	8000a6c <HAL_GetTick>
 8001f28:	0002      	movs	r2, r0
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e02c      	b.n	8001f90 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f36:	4b18      	ldr	r3, [pc, #96]	; (8001f98 <HAL_RCC_OscConfig+0x708>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	2380      	movs	r3, #128	; 0x80
 8001f3c:	049b      	lsls	r3, r3, #18
 8001f3e:	4013      	ands	r3, r2
 8001f40:	d1f0      	bne.n	8001f24 <HAL_RCC_OscConfig+0x694>
 8001f42:	e024      	b.n	8001f8e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d101      	bne.n	8001f50 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e01f      	b.n	8001f90 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001f50:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <HAL_RCC_OscConfig+0x708>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001f56:	4b10      	ldr	r3, [pc, #64]	; (8001f98 <HAL_RCC_OscConfig+0x708>)
 8001f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	23c0      	movs	r3, #192	; 0xc0
 8001f60:	025b      	lsls	r3, r3, #9
 8001f62:	401a      	ands	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d10e      	bne.n	8001f8a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	220f      	movs	r2, #15
 8001f70:	401a      	ands	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d107      	bne.n	8001f8a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	23f0      	movs	r3, #240	; 0xf0
 8001f7e:	039b      	lsls	r3, r3, #14
 8001f80:	401a      	ands	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d001      	beq.n	8001f8e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	0018      	movs	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	b008      	add	sp, #32
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40021000 	.word	0x40021000

08001f9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e0bf      	b.n	8002130 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fb0:	4b61      	ldr	r3, [pc, #388]	; (8002138 <HAL_RCC_ClockConfig+0x19c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d911      	bls.n	8001fe2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fbe:	4b5e      	ldr	r3, [pc, #376]	; (8002138 <HAL_RCC_ClockConfig+0x19c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	4393      	bics	r3, r2
 8001fc6:	0019      	movs	r1, r3
 8001fc8:	4b5b      	ldr	r3, [pc, #364]	; (8002138 <HAL_RCC_ClockConfig+0x19c>)
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd0:	4b59      	ldr	r3, [pc, #356]	; (8002138 <HAL_RCC_ClockConfig+0x19c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d001      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e0a6      	b.n	8002130 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d015      	beq.n	8002018 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2204      	movs	r2, #4
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d006      	beq.n	8002004 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ff6:	4b51      	ldr	r3, [pc, #324]	; (800213c <HAL_RCC_ClockConfig+0x1a0>)
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	4b50      	ldr	r3, [pc, #320]	; (800213c <HAL_RCC_ClockConfig+0x1a0>)
 8001ffc:	21e0      	movs	r1, #224	; 0xe0
 8001ffe:	00c9      	lsls	r1, r1, #3
 8002000:	430a      	orrs	r2, r1
 8002002:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002004:	4b4d      	ldr	r3, [pc, #308]	; (800213c <HAL_RCC_ClockConfig+0x1a0>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	22f0      	movs	r2, #240	; 0xf0
 800200a:	4393      	bics	r3, r2
 800200c:	0019      	movs	r1, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689a      	ldr	r2, [r3, #8]
 8002012:	4b4a      	ldr	r3, [pc, #296]	; (800213c <HAL_RCC_ClockConfig+0x1a0>)
 8002014:	430a      	orrs	r2, r1
 8002016:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2201      	movs	r2, #1
 800201e:	4013      	ands	r3, r2
 8002020:	d04c      	beq.n	80020bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d107      	bne.n	800203a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202a:	4b44      	ldr	r3, [pc, #272]	; (800213c <HAL_RCC_ClockConfig+0x1a0>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	2380      	movs	r3, #128	; 0x80
 8002030:	029b      	lsls	r3, r3, #10
 8002032:	4013      	ands	r3, r2
 8002034:	d120      	bne.n	8002078 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e07a      	b.n	8002130 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b02      	cmp	r3, #2
 8002040:	d107      	bne.n	8002052 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002042:	4b3e      	ldr	r3, [pc, #248]	; (800213c <HAL_RCC_ClockConfig+0x1a0>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	2380      	movs	r3, #128	; 0x80
 8002048:	049b      	lsls	r3, r3, #18
 800204a:	4013      	ands	r3, r2
 800204c:	d114      	bne.n	8002078 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e06e      	b.n	8002130 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b03      	cmp	r3, #3
 8002058:	d107      	bne.n	800206a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800205a:	4b38      	ldr	r3, [pc, #224]	; (800213c <HAL_RCC_ClockConfig+0x1a0>)
 800205c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800205e:	2380      	movs	r3, #128	; 0x80
 8002060:	025b      	lsls	r3, r3, #9
 8002062:	4013      	ands	r3, r2
 8002064:	d108      	bne.n	8002078 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e062      	b.n	8002130 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800206a:	4b34      	ldr	r3, [pc, #208]	; (800213c <HAL_RCC_ClockConfig+0x1a0>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2202      	movs	r2, #2
 8002070:	4013      	ands	r3, r2
 8002072:	d101      	bne.n	8002078 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e05b      	b.n	8002130 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002078:	4b30      	ldr	r3, [pc, #192]	; (800213c <HAL_RCC_ClockConfig+0x1a0>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2203      	movs	r2, #3
 800207e:	4393      	bics	r3, r2
 8002080:	0019      	movs	r1, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	4b2d      	ldr	r3, [pc, #180]	; (800213c <HAL_RCC_ClockConfig+0x1a0>)
 8002088:	430a      	orrs	r2, r1
 800208a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800208c:	f7fe fcee 	bl	8000a6c <HAL_GetTick>
 8002090:	0003      	movs	r3, r0
 8002092:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002094:	e009      	b.n	80020aa <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002096:	f7fe fce9 	bl	8000a6c <HAL_GetTick>
 800209a:	0002      	movs	r2, r0
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	4a27      	ldr	r2, [pc, #156]	; (8002140 <HAL_RCC_ClockConfig+0x1a4>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e042      	b.n	8002130 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020aa:	4b24      	ldr	r3, [pc, #144]	; (800213c <HAL_RCC_ClockConfig+0x1a0>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	220c      	movs	r2, #12
 80020b0:	401a      	ands	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d1ec      	bne.n	8002096 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020bc:	4b1e      	ldr	r3, [pc, #120]	; (8002138 <HAL_RCC_ClockConfig+0x19c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2201      	movs	r2, #1
 80020c2:	4013      	ands	r3, r2
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d211      	bcs.n	80020ee <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ca:	4b1b      	ldr	r3, [pc, #108]	; (8002138 <HAL_RCC_ClockConfig+0x19c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2201      	movs	r2, #1
 80020d0:	4393      	bics	r3, r2
 80020d2:	0019      	movs	r1, r3
 80020d4:	4b18      	ldr	r3, [pc, #96]	; (8002138 <HAL_RCC_ClockConfig+0x19c>)
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020dc:	4b16      	ldr	r3, [pc, #88]	; (8002138 <HAL_RCC_ClockConfig+0x19c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2201      	movs	r2, #1
 80020e2:	4013      	ands	r3, r2
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d001      	beq.n	80020ee <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e020      	b.n	8002130 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2204      	movs	r2, #4
 80020f4:	4013      	ands	r3, r2
 80020f6:	d009      	beq.n	800210c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80020f8:	4b10      	ldr	r3, [pc, #64]	; (800213c <HAL_RCC_ClockConfig+0x1a0>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	4a11      	ldr	r2, [pc, #68]	; (8002144 <HAL_RCC_ClockConfig+0x1a8>)
 80020fe:	4013      	ands	r3, r2
 8002100:	0019      	movs	r1, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	4b0d      	ldr	r3, [pc, #52]	; (800213c <HAL_RCC_ClockConfig+0x1a0>)
 8002108:	430a      	orrs	r2, r1
 800210a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800210c:	f000 f820 	bl	8002150 <HAL_RCC_GetSysClockFreq>
 8002110:	0001      	movs	r1, r0
 8002112:	4b0a      	ldr	r3, [pc, #40]	; (800213c <HAL_RCC_ClockConfig+0x1a0>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	091b      	lsrs	r3, r3, #4
 8002118:	220f      	movs	r2, #15
 800211a:	4013      	ands	r3, r2
 800211c:	4a0a      	ldr	r2, [pc, #40]	; (8002148 <HAL_RCC_ClockConfig+0x1ac>)
 800211e:	5cd3      	ldrb	r3, [r2, r3]
 8002120:	000a      	movs	r2, r1
 8002122:	40da      	lsrs	r2, r3
 8002124:	4b09      	ldr	r3, [pc, #36]	; (800214c <HAL_RCC_ClockConfig+0x1b0>)
 8002126:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002128:	2003      	movs	r0, #3
 800212a:	f7fe fc59 	bl	80009e0 <HAL_InitTick>
  
  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	0018      	movs	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	b004      	add	sp, #16
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40022000 	.word	0x40022000
 800213c:	40021000 	.word	0x40021000
 8002140:	00001388 	.word	0x00001388
 8002144:	fffff8ff 	.word	0xfffff8ff
 8002148:	08003248 	.word	0x08003248
 800214c:	20000008 	.word	0x20000008

08002150 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002150:	b590      	push	{r4, r7, lr}
 8002152:	b08f      	sub	sp, #60	; 0x3c
 8002154:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002156:	2314      	movs	r3, #20
 8002158:	18fb      	adds	r3, r7, r3
 800215a:	4a38      	ldr	r2, [pc, #224]	; (800223c <HAL_RCC_GetSysClockFreq+0xec>)
 800215c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800215e:	c313      	stmia	r3!, {r0, r1, r4}
 8002160:	6812      	ldr	r2, [r2, #0]
 8002162:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002164:	1d3b      	adds	r3, r7, #4
 8002166:	4a36      	ldr	r2, [pc, #216]	; (8002240 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002168:	ca13      	ldmia	r2!, {r0, r1, r4}
 800216a:	c313      	stmia	r3!, {r0, r1, r4}
 800216c:	6812      	ldr	r2, [r2, #0]
 800216e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002170:	2300      	movs	r3, #0
 8002172:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002174:	2300      	movs	r3, #0
 8002176:	62bb      	str	r3, [r7, #40]	; 0x28
 8002178:	2300      	movs	r3, #0
 800217a:	637b      	str	r3, [r7, #52]	; 0x34
 800217c:	2300      	movs	r3, #0
 800217e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002180:	2300      	movs	r3, #0
 8002182:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002184:	4b2f      	ldr	r3, [pc, #188]	; (8002244 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800218a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800218c:	220c      	movs	r2, #12
 800218e:	4013      	ands	r3, r2
 8002190:	2b0c      	cmp	r3, #12
 8002192:	d047      	beq.n	8002224 <HAL_RCC_GetSysClockFreq+0xd4>
 8002194:	d849      	bhi.n	800222a <HAL_RCC_GetSysClockFreq+0xda>
 8002196:	2b04      	cmp	r3, #4
 8002198:	d002      	beq.n	80021a0 <HAL_RCC_GetSysClockFreq+0x50>
 800219a:	2b08      	cmp	r3, #8
 800219c:	d003      	beq.n	80021a6 <HAL_RCC_GetSysClockFreq+0x56>
 800219e:	e044      	b.n	800222a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021a0:	4b29      	ldr	r3, [pc, #164]	; (8002248 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021a2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80021a4:	e044      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80021a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a8:	0c9b      	lsrs	r3, r3, #18
 80021aa:	220f      	movs	r2, #15
 80021ac:	4013      	ands	r3, r2
 80021ae:	2214      	movs	r2, #20
 80021b0:	18ba      	adds	r2, r7, r2
 80021b2:	5cd3      	ldrb	r3, [r2, r3]
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80021b6:	4b23      	ldr	r3, [pc, #140]	; (8002244 <HAL_RCC_GetSysClockFreq+0xf4>)
 80021b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ba:	220f      	movs	r2, #15
 80021bc:	4013      	ands	r3, r2
 80021be:	1d3a      	adds	r2, r7, #4
 80021c0:	5cd3      	ldrb	r3, [r2, r3]
 80021c2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80021c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021c6:	23c0      	movs	r3, #192	; 0xc0
 80021c8:	025b      	lsls	r3, r3, #9
 80021ca:	401a      	ands	r2, r3
 80021cc:	2380      	movs	r3, #128	; 0x80
 80021ce:	025b      	lsls	r3, r3, #9
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d109      	bne.n	80021e8 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021d6:	481c      	ldr	r0, [pc, #112]	; (8002248 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021d8:	f7fd ff96 	bl	8000108 <__udivsi3>
 80021dc:	0003      	movs	r3, r0
 80021de:	001a      	movs	r2, r3
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e2:	4353      	muls	r3, r2
 80021e4:	637b      	str	r3, [r7, #52]	; 0x34
 80021e6:	e01a      	b.n	800221e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80021e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021ea:	23c0      	movs	r3, #192	; 0xc0
 80021ec:	025b      	lsls	r3, r3, #9
 80021ee:	401a      	ands	r2, r3
 80021f0:	23c0      	movs	r3, #192	; 0xc0
 80021f2:	025b      	lsls	r3, r3, #9
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d109      	bne.n	800220c <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021fa:	4814      	ldr	r0, [pc, #80]	; (800224c <HAL_RCC_GetSysClockFreq+0xfc>)
 80021fc:	f7fd ff84 	bl	8000108 <__udivsi3>
 8002200:	0003      	movs	r3, r0
 8002202:	001a      	movs	r2, r3
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	4353      	muls	r3, r2
 8002208:	637b      	str	r3, [r7, #52]	; 0x34
 800220a:	e008      	b.n	800221e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800220c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800220e:	480e      	ldr	r0, [pc, #56]	; (8002248 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002210:	f7fd ff7a 	bl	8000108 <__udivsi3>
 8002214:	0003      	movs	r3, r0
 8002216:	001a      	movs	r2, r3
 8002218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221a:	4353      	muls	r3, r2
 800221c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800221e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002220:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002222:	e005      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002224:	4b09      	ldr	r3, [pc, #36]	; (800224c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002226:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002228:	e002      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800222a:	4b07      	ldr	r3, [pc, #28]	; (8002248 <HAL_RCC_GetSysClockFreq+0xf8>)
 800222c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800222e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002232:	0018      	movs	r0, r3
 8002234:	46bd      	mov	sp, r7
 8002236:	b00f      	add	sp, #60	; 0x3c
 8002238:	bd90      	pop	{r4, r7, pc}
 800223a:	46c0      	nop			; (mov r8, r8)
 800223c:	080024cc 	.word	0x080024cc
 8002240:	080024dc 	.word	0x080024dc
 8002244:	40021000 	.word	0x40021000
 8002248:	007a1200 	.word	0x007a1200
 800224c:	02dc6c00 	.word	0x02dc6c00

08002250 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002258:	2300      	movs	r3, #0
 800225a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	2380      	movs	r3, #128	; 0x80
 8002266:	025b      	lsls	r3, r3, #9
 8002268:	4013      	ands	r3, r2
 800226a:	d100      	bne.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800226c:	e08e      	b.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800226e:	2017      	movs	r0, #23
 8002270:	183b      	adds	r3, r7, r0
 8002272:	2200      	movs	r2, #0
 8002274:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002276:	4b6e      	ldr	r3, [pc, #440]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002278:	69da      	ldr	r2, [r3, #28]
 800227a:	2380      	movs	r3, #128	; 0x80
 800227c:	055b      	lsls	r3, r3, #21
 800227e:	4013      	ands	r3, r2
 8002280:	d110      	bne.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002282:	4b6b      	ldr	r3, [pc, #428]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002284:	69da      	ldr	r2, [r3, #28]
 8002286:	4b6a      	ldr	r3, [pc, #424]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002288:	2180      	movs	r1, #128	; 0x80
 800228a:	0549      	lsls	r1, r1, #21
 800228c:	430a      	orrs	r2, r1
 800228e:	61da      	str	r2, [r3, #28]
 8002290:	4b67      	ldr	r3, [pc, #412]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002292:	69da      	ldr	r2, [r3, #28]
 8002294:	2380      	movs	r3, #128	; 0x80
 8002296:	055b      	lsls	r3, r3, #21
 8002298:	4013      	ands	r3, r2
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800229e:	183b      	adds	r3, r7, r0
 80022a0:	2201      	movs	r2, #1
 80022a2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a4:	4b63      	ldr	r3, [pc, #396]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	2380      	movs	r3, #128	; 0x80
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	4013      	ands	r3, r2
 80022ae:	d11a      	bne.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022b0:	4b60      	ldr	r3, [pc, #384]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4b5f      	ldr	r3, [pc, #380]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80022b6:	2180      	movs	r1, #128	; 0x80
 80022b8:	0049      	lsls	r1, r1, #1
 80022ba:	430a      	orrs	r2, r1
 80022bc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022be:	f7fe fbd5 	bl	8000a6c <HAL_GetTick>
 80022c2:	0003      	movs	r3, r0
 80022c4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c6:	e008      	b.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022c8:	f7fe fbd0 	bl	8000a6c <HAL_GetTick>
 80022cc:	0002      	movs	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b64      	cmp	r3, #100	; 0x64
 80022d4:	d901      	bls.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e0a6      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022da:	4b56      	ldr	r3, [pc, #344]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	2380      	movs	r3, #128	; 0x80
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	4013      	ands	r3, r2
 80022e4:	d0f0      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022e6:	4b52      	ldr	r3, [pc, #328]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022e8:	6a1a      	ldr	r2, [r3, #32]
 80022ea:	23c0      	movs	r3, #192	; 0xc0
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4013      	ands	r3, r2
 80022f0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d034      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	23c0      	movs	r3, #192	; 0xc0
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4013      	ands	r3, r2
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	429a      	cmp	r2, r3
 8002306:	d02c      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002308:	4b49      	ldr	r3, [pc, #292]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	4a4a      	ldr	r2, [pc, #296]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800230e:	4013      	ands	r3, r2
 8002310:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002312:	4b47      	ldr	r3, [pc, #284]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002314:	6a1a      	ldr	r2, [r3, #32]
 8002316:	4b46      	ldr	r3, [pc, #280]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002318:	2180      	movs	r1, #128	; 0x80
 800231a:	0249      	lsls	r1, r1, #9
 800231c:	430a      	orrs	r2, r1
 800231e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002320:	4b43      	ldr	r3, [pc, #268]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002322:	6a1a      	ldr	r2, [r3, #32]
 8002324:	4b42      	ldr	r3, [pc, #264]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002326:	4945      	ldr	r1, [pc, #276]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002328:	400a      	ands	r2, r1
 800232a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800232c:	4b40      	ldr	r3, [pc, #256]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2201      	movs	r2, #1
 8002336:	4013      	ands	r3, r2
 8002338:	d013      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233a:	f7fe fb97 	bl	8000a6c <HAL_GetTick>
 800233e:	0003      	movs	r3, r0
 8002340:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002342:	e009      	b.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002344:	f7fe fb92 	bl	8000a6c <HAL_GetTick>
 8002348:	0002      	movs	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	4a3c      	ldr	r2, [pc, #240]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d901      	bls.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e067      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002358:	4b35      	ldr	r3, [pc, #212]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	2202      	movs	r2, #2
 800235e:	4013      	ands	r3, r2
 8002360:	d0f0      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002362:	4b33      	ldr	r3, [pc, #204]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	4a34      	ldr	r2, [pc, #208]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002368:	4013      	ands	r3, r2
 800236a:	0019      	movs	r1, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	4b2f      	ldr	r3, [pc, #188]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002372:	430a      	orrs	r2, r1
 8002374:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002376:	2317      	movs	r3, #23
 8002378:	18fb      	adds	r3, r7, r3
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d105      	bne.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002380:	4b2b      	ldr	r3, [pc, #172]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002382:	69da      	ldr	r2, [r3, #28]
 8002384:	4b2a      	ldr	r3, [pc, #168]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002386:	492f      	ldr	r1, [pc, #188]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002388:	400a      	ands	r2, r1
 800238a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2201      	movs	r2, #1
 8002392:	4013      	ands	r3, r2
 8002394:	d009      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002396:	4b26      	ldr	r3, [pc, #152]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	2203      	movs	r2, #3
 800239c:	4393      	bics	r3, r2
 800239e:	0019      	movs	r1, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	4b22      	ldr	r3, [pc, #136]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80023a6:	430a      	orrs	r2, r1
 80023a8:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2202      	movs	r2, #2
 80023b0:	4013      	ands	r3, r2
 80023b2:	d009      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023b4:	4b1e      	ldr	r3, [pc, #120]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80023b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b8:	4a23      	ldr	r2, [pc, #140]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023ba:	4013      	ands	r3, r2
 80023bc:	0019      	movs	r1, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	4b1b      	ldr	r3, [pc, #108]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80023c4:	430a      	orrs	r2, r1
 80023c6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2220      	movs	r2, #32
 80023ce:	4013      	ands	r3, r2
 80023d0:	d009      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023d2:	4b17      	ldr	r3, [pc, #92]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	2210      	movs	r2, #16
 80023d8:	4393      	bics	r3, r2
 80023da:	0019      	movs	r1, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	4b13      	ldr	r3, [pc, #76]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80023e2:	430a      	orrs	r2, r1
 80023e4:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	2380      	movs	r3, #128	; 0x80
 80023ec:	029b      	lsls	r3, r3, #10
 80023ee:	4013      	ands	r3, r2
 80023f0:	d009      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023f2:	4b0f      	ldr	r3, [pc, #60]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	2280      	movs	r2, #128	; 0x80
 80023f8:	4393      	bics	r3, r2
 80023fa:	0019      	movs	r1, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	699a      	ldr	r2, [r3, #24]
 8002400:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002402:	430a      	orrs	r2, r1
 8002404:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	2380      	movs	r3, #128	; 0x80
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	4013      	ands	r3, r2
 8002410:	d009      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002412:	4b07      	ldr	r3, [pc, #28]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	2240      	movs	r2, #64	; 0x40
 8002418:	4393      	bics	r3, r2
 800241a:	0019      	movs	r1, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	695a      	ldr	r2, [r3, #20]
 8002420:	4b03      	ldr	r3, [pc, #12]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002422:	430a      	orrs	r2, r1
 8002424:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	0018      	movs	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	b006      	add	sp, #24
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40021000 	.word	0x40021000
 8002434:	40007000 	.word	0x40007000
 8002438:	fffffcff 	.word	0xfffffcff
 800243c:	fffeffff 	.word	0xfffeffff
 8002440:	00001388 	.word	0x00001388
 8002444:	efffffff 	.word	0xefffffff
 8002448:	fffcffff 	.word	0xfffcffff

0800244c <__libc_init_array>:
 800244c:	b570      	push	{r4, r5, r6, lr}
 800244e:	2600      	movs	r6, #0
 8002450:	4d0c      	ldr	r5, [pc, #48]	; (8002484 <__libc_init_array+0x38>)
 8002452:	4c0d      	ldr	r4, [pc, #52]	; (8002488 <__libc_init_array+0x3c>)
 8002454:	1b64      	subs	r4, r4, r5
 8002456:	10a4      	asrs	r4, r4, #2
 8002458:	42a6      	cmp	r6, r4
 800245a:	d109      	bne.n	8002470 <__libc_init_array+0x24>
 800245c:	2600      	movs	r6, #0
 800245e:	f000 f821 	bl	80024a4 <_init>
 8002462:	4d0a      	ldr	r5, [pc, #40]	; (800248c <__libc_init_array+0x40>)
 8002464:	4c0a      	ldr	r4, [pc, #40]	; (8002490 <__libc_init_array+0x44>)
 8002466:	1b64      	subs	r4, r4, r5
 8002468:	10a4      	asrs	r4, r4, #2
 800246a:	42a6      	cmp	r6, r4
 800246c:	d105      	bne.n	800247a <__libc_init_array+0x2e>
 800246e:	bd70      	pop	{r4, r5, r6, pc}
 8002470:	00b3      	lsls	r3, r6, #2
 8002472:	58eb      	ldr	r3, [r5, r3]
 8002474:	4798      	blx	r3
 8002476:	3601      	adds	r6, #1
 8002478:	e7ee      	b.n	8002458 <__libc_init_array+0xc>
 800247a:	00b3      	lsls	r3, r6, #2
 800247c:	58eb      	ldr	r3, [r5, r3]
 800247e:	4798      	blx	r3
 8002480:	3601      	adds	r6, #1
 8002482:	e7f2      	b.n	800246a <__libc_init_array+0x1e>
 8002484:	08003258 	.word	0x08003258
 8002488:	08003258 	.word	0x08003258
 800248c:	08003258 	.word	0x08003258
 8002490:	0800325c 	.word	0x0800325c

08002494 <memset>:
 8002494:	0003      	movs	r3, r0
 8002496:	1882      	adds	r2, r0, r2
 8002498:	4293      	cmp	r3, r2
 800249a:	d100      	bne.n	800249e <memset+0xa>
 800249c:	4770      	bx	lr
 800249e:	7019      	strb	r1, [r3, #0]
 80024a0:	3301      	adds	r3, #1
 80024a2:	e7f9      	b.n	8002498 <memset+0x4>

080024a4 <_init>:
 80024a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024a6:	46c0      	nop			; (mov r8, r8)
 80024a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024aa:	bc08      	pop	{r3}
 80024ac:	469e      	mov	lr, r3
 80024ae:	4770      	bx	lr

080024b0 <_fini>:
 80024b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024b6:	bc08      	pop	{r3}
 80024b8:	469e      	mov	lr, r3
 80024ba:	4770      	bx	lr
