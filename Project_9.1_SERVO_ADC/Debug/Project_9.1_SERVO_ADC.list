
Project_9.1_SERVO_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040b8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08004178  08004178  00014178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004228  08004228  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004228  08004228  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004228  08004228  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004228  08004228  00014228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800422c  0800422c  0001422c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004230  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  0800423c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  0800423c  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e44  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b11  00000000  00000000  00029e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  0002b990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c0  00000000  00000000  0002c428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e9e  00000000  00000000  0002cde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c0e4  00000000  00000000  00045c86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092ebb  00000000  00000000  00051d6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e4c25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027bc  00000000  00000000  000e4c78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004160 	.word	0x08004160

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004160 	.word	0x08004160

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_f2uiz>:
 8000220:	219e      	movs	r1, #158	; 0x9e
 8000222:	b510      	push	{r4, lr}
 8000224:	05c9      	lsls	r1, r1, #23
 8000226:	1c04      	adds	r4, r0, #0
 8000228:	f000 ff32 	bl	8001090 <__aeabi_fcmpge>
 800022c:	2800      	cmp	r0, #0
 800022e:	d103      	bne.n	8000238 <__aeabi_f2uiz+0x18>
 8000230:	1c20      	adds	r0, r4, #0
 8000232:	f000 fae1 	bl	80007f8 <__aeabi_f2iz>
 8000236:	bd10      	pop	{r4, pc}
 8000238:	219e      	movs	r1, #158	; 0x9e
 800023a:	1c20      	adds	r0, r4, #0
 800023c:	05c9      	lsls	r1, r1, #23
 800023e:	f000 f92d 	bl	800049c <__aeabi_fsub>
 8000242:	f000 fad9 	bl	80007f8 <__aeabi_f2iz>
 8000246:	2380      	movs	r3, #128	; 0x80
 8000248:	061b      	lsls	r3, r3, #24
 800024a:	469c      	mov	ip, r3
 800024c:	4460      	add	r0, ip
 800024e:	e7f2      	b.n	8000236 <__aeabi_f2uiz+0x16>

08000250 <__aeabi_fmul>:
 8000250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000252:	464f      	mov	r7, r9
 8000254:	4646      	mov	r6, r8
 8000256:	46d6      	mov	lr, sl
 8000258:	0244      	lsls	r4, r0, #9
 800025a:	0045      	lsls	r5, r0, #1
 800025c:	b5c0      	push	{r6, r7, lr}
 800025e:	0a64      	lsrs	r4, r4, #9
 8000260:	1c0f      	adds	r7, r1, #0
 8000262:	0e2d      	lsrs	r5, r5, #24
 8000264:	0fc6      	lsrs	r6, r0, #31
 8000266:	2d00      	cmp	r5, #0
 8000268:	d100      	bne.n	800026c <__aeabi_fmul+0x1c>
 800026a:	e08d      	b.n	8000388 <__aeabi_fmul+0x138>
 800026c:	2dff      	cmp	r5, #255	; 0xff
 800026e:	d100      	bne.n	8000272 <__aeabi_fmul+0x22>
 8000270:	e092      	b.n	8000398 <__aeabi_fmul+0x148>
 8000272:	2300      	movs	r3, #0
 8000274:	2080      	movs	r0, #128	; 0x80
 8000276:	4699      	mov	r9, r3
 8000278:	469a      	mov	sl, r3
 800027a:	00e4      	lsls	r4, r4, #3
 800027c:	04c0      	lsls	r0, r0, #19
 800027e:	4304      	orrs	r4, r0
 8000280:	3d7f      	subs	r5, #127	; 0x7f
 8000282:	0278      	lsls	r0, r7, #9
 8000284:	0a43      	lsrs	r3, r0, #9
 8000286:	4698      	mov	r8, r3
 8000288:	007b      	lsls	r3, r7, #1
 800028a:	0e1b      	lsrs	r3, r3, #24
 800028c:	0fff      	lsrs	r7, r7, #31
 800028e:	2b00      	cmp	r3, #0
 8000290:	d100      	bne.n	8000294 <__aeabi_fmul+0x44>
 8000292:	e070      	b.n	8000376 <__aeabi_fmul+0x126>
 8000294:	2bff      	cmp	r3, #255	; 0xff
 8000296:	d100      	bne.n	800029a <__aeabi_fmul+0x4a>
 8000298:	e086      	b.n	80003a8 <__aeabi_fmul+0x158>
 800029a:	4642      	mov	r2, r8
 800029c:	00d0      	lsls	r0, r2, #3
 800029e:	2280      	movs	r2, #128	; 0x80
 80002a0:	3b7f      	subs	r3, #127	; 0x7f
 80002a2:	18ed      	adds	r5, r5, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	04d2      	lsls	r2, r2, #19
 80002a8:	4302      	orrs	r2, r0
 80002aa:	4690      	mov	r8, r2
 80002ac:	469c      	mov	ip, r3
 80002ae:	0031      	movs	r1, r6
 80002b0:	464b      	mov	r3, r9
 80002b2:	4079      	eors	r1, r7
 80002b4:	1c68      	adds	r0, r5, #1
 80002b6:	2b0f      	cmp	r3, #15
 80002b8:	d81c      	bhi.n	80002f4 <__aeabi_fmul+0xa4>
 80002ba:	4a76      	ldr	r2, [pc, #472]	; (8000494 <__aeabi_fmul+0x244>)
 80002bc:	009b      	lsls	r3, r3, #2
 80002be:	58d3      	ldr	r3, [r2, r3]
 80002c0:	469f      	mov	pc, r3
 80002c2:	0039      	movs	r1, r7
 80002c4:	4644      	mov	r4, r8
 80002c6:	46e2      	mov	sl, ip
 80002c8:	4653      	mov	r3, sl
 80002ca:	2b02      	cmp	r3, #2
 80002cc:	d00f      	beq.n	80002ee <__aeabi_fmul+0x9e>
 80002ce:	2b03      	cmp	r3, #3
 80002d0:	d100      	bne.n	80002d4 <__aeabi_fmul+0x84>
 80002d2:	e0d7      	b.n	8000484 <__aeabi_fmul+0x234>
 80002d4:	2b01      	cmp	r3, #1
 80002d6:	d137      	bne.n	8000348 <__aeabi_fmul+0xf8>
 80002d8:	2000      	movs	r0, #0
 80002da:	2400      	movs	r4, #0
 80002dc:	05c0      	lsls	r0, r0, #23
 80002de:	4320      	orrs	r0, r4
 80002e0:	07c9      	lsls	r1, r1, #31
 80002e2:	4308      	orrs	r0, r1
 80002e4:	bce0      	pop	{r5, r6, r7}
 80002e6:	46ba      	mov	sl, r7
 80002e8:	46b1      	mov	r9, r6
 80002ea:	46a8      	mov	r8, r5
 80002ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ee:	20ff      	movs	r0, #255	; 0xff
 80002f0:	2400      	movs	r4, #0
 80002f2:	e7f3      	b.n	80002dc <__aeabi_fmul+0x8c>
 80002f4:	0c26      	lsrs	r6, r4, #16
 80002f6:	0424      	lsls	r4, r4, #16
 80002f8:	0c22      	lsrs	r2, r4, #16
 80002fa:	4644      	mov	r4, r8
 80002fc:	0424      	lsls	r4, r4, #16
 80002fe:	0c24      	lsrs	r4, r4, #16
 8000300:	4643      	mov	r3, r8
 8000302:	0027      	movs	r7, r4
 8000304:	0c1b      	lsrs	r3, r3, #16
 8000306:	4357      	muls	r7, r2
 8000308:	4374      	muls	r4, r6
 800030a:	435a      	muls	r2, r3
 800030c:	435e      	muls	r6, r3
 800030e:	1912      	adds	r2, r2, r4
 8000310:	0c3b      	lsrs	r3, r7, #16
 8000312:	189b      	adds	r3, r3, r2
 8000314:	429c      	cmp	r4, r3
 8000316:	d903      	bls.n	8000320 <__aeabi_fmul+0xd0>
 8000318:	2280      	movs	r2, #128	; 0x80
 800031a:	0252      	lsls	r2, r2, #9
 800031c:	4694      	mov	ip, r2
 800031e:	4466      	add	r6, ip
 8000320:	043f      	lsls	r7, r7, #16
 8000322:	041a      	lsls	r2, r3, #16
 8000324:	0c3f      	lsrs	r7, r7, #16
 8000326:	19d2      	adds	r2, r2, r7
 8000328:	0194      	lsls	r4, r2, #6
 800032a:	1e67      	subs	r7, r4, #1
 800032c:	41bc      	sbcs	r4, r7
 800032e:	0c1b      	lsrs	r3, r3, #16
 8000330:	0e92      	lsrs	r2, r2, #26
 8000332:	199b      	adds	r3, r3, r6
 8000334:	4314      	orrs	r4, r2
 8000336:	019b      	lsls	r3, r3, #6
 8000338:	431c      	orrs	r4, r3
 800033a:	011b      	lsls	r3, r3, #4
 800033c:	d400      	bmi.n	8000340 <__aeabi_fmul+0xf0>
 800033e:	e09b      	b.n	8000478 <__aeabi_fmul+0x228>
 8000340:	2301      	movs	r3, #1
 8000342:	0862      	lsrs	r2, r4, #1
 8000344:	401c      	ands	r4, r3
 8000346:	4314      	orrs	r4, r2
 8000348:	0002      	movs	r2, r0
 800034a:	327f      	adds	r2, #127	; 0x7f
 800034c:	2a00      	cmp	r2, #0
 800034e:	dd64      	ble.n	800041a <__aeabi_fmul+0x1ca>
 8000350:	0763      	lsls	r3, r4, #29
 8000352:	d004      	beq.n	800035e <__aeabi_fmul+0x10e>
 8000354:	230f      	movs	r3, #15
 8000356:	4023      	ands	r3, r4
 8000358:	2b04      	cmp	r3, #4
 800035a:	d000      	beq.n	800035e <__aeabi_fmul+0x10e>
 800035c:	3404      	adds	r4, #4
 800035e:	0123      	lsls	r3, r4, #4
 8000360:	d503      	bpl.n	800036a <__aeabi_fmul+0x11a>
 8000362:	0002      	movs	r2, r0
 8000364:	4b4c      	ldr	r3, [pc, #304]	; (8000498 <__aeabi_fmul+0x248>)
 8000366:	3280      	adds	r2, #128	; 0x80
 8000368:	401c      	ands	r4, r3
 800036a:	2afe      	cmp	r2, #254	; 0xfe
 800036c:	dcbf      	bgt.n	80002ee <__aeabi_fmul+0x9e>
 800036e:	01a4      	lsls	r4, r4, #6
 8000370:	0a64      	lsrs	r4, r4, #9
 8000372:	b2d0      	uxtb	r0, r2
 8000374:	e7b2      	b.n	80002dc <__aeabi_fmul+0x8c>
 8000376:	4643      	mov	r3, r8
 8000378:	2b00      	cmp	r3, #0
 800037a:	d13d      	bne.n	80003f8 <__aeabi_fmul+0x1a8>
 800037c:	464a      	mov	r2, r9
 800037e:	3301      	adds	r3, #1
 8000380:	431a      	orrs	r2, r3
 8000382:	4691      	mov	r9, r2
 8000384:	469c      	mov	ip, r3
 8000386:	e792      	b.n	80002ae <__aeabi_fmul+0x5e>
 8000388:	2c00      	cmp	r4, #0
 800038a:	d129      	bne.n	80003e0 <__aeabi_fmul+0x190>
 800038c:	2304      	movs	r3, #4
 800038e:	4699      	mov	r9, r3
 8000390:	3b03      	subs	r3, #3
 8000392:	2500      	movs	r5, #0
 8000394:	469a      	mov	sl, r3
 8000396:	e774      	b.n	8000282 <__aeabi_fmul+0x32>
 8000398:	2c00      	cmp	r4, #0
 800039a:	d11b      	bne.n	80003d4 <__aeabi_fmul+0x184>
 800039c:	2308      	movs	r3, #8
 800039e:	4699      	mov	r9, r3
 80003a0:	3b06      	subs	r3, #6
 80003a2:	25ff      	movs	r5, #255	; 0xff
 80003a4:	469a      	mov	sl, r3
 80003a6:	e76c      	b.n	8000282 <__aeabi_fmul+0x32>
 80003a8:	4643      	mov	r3, r8
 80003aa:	35ff      	adds	r5, #255	; 0xff
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d10b      	bne.n	80003c8 <__aeabi_fmul+0x178>
 80003b0:	2302      	movs	r3, #2
 80003b2:	464a      	mov	r2, r9
 80003b4:	431a      	orrs	r2, r3
 80003b6:	4691      	mov	r9, r2
 80003b8:	469c      	mov	ip, r3
 80003ba:	e778      	b.n	80002ae <__aeabi_fmul+0x5e>
 80003bc:	4653      	mov	r3, sl
 80003be:	0031      	movs	r1, r6
 80003c0:	2b02      	cmp	r3, #2
 80003c2:	d000      	beq.n	80003c6 <__aeabi_fmul+0x176>
 80003c4:	e783      	b.n	80002ce <__aeabi_fmul+0x7e>
 80003c6:	e792      	b.n	80002ee <__aeabi_fmul+0x9e>
 80003c8:	2303      	movs	r3, #3
 80003ca:	464a      	mov	r2, r9
 80003cc:	431a      	orrs	r2, r3
 80003ce:	4691      	mov	r9, r2
 80003d0:	469c      	mov	ip, r3
 80003d2:	e76c      	b.n	80002ae <__aeabi_fmul+0x5e>
 80003d4:	230c      	movs	r3, #12
 80003d6:	4699      	mov	r9, r3
 80003d8:	3b09      	subs	r3, #9
 80003da:	25ff      	movs	r5, #255	; 0xff
 80003dc:	469a      	mov	sl, r3
 80003de:	e750      	b.n	8000282 <__aeabi_fmul+0x32>
 80003e0:	0020      	movs	r0, r4
 80003e2:	f000 fe5f 	bl	80010a4 <__clzsi2>
 80003e6:	2576      	movs	r5, #118	; 0x76
 80003e8:	1f43      	subs	r3, r0, #5
 80003ea:	409c      	lsls	r4, r3
 80003ec:	2300      	movs	r3, #0
 80003ee:	426d      	negs	r5, r5
 80003f0:	4699      	mov	r9, r3
 80003f2:	469a      	mov	sl, r3
 80003f4:	1a2d      	subs	r5, r5, r0
 80003f6:	e744      	b.n	8000282 <__aeabi_fmul+0x32>
 80003f8:	4640      	mov	r0, r8
 80003fa:	f000 fe53 	bl	80010a4 <__clzsi2>
 80003fe:	4642      	mov	r2, r8
 8000400:	1f43      	subs	r3, r0, #5
 8000402:	409a      	lsls	r2, r3
 8000404:	2300      	movs	r3, #0
 8000406:	1a2d      	subs	r5, r5, r0
 8000408:	4690      	mov	r8, r2
 800040a:	469c      	mov	ip, r3
 800040c:	3d76      	subs	r5, #118	; 0x76
 800040e:	e74e      	b.n	80002ae <__aeabi_fmul+0x5e>
 8000410:	2480      	movs	r4, #128	; 0x80
 8000412:	2100      	movs	r1, #0
 8000414:	20ff      	movs	r0, #255	; 0xff
 8000416:	03e4      	lsls	r4, r4, #15
 8000418:	e760      	b.n	80002dc <__aeabi_fmul+0x8c>
 800041a:	2301      	movs	r3, #1
 800041c:	1a9b      	subs	r3, r3, r2
 800041e:	2b1b      	cmp	r3, #27
 8000420:	dd00      	ble.n	8000424 <__aeabi_fmul+0x1d4>
 8000422:	e759      	b.n	80002d8 <__aeabi_fmul+0x88>
 8000424:	0022      	movs	r2, r4
 8000426:	309e      	adds	r0, #158	; 0x9e
 8000428:	40da      	lsrs	r2, r3
 800042a:	4084      	lsls	r4, r0
 800042c:	0013      	movs	r3, r2
 800042e:	1e62      	subs	r2, r4, #1
 8000430:	4194      	sbcs	r4, r2
 8000432:	431c      	orrs	r4, r3
 8000434:	0763      	lsls	r3, r4, #29
 8000436:	d004      	beq.n	8000442 <__aeabi_fmul+0x1f2>
 8000438:	230f      	movs	r3, #15
 800043a:	4023      	ands	r3, r4
 800043c:	2b04      	cmp	r3, #4
 800043e:	d000      	beq.n	8000442 <__aeabi_fmul+0x1f2>
 8000440:	3404      	adds	r4, #4
 8000442:	0163      	lsls	r3, r4, #5
 8000444:	d51a      	bpl.n	800047c <__aeabi_fmul+0x22c>
 8000446:	2001      	movs	r0, #1
 8000448:	2400      	movs	r4, #0
 800044a:	e747      	b.n	80002dc <__aeabi_fmul+0x8c>
 800044c:	2080      	movs	r0, #128	; 0x80
 800044e:	03c0      	lsls	r0, r0, #15
 8000450:	4204      	tst	r4, r0
 8000452:	d009      	beq.n	8000468 <__aeabi_fmul+0x218>
 8000454:	4643      	mov	r3, r8
 8000456:	4203      	tst	r3, r0
 8000458:	d106      	bne.n	8000468 <__aeabi_fmul+0x218>
 800045a:	4644      	mov	r4, r8
 800045c:	4304      	orrs	r4, r0
 800045e:	0264      	lsls	r4, r4, #9
 8000460:	0039      	movs	r1, r7
 8000462:	20ff      	movs	r0, #255	; 0xff
 8000464:	0a64      	lsrs	r4, r4, #9
 8000466:	e739      	b.n	80002dc <__aeabi_fmul+0x8c>
 8000468:	2080      	movs	r0, #128	; 0x80
 800046a:	03c0      	lsls	r0, r0, #15
 800046c:	4304      	orrs	r4, r0
 800046e:	0264      	lsls	r4, r4, #9
 8000470:	0031      	movs	r1, r6
 8000472:	20ff      	movs	r0, #255	; 0xff
 8000474:	0a64      	lsrs	r4, r4, #9
 8000476:	e731      	b.n	80002dc <__aeabi_fmul+0x8c>
 8000478:	0028      	movs	r0, r5
 800047a:	e765      	b.n	8000348 <__aeabi_fmul+0xf8>
 800047c:	01a4      	lsls	r4, r4, #6
 800047e:	2000      	movs	r0, #0
 8000480:	0a64      	lsrs	r4, r4, #9
 8000482:	e72b      	b.n	80002dc <__aeabi_fmul+0x8c>
 8000484:	2080      	movs	r0, #128	; 0x80
 8000486:	03c0      	lsls	r0, r0, #15
 8000488:	4304      	orrs	r4, r0
 800048a:	0264      	lsls	r4, r4, #9
 800048c:	20ff      	movs	r0, #255	; 0xff
 800048e:	0a64      	lsrs	r4, r4, #9
 8000490:	e724      	b.n	80002dc <__aeabi_fmul+0x8c>
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	08004178 	.word	0x08004178
 8000498:	f7ffffff 	.word	0xf7ffffff

0800049c <__aeabi_fsub>:
 800049c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049e:	46ce      	mov	lr, r9
 80004a0:	4647      	mov	r7, r8
 80004a2:	0243      	lsls	r3, r0, #9
 80004a4:	0a5b      	lsrs	r3, r3, #9
 80004a6:	024e      	lsls	r6, r1, #9
 80004a8:	00da      	lsls	r2, r3, #3
 80004aa:	4694      	mov	ip, r2
 80004ac:	0a72      	lsrs	r2, r6, #9
 80004ae:	4691      	mov	r9, r2
 80004b0:	0045      	lsls	r5, r0, #1
 80004b2:	004a      	lsls	r2, r1, #1
 80004b4:	b580      	push	{r7, lr}
 80004b6:	0e2d      	lsrs	r5, r5, #24
 80004b8:	001f      	movs	r7, r3
 80004ba:	0fc4      	lsrs	r4, r0, #31
 80004bc:	0e12      	lsrs	r2, r2, #24
 80004be:	0fc9      	lsrs	r1, r1, #31
 80004c0:	09b6      	lsrs	r6, r6, #6
 80004c2:	2aff      	cmp	r2, #255	; 0xff
 80004c4:	d05b      	beq.n	800057e <__aeabi_fsub+0xe2>
 80004c6:	2001      	movs	r0, #1
 80004c8:	4041      	eors	r1, r0
 80004ca:	428c      	cmp	r4, r1
 80004cc:	d039      	beq.n	8000542 <__aeabi_fsub+0xa6>
 80004ce:	1aa8      	subs	r0, r5, r2
 80004d0:	2800      	cmp	r0, #0
 80004d2:	dd5a      	ble.n	800058a <__aeabi_fsub+0xee>
 80004d4:	2a00      	cmp	r2, #0
 80004d6:	d06a      	beq.n	80005ae <__aeabi_fsub+0x112>
 80004d8:	2dff      	cmp	r5, #255	; 0xff
 80004da:	d100      	bne.n	80004de <__aeabi_fsub+0x42>
 80004dc:	e0d9      	b.n	8000692 <__aeabi_fsub+0x1f6>
 80004de:	2280      	movs	r2, #128	; 0x80
 80004e0:	04d2      	lsls	r2, r2, #19
 80004e2:	4316      	orrs	r6, r2
 80004e4:	281b      	cmp	r0, #27
 80004e6:	dc00      	bgt.n	80004ea <__aeabi_fsub+0x4e>
 80004e8:	e0e9      	b.n	80006be <__aeabi_fsub+0x222>
 80004ea:	2001      	movs	r0, #1
 80004ec:	4663      	mov	r3, ip
 80004ee:	1a18      	subs	r0, r3, r0
 80004f0:	0143      	lsls	r3, r0, #5
 80004f2:	d400      	bmi.n	80004f6 <__aeabi_fsub+0x5a>
 80004f4:	e0b4      	b.n	8000660 <__aeabi_fsub+0x1c4>
 80004f6:	0180      	lsls	r0, r0, #6
 80004f8:	0987      	lsrs	r7, r0, #6
 80004fa:	0038      	movs	r0, r7
 80004fc:	f000 fdd2 	bl	80010a4 <__clzsi2>
 8000500:	3805      	subs	r0, #5
 8000502:	4087      	lsls	r7, r0
 8000504:	4285      	cmp	r5, r0
 8000506:	dc00      	bgt.n	800050a <__aeabi_fsub+0x6e>
 8000508:	e0cc      	b.n	80006a4 <__aeabi_fsub+0x208>
 800050a:	1a2d      	subs	r5, r5, r0
 800050c:	48b5      	ldr	r0, [pc, #724]	; (80007e4 <__aeabi_fsub+0x348>)
 800050e:	4038      	ands	r0, r7
 8000510:	0743      	lsls	r3, r0, #29
 8000512:	d004      	beq.n	800051e <__aeabi_fsub+0x82>
 8000514:	230f      	movs	r3, #15
 8000516:	4003      	ands	r3, r0
 8000518:	2b04      	cmp	r3, #4
 800051a:	d000      	beq.n	800051e <__aeabi_fsub+0x82>
 800051c:	3004      	adds	r0, #4
 800051e:	0143      	lsls	r3, r0, #5
 8000520:	d400      	bmi.n	8000524 <__aeabi_fsub+0x88>
 8000522:	e0a0      	b.n	8000666 <__aeabi_fsub+0x1ca>
 8000524:	1c6a      	adds	r2, r5, #1
 8000526:	2dfe      	cmp	r5, #254	; 0xfe
 8000528:	d100      	bne.n	800052c <__aeabi_fsub+0x90>
 800052a:	e08d      	b.n	8000648 <__aeabi_fsub+0x1ac>
 800052c:	0180      	lsls	r0, r0, #6
 800052e:	0a47      	lsrs	r7, r0, #9
 8000530:	b2d2      	uxtb	r2, r2
 8000532:	05d0      	lsls	r0, r2, #23
 8000534:	4338      	orrs	r0, r7
 8000536:	07e4      	lsls	r4, r4, #31
 8000538:	4320      	orrs	r0, r4
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000542:	1aa8      	subs	r0, r5, r2
 8000544:	4680      	mov	r8, r0
 8000546:	2800      	cmp	r0, #0
 8000548:	dd45      	ble.n	80005d6 <__aeabi_fsub+0x13a>
 800054a:	2a00      	cmp	r2, #0
 800054c:	d070      	beq.n	8000630 <__aeabi_fsub+0x194>
 800054e:	2dff      	cmp	r5, #255	; 0xff
 8000550:	d100      	bne.n	8000554 <__aeabi_fsub+0xb8>
 8000552:	e09e      	b.n	8000692 <__aeabi_fsub+0x1f6>
 8000554:	2380      	movs	r3, #128	; 0x80
 8000556:	04db      	lsls	r3, r3, #19
 8000558:	431e      	orrs	r6, r3
 800055a:	4643      	mov	r3, r8
 800055c:	2b1b      	cmp	r3, #27
 800055e:	dc00      	bgt.n	8000562 <__aeabi_fsub+0xc6>
 8000560:	e0d2      	b.n	8000708 <__aeabi_fsub+0x26c>
 8000562:	2001      	movs	r0, #1
 8000564:	4460      	add	r0, ip
 8000566:	0143      	lsls	r3, r0, #5
 8000568:	d57a      	bpl.n	8000660 <__aeabi_fsub+0x1c4>
 800056a:	3501      	adds	r5, #1
 800056c:	2dff      	cmp	r5, #255	; 0xff
 800056e:	d06b      	beq.n	8000648 <__aeabi_fsub+0x1ac>
 8000570:	2301      	movs	r3, #1
 8000572:	4a9d      	ldr	r2, [pc, #628]	; (80007e8 <__aeabi_fsub+0x34c>)
 8000574:	4003      	ands	r3, r0
 8000576:	0840      	lsrs	r0, r0, #1
 8000578:	4010      	ands	r0, r2
 800057a:	4318      	orrs	r0, r3
 800057c:	e7c8      	b.n	8000510 <__aeabi_fsub+0x74>
 800057e:	2e00      	cmp	r6, #0
 8000580:	d020      	beq.n	80005c4 <__aeabi_fsub+0x128>
 8000582:	428c      	cmp	r4, r1
 8000584:	d023      	beq.n	80005ce <__aeabi_fsub+0x132>
 8000586:	0028      	movs	r0, r5
 8000588:	38ff      	subs	r0, #255	; 0xff
 800058a:	2800      	cmp	r0, #0
 800058c:	d039      	beq.n	8000602 <__aeabi_fsub+0x166>
 800058e:	1b57      	subs	r7, r2, r5
 8000590:	2d00      	cmp	r5, #0
 8000592:	d000      	beq.n	8000596 <__aeabi_fsub+0xfa>
 8000594:	e09d      	b.n	80006d2 <__aeabi_fsub+0x236>
 8000596:	4663      	mov	r3, ip
 8000598:	2b00      	cmp	r3, #0
 800059a:	d100      	bne.n	800059e <__aeabi_fsub+0x102>
 800059c:	e0db      	b.n	8000756 <__aeabi_fsub+0x2ba>
 800059e:	1e7b      	subs	r3, r7, #1
 80005a0:	2f01      	cmp	r7, #1
 80005a2:	d100      	bne.n	80005a6 <__aeabi_fsub+0x10a>
 80005a4:	e10d      	b.n	80007c2 <__aeabi_fsub+0x326>
 80005a6:	2fff      	cmp	r7, #255	; 0xff
 80005a8:	d071      	beq.n	800068e <__aeabi_fsub+0x1f2>
 80005aa:	001f      	movs	r7, r3
 80005ac:	e098      	b.n	80006e0 <__aeabi_fsub+0x244>
 80005ae:	2e00      	cmp	r6, #0
 80005b0:	d100      	bne.n	80005b4 <__aeabi_fsub+0x118>
 80005b2:	e0a7      	b.n	8000704 <__aeabi_fsub+0x268>
 80005b4:	1e42      	subs	r2, r0, #1
 80005b6:	2801      	cmp	r0, #1
 80005b8:	d100      	bne.n	80005bc <__aeabi_fsub+0x120>
 80005ba:	e0e6      	b.n	800078a <__aeabi_fsub+0x2ee>
 80005bc:	28ff      	cmp	r0, #255	; 0xff
 80005be:	d068      	beq.n	8000692 <__aeabi_fsub+0x1f6>
 80005c0:	0010      	movs	r0, r2
 80005c2:	e78f      	b.n	80004e4 <__aeabi_fsub+0x48>
 80005c4:	2001      	movs	r0, #1
 80005c6:	4041      	eors	r1, r0
 80005c8:	42a1      	cmp	r1, r4
 80005ca:	d000      	beq.n	80005ce <__aeabi_fsub+0x132>
 80005cc:	e77f      	b.n	80004ce <__aeabi_fsub+0x32>
 80005ce:	20ff      	movs	r0, #255	; 0xff
 80005d0:	4240      	negs	r0, r0
 80005d2:	4680      	mov	r8, r0
 80005d4:	44a8      	add	r8, r5
 80005d6:	4640      	mov	r0, r8
 80005d8:	2800      	cmp	r0, #0
 80005da:	d038      	beq.n	800064e <__aeabi_fsub+0x1b2>
 80005dc:	1b51      	subs	r1, r2, r5
 80005de:	2d00      	cmp	r5, #0
 80005e0:	d100      	bne.n	80005e4 <__aeabi_fsub+0x148>
 80005e2:	e0ae      	b.n	8000742 <__aeabi_fsub+0x2a6>
 80005e4:	2aff      	cmp	r2, #255	; 0xff
 80005e6:	d100      	bne.n	80005ea <__aeabi_fsub+0x14e>
 80005e8:	e0df      	b.n	80007aa <__aeabi_fsub+0x30e>
 80005ea:	2380      	movs	r3, #128	; 0x80
 80005ec:	4660      	mov	r0, ip
 80005ee:	04db      	lsls	r3, r3, #19
 80005f0:	4318      	orrs	r0, r3
 80005f2:	4684      	mov	ip, r0
 80005f4:	291b      	cmp	r1, #27
 80005f6:	dc00      	bgt.n	80005fa <__aeabi_fsub+0x15e>
 80005f8:	e0d9      	b.n	80007ae <__aeabi_fsub+0x312>
 80005fa:	2001      	movs	r0, #1
 80005fc:	0015      	movs	r5, r2
 80005fe:	1980      	adds	r0, r0, r6
 8000600:	e7b1      	b.n	8000566 <__aeabi_fsub+0xca>
 8000602:	20fe      	movs	r0, #254	; 0xfe
 8000604:	1c6a      	adds	r2, r5, #1
 8000606:	4210      	tst	r0, r2
 8000608:	d171      	bne.n	80006ee <__aeabi_fsub+0x252>
 800060a:	2d00      	cmp	r5, #0
 800060c:	d000      	beq.n	8000610 <__aeabi_fsub+0x174>
 800060e:	e0a6      	b.n	800075e <__aeabi_fsub+0x2c2>
 8000610:	4663      	mov	r3, ip
 8000612:	2b00      	cmp	r3, #0
 8000614:	d100      	bne.n	8000618 <__aeabi_fsub+0x17c>
 8000616:	e0d9      	b.n	80007cc <__aeabi_fsub+0x330>
 8000618:	2200      	movs	r2, #0
 800061a:	2e00      	cmp	r6, #0
 800061c:	d100      	bne.n	8000620 <__aeabi_fsub+0x184>
 800061e:	e788      	b.n	8000532 <__aeabi_fsub+0x96>
 8000620:	1b98      	subs	r0, r3, r6
 8000622:	0143      	lsls	r3, r0, #5
 8000624:	d400      	bmi.n	8000628 <__aeabi_fsub+0x18c>
 8000626:	e0e1      	b.n	80007ec <__aeabi_fsub+0x350>
 8000628:	4663      	mov	r3, ip
 800062a:	000c      	movs	r4, r1
 800062c:	1af0      	subs	r0, r6, r3
 800062e:	e76f      	b.n	8000510 <__aeabi_fsub+0x74>
 8000630:	2e00      	cmp	r6, #0
 8000632:	d100      	bne.n	8000636 <__aeabi_fsub+0x19a>
 8000634:	e0b7      	b.n	80007a6 <__aeabi_fsub+0x30a>
 8000636:	0002      	movs	r2, r0
 8000638:	3a01      	subs	r2, #1
 800063a:	2801      	cmp	r0, #1
 800063c:	d100      	bne.n	8000640 <__aeabi_fsub+0x1a4>
 800063e:	e09c      	b.n	800077a <__aeabi_fsub+0x2de>
 8000640:	28ff      	cmp	r0, #255	; 0xff
 8000642:	d026      	beq.n	8000692 <__aeabi_fsub+0x1f6>
 8000644:	4690      	mov	r8, r2
 8000646:	e788      	b.n	800055a <__aeabi_fsub+0xbe>
 8000648:	22ff      	movs	r2, #255	; 0xff
 800064a:	2700      	movs	r7, #0
 800064c:	e771      	b.n	8000532 <__aeabi_fsub+0x96>
 800064e:	20fe      	movs	r0, #254	; 0xfe
 8000650:	1c6a      	adds	r2, r5, #1
 8000652:	4210      	tst	r0, r2
 8000654:	d064      	beq.n	8000720 <__aeabi_fsub+0x284>
 8000656:	2aff      	cmp	r2, #255	; 0xff
 8000658:	d0f6      	beq.n	8000648 <__aeabi_fsub+0x1ac>
 800065a:	0015      	movs	r5, r2
 800065c:	4466      	add	r6, ip
 800065e:	0870      	lsrs	r0, r6, #1
 8000660:	0743      	lsls	r3, r0, #29
 8000662:	d000      	beq.n	8000666 <__aeabi_fsub+0x1ca>
 8000664:	e756      	b.n	8000514 <__aeabi_fsub+0x78>
 8000666:	08c3      	lsrs	r3, r0, #3
 8000668:	2dff      	cmp	r5, #255	; 0xff
 800066a:	d012      	beq.n	8000692 <__aeabi_fsub+0x1f6>
 800066c:	025b      	lsls	r3, r3, #9
 800066e:	0a5f      	lsrs	r7, r3, #9
 8000670:	b2ea      	uxtb	r2, r5
 8000672:	e75e      	b.n	8000532 <__aeabi_fsub+0x96>
 8000674:	4662      	mov	r2, ip
 8000676:	2a00      	cmp	r2, #0
 8000678:	d100      	bne.n	800067c <__aeabi_fsub+0x1e0>
 800067a:	e096      	b.n	80007aa <__aeabi_fsub+0x30e>
 800067c:	2e00      	cmp	r6, #0
 800067e:	d008      	beq.n	8000692 <__aeabi_fsub+0x1f6>
 8000680:	2280      	movs	r2, #128	; 0x80
 8000682:	03d2      	lsls	r2, r2, #15
 8000684:	4213      	tst	r3, r2
 8000686:	d004      	beq.n	8000692 <__aeabi_fsub+0x1f6>
 8000688:	4648      	mov	r0, r9
 800068a:	4210      	tst	r0, r2
 800068c:	d101      	bne.n	8000692 <__aeabi_fsub+0x1f6>
 800068e:	000c      	movs	r4, r1
 8000690:	464b      	mov	r3, r9
 8000692:	2b00      	cmp	r3, #0
 8000694:	d0d8      	beq.n	8000648 <__aeabi_fsub+0x1ac>
 8000696:	2780      	movs	r7, #128	; 0x80
 8000698:	03ff      	lsls	r7, r7, #15
 800069a:	431f      	orrs	r7, r3
 800069c:	027f      	lsls	r7, r7, #9
 800069e:	22ff      	movs	r2, #255	; 0xff
 80006a0:	0a7f      	lsrs	r7, r7, #9
 80006a2:	e746      	b.n	8000532 <__aeabi_fsub+0x96>
 80006a4:	2320      	movs	r3, #32
 80006a6:	003a      	movs	r2, r7
 80006a8:	1b45      	subs	r5, r0, r5
 80006aa:	0038      	movs	r0, r7
 80006ac:	3501      	adds	r5, #1
 80006ae:	40ea      	lsrs	r2, r5
 80006b0:	1b5d      	subs	r5, r3, r5
 80006b2:	40a8      	lsls	r0, r5
 80006b4:	1e43      	subs	r3, r0, #1
 80006b6:	4198      	sbcs	r0, r3
 80006b8:	2500      	movs	r5, #0
 80006ba:	4310      	orrs	r0, r2
 80006bc:	e728      	b.n	8000510 <__aeabi_fsub+0x74>
 80006be:	2320      	movs	r3, #32
 80006c0:	1a1b      	subs	r3, r3, r0
 80006c2:	0032      	movs	r2, r6
 80006c4:	409e      	lsls	r6, r3
 80006c6:	40c2      	lsrs	r2, r0
 80006c8:	0030      	movs	r0, r6
 80006ca:	1e43      	subs	r3, r0, #1
 80006cc:	4198      	sbcs	r0, r3
 80006ce:	4310      	orrs	r0, r2
 80006d0:	e70c      	b.n	80004ec <__aeabi_fsub+0x50>
 80006d2:	2aff      	cmp	r2, #255	; 0xff
 80006d4:	d0db      	beq.n	800068e <__aeabi_fsub+0x1f2>
 80006d6:	2380      	movs	r3, #128	; 0x80
 80006d8:	4660      	mov	r0, ip
 80006da:	04db      	lsls	r3, r3, #19
 80006dc:	4318      	orrs	r0, r3
 80006de:	4684      	mov	ip, r0
 80006e0:	2f1b      	cmp	r7, #27
 80006e2:	dd56      	ble.n	8000792 <__aeabi_fsub+0x2f6>
 80006e4:	2001      	movs	r0, #1
 80006e6:	000c      	movs	r4, r1
 80006e8:	0015      	movs	r5, r2
 80006ea:	1a30      	subs	r0, r6, r0
 80006ec:	e700      	b.n	80004f0 <__aeabi_fsub+0x54>
 80006ee:	4663      	mov	r3, ip
 80006f0:	1b9f      	subs	r7, r3, r6
 80006f2:	017b      	lsls	r3, r7, #5
 80006f4:	d43d      	bmi.n	8000772 <__aeabi_fsub+0x2d6>
 80006f6:	2f00      	cmp	r7, #0
 80006f8:	d000      	beq.n	80006fc <__aeabi_fsub+0x260>
 80006fa:	e6fe      	b.n	80004fa <__aeabi_fsub+0x5e>
 80006fc:	2400      	movs	r4, #0
 80006fe:	2200      	movs	r2, #0
 8000700:	2700      	movs	r7, #0
 8000702:	e716      	b.n	8000532 <__aeabi_fsub+0x96>
 8000704:	0005      	movs	r5, r0
 8000706:	e7af      	b.n	8000668 <__aeabi_fsub+0x1cc>
 8000708:	0032      	movs	r2, r6
 800070a:	4643      	mov	r3, r8
 800070c:	4641      	mov	r1, r8
 800070e:	40da      	lsrs	r2, r3
 8000710:	2320      	movs	r3, #32
 8000712:	1a5b      	subs	r3, r3, r1
 8000714:	409e      	lsls	r6, r3
 8000716:	0030      	movs	r0, r6
 8000718:	1e43      	subs	r3, r0, #1
 800071a:	4198      	sbcs	r0, r3
 800071c:	4310      	orrs	r0, r2
 800071e:	e721      	b.n	8000564 <__aeabi_fsub+0xc8>
 8000720:	2d00      	cmp	r5, #0
 8000722:	d1a7      	bne.n	8000674 <__aeabi_fsub+0x1d8>
 8000724:	4663      	mov	r3, ip
 8000726:	2b00      	cmp	r3, #0
 8000728:	d059      	beq.n	80007de <__aeabi_fsub+0x342>
 800072a:	2200      	movs	r2, #0
 800072c:	2e00      	cmp	r6, #0
 800072e:	d100      	bne.n	8000732 <__aeabi_fsub+0x296>
 8000730:	e6ff      	b.n	8000532 <__aeabi_fsub+0x96>
 8000732:	0030      	movs	r0, r6
 8000734:	4460      	add	r0, ip
 8000736:	0143      	lsls	r3, r0, #5
 8000738:	d592      	bpl.n	8000660 <__aeabi_fsub+0x1c4>
 800073a:	4b2a      	ldr	r3, [pc, #168]	; (80007e4 <__aeabi_fsub+0x348>)
 800073c:	3501      	adds	r5, #1
 800073e:	4018      	ands	r0, r3
 8000740:	e78e      	b.n	8000660 <__aeabi_fsub+0x1c4>
 8000742:	4663      	mov	r3, ip
 8000744:	2b00      	cmp	r3, #0
 8000746:	d047      	beq.n	80007d8 <__aeabi_fsub+0x33c>
 8000748:	1e4b      	subs	r3, r1, #1
 800074a:	2901      	cmp	r1, #1
 800074c:	d015      	beq.n	800077a <__aeabi_fsub+0x2de>
 800074e:	29ff      	cmp	r1, #255	; 0xff
 8000750:	d02b      	beq.n	80007aa <__aeabi_fsub+0x30e>
 8000752:	0019      	movs	r1, r3
 8000754:	e74e      	b.n	80005f4 <__aeabi_fsub+0x158>
 8000756:	000c      	movs	r4, r1
 8000758:	464b      	mov	r3, r9
 800075a:	003d      	movs	r5, r7
 800075c:	e784      	b.n	8000668 <__aeabi_fsub+0x1cc>
 800075e:	4662      	mov	r2, ip
 8000760:	2a00      	cmp	r2, #0
 8000762:	d18b      	bne.n	800067c <__aeabi_fsub+0x1e0>
 8000764:	2e00      	cmp	r6, #0
 8000766:	d192      	bne.n	800068e <__aeabi_fsub+0x1f2>
 8000768:	2780      	movs	r7, #128	; 0x80
 800076a:	2400      	movs	r4, #0
 800076c:	22ff      	movs	r2, #255	; 0xff
 800076e:	03ff      	lsls	r7, r7, #15
 8000770:	e6df      	b.n	8000532 <__aeabi_fsub+0x96>
 8000772:	4663      	mov	r3, ip
 8000774:	000c      	movs	r4, r1
 8000776:	1af7      	subs	r7, r6, r3
 8000778:	e6bf      	b.n	80004fa <__aeabi_fsub+0x5e>
 800077a:	0030      	movs	r0, r6
 800077c:	4460      	add	r0, ip
 800077e:	2501      	movs	r5, #1
 8000780:	0143      	lsls	r3, r0, #5
 8000782:	d400      	bmi.n	8000786 <__aeabi_fsub+0x2ea>
 8000784:	e76c      	b.n	8000660 <__aeabi_fsub+0x1c4>
 8000786:	2502      	movs	r5, #2
 8000788:	e6f2      	b.n	8000570 <__aeabi_fsub+0xd4>
 800078a:	4663      	mov	r3, ip
 800078c:	2501      	movs	r5, #1
 800078e:	1b98      	subs	r0, r3, r6
 8000790:	e6ae      	b.n	80004f0 <__aeabi_fsub+0x54>
 8000792:	2320      	movs	r3, #32
 8000794:	4664      	mov	r4, ip
 8000796:	4660      	mov	r0, ip
 8000798:	40fc      	lsrs	r4, r7
 800079a:	1bdf      	subs	r7, r3, r7
 800079c:	40b8      	lsls	r0, r7
 800079e:	1e43      	subs	r3, r0, #1
 80007a0:	4198      	sbcs	r0, r3
 80007a2:	4320      	orrs	r0, r4
 80007a4:	e79f      	b.n	80006e6 <__aeabi_fsub+0x24a>
 80007a6:	0005      	movs	r5, r0
 80007a8:	e75e      	b.n	8000668 <__aeabi_fsub+0x1cc>
 80007aa:	464b      	mov	r3, r9
 80007ac:	e771      	b.n	8000692 <__aeabi_fsub+0x1f6>
 80007ae:	2320      	movs	r3, #32
 80007b0:	4665      	mov	r5, ip
 80007b2:	4660      	mov	r0, ip
 80007b4:	40cd      	lsrs	r5, r1
 80007b6:	1a59      	subs	r1, r3, r1
 80007b8:	4088      	lsls	r0, r1
 80007ba:	1e43      	subs	r3, r0, #1
 80007bc:	4198      	sbcs	r0, r3
 80007be:	4328      	orrs	r0, r5
 80007c0:	e71c      	b.n	80005fc <__aeabi_fsub+0x160>
 80007c2:	4663      	mov	r3, ip
 80007c4:	000c      	movs	r4, r1
 80007c6:	2501      	movs	r5, #1
 80007c8:	1af0      	subs	r0, r6, r3
 80007ca:	e691      	b.n	80004f0 <__aeabi_fsub+0x54>
 80007cc:	2e00      	cmp	r6, #0
 80007ce:	d095      	beq.n	80006fc <__aeabi_fsub+0x260>
 80007d0:	000c      	movs	r4, r1
 80007d2:	464f      	mov	r7, r9
 80007d4:	2200      	movs	r2, #0
 80007d6:	e6ac      	b.n	8000532 <__aeabi_fsub+0x96>
 80007d8:	464b      	mov	r3, r9
 80007da:	000d      	movs	r5, r1
 80007dc:	e744      	b.n	8000668 <__aeabi_fsub+0x1cc>
 80007de:	464f      	mov	r7, r9
 80007e0:	2200      	movs	r2, #0
 80007e2:	e6a6      	b.n	8000532 <__aeabi_fsub+0x96>
 80007e4:	fbffffff 	.word	0xfbffffff
 80007e8:	7dffffff 	.word	0x7dffffff
 80007ec:	2800      	cmp	r0, #0
 80007ee:	d000      	beq.n	80007f2 <__aeabi_fsub+0x356>
 80007f0:	e736      	b.n	8000660 <__aeabi_fsub+0x1c4>
 80007f2:	2400      	movs	r4, #0
 80007f4:	2700      	movs	r7, #0
 80007f6:	e69c      	b.n	8000532 <__aeabi_fsub+0x96>

080007f8 <__aeabi_f2iz>:
 80007f8:	0241      	lsls	r1, r0, #9
 80007fa:	0042      	lsls	r2, r0, #1
 80007fc:	0fc3      	lsrs	r3, r0, #31
 80007fe:	0a49      	lsrs	r1, r1, #9
 8000800:	2000      	movs	r0, #0
 8000802:	0e12      	lsrs	r2, r2, #24
 8000804:	2a7e      	cmp	r2, #126	; 0x7e
 8000806:	dd03      	ble.n	8000810 <__aeabi_f2iz+0x18>
 8000808:	2a9d      	cmp	r2, #157	; 0x9d
 800080a:	dd02      	ble.n	8000812 <__aeabi_f2iz+0x1a>
 800080c:	4a09      	ldr	r2, [pc, #36]	; (8000834 <__aeabi_f2iz+0x3c>)
 800080e:	1898      	adds	r0, r3, r2
 8000810:	4770      	bx	lr
 8000812:	2080      	movs	r0, #128	; 0x80
 8000814:	0400      	lsls	r0, r0, #16
 8000816:	4301      	orrs	r1, r0
 8000818:	2a95      	cmp	r2, #149	; 0x95
 800081a:	dc07      	bgt.n	800082c <__aeabi_f2iz+0x34>
 800081c:	2096      	movs	r0, #150	; 0x96
 800081e:	1a82      	subs	r2, r0, r2
 8000820:	40d1      	lsrs	r1, r2
 8000822:	4248      	negs	r0, r1
 8000824:	2b00      	cmp	r3, #0
 8000826:	d1f3      	bne.n	8000810 <__aeabi_f2iz+0x18>
 8000828:	0008      	movs	r0, r1
 800082a:	e7f1      	b.n	8000810 <__aeabi_f2iz+0x18>
 800082c:	3a96      	subs	r2, #150	; 0x96
 800082e:	4091      	lsls	r1, r2
 8000830:	e7f7      	b.n	8000822 <__aeabi_f2iz+0x2a>
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	7fffffff 	.word	0x7fffffff

08000838 <__aeabi_i2f>:
 8000838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800083a:	2800      	cmp	r0, #0
 800083c:	d013      	beq.n	8000866 <__aeabi_i2f+0x2e>
 800083e:	17c3      	asrs	r3, r0, #31
 8000840:	18c6      	adds	r6, r0, r3
 8000842:	405e      	eors	r6, r3
 8000844:	0fc4      	lsrs	r4, r0, #31
 8000846:	0030      	movs	r0, r6
 8000848:	f000 fc2c 	bl	80010a4 <__clzsi2>
 800084c:	239e      	movs	r3, #158	; 0x9e
 800084e:	0005      	movs	r5, r0
 8000850:	1a1b      	subs	r3, r3, r0
 8000852:	2b96      	cmp	r3, #150	; 0x96
 8000854:	dc0f      	bgt.n	8000876 <__aeabi_i2f+0x3e>
 8000856:	2808      	cmp	r0, #8
 8000858:	dd01      	ble.n	800085e <__aeabi_i2f+0x26>
 800085a:	3d08      	subs	r5, #8
 800085c:	40ae      	lsls	r6, r5
 800085e:	0276      	lsls	r6, r6, #9
 8000860:	0a76      	lsrs	r6, r6, #9
 8000862:	b2d8      	uxtb	r0, r3
 8000864:	e002      	b.n	800086c <__aeabi_i2f+0x34>
 8000866:	2400      	movs	r4, #0
 8000868:	2000      	movs	r0, #0
 800086a:	2600      	movs	r6, #0
 800086c:	05c0      	lsls	r0, r0, #23
 800086e:	4330      	orrs	r0, r6
 8000870:	07e4      	lsls	r4, r4, #31
 8000872:	4320      	orrs	r0, r4
 8000874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000876:	2b99      	cmp	r3, #153	; 0x99
 8000878:	dd0c      	ble.n	8000894 <__aeabi_i2f+0x5c>
 800087a:	2205      	movs	r2, #5
 800087c:	0031      	movs	r1, r6
 800087e:	1a12      	subs	r2, r2, r0
 8000880:	40d1      	lsrs	r1, r2
 8000882:	000a      	movs	r2, r1
 8000884:	0001      	movs	r1, r0
 8000886:	0030      	movs	r0, r6
 8000888:	311b      	adds	r1, #27
 800088a:	4088      	lsls	r0, r1
 800088c:	1e41      	subs	r1, r0, #1
 800088e:	4188      	sbcs	r0, r1
 8000890:	4302      	orrs	r2, r0
 8000892:	0016      	movs	r6, r2
 8000894:	2d05      	cmp	r5, #5
 8000896:	dc12      	bgt.n	80008be <__aeabi_i2f+0x86>
 8000898:	0031      	movs	r1, r6
 800089a:	4f0d      	ldr	r7, [pc, #52]	; (80008d0 <__aeabi_i2f+0x98>)
 800089c:	4039      	ands	r1, r7
 800089e:	0772      	lsls	r2, r6, #29
 80008a0:	d009      	beq.n	80008b6 <__aeabi_i2f+0x7e>
 80008a2:	200f      	movs	r0, #15
 80008a4:	4030      	ands	r0, r6
 80008a6:	2804      	cmp	r0, #4
 80008a8:	d005      	beq.n	80008b6 <__aeabi_i2f+0x7e>
 80008aa:	3104      	adds	r1, #4
 80008ac:	014a      	lsls	r2, r1, #5
 80008ae:	d502      	bpl.n	80008b6 <__aeabi_i2f+0x7e>
 80008b0:	239f      	movs	r3, #159	; 0x9f
 80008b2:	4039      	ands	r1, r7
 80008b4:	1b5b      	subs	r3, r3, r5
 80008b6:	0189      	lsls	r1, r1, #6
 80008b8:	0a4e      	lsrs	r6, r1, #9
 80008ba:	b2d8      	uxtb	r0, r3
 80008bc:	e7d6      	b.n	800086c <__aeabi_i2f+0x34>
 80008be:	1f6a      	subs	r2, r5, #5
 80008c0:	4096      	lsls	r6, r2
 80008c2:	0031      	movs	r1, r6
 80008c4:	4f02      	ldr	r7, [pc, #8]	; (80008d0 <__aeabi_i2f+0x98>)
 80008c6:	4039      	ands	r1, r7
 80008c8:	0772      	lsls	r2, r6, #29
 80008ca:	d0f4      	beq.n	80008b6 <__aeabi_i2f+0x7e>
 80008cc:	e7e9      	b.n	80008a2 <__aeabi_i2f+0x6a>
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	fbffffff 	.word	0xfbffffff

080008d4 <__aeabi_ddiv>:
 80008d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008d6:	4657      	mov	r7, sl
 80008d8:	464e      	mov	r6, r9
 80008da:	4645      	mov	r5, r8
 80008dc:	46de      	mov	lr, fp
 80008de:	b5e0      	push	{r5, r6, r7, lr}
 80008e0:	4681      	mov	r9, r0
 80008e2:	0005      	movs	r5, r0
 80008e4:	030c      	lsls	r4, r1, #12
 80008e6:	0048      	lsls	r0, r1, #1
 80008e8:	4692      	mov	sl, r2
 80008ea:	001f      	movs	r7, r3
 80008ec:	b085      	sub	sp, #20
 80008ee:	0b24      	lsrs	r4, r4, #12
 80008f0:	0d40      	lsrs	r0, r0, #21
 80008f2:	0fce      	lsrs	r6, r1, #31
 80008f4:	2800      	cmp	r0, #0
 80008f6:	d100      	bne.n	80008fa <__aeabi_ddiv+0x26>
 80008f8:	e156      	b.n	8000ba8 <__aeabi_ddiv+0x2d4>
 80008fa:	4bd4      	ldr	r3, [pc, #848]	; (8000c4c <__aeabi_ddiv+0x378>)
 80008fc:	4298      	cmp	r0, r3
 80008fe:	d100      	bne.n	8000902 <__aeabi_ddiv+0x2e>
 8000900:	e172      	b.n	8000be8 <__aeabi_ddiv+0x314>
 8000902:	0f6b      	lsrs	r3, r5, #29
 8000904:	00e4      	lsls	r4, r4, #3
 8000906:	431c      	orrs	r4, r3
 8000908:	2380      	movs	r3, #128	; 0x80
 800090a:	041b      	lsls	r3, r3, #16
 800090c:	4323      	orrs	r3, r4
 800090e:	4698      	mov	r8, r3
 8000910:	4bcf      	ldr	r3, [pc, #828]	; (8000c50 <__aeabi_ddiv+0x37c>)
 8000912:	00ed      	lsls	r5, r5, #3
 8000914:	469b      	mov	fp, r3
 8000916:	2300      	movs	r3, #0
 8000918:	4699      	mov	r9, r3
 800091a:	4483      	add	fp, r0
 800091c:	9300      	str	r3, [sp, #0]
 800091e:	033c      	lsls	r4, r7, #12
 8000920:	007b      	lsls	r3, r7, #1
 8000922:	4650      	mov	r0, sl
 8000924:	0b24      	lsrs	r4, r4, #12
 8000926:	0d5b      	lsrs	r3, r3, #21
 8000928:	0fff      	lsrs	r7, r7, #31
 800092a:	2b00      	cmp	r3, #0
 800092c:	d100      	bne.n	8000930 <__aeabi_ddiv+0x5c>
 800092e:	e11f      	b.n	8000b70 <__aeabi_ddiv+0x29c>
 8000930:	4ac6      	ldr	r2, [pc, #792]	; (8000c4c <__aeabi_ddiv+0x378>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d100      	bne.n	8000938 <__aeabi_ddiv+0x64>
 8000936:	e162      	b.n	8000bfe <__aeabi_ddiv+0x32a>
 8000938:	49c5      	ldr	r1, [pc, #788]	; (8000c50 <__aeabi_ddiv+0x37c>)
 800093a:	0f42      	lsrs	r2, r0, #29
 800093c:	468c      	mov	ip, r1
 800093e:	00e4      	lsls	r4, r4, #3
 8000940:	4659      	mov	r1, fp
 8000942:	4314      	orrs	r4, r2
 8000944:	2280      	movs	r2, #128	; 0x80
 8000946:	4463      	add	r3, ip
 8000948:	0412      	lsls	r2, r2, #16
 800094a:	1acb      	subs	r3, r1, r3
 800094c:	4314      	orrs	r4, r2
 800094e:	469b      	mov	fp, r3
 8000950:	00c2      	lsls	r2, r0, #3
 8000952:	2000      	movs	r0, #0
 8000954:	0033      	movs	r3, r6
 8000956:	407b      	eors	r3, r7
 8000958:	469a      	mov	sl, r3
 800095a:	464b      	mov	r3, r9
 800095c:	2b0f      	cmp	r3, #15
 800095e:	d827      	bhi.n	80009b0 <__aeabi_ddiv+0xdc>
 8000960:	49bc      	ldr	r1, [pc, #752]	; (8000c54 <__aeabi_ddiv+0x380>)
 8000962:	009b      	lsls	r3, r3, #2
 8000964:	58cb      	ldr	r3, [r1, r3]
 8000966:	469f      	mov	pc, r3
 8000968:	46b2      	mov	sl, r6
 800096a:	9b00      	ldr	r3, [sp, #0]
 800096c:	2b02      	cmp	r3, #2
 800096e:	d016      	beq.n	800099e <__aeabi_ddiv+0xca>
 8000970:	2b03      	cmp	r3, #3
 8000972:	d100      	bne.n	8000976 <__aeabi_ddiv+0xa2>
 8000974:	e28e      	b.n	8000e94 <__aeabi_ddiv+0x5c0>
 8000976:	2b01      	cmp	r3, #1
 8000978:	d000      	beq.n	800097c <__aeabi_ddiv+0xa8>
 800097a:	e0d9      	b.n	8000b30 <__aeabi_ddiv+0x25c>
 800097c:	2300      	movs	r3, #0
 800097e:	2400      	movs	r4, #0
 8000980:	2500      	movs	r5, #0
 8000982:	4652      	mov	r2, sl
 8000984:	051b      	lsls	r3, r3, #20
 8000986:	4323      	orrs	r3, r4
 8000988:	07d2      	lsls	r2, r2, #31
 800098a:	4313      	orrs	r3, r2
 800098c:	0028      	movs	r0, r5
 800098e:	0019      	movs	r1, r3
 8000990:	b005      	add	sp, #20
 8000992:	bcf0      	pop	{r4, r5, r6, r7}
 8000994:	46bb      	mov	fp, r7
 8000996:	46b2      	mov	sl, r6
 8000998:	46a9      	mov	r9, r5
 800099a:	46a0      	mov	r8, r4
 800099c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800099e:	2400      	movs	r4, #0
 80009a0:	2500      	movs	r5, #0
 80009a2:	4baa      	ldr	r3, [pc, #680]	; (8000c4c <__aeabi_ddiv+0x378>)
 80009a4:	e7ed      	b.n	8000982 <__aeabi_ddiv+0xae>
 80009a6:	46ba      	mov	sl, r7
 80009a8:	46a0      	mov	r8, r4
 80009aa:	0015      	movs	r5, r2
 80009ac:	9000      	str	r0, [sp, #0]
 80009ae:	e7dc      	b.n	800096a <__aeabi_ddiv+0x96>
 80009b0:	4544      	cmp	r4, r8
 80009b2:	d200      	bcs.n	80009b6 <__aeabi_ddiv+0xe2>
 80009b4:	e1c7      	b.n	8000d46 <__aeabi_ddiv+0x472>
 80009b6:	d100      	bne.n	80009ba <__aeabi_ddiv+0xe6>
 80009b8:	e1c2      	b.n	8000d40 <__aeabi_ddiv+0x46c>
 80009ba:	2301      	movs	r3, #1
 80009bc:	425b      	negs	r3, r3
 80009be:	469c      	mov	ip, r3
 80009c0:	002e      	movs	r6, r5
 80009c2:	4640      	mov	r0, r8
 80009c4:	2500      	movs	r5, #0
 80009c6:	44e3      	add	fp, ip
 80009c8:	0223      	lsls	r3, r4, #8
 80009ca:	0e14      	lsrs	r4, r2, #24
 80009cc:	431c      	orrs	r4, r3
 80009ce:	0c1b      	lsrs	r3, r3, #16
 80009d0:	4699      	mov	r9, r3
 80009d2:	0423      	lsls	r3, r4, #16
 80009d4:	0c1f      	lsrs	r7, r3, #16
 80009d6:	0212      	lsls	r2, r2, #8
 80009d8:	4649      	mov	r1, r9
 80009da:	9200      	str	r2, [sp, #0]
 80009dc:	9701      	str	r7, [sp, #4]
 80009de:	f7ff fc19 	bl	8000214 <__aeabi_uidivmod>
 80009e2:	0002      	movs	r2, r0
 80009e4:	437a      	muls	r2, r7
 80009e6:	040b      	lsls	r3, r1, #16
 80009e8:	0c31      	lsrs	r1, r6, #16
 80009ea:	4680      	mov	r8, r0
 80009ec:	4319      	orrs	r1, r3
 80009ee:	428a      	cmp	r2, r1
 80009f0:	d907      	bls.n	8000a02 <__aeabi_ddiv+0x12e>
 80009f2:	2301      	movs	r3, #1
 80009f4:	425b      	negs	r3, r3
 80009f6:	469c      	mov	ip, r3
 80009f8:	1909      	adds	r1, r1, r4
 80009fa:	44e0      	add	r8, ip
 80009fc:	428c      	cmp	r4, r1
 80009fe:	d800      	bhi.n	8000a02 <__aeabi_ddiv+0x12e>
 8000a00:	e207      	b.n	8000e12 <__aeabi_ddiv+0x53e>
 8000a02:	1a88      	subs	r0, r1, r2
 8000a04:	4649      	mov	r1, r9
 8000a06:	f7ff fc05 	bl	8000214 <__aeabi_uidivmod>
 8000a0a:	0409      	lsls	r1, r1, #16
 8000a0c:	468c      	mov	ip, r1
 8000a0e:	0431      	lsls	r1, r6, #16
 8000a10:	4666      	mov	r6, ip
 8000a12:	9a01      	ldr	r2, [sp, #4]
 8000a14:	0c09      	lsrs	r1, r1, #16
 8000a16:	4342      	muls	r2, r0
 8000a18:	0003      	movs	r3, r0
 8000a1a:	4331      	orrs	r1, r6
 8000a1c:	428a      	cmp	r2, r1
 8000a1e:	d904      	bls.n	8000a2a <__aeabi_ddiv+0x156>
 8000a20:	1909      	adds	r1, r1, r4
 8000a22:	3b01      	subs	r3, #1
 8000a24:	428c      	cmp	r4, r1
 8000a26:	d800      	bhi.n	8000a2a <__aeabi_ddiv+0x156>
 8000a28:	e1ed      	b.n	8000e06 <__aeabi_ddiv+0x532>
 8000a2a:	1a88      	subs	r0, r1, r2
 8000a2c:	4642      	mov	r2, r8
 8000a2e:	0412      	lsls	r2, r2, #16
 8000a30:	431a      	orrs	r2, r3
 8000a32:	4690      	mov	r8, r2
 8000a34:	4641      	mov	r1, r8
 8000a36:	9b00      	ldr	r3, [sp, #0]
 8000a38:	040e      	lsls	r6, r1, #16
 8000a3a:	0c1b      	lsrs	r3, r3, #16
 8000a3c:	001f      	movs	r7, r3
 8000a3e:	9302      	str	r3, [sp, #8]
 8000a40:	9b00      	ldr	r3, [sp, #0]
 8000a42:	0c36      	lsrs	r6, r6, #16
 8000a44:	041b      	lsls	r3, r3, #16
 8000a46:	0c19      	lsrs	r1, r3, #16
 8000a48:	000b      	movs	r3, r1
 8000a4a:	4373      	muls	r3, r6
 8000a4c:	0c12      	lsrs	r2, r2, #16
 8000a4e:	437e      	muls	r6, r7
 8000a50:	9103      	str	r1, [sp, #12]
 8000a52:	4351      	muls	r1, r2
 8000a54:	437a      	muls	r2, r7
 8000a56:	0c1f      	lsrs	r7, r3, #16
 8000a58:	46bc      	mov	ip, r7
 8000a5a:	1876      	adds	r6, r6, r1
 8000a5c:	4466      	add	r6, ip
 8000a5e:	42b1      	cmp	r1, r6
 8000a60:	d903      	bls.n	8000a6a <__aeabi_ddiv+0x196>
 8000a62:	2180      	movs	r1, #128	; 0x80
 8000a64:	0249      	lsls	r1, r1, #9
 8000a66:	468c      	mov	ip, r1
 8000a68:	4462      	add	r2, ip
 8000a6a:	0c31      	lsrs	r1, r6, #16
 8000a6c:	188a      	adds	r2, r1, r2
 8000a6e:	0431      	lsls	r1, r6, #16
 8000a70:	041e      	lsls	r6, r3, #16
 8000a72:	0c36      	lsrs	r6, r6, #16
 8000a74:	198e      	adds	r6, r1, r6
 8000a76:	4290      	cmp	r0, r2
 8000a78:	d302      	bcc.n	8000a80 <__aeabi_ddiv+0x1ac>
 8000a7a:	d112      	bne.n	8000aa2 <__aeabi_ddiv+0x1ce>
 8000a7c:	42b5      	cmp	r5, r6
 8000a7e:	d210      	bcs.n	8000aa2 <__aeabi_ddiv+0x1ce>
 8000a80:	4643      	mov	r3, r8
 8000a82:	1e59      	subs	r1, r3, #1
 8000a84:	9b00      	ldr	r3, [sp, #0]
 8000a86:	469c      	mov	ip, r3
 8000a88:	4465      	add	r5, ip
 8000a8a:	001f      	movs	r7, r3
 8000a8c:	429d      	cmp	r5, r3
 8000a8e:	419b      	sbcs	r3, r3
 8000a90:	425b      	negs	r3, r3
 8000a92:	191b      	adds	r3, r3, r4
 8000a94:	18c0      	adds	r0, r0, r3
 8000a96:	4284      	cmp	r4, r0
 8000a98:	d200      	bcs.n	8000a9c <__aeabi_ddiv+0x1c8>
 8000a9a:	e1a0      	b.n	8000dde <__aeabi_ddiv+0x50a>
 8000a9c:	d100      	bne.n	8000aa0 <__aeabi_ddiv+0x1cc>
 8000a9e:	e19b      	b.n	8000dd8 <__aeabi_ddiv+0x504>
 8000aa0:	4688      	mov	r8, r1
 8000aa2:	1bae      	subs	r6, r5, r6
 8000aa4:	42b5      	cmp	r5, r6
 8000aa6:	41ad      	sbcs	r5, r5
 8000aa8:	1a80      	subs	r0, r0, r2
 8000aaa:	426d      	negs	r5, r5
 8000aac:	1b40      	subs	r0, r0, r5
 8000aae:	4284      	cmp	r4, r0
 8000ab0:	d100      	bne.n	8000ab4 <__aeabi_ddiv+0x1e0>
 8000ab2:	e1d5      	b.n	8000e60 <__aeabi_ddiv+0x58c>
 8000ab4:	4649      	mov	r1, r9
 8000ab6:	f7ff fbad 	bl	8000214 <__aeabi_uidivmod>
 8000aba:	9a01      	ldr	r2, [sp, #4]
 8000abc:	040b      	lsls	r3, r1, #16
 8000abe:	4342      	muls	r2, r0
 8000ac0:	0c31      	lsrs	r1, r6, #16
 8000ac2:	0005      	movs	r5, r0
 8000ac4:	4319      	orrs	r1, r3
 8000ac6:	428a      	cmp	r2, r1
 8000ac8:	d900      	bls.n	8000acc <__aeabi_ddiv+0x1f8>
 8000aca:	e16c      	b.n	8000da6 <__aeabi_ddiv+0x4d2>
 8000acc:	1a88      	subs	r0, r1, r2
 8000ace:	4649      	mov	r1, r9
 8000ad0:	f7ff fba0 	bl	8000214 <__aeabi_uidivmod>
 8000ad4:	9a01      	ldr	r2, [sp, #4]
 8000ad6:	0436      	lsls	r6, r6, #16
 8000ad8:	4342      	muls	r2, r0
 8000ada:	0409      	lsls	r1, r1, #16
 8000adc:	0c36      	lsrs	r6, r6, #16
 8000ade:	0003      	movs	r3, r0
 8000ae0:	430e      	orrs	r6, r1
 8000ae2:	42b2      	cmp	r2, r6
 8000ae4:	d900      	bls.n	8000ae8 <__aeabi_ddiv+0x214>
 8000ae6:	e153      	b.n	8000d90 <__aeabi_ddiv+0x4bc>
 8000ae8:	9803      	ldr	r0, [sp, #12]
 8000aea:	1ab6      	subs	r6, r6, r2
 8000aec:	0002      	movs	r2, r0
 8000aee:	042d      	lsls	r5, r5, #16
 8000af0:	431d      	orrs	r5, r3
 8000af2:	9f02      	ldr	r7, [sp, #8]
 8000af4:	042b      	lsls	r3, r5, #16
 8000af6:	0c1b      	lsrs	r3, r3, #16
 8000af8:	435a      	muls	r2, r3
 8000afa:	437b      	muls	r3, r7
 8000afc:	469c      	mov	ip, r3
 8000afe:	0c29      	lsrs	r1, r5, #16
 8000b00:	4348      	muls	r0, r1
 8000b02:	0c13      	lsrs	r3, r2, #16
 8000b04:	4484      	add	ip, r0
 8000b06:	4463      	add	r3, ip
 8000b08:	4379      	muls	r1, r7
 8000b0a:	4298      	cmp	r0, r3
 8000b0c:	d903      	bls.n	8000b16 <__aeabi_ddiv+0x242>
 8000b0e:	2080      	movs	r0, #128	; 0x80
 8000b10:	0240      	lsls	r0, r0, #9
 8000b12:	4684      	mov	ip, r0
 8000b14:	4461      	add	r1, ip
 8000b16:	0c18      	lsrs	r0, r3, #16
 8000b18:	0412      	lsls	r2, r2, #16
 8000b1a:	041b      	lsls	r3, r3, #16
 8000b1c:	0c12      	lsrs	r2, r2, #16
 8000b1e:	1841      	adds	r1, r0, r1
 8000b20:	189b      	adds	r3, r3, r2
 8000b22:	428e      	cmp	r6, r1
 8000b24:	d200      	bcs.n	8000b28 <__aeabi_ddiv+0x254>
 8000b26:	e0ff      	b.n	8000d28 <__aeabi_ddiv+0x454>
 8000b28:	d100      	bne.n	8000b2c <__aeabi_ddiv+0x258>
 8000b2a:	e0fa      	b.n	8000d22 <__aeabi_ddiv+0x44e>
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	431d      	orrs	r5, r3
 8000b30:	4a49      	ldr	r2, [pc, #292]	; (8000c58 <__aeabi_ddiv+0x384>)
 8000b32:	445a      	add	r2, fp
 8000b34:	2a00      	cmp	r2, #0
 8000b36:	dc00      	bgt.n	8000b3a <__aeabi_ddiv+0x266>
 8000b38:	e0aa      	b.n	8000c90 <__aeabi_ddiv+0x3bc>
 8000b3a:	076b      	lsls	r3, r5, #29
 8000b3c:	d000      	beq.n	8000b40 <__aeabi_ddiv+0x26c>
 8000b3e:	e13d      	b.n	8000dbc <__aeabi_ddiv+0x4e8>
 8000b40:	08ed      	lsrs	r5, r5, #3
 8000b42:	4643      	mov	r3, r8
 8000b44:	01db      	lsls	r3, r3, #7
 8000b46:	d506      	bpl.n	8000b56 <__aeabi_ddiv+0x282>
 8000b48:	4642      	mov	r2, r8
 8000b4a:	4b44      	ldr	r3, [pc, #272]	; (8000c5c <__aeabi_ddiv+0x388>)
 8000b4c:	401a      	ands	r2, r3
 8000b4e:	4690      	mov	r8, r2
 8000b50:	2280      	movs	r2, #128	; 0x80
 8000b52:	00d2      	lsls	r2, r2, #3
 8000b54:	445a      	add	r2, fp
 8000b56:	4b42      	ldr	r3, [pc, #264]	; (8000c60 <__aeabi_ddiv+0x38c>)
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	dd00      	ble.n	8000b5e <__aeabi_ddiv+0x28a>
 8000b5c:	e71f      	b.n	800099e <__aeabi_ddiv+0xca>
 8000b5e:	4643      	mov	r3, r8
 8000b60:	075b      	lsls	r3, r3, #29
 8000b62:	431d      	orrs	r5, r3
 8000b64:	4643      	mov	r3, r8
 8000b66:	0552      	lsls	r2, r2, #21
 8000b68:	025c      	lsls	r4, r3, #9
 8000b6a:	0b24      	lsrs	r4, r4, #12
 8000b6c:	0d53      	lsrs	r3, r2, #21
 8000b6e:	e708      	b.n	8000982 <__aeabi_ddiv+0xae>
 8000b70:	4652      	mov	r2, sl
 8000b72:	4322      	orrs	r2, r4
 8000b74:	d100      	bne.n	8000b78 <__aeabi_ddiv+0x2a4>
 8000b76:	e07b      	b.n	8000c70 <__aeabi_ddiv+0x39c>
 8000b78:	2c00      	cmp	r4, #0
 8000b7a:	d100      	bne.n	8000b7e <__aeabi_ddiv+0x2aa>
 8000b7c:	e0fa      	b.n	8000d74 <__aeabi_ddiv+0x4a0>
 8000b7e:	0020      	movs	r0, r4
 8000b80:	f000 fa90 	bl	80010a4 <__clzsi2>
 8000b84:	0002      	movs	r2, r0
 8000b86:	3a0b      	subs	r2, #11
 8000b88:	231d      	movs	r3, #29
 8000b8a:	0001      	movs	r1, r0
 8000b8c:	1a9b      	subs	r3, r3, r2
 8000b8e:	4652      	mov	r2, sl
 8000b90:	3908      	subs	r1, #8
 8000b92:	40da      	lsrs	r2, r3
 8000b94:	408c      	lsls	r4, r1
 8000b96:	4314      	orrs	r4, r2
 8000b98:	4652      	mov	r2, sl
 8000b9a:	408a      	lsls	r2, r1
 8000b9c:	4b31      	ldr	r3, [pc, #196]	; (8000c64 <__aeabi_ddiv+0x390>)
 8000b9e:	4458      	add	r0, fp
 8000ba0:	469b      	mov	fp, r3
 8000ba2:	4483      	add	fp, r0
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	e6d5      	b.n	8000954 <__aeabi_ddiv+0x80>
 8000ba8:	464b      	mov	r3, r9
 8000baa:	4323      	orrs	r3, r4
 8000bac:	4698      	mov	r8, r3
 8000bae:	d044      	beq.n	8000c3a <__aeabi_ddiv+0x366>
 8000bb0:	2c00      	cmp	r4, #0
 8000bb2:	d100      	bne.n	8000bb6 <__aeabi_ddiv+0x2e2>
 8000bb4:	e0ce      	b.n	8000d54 <__aeabi_ddiv+0x480>
 8000bb6:	0020      	movs	r0, r4
 8000bb8:	f000 fa74 	bl	80010a4 <__clzsi2>
 8000bbc:	0001      	movs	r1, r0
 8000bbe:	0002      	movs	r2, r0
 8000bc0:	390b      	subs	r1, #11
 8000bc2:	231d      	movs	r3, #29
 8000bc4:	1a5b      	subs	r3, r3, r1
 8000bc6:	4649      	mov	r1, r9
 8000bc8:	0010      	movs	r0, r2
 8000bca:	40d9      	lsrs	r1, r3
 8000bcc:	3808      	subs	r0, #8
 8000bce:	4084      	lsls	r4, r0
 8000bd0:	000b      	movs	r3, r1
 8000bd2:	464d      	mov	r5, r9
 8000bd4:	4323      	orrs	r3, r4
 8000bd6:	4698      	mov	r8, r3
 8000bd8:	4085      	lsls	r5, r0
 8000bda:	4823      	ldr	r0, [pc, #140]	; (8000c68 <__aeabi_ddiv+0x394>)
 8000bdc:	1a83      	subs	r3, r0, r2
 8000bde:	469b      	mov	fp, r3
 8000be0:	2300      	movs	r3, #0
 8000be2:	4699      	mov	r9, r3
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	e69a      	b.n	800091e <__aeabi_ddiv+0x4a>
 8000be8:	464b      	mov	r3, r9
 8000bea:	4323      	orrs	r3, r4
 8000bec:	4698      	mov	r8, r3
 8000bee:	d11d      	bne.n	8000c2c <__aeabi_ddiv+0x358>
 8000bf0:	2308      	movs	r3, #8
 8000bf2:	4699      	mov	r9, r3
 8000bf4:	3b06      	subs	r3, #6
 8000bf6:	2500      	movs	r5, #0
 8000bf8:	4683      	mov	fp, r0
 8000bfa:	9300      	str	r3, [sp, #0]
 8000bfc:	e68f      	b.n	800091e <__aeabi_ddiv+0x4a>
 8000bfe:	4652      	mov	r2, sl
 8000c00:	4322      	orrs	r2, r4
 8000c02:	d109      	bne.n	8000c18 <__aeabi_ddiv+0x344>
 8000c04:	2302      	movs	r3, #2
 8000c06:	4649      	mov	r1, r9
 8000c08:	4319      	orrs	r1, r3
 8000c0a:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <__aeabi_ddiv+0x398>)
 8000c0c:	4689      	mov	r9, r1
 8000c0e:	469c      	mov	ip, r3
 8000c10:	2400      	movs	r4, #0
 8000c12:	2002      	movs	r0, #2
 8000c14:	44e3      	add	fp, ip
 8000c16:	e69d      	b.n	8000954 <__aeabi_ddiv+0x80>
 8000c18:	2303      	movs	r3, #3
 8000c1a:	464a      	mov	r2, r9
 8000c1c:	431a      	orrs	r2, r3
 8000c1e:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <__aeabi_ddiv+0x398>)
 8000c20:	4691      	mov	r9, r2
 8000c22:	469c      	mov	ip, r3
 8000c24:	4652      	mov	r2, sl
 8000c26:	2003      	movs	r0, #3
 8000c28:	44e3      	add	fp, ip
 8000c2a:	e693      	b.n	8000954 <__aeabi_ddiv+0x80>
 8000c2c:	230c      	movs	r3, #12
 8000c2e:	4699      	mov	r9, r3
 8000c30:	3b09      	subs	r3, #9
 8000c32:	46a0      	mov	r8, r4
 8000c34:	4683      	mov	fp, r0
 8000c36:	9300      	str	r3, [sp, #0]
 8000c38:	e671      	b.n	800091e <__aeabi_ddiv+0x4a>
 8000c3a:	2304      	movs	r3, #4
 8000c3c:	4699      	mov	r9, r3
 8000c3e:	2300      	movs	r3, #0
 8000c40:	469b      	mov	fp, r3
 8000c42:	3301      	adds	r3, #1
 8000c44:	2500      	movs	r5, #0
 8000c46:	9300      	str	r3, [sp, #0]
 8000c48:	e669      	b.n	800091e <__aeabi_ddiv+0x4a>
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	000007ff 	.word	0x000007ff
 8000c50:	fffffc01 	.word	0xfffffc01
 8000c54:	080041b8 	.word	0x080041b8
 8000c58:	000003ff 	.word	0x000003ff
 8000c5c:	feffffff 	.word	0xfeffffff
 8000c60:	000007fe 	.word	0x000007fe
 8000c64:	000003f3 	.word	0x000003f3
 8000c68:	fffffc0d 	.word	0xfffffc0d
 8000c6c:	fffff801 	.word	0xfffff801
 8000c70:	4649      	mov	r1, r9
 8000c72:	2301      	movs	r3, #1
 8000c74:	4319      	orrs	r1, r3
 8000c76:	4689      	mov	r9, r1
 8000c78:	2400      	movs	r4, #0
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	e66a      	b.n	8000954 <__aeabi_ddiv+0x80>
 8000c7e:	2300      	movs	r3, #0
 8000c80:	2480      	movs	r4, #128	; 0x80
 8000c82:	469a      	mov	sl, r3
 8000c84:	2500      	movs	r5, #0
 8000c86:	4b8a      	ldr	r3, [pc, #552]	; (8000eb0 <__aeabi_ddiv+0x5dc>)
 8000c88:	0324      	lsls	r4, r4, #12
 8000c8a:	e67a      	b.n	8000982 <__aeabi_ddiv+0xae>
 8000c8c:	2501      	movs	r5, #1
 8000c8e:	426d      	negs	r5, r5
 8000c90:	2301      	movs	r3, #1
 8000c92:	1a9b      	subs	r3, r3, r2
 8000c94:	2b38      	cmp	r3, #56	; 0x38
 8000c96:	dd00      	ble.n	8000c9a <__aeabi_ddiv+0x3c6>
 8000c98:	e670      	b.n	800097c <__aeabi_ddiv+0xa8>
 8000c9a:	2b1f      	cmp	r3, #31
 8000c9c:	dc00      	bgt.n	8000ca0 <__aeabi_ddiv+0x3cc>
 8000c9e:	e0bf      	b.n	8000e20 <__aeabi_ddiv+0x54c>
 8000ca0:	211f      	movs	r1, #31
 8000ca2:	4249      	negs	r1, r1
 8000ca4:	1a8a      	subs	r2, r1, r2
 8000ca6:	4641      	mov	r1, r8
 8000ca8:	40d1      	lsrs	r1, r2
 8000caa:	000a      	movs	r2, r1
 8000cac:	2b20      	cmp	r3, #32
 8000cae:	d004      	beq.n	8000cba <__aeabi_ddiv+0x3e6>
 8000cb0:	4641      	mov	r1, r8
 8000cb2:	4b80      	ldr	r3, [pc, #512]	; (8000eb4 <__aeabi_ddiv+0x5e0>)
 8000cb4:	445b      	add	r3, fp
 8000cb6:	4099      	lsls	r1, r3
 8000cb8:	430d      	orrs	r5, r1
 8000cba:	1e6b      	subs	r3, r5, #1
 8000cbc:	419d      	sbcs	r5, r3
 8000cbe:	2307      	movs	r3, #7
 8000cc0:	432a      	orrs	r2, r5
 8000cc2:	001d      	movs	r5, r3
 8000cc4:	2400      	movs	r4, #0
 8000cc6:	4015      	ands	r5, r2
 8000cc8:	4213      	tst	r3, r2
 8000cca:	d100      	bne.n	8000cce <__aeabi_ddiv+0x3fa>
 8000ccc:	e0d4      	b.n	8000e78 <__aeabi_ddiv+0x5a4>
 8000cce:	210f      	movs	r1, #15
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	4011      	ands	r1, r2
 8000cd4:	2904      	cmp	r1, #4
 8000cd6:	d100      	bne.n	8000cda <__aeabi_ddiv+0x406>
 8000cd8:	e0cb      	b.n	8000e72 <__aeabi_ddiv+0x59e>
 8000cda:	1d11      	adds	r1, r2, #4
 8000cdc:	4291      	cmp	r1, r2
 8000cde:	4192      	sbcs	r2, r2
 8000ce0:	4252      	negs	r2, r2
 8000ce2:	189b      	adds	r3, r3, r2
 8000ce4:	000a      	movs	r2, r1
 8000ce6:	0219      	lsls	r1, r3, #8
 8000ce8:	d400      	bmi.n	8000cec <__aeabi_ddiv+0x418>
 8000cea:	e0c2      	b.n	8000e72 <__aeabi_ddiv+0x59e>
 8000cec:	2301      	movs	r3, #1
 8000cee:	2400      	movs	r4, #0
 8000cf0:	2500      	movs	r5, #0
 8000cf2:	e646      	b.n	8000982 <__aeabi_ddiv+0xae>
 8000cf4:	2380      	movs	r3, #128	; 0x80
 8000cf6:	4641      	mov	r1, r8
 8000cf8:	031b      	lsls	r3, r3, #12
 8000cfa:	4219      	tst	r1, r3
 8000cfc:	d008      	beq.n	8000d10 <__aeabi_ddiv+0x43c>
 8000cfe:	421c      	tst	r4, r3
 8000d00:	d106      	bne.n	8000d10 <__aeabi_ddiv+0x43c>
 8000d02:	431c      	orrs	r4, r3
 8000d04:	0324      	lsls	r4, r4, #12
 8000d06:	46ba      	mov	sl, r7
 8000d08:	0015      	movs	r5, r2
 8000d0a:	4b69      	ldr	r3, [pc, #420]	; (8000eb0 <__aeabi_ddiv+0x5dc>)
 8000d0c:	0b24      	lsrs	r4, r4, #12
 8000d0e:	e638      	b.n	8000982 <__aeabi_ddiv+0xae>
 8000d10:	2480      	movs	r4, #128	; 0x80
 8000d12:	4643      	mov	r3, r8
 8000d14:	0324      	lsls	r4, r4, #12
 8000d16:	431c      	orrs	r4, r3
 8000d18:	0324      	lsls	r4, r4, #12
 8000d1a:	46b2      	mov	sl, r6
 8000d1c:	4b64      	ldr	r3, [pc, #400]	; (8000eb0 <__aeabi_ddiv+0x5dc>)
 8000d1e:	0b24      	lsrs	r4, r4, #12
 8000d20:	e62f      	b.n	8000982 <__aeabi_ddiv+0xae>
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d100      	bne.n	8000d28 <__aeabi_ddiv+0x454>
 8000d26:	e703      	b.n	8000b30 <__aeabi_ddiv+0x25c>
 8000d28:	19a6      	adds	r6, r4, r6
 8000d2a:	1e68      	subs	r0, r5, #1
 8000d2c:	42a6      	cmp	r6, r4
 8000d2e:	d200      	bcs.n	8000d32 <__aeabi_ddiv+0x45e>
 8000d30:	e08d      	b.n	8000e4e <__aeabi_ddiv+0x57a>
 8000d32:	428e      	cmp	r6, r1
 8000d34:	d200      	bcs.n	8000d38 <__aeabi_ddiv+0x464>
 8000d36:	e0a3      	b.n	8000e80 <__aeabi_ddiv+0x5ac>
 8000d38:	d100      	bne.n	8000d3c <__aeabi_ddiv+0x468>
 8000d3a:	e0b3      	b.n	8000ea4 <__aeabi_ddiv+0x5d0>
 8000d3c:	0005      	movs	r5, r0
 8000d3e:	e6f5      	b.n	8000b2c <__aeabi_ddiv+0x258>
 8000d40:	42aa      	cmp	r2, r5
 8000d42:	d900      	bls.n	8000d46 <__aeabi_ddiv+0x472>
 8000d44:	e639      	b.n	80009ba <__aeabi_ddiv+0xe6>
 8000d46:	4643      	mov	r3, r8
 8000d48:	07de      	lsls	r6, r3, #31
 8000d4a:	0858      	lsrs	r0, r3, #1
 8000d4c:	086b      	lsrs	r3, r5, #1
 8000d4e:	431e      	orrs	r6, r3
 8000d50:	07ed      	lsls	r5, r5, #31
 8000d52:	e639      	b.n	80009c8 <__aeabi_ddiv+0xf4>
 8000d54:	4648      	mov	r0, r9
 8000d56:	f000 f9a5 	bl	80010a4 <__clzsi2>
 8000d5a:	0001      	movs	r1, r0
 8000d5c:	0002      	movs	r2, r0
 8000d5e:	3115      	adds	r1, #21
 8000d60:	3220      	adds	r2, #32
 8000d62:	291c      	cmp	r1, #28
 8000d64:	dc00      	bgt.n	8000d68 <__aeabi_ddiv+0x494>
 8000d66:	e72c      	b.n	8000bc2 <__aeabi_ddiv+0x2ee>
 8000d68:	464b      	mov	r3, r9
 8000d6a:	3808      	subs	r0, #8
 8000d6c:	4083      	lsls	r3, r0
 8000d6e:	2500      	movs	r5, #0
 8000d70:	4698      	mov	r8, r3
 8000d72:	e732      	b.n	8000bda <__aeabi_ddiv+0x306>
 8000d74:	f000 f996 	bl	80010a4 <__clzsi2>
 8000d78:	0003      	movs	r3, r0
 8000d7a:	001a      	movs	r2, r3
 8000d7c:	3215      	adds	r2, #21
 8000d7e:	3020      	adds	r0, #32
 8000d80:	2a1c      	cmp	r2, #28
 8000d82:	dc00      	bgt.n	8000d86 <__aeabi_ddiv+0x4b2>
 8000d84:	e700      	b.n	8000b88 <__aeabi_ddiv+0x2b4>
 8000d86:	4654      	mov	r4, sl
 8000d88:	3b08      	subs	r3, #8
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	409c      	lsls	r4, r3
 8000d8e:	e705      	b.n	8000b9c <__aeabi_ddiv+0x2c8>
 8000d90:	1936      	adds	r6, r6, r4
 8000d92:	3b01      	subs	r3, #1
 8000d94:	42b4      	cmp	r4, r6
 8000d96:	d900      	bls.n	8000d9a <__aeabi_ddiv+0x4c6>
 8000d98:	e6a6      	b.n	8000ae8 <__aeabi_ddiv+0x214>
 8000d9a:	42b2      	cmp	r2, r6
 8000d9c:	d800      	bhi.n	8000da0 <__aeabi_ddiv+0x4cc>
 8000d9e:	e6a3      	b.n	8000ae8 <__aeabi_ddiv+0x214>
 8000da0:	1e83      	subs	r3, r0, #2
 8000da2:	1936      	adds	r6, r6, r4
 8000da4:	e6a0      	b.n	8000ae8 <__aeabi_ddiv+0x214>
 8000da6:	1909      	adds	r1, r1, r4
 8000da8:	3d01      	subs	r5, #1
 8000daa:	428c      	cmp	r4, r1
 8000dac:	d900      	bls.n	8000db0 <__aeabi_ddiv+0x4dc>
 8000dae:	e68d      	b.n	8000acc <__aeabi_ddiv+0x1f8>
 8000db0:	428a      	cmp	r2, r1
 8000db2:	d800      	bhi.n	8000db6 <__aeabi_ddiv+0x4e2>
 8000db4:	e68a      	b.n	8000acc <__aeabi_ddiv+0x1f8>
 8000db6:	1e85      	subs	r5, r0, #2
 8000db8:	1909      	adds	r1, r1, r4
 8000dba:	e687      	b.n	8000acc <__aeabi_ddiv+0x1f8>
 8000dbc:	230f      	movs	r3, #15
 8000dbe:	402b      	ands	r3, r5
 8000dc0:	2b04      	cmp	r3, #4
 8000dc2:	d100      	bne.n	8000dc6 <__aeabi_ddiv+0x4f2>
 8000dc4:	e6bc      	b.n	8000b40 <__aeabi_ddiv+0x26c>
 8000dc6:	2305      	movs	r3, #5
 8000dc8:	425b      	negs	r3, r3
 8000dca:	42ab      	cmp	r3, r5
 8000dcc:	419b      	sbcs	r3, r3
 8000dce:	3504      	adds	r5, #4
 8000dd0:	425b      	negs	r3, r3
 8000dd2:	08ed      	lsrs	r5, r5, #3
 8000dd4:	4498      	add	r8, r3
 8000dd6:	e6b4      	b.n	8000b42 <__aeabi_ddiv+0x26e>
 8000dd8:	42af      	cmp	r7, r5
 8000dda:	d900      	bls.n	8000dde <__aeabi_ddiv+0x50a>
 8000ddc:	e660      	b.n	8000aa0 <__aeabi_ddiv+0x1cc>
 8000dde:	4282      	cmp	r2, r0
 8000de0:	d804      	bhi.n	8000dec <__aeabi_ddiv+0x518>
 8000de2:	d000      	beq.n	8000de6 <__aeabi_ddiv+0x512>
 8000de4:	e65c      	b.n	8000aa0 <__aeabi_ddiv+0x1cc>
 8000de6:	42ae      	cmp	r6, r5
 8000de8:	d800      	bhi.n	8000dec <__aeabi_ddiv+0x518>
 8000dea:	e659      	b.n	8000aa0 <__aeabi_ddiv+0x1cc>
 8000dec:	2302      	movs	r3, #2
 8000dee:	425b      	negs	r3, r3
 8000df0:	469c      	mov	ip, r3
 8000df2:	9b00      	ldr	r3, [sp, #0]
 8000df4:	44e0      	add	r8, ip
 8000df6:	469c      	mov	ip, r3
 8000df8:	4465      	add	r5, ip
 8000dfa:	429d      	cmp	r5, r3
 8000dfc:	419b      	sbcs	r3, r3
 8000dfe:	425b      	negs	r3, r3
 8000e00:	191b      	adds	r3, r3, r4
 8000e02:	18c0      	adds	r0, r0, r3
 8000e04:	e64d      	b.n	8000aa2 <__aeabi_ddiv+0x1ce>
 8000e06:	428a      	cmp	r2, r1
 8000e08:	d800      	bhi.n	8000e0c <__aeabi_ddiv+0x538>
 8000e0a:	e60e      	b.n	8000a2a <__aeabi_ddiv+0x156>
 8000e0c:	1e83      	subs	r3, r0, #2
 8000e0e:	1909      	adds	r1, r1, r4
 8000e10:	e60b      	b.n	8000a2a <__aeabi_ddiv+0x156>
 8000e12:	428a      	cmp	r2, r1
 8000e14:	d800      	bhi.n	8000e18 <__aeabi_ddiv+0x544>
 8000e16:	e5f4      	b.n	8000a02 <__aeabi_ddiv+0x12e>
 8000e18:	1e83      	subs	r3, r0, #2
 8000e1a:	4698      	mov	r8, r3
 8000e1c:	1909      	adds	r1, r1, r4
 8000e1e:	e5f0      	b.n	8000a02 <__aeabi_ddiv+0x12e>
 8000e20:	4925      	ldr	r1, [pc, #148]	; (8000eb8 <__aeabi_ddiv+0x5e4>)
 8000e22:	0028      	movs	r0, r5
 8000e24:	4459      	add	r1, fp
 8000e26:	408d      	lsls	r5, r1
 8000e28:	4642      	mov	r2, r8
 8000e2a:	408a      	lsls	r2, r1
 8000e2c:	1e69      	subs	r1, r5, #1
 8000e2e:	418d      	sbcs	r5, r1
 8000e30:	4641      	mov	r1, r8
 8000e32:	40d8      	lsrs	r0, r3
 8000e34:	40d9      	lsrs	r1, r3
 8000e36:	4302      	orrs	r2, r0
 8000e38:	432a      	orrs	r2, r5
 8000e3a:	000b      	movs	r3, r1
 8000e3c:	0751      	lsls	r1, r2, #29
 8000e3e:	d100      	bne.n	8000e42 <__aeabi_ddiv+0x56e>
 8000e40:	e751      	b.n	8000ce6 <__aeabi_ddiv+0x412>
 8000e42:	210f      	movs	r1, #15
 8000e44:	4011      	ands	r1, r2
 8000e46:	2904      	cmp	r1, #4
 8000e48:	d000      	beq.n	8000e4c <__aeabi_ddiv+0x578>
 8000e4a:	e746      	b.n	8000cda <__aeabi_ddiv+0x406>
 8000e4c:	e74b      	b.n	8000ce6 <__aeabi_ddiv+0x412>
 8000e4e:	0005      	movs	r5, r0
 8000e50:	428e      	cmp	r6, r1
 8000e52:	d000      	beq.n	8000e56 <__aeabi_ddiv+0x582>
 8000e54:	e66a      	b.n	8000b2c <__aeabi_ddiv+0x258>
 8000e56:	9a00      	ldr	r2, [sp, #0]
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d000      	beq.n	8000e5e <__aeabi_ddiv+0x58a>
 8000e5c:	e666      	b.n	8000b2c <__aeabi_ddiv+0x258>
 8000e5e:	e667      	b.n	8000b30 <__aeabi_ddiv+0x25c>
 8000e60:	4a16      	ldr	r2, [pc, #88]	; (8000ebc <__aeabi_ddiv+0x5e8>)
 8000e62:	445a      	add	r2, fp
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	dc00      	bgt.n	8000e6a <__aeabi_ddiv+0x596>
 8000e68:	e710      	b.n	8000c8c <__aeabi_ddiv+0x3b8>
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	2500      	movs	r5, #0
 8000e6e:	4498      	add	r8, r3
 8000e70:	e667      	b.n	8000b42 <__aeabi_ddiv+0x26e>
 8000e72:	075d      	lsls	r5, r3, #29
 8000e74:	025b      	lsls	r3, r3, #9
 8000e76:	0b1c      	lsrs	r4, r3, #12
 8000e78:	08d2      	lsrs	r2, r2, #3
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	4315      	orrs	r5, r2
 8000e7e:	e580      	b.n	8000982 <__aeabi_ddiv+0xae>
 8000e80:	9800      	ldr	r0, [sp, #0]
 8000e82:	3d02      	subs	r5, #2
 8000e84:	0042      	lsls	r2, r0, #1
 8000e86:	4282      	cmp	r2, r0
 8000e88:	41bf      	sbcs	r7, r7
 8000e8a:	427f      	negs	r7, r7
 8000e8c:	193c      	adds	r4, r7, r4
 8000e8e:	1936      	adds	r6, r6, r4
 8000e90:	9200      	str	r2, [sp, #0]
 8000e92:	e7dd      	b.n	8000e50 <__aeabi_ddiv+0x57c>
 8000e94:	2480      	movs	r4, #128	; 0x80
 8000e96:	4643      	mov	r3, r8
 8000e98:	0324      	lsls	r4, r4, #12
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	0324      	lsls	r4, r4, #12
 8000e9e:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <__aeabi_ddiv+0x5dc>)
 8000ea0:	0b24      	lsrs	r4, r4, #12
 8000ea2:	e56e      	b.n	8000982 <__aeabi_ddiv+0xae>
 8000ea4:	9a00      	ldr	r2, [sp, #0]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d3ea      	bcc.n	8000e80 <__aeabi_ddiv+0x5ac>
 8000eaa:	0005      	movs	r5, r0
 8000eac:	e7d3      	b.n	8000e56 <__aeabi_ddiv+0x582>
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	000007ff 	.word	0x000007ff
 8000eb4:	0000043e 	.word	0x0000043e
 8000eb8:	0000041e 	.word	0x0000041e
 8000ebc:	000003ff 	.word	0x000003ff

08000ec0 <__aeabi_i2d>:
 8000ec0:	b570      	push	{r4, r5, r6, lr}
 8000ec2:	2800      	cmp	r0, #0
 8000ec4:	d016      	beq.n	8000ef4 <__aeabi_i2d+0x34>
 8000ec6:	17c3      	asrs	r3, r0, #31
 8000ec8:	18c5      	adds	r5, r0, r3
 8000eca:	405d      	eors	r5, r3
 8000ecc:	0fc4      	lsrs	r4, r0, #31
 8000ece:	0028      	movs	r0, r5
 8000ed0:	f000 f8e8 	bl	80010a4 <__clzsi2>
 8000ed4:	4a11      	ldr	r2, [pc, #68]	; (8000f1c <__aeabi_i2d+0x5c>)
 8000ed6:	1a12      	subs	r2, r2, r0
 8000ed8:	280a      	cmp	r0, #10
 8000eda:	dc16      	bgt.n	8000f0a <__aeabi_i2d+0x4a>
 8000edc:	0003      	movs	r3, r0
 8000ede:	002e      	movs	r6, r5
 8000ee0:	3315      	adds	r3, #21
 8000ee2:	409e      	lsls	r6, r3
 8000ee4:	230b      	movs	r3, #11
 8000ee6:	1a18      	subs	r0, r3, r0
 8000ee8:	40c5      	lsrs	r5, r0
 8000eea:	0552      	lsls	r2, r2, #21
 8000eec:	032d      	lsls	r5, r5, #12
 8000eee:	0b2d      	lsrs	r5, r5, #12
 8000ef0:	0d53      	lsrs	r3, r2, #21
 8000ef2:	e003      	b.n	8000efc <__aeabi_i2d+0x3c>
 8000ef4:	2400      	movs	r4, #0
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	2500      	movs	r5, #0
 8000efa:	2600      	movs	r6, #0
 8000efc:	051b      	lsls	r3, r3, #20
 8000efe:	432b      	orrs	r3, r5
 8000f00:	07e4      	lsls	r4, r4, #31
 8000f02:	4323      	orrs	r3, r4
 8000f04:	0030      	movs	r0, r6
 8000f06:	0019      	movs	r1, r3
 8000f08:	bd70      	pop	{r4, r5, r6, pc}
 8000f0a:	380b      	subs	r0, #11
 8000f0c:	4085      	lsls	r5, r0
 8000f0e:	0552      	lsls	r2, r2, #21
 8000f10:	032d      	lsls	r5, r5, #12
 8000f12:	2600      	movs	r6, #0
 8000f14:	0b2d      	lsrs	r5, r5, #12
 8000f16:	0d53      	lsrs	r3, r2, #21
 8000f18:	e7f0      	b.n	8000efc <__aeabi_i2d+0x3c>
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	0000041e 	.word	0x0000041e

08000f20 <__aeabi_d2f>:
 8000f20:	0002      	movs	r2, r0
 8000f22:	004b      	lsls	r3, r1, #1
 8000f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f26:	0d5b      	lsrs	r3, r3, #21
 8000f28:	030c      	lsls	r4, r1, #12
 8000f2a:	4e3d      	ldr	r6, [pc, #244]	; (8001020 <__aeabi_d2f+0x100>)
 8000f2c:	0a64      	lsrs	r4, r4, #9
 8000f2e:	0f40      	lsrs	r0, r0, #29
 8000f30:	1c5f      	adds	r7, r3, #1
 8000f32:	0fc9      	lsrs	r1, r1, #31
 8000f34:	4304      	orrs	r4, r0
 8000f36:	00d5      	lsls	r5, r2, #3
 8000f38:	4237      	tst	r7, r6
 8000f3a:	d00a      	beq.n	8000f52 <__aeabi_d2f+0x32>
 8000f3c:	4839      	ldr	r0, [pc, #228]	; (8001024 <__aeabi_d2f+0x104>)
 8000f3e:	181e      	adds	r6, r3, r0
 8000f40:	2efe      	cmp	r6, #254	; 0xfe
 8000f42:	dd16      	ble.n	8000f72 <__aeabi_d2f+0x52>
 8000f44:	20ff      	movs	r0, #255	; 0xff
 8000f46:	2400      	movs	r4, #0
 8000f48:	05c0      	lsls	r0, r0, #23
 8000f4a:	4320      	orrs	r0, r4
 8000f4c:	07c9      	lsls	r1, r1, #31
 8000f4e:	4308      	orrs	r0, r1
 8000f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d106      	bne.n	8000f64 <__aeabi_d2f+0x44>
 8000f56:	432c      	orrs	r4, r5
 8000f58:	d026      	beq.n	8000fa8 <__aeabi_d2f+0x88>
 8000f5a:	2205      	movs	r2, #5
 8000f5c:	0192      	lsls	r2, r2, #6
 8000f5e:	0a54      	lsrs	r4, r2, #9
 8000f60:	b2d8      	uxtb	r0, r3
 8000f62:	e7f1      	b.n	8000f48 <__aeabi_d2f+0x28>
 8000f64:	4325      	orrs	r5, r4
 8000f66:	d0ed      	beq.n	8000f44 <__aeabi_d2f+0x24>
 8000f68:	2080      	movs	r0, #128	; 0x80
 8000f6a:	03c0      	lsls	r0, r0, #15
 8000f6c:	4304      	orrs	r4, r0
 8000f6e:	20ff      	movs	r0, #255	; 0xff
 8000f70:	e7ea      	b.n	8000f48 <__aeabi_d2f+0x28>
 8000f72:	2e00      	cmp	r6, #0
 8000f74:	dd1b      	ble.n	8000fae <__aeabi_d2f+0x8e>
 8000f76:	0192      	lsls	r2, r2, #6
 8000f78:	1e53      	subs	r3, r2, #1
 8000f7a:	419a      	sbcs	r2, r3
 8000f7c:	00e4      	lsls	r4, r4, #3
 8000f7e:	0f6d      	lsrs	r5, r5, #29
 8000f80:	4322      	orrs	r2, r4
 8000f82:	432a      	orrs	r2, r5
 8000f84:	0753      	lsls	r3, r2, #29
 8000f86:	d048      	beq.n	800101a <__aeabi_d2f+0xfa>
 8000f88:	230f      	movs	r3, #15
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	2b04      	cmp	r3, #4
 8000f8e:	d000      	beq.n	8000f92 <__aeabi_d2f+0x72>
 8000f90:	3204      	adds	r2, #4
 8000f92:	2380      	movs	r3, #128	; 0x80
 8000f94:	04db      	lsls	r3, r3, #19
 8000f96:	4013      	ands	r3, r2
 8000f98:	d03f      	beq.n	800101a <__aeabi_d2f+0xfa>
 8000f9a:	1c70      	adds	r0, r6, #1
 8000f9c:	2efe      	cmp	r6, #254	; 0xfe
 8000f9e:	d0d1      	beq.n	8000f44 <__aeabi_d2f+0x24>
 8000fa0:	0192      	lsls	r2, r2, #6
 8000fa2:	0a54      	lsrs	r4, r2, #9
 8000fa4:	b2c0      	uxtb	r0, r0
 8000fa6:	e7cf      	b.n	8000f48 <__aeabi_d2f+0x28>
 8000fa8:	2000      	movs	r0, #0
 8000faa:	2400      	movs	r4, #0
 8000fac:	e7cc      	b.n	8000f48 <__aeabi_d2f+0x28>
 8000fae:	0032      	movs	r2, r6
 8000fb0:	3217      	adds	r2, #23
 8000fb2:	db22      	blt.n	8000ffa <__aeabi_d2f+0xda>
 8000fb4:	2080      	movs	r0, #128	; 0x80
 8000fb6:	0400      	lsls	r0, r0, #16
 8000fb8:	4320      	orrs	r0, r4
 8000fba:	241e      	movs	r4, #30
 8000fbc:	1ba4      	subs	r4, r4, r6
 8000fbe:	2c1f      	cmp	r4, #31
 8000fc0:	dd1d      	ble.n	8000ffe <__aeabi_d2f+0xde>
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	4252      	negs	r2, r2
 8000fc6:	1b96      	subs	r6, r2, r6
 8000fc8:	0002      	movs	r2, r0
 8000fca:	40f2      	lsrs	r2, r6
 8000fcc:	0016      	movs	r6, r2
 8000fce:	2c20      	cmp	r4, #32
 8000fd0:	d004      	beq.n	8000fdc <__aeabi_d2f+0xbc>
 8000fd2:	4a15      	ldr	r2, [pc, #84]	; (8001028 <__aeabi_d2f+0x108>)
 8000fd4:	4694      	mov	ip, r2
 8000fd6:	4463      	add	r3, ip
 8000fd8:	4098      	lsls	r0, r3
 8000fda:	4305      	orrs	r5, r0
 8000fdc:	002a      	movs	r2, r5
 8000fde:	1e53      	subs	r3, r2, #1
 8000fe0:	419a      	sbcs	r2, r3
 8000fe2:	4332      	orrs	r2, r6
 8000fe4:	2600      	movs	r6, #0
 8000fe6:	0753      	lsls	r3, r2, #29
 8000fe8:	d1ce      	bne.n	8000f88 <__aeabi_d2f+0x68>
 8000fea:	2480      	movs	r4, #128	; 0x80
 8000fec:	0013      	movs	r3, r2
 8000fee:	04e4      	lsls	r4, r4, #19
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	4023      	ands	r3, r4
 8000ff4:	4222      	tst	r2, r4
 8000ff6:	d1d3      	bne.n	8000fa0 <__aeabi_d2f+0x80>
 8000ff8:	e7b0      	b.n	8000f5c <__aeabi_d2f+0x3c>
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	e7ad      	b.n	8000f5a <__aeabi_d2f+0x3a>
 8000ffe:	4a0b      	ldr	r2, [pc, #44]	; (800102c <__aeabi_d2f+0x10c>)
 8001000:	4694      	mov	ip, r2
 8001002:	002a      	movs	r2, r5
 8001004:	40e2      	lsrs	r2, r4
 8001006:	0014      	movs	r4, r2
 8001008:	002a      	movs	r2, r5
 800100a:	4463      	add	r3, ip
 800100c:	409a      	lsls	r2, r3
 800100e:	4098      	lsls	r0, r3
 8001010:	1e55      	subs	r5, r2, #1
 8001012:	41aa      	sbcs	r2, r5
 8001014:	4302      	orrs	r2, r0
 8001016:	4322      	orrs	r2, r4
 8001018:	e7e4      	b.n	8000fe4 <__aeabi_d2f+0xc4>
 800101a:	0033      	movs	r3, r6
 800101c:	e79e      	b.n	8000f5c <__aeabi_d2f+0x3c>
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	000007fe 	.word	0x000007fe
 8001024:	fffffc80 	.word	0xfffffc80
 8001028:	fffffca2 	.word	0xfffffca2
 800102c:	fffffc82 	.word	0xfffffc82

08001030 <__aeabi_cfrcmple>:
 8001030:	4684      	mov	ip, r0
 8001032:	0008      	movs	r0, r1
 8001034:	4661      	mov	r1, ip
 8001036:	e7ff      	b.n	8001038 <__aeabi_cfcmpeq>

08001038 <__aeabi_cfcmpeq>:
 8001038:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800103a:	f000 f8bd 	bl	80011b8 <__lesf2>
 800103e:	2800      	cmp	r0, #0
 8001040:	d401      	bmi.n	8001046 <__aeabi_cfcmpeq+0xe>
 8001042:	2100      	movs	r1, #0
 8001044:	42c8      	cmn	r0, r1
 8001046:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001048 <__aeabi_fcmpeq>:
 8001048:	b510      	push	{r4, lr}
 800104a:	f000 f849 	bl	80010e0 <__eqsf2>
 800104e:	4240      	negs	r0, r0
 8001050:	3001      	adds	r0, #1
 8001052:	bd10      	pop	{r4, pc}

08001054 <__aeabi_fcmplt>:
 8001054:	b510      	push	{r4, lr}
 8001056:	f000 f8af 	bl	80011b8 <__lesf2>
 800105a:	2800      	cmp	r0, #0
 800105c:	db01      	blt.n	8001062 <__aeabi_fcmplt+0xe>
 800105e:	2000      	movs	r0, #0
 8001060:	bd10      	pop	{r4, pc}
 8001062:	2001      	movs	r0, #1
 8001064:	bd10      	pop	{r4, pc}
 8001066:	46c0      	nop			; (mov r8, r8)

08001068 <__aeabi_fcmple>:
 8001068:	b510      	push	{r4, lr}
 800106a:	f000 f8a5 	bl	80011b8 <__lesf2>
 800106e:	2800      	cmp	r0, #0
 8001070:	dd01      	ble.n	8001076 <__aeabi_fcmple+0xe>
 8001072:	2000      	movs	r0, #0
 8001074:	bd10      	pop	{r4, pc}
 8001076:	2001      	movs	r0, #1
 8001078:	bd10      	pop	{r4, pc}
 800107a:	46c0      	nop			; (mov r8, r8)

0800107c <__aeabi_fcmpgt>:
 800107c:	b510      	push	{r4, lr}
 800107e:	f000 f855 	bl	800112c <__gesf2>
 8001082:	2800      	cmp	r0, #0
 8001084:	dc01      	bgt.n	800108a <__aeabi_fcmpgt+0xe>
 8001086:	2000      	movs	r0, #0
 8001088:	bd10      	pop	{r4, pc}
 800108a:	2001      	movs	r0, #1
 800108c:	bd10      	pop	{r4, pc}
 800108e:	46c0      	nop			; (mov r8, r8)

08001090 <__aeabi_fcmpge>:
 8001090:	b510      	push	{r4, lr}
 8001092:	f000 f84b 	bl	800112c <__gesf2>
 8001096:	2800      	cmp	r0, #0
 8001098:	da01      	bge.n	800109e <__aeabi_fcmpge+0xe>
 800109a:	2000      	movs	r0, #0
 800109c:	bd10      	pop	{r4, pc}
 800109e:	2001      	movs	r0, #1
 80010a0:	bd10      	pop	{r4, pc}
 80010a2:	46c0      	nop			; (mov r8, r8)

080010a4 <__clzsi2>:
 80010a4:	211c      	movs	r1, #28
 80010a6:	2301      	movs	r3, #1
 80010a8:	041b      	lsls	r3, r3, #16
 80010aa:	4298      	cmp	r0, r3
 80010ac:	d301      	bcc.n	80010b2 <__clzsi2+0xe>
 80010ae:	0c00      	lsrs	r0, r0, #16
 80010b0:	3910      	subs	r1, #16
 80010b2:	0a1b      	lsrs	r3, r3, #8
 80010b4:	4298      	cmp	r0, r3
 80010b6:	d301      	bcc.n	80010bc <__clzsi2+0x18>
 80010b8:	0a00      	lsrs	r0, r0, #8
 80010ba:	3908      	subs	r1, #8
 80010bc:	091b      	lsrs	r3, r3, #4
 80010be:	4298      	cmp	r0, r3
 80010c0:	d301      	bcc.n	80010c6 <__clzsi2+0x22>
 80010c2:	0900      	lsrs	r0, r0, #4
 80010c4:	3904      	subs	r1, #4
 80010c6:	a202      	add	r2, pc, #8	; (adr r2, 80010d0 <__clzsi2+0x2c>)
 80010c8:	5c10      	ldrb	r0, [r2, r0]
 80010ca:	1840      	adds	r0, r0, r1
 80010cc:	4770      	bx	lr
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	02020304 	.word	0x02020304
 80010d4:	01010101 	.word	0x01010101
	...

080010e0 <__eqsf2>:
 80010e0:	b570      	push	{r4, r5, r6, lr}
 80010e2:	0042      	lsls	r2, r0, #1
 80010e4:	0245      	lsls	r5, r0, #9
 80010e6:	024e      	lsls	r6, r1, #9
 80010e8:	004c      	lsls	r4, r1, #1
 80010ea:	0fc3      	lsrs	r3, r0, #31
 80010ec:	0a6d      	lsrs	r5, r5, #9
 80010ee:	2001      	movs	r0, #1
 80010f0:	0e12      	lsrs	r2, r2, #24
 80010f2:	0a76      	lsrs	r6, r6, #9
 80010f4:	0e24      	lsrs	r4, r4, #24
 80010f6:	0fc9      	lsrs	r1, r1, #31
 80010f8:	2aff      	cmp	r2, #255	; 0xff
 80010fa:	d006      	beq.n	800110a <__eqsf2+0x2a>
 80010fc:	2cff      	cmp	r4, #255	; 0xff
 80010fe:	d003      	beq.n	8001108 <__eqsf2+0x28>
 8001100:	42a2      	cmp	r2, r4
 8001102:	d101      	bne.n	8001108 <__eqsf2+0x28>
 8001104:	42b5      	cmp	r5, r6
 8001106:	d006      	beq.n	8001116 <__eqsf2+0x36>
 8001108:	bd70      	pop	{r4, r5, r6, pc}
 800110a:	2d00      	cmp	r5, #0
 800110c:	d1fc      	bne.n	8001108 <__eqsf2+0x28>
 800110e:	2cff      	cmp	r4, #255	; 0xff
 8001110:	d1fa      	bne.n	8001108 <__eqsf2+0x28>
 8001112:	2e00      	cmp	r6, #0
 8001114:	d1f8      	bne.n	8001108 <__eqsf2+0x28>
 8001116:	428b      	cmp	r3, r1
 8001118:	d006      	beq.n	8001128 <__eqsf2+0x48>
 800111a:	2001      	movs	r0, #1
 800111c:	2a00      	cmp	r2, #0
 800111e:	d1f3      	bne.n	8001108 <__eqsf2+0x28>
 8001120:	0028      	movs	r0, r5
 8001122:	1e43      	subs	r3, r0, #1
 8001124:	4198      	sbcs	r0, r3
 8001126:	e7ef      	b.n	8001108 <__eqsf2+0x28>
 8001128:	2000      	movs	r0, #0
 800112a:	e7ed      	b.n	8001108 <__eqsf2+0x28>

0800112c <__gesf2>:
 800112c:	b570      	push	{r4, r5, r6, lr}
 800112e:	0042      	lsls	r2, r0, #1
 8001130:	0245      	lsls	r5, r0, #9
 8001132:	024e      	lsls	r6, r1, #9
 8001134:	004c      	lsls	r4, r1, #1
 8001136:	0fc3      	lsrs	r3, r0, #31
 8001138:	0a6d      	lsrs	r5, r5, #9
 800113a:	0e12      	lsrs	r2, r2, #24
 800113c:	0a76      	lsrs	r6, r6, #9
 800113e:	0e24      	lsrs	r4, r4, #24
 8001140:	0fc8      	lsrs	r0, r1, #31
 8001142:	2aff      	cmp	r2, #255	; 0xff
 8001144:	d01b      	beq.n	800117e <__gesf2+0x52>
 8001146:	2cff      	cmp	r4, #255	; 0xff
 8001148:	d00e      	beq.n	8001168 <__gesf2+0x3c>
 800114a:	2a00      	cmp	r2, #0
 800114c:	d11b      	bne.n	8001186 <__gesf2+0x5a>
 800114e:	2c00      	cmp	r4, #0
 8001150:	d101      	bne.n	8001156 <__gesf2+0x2a>
 8001152:	2e00      	cmp	r6, #0
 8001154:	d01c      	beq.n	8001190 <__gesf2+0x64>
 8001156:	2d00      	cmp	r5, #0
 8001158:	d00c      	beq.n	8001174 <__gesf2+0x48>
 800115a:	4283      	cmp	r3, r0
 800115c:	d01c      	beq.n	8001198 <__gesf2+0x6c>
 800115e:	2102      	movs	r1, #2
 8001160:	1e58      	subs	r0, r3, #1
 8001162:	4008      	ands	r0, r1
 8001164:	3801      	subs	r0, #1
 8001166:	bd70      	pop	{r4, r5, r6, pc}
 8001168:	2e00      	cmp	r6, #0
 800116a:	d122      	bne.n	80011b2 <__gesf2+0x86>
 800116c:	2a00      	cmp	r2, #0
 800116e:	d1f4      	bne.n	800115a <__gesf2+0x2e>
 8001170:	2d00      	cmp	r5, #0
 8001172:	d1f2      	bne.n	800115a <__gesf2+0x2e>
 8001174:	2800      	cmp	r0, #0
 8001176:	d1f6      	bne.n	8001166 <__gesf2+0x3a>
 8001178:	2001      	movs	r0, #1
 800117a:	4240      	negs	r0, r0
 800117c:	e7f3      	b.n	8001166 <__gesf2+0x3a>
 800117e:	2d00      	cmp	r5, #0
 8001180:	d117      	bne.n	80011b2 <__gesf2+0x86>
 8001182:	2cff      	cmp	r4, #255	; 0xff
 8001184:	d0f0      	beq.n	8001168 <__gesf2+0x3c>
 8001186:	2c00      	cmp	r4, #0
 8001188:	d1e7      	bne.n	800115a <__gesf2+0x2e>
 800118a:	2e00      	cmp	r6, #0
 800118c:	d1e5      	bne.n	800115a <__gesf2+0x2e>
 800118e:	e7e6      	b.n	800115e <__gesf2+0x32>
 8001190:	2000      	movs	r0, #0
 8001192:	2d00      	cmp	r5, #0
 8001194:	d0e7      	beq.n	8001166 <__gesf2+0x3a>
 8001196:	e7e2      	b.n	800115e <__gesf2+0x32>
 8001198:	42a2      	cmp	r2, r4
 800119a:	dc05      	bgt.n	80011a8 <__gesf2+0x7c>
 800119c:	dbea      	blt.n	8001174 <__gesf2+0x48>
 800119e:	42b5      	cmp	r5, r6
 80011a0:	d802      	bhi.n	80011a8 <__gesf2+0x7c>
 80011a2:	d3e7      	bcc.n	8001174 <__gesf2+0x48>
 80011a4:	2000      	movs	r0, #0
 80011a6:	e7de      	b.n	8001166 <__gesf2+0x3a>
 80011a8:	4243      	negs	r3, r0
 80011aa:	4158      	adcs	r0, r3
 80011ac:	0040      	lsls	r0, r0, #1
 80011ae:	3801      	subs	r0, #1
 80011b0:	e7d9      	b.n	8001166 <__gesf2+0x3a>
 80011b2:	2002      	movs	r0, #2
 80011b4:	4240      	negs	r0, r0
 80011b6:	e7d6      	b.n	8001166 <__gesf2+0x3a>

080011b8 <__lesf2>:
 80011b8:	b570      	push	{r4, r5, r6, lr}
 80011ba:	0042      	lsls	r2, r0, #1
 80011bc:	0245      	lsls	r5, r0, #9
 80011be:	024e      	lsls	r6, r1, #9
 80011c0:	004c      	lsls	r4, r1, #1
 80011c2:	0fc3      	lsrs	r3, r0, #31
 80011c4:	0a6d      	lsrs	r5, r5, #9
 80011c6:	0e12      	lsrs	r2, r2, #24
 80011c8:	0a76      	lsrs	r6, r6, #9
 80011ca:	0e24      	lsrs	r4, r4, #24
 80011cc:	0fc8      	lsrs	r0, r1, #31
 80011ce:	2aff      	cmp	r2, #255	; 0xff
 80011d0:	d00b      	beq.n	80011ea <__lesf2+0x32>
 80011d2:	2cff      	cmp	r4, #255	; 0xff
 80011d4:	d00d      	beq.n	80011f2 <__lesf2+0x3a>
 80011d6:	2a00      	cmp	r2, #0
 80011d8:	d11f      	bne.n	800121a <__lesf2+0x62>
 80011da:	2c00      	cmp	r4, #0
 80011dc:	d116      	bne.n	800120c <__lesf2+0x54>
 80011de:	2e00      	cmp	r6, #0
 80011e0:	d114      	bne.n	800120c <__lesf2+0x54>
 80011e2:	2000      	movs	r0, #0
 80011e4:	2d00      	cmp	r5, #0
 80011e6:	d010      	beq.n	800120a <__lesf2+0x52>
 80011e8:	e009      	b.n	80011fe <__lesf2+0x46>
 80011ea:	2d00      	cmp	r5, #0
 80011ec:	d10c      	bne.n	8001208 <__lesf2+0x50>
 80011ee:	2cff      	cmp	r4, #255	; 0xff
 80011f0:	d113      	bne.n	800121a <__lesf2+0x62>
 80011f2:	2e00      	cmp	r6, #0
 80011f4:	d108      	bne.n	8001208 <__lesf2+0x50>
 80011f6:	2a00      	cmp	r2, #0
 80011f8:	d008      	beq.n	800120c <__lesf2+0x54>
 80011fa:	4283      	cmp	r3, r0
 80011fc:	d012      	beq.n	8001224 <__lesf2+0x6c>
 80011fe:	2102      	movs	r1, #2
 8001200:	1e58      	subs	r0, r3, #1
 8001202:	4008      	ands	r0, r1
 8001204:	3801      	subs	r0, #1
 8001206:	e000      	b.n	800120a <__lesf2+0x52>
 8001208:	2002      	movs	r0, #2
 800120a:	bd70      	pop	{r4, r5, r6, pc}
 800120c:	2d00      	cmp	r5, #0
 800120e:	d1f4      	bne.n	80011fa <__lesf2+0x42>
 8001210:	2800      	cmp	r0, #0
 8001212:	d1fa      	bne.n	800120a <__lesf2+0x52>
 8001214:	2001      	movs	r0, #1
 8001216:	4240      	negs	r0, r0
 8001218:	e7f7      	b.n	800120a <__lesf2+0x52>
 800121a:	2c00      	cmp	r4, #0
 800121c:	d1ed      	bne.n	80011fa <__lesf2+0x42>
 800121e:	2e00      	cmp	r6, #0
 8001220:	d1eb      	bne.n	80011fa <__lesf2+0x42>
 8001222:	e7ec      	b.n	80011fe <__lesf2+0x46>
 8001224:	42a2      	cmp	r2, r4
 8001226:	dc05      	bgt.n	8001234 <__lesf2+0x7c>
 8001228:	dbf2      	blt.n	8001210 <__lesf2+0x58>
 800122a:	42b5      	cmp	r5, r6
 800122c:	d802      	bhi.n	8001234 <__lesf2+0x7c>
 800122e:	d3ef      	bcc.n	8001210 <__lesf2+0x58>
 8001230:	2000      	movs	r0, #0
 8001232:	e7ea      	b.n	800120a <__lesf2+0x52>
 8001234:	4243      	negs	r3, r0
 8001236:	4158      	adcs	r0, r3
 8001238:	0040      	lsls	r0, r0, #1
 800123a:	3801      	subs	r0, #1
 800123c:	e7e5      	b.n	800120a <__lesf2+0x52>
 800123e:	46c0      	nop			; (mov r8, r8)

08001240 <HAL_ADC_ConvCpltCallback>:
uint16_t ADC_Value = 0;
uint16_t min_Pulse = 0, max_Pulse = 0;
float temp = 0.0;
uint16_t servo_Pulse = 0;

HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	temp = ((max_Pulse - min_Pulse) / 4096.0);
 8001248:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <HAL_ADC_ConvCpltCallback+0x78>)
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	001a      	movs	r2, r3
 800124e:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <HAL_ADC_ConvCpltCallback+0x7c>)
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	0018      	movs	r0, r3
 8001256:	f7ff fe33 	bl	8000ec0 <__aeabi_i2d>
 800125a:	2200      	movs	r2, #0
 800125c:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <HAL_ADC_ConvCpltCallback+0x80>)
 800125e:	f7ff fb39 	bl	80008d4 <__aeabi_ddiv>
 8001262:	0002      	movs	r2, r0
 8001264:	000b      	movs	r3, r1
 8001266:	0010      	movs	r0, r2
 8001268:	0019      	movs	r1, r3
 800126a:	f7ff fe59 	bl	8000f20 <__aeabi_d2f>
 800126e:	1c02      	adds	r2, r0, #0
 8001270:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <HAL_ADC_ConvCpltCallback+0x84>)
 8001272:	601a      	str	r2, [r3, #0]

	servo_Pulse = (uint16_t) (ADC_Value * temp) + min_Pulse;
 8001274:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <HAL_ADC_ConvCpltCallback+0x88>)
 8001276:	881b      	ldrh	r3, [r3, #0]
 8001278:	0018      	movs	r0, r3
 800127a:	f7ff fadd 	bl	8000838 <__aeabi_i2f>
 800127e:	1c02      	adds	r2, r0, #0
 8001280:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <HAL_ADC_ConvCpltCallback+0x84>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	1c19      	adds	r1, r3, #0
 8001286:	1c10      	adds	r0, r2, #0
 8001288:	f7fe ffe2 	bl	8000250 <__aeabi_fmul>
 800128c:	1c03      	adds	r3, r0, #0
 800128e:	1c18      	adds	r0, r3, #0
 8001290:	f7fe ffc6 	bl	8000220 <__aeabi_f2uiz>
 8001294:	0003      	movs	r3, r0
 8001296:	b29a      	uxth	r2, r3
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <HAL_ADC_ConvCpltCallback+0x7c>)
 800129a:	881b      	ldrh	r3, [r3, #0]
 800129c:	18d3      	adds	r3, r2, r3
 800129e:	b29a      	uxth	r2, r3
 80012a0:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <HAL_ADC_ConvCpltCallback+0x8c>)
 80012a2:	801a      	strh	r2, [r3, #0]

	SERVO_RawMove(SERVO_Motor_One, servo_Pulse);
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <HAL_ADC_ConvCpltCallback+0x8c>)
 80012a6:	881b      	ldrh	r3, [r3, #0]
 80012a8:	0019      	movs	r1, r3
 80012aa:	2000      	movs	r0, #0
 80012ac:	f000 f9d8 	bl	8001660 <SERVO_RawMove>

}
 80012b0:	46c0      	nop			; (mov r8, r8)
 80012b2:	46bd      	mov	sp, r7
 80012b4:	b002      	add	sp, #8
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200000f8 	.word	0x200000f8
 80012bc:	200000f6 	.word	0x200000f6
 80012c0:	40b00000 	.word	0x40b00000
 80012c4:	200000fc 	.word	0x200000fc
 80012c8:	200000f4 	.word	0x200000f4
 80012cc:	20000100 	.word	0x20000100

080012d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d4:	f000 fb56 	bl	8001984 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012d8:	f000 f830 	bl	800133c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012dc:	f000 f96c 	bl	80015b8 <MX_GPIO_Init>
  MX_DMA_Init();
 80012e0:	f000 f94c 	bl	800157c <MX_DMA_Init>
  MX_TIM2_Init();
 80012e4:	f000 f8ca 	bl	800147c <MX_TIM2_Init>
  MX_ADC_Init();
 80012e8:	f000 f86c 	bl	80013c4 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  SERVO_Init(SERVO_Motor_One,&htim2, TIM_CHANNEL_1);
 80012ec:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <main+0x58>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	0019      	movs	r1, r3
 80012f2:	2000      	movs	r0, #0
 80012f4:	f000 f98c 	bl	8001610 <SERVO_Init>

  min_Pulse = SERVO_Get_MinPulse(SERVO_Motor_One);
 80012f8:	2000      	movs	r0, #0
 80012fa:	f000 f9ed 	bl	80016d8 <SERVO_Get_MinPulse>
 80012fe:	0003      	movs	r3, r0
 8001300:	001a      	movs	r2, r3
 8001302:	4b0a      	ldr	r3, [pc, #40]	; (800132c <main+0x5c>)
 8001304:	801a      	strh	r2, [r3, #0]
  max_Pulse = SERVO_Get_MaxPulse(SERVO_Motor_One);
 8001306:	2000      	movs	r0, #0
 8001308:	f000 f9d2 	bl	80016b0 <SERVO_Get_MaxPulse>
 800130c:	0003      	movs	r3, r0
 800130e:	001a      	movs	r2, r3
 8001310:	4b07      	ldr	r3, [pc, #28]	; (8001330 <main+0x60>)
 8001312:	801a      	strh	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  HAL_ADC_Start_DMA(&hadc, &ADC_Value, 1);
 8001314:	4907      	ldr	r1, [pc, #28]	; (8001334 <main+0x64>)
 8001316:	4b08      	ldr	r3, [pc, #32]	; (8001338 <main+0x68>)
 8001318:	2201      	movs	r2, #1
 800131a:	0018      	movs	r0, r3
 800131c:	f000 fcfa 	bl	8001d14 <HAL_ADC_Start_DMA>
	  HAL_Delay(1);
 8001320:	2001      	movs	r0, #1
 8001322:	f000 fb93 	bl	8001a4c <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc, &ADC_Value, 1);
 8001326:	e7f5      	b.n	8001314 <main+0x44>
 8001328:	200000ac 	.word	0x200000ac
 800132c:	200000f6 	.word	0x200000f6
 8001330:	200000f8 	.word	0x200000f8
 8001334:	200000f4 	.word	0x200000f4
 8001338:	20000028 	.word	0x20000028

0800133c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800133c:	b590      	push	{r4, r7, lr}
 800133e:	b093      	sub	sp, #76	; 0x4c
 8001340:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001342:	2414      	movs	r4, #20
 8001344:	193b      	adds	r3, r7, r4
 8001346:	0018      	movs	r0, r3
 8001348:	2334      	movs	r3, #52	; 0x34
 800134a:	001a      	movs	r2, r3
 800134c:	2100      	movs	r1, #0
 800134e:	f002 feff 	bl	8004150 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	0018      	movs	r0, r3
 8001356:	2310      	movs	r3, #16
 8001358:	001a      	movs	r2, r3
 800135a:	2100      	movs	r1, #0
 800135c:	f002 fef8 	bl	8004150 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSI48;
 8001360:	0021      	movs	r1, r4
 8001362:	187b      	adds	r3, r7, r1
 8001364:	2230      	movs	r2, #48	; 0x30
 8001366:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001368:	187b      	adds	r3, r7, r1
 800136a:	2201      	movs	r2, #1
 800136c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800136e:	187b      	adds	r3, r7, r1
 8001370:	2201      	movs	r2, #1
 8001372:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001374:	187b      	adds	r3, r7, r1
 8001376:	2210      	movs	r2, #16
 8001378:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800137a:	187b      	adds	r3, r7, r1
 800137c:	2200      	movs	r2, #0
 800137e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001380:	187b      	adds	r3, r7, r1
 8001382:	0018      	movs	r0, r3
 8001384:	f001 fb5c 	bl	8002a40 <HAL_RCC_OscConfig>
 8001388:	1e03      	subs	r3, r0, #0
 800138a:	d001      	beq.n	8001390 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800138c:	f000 f93a 	bl	8001604 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	2207      	movs	r2, #7
 8001394:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	2203      	movs	r2, #3
 800139a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	2200      	movs	r2, #0
 80013a6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	2101      	movs	r1, #1
 80013ac:	0018      	movs	r0, r3
 80013ae:	f001 fecd 	bl	800314c <HAL_RCC_ClockConfig>
 80013b2:	1e03      	subs	r3, r0, #0
 80013b4:	d001      	beq.n	80013ba <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80013b6:	f000 f925 	bl	8001604 <Error_Handler>
  }
}
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	46bd      	mov	sp, r7
 80013be:	b013      	add	sp, #76	; 0x4c
 80013c0:	bd90      	pop	{r4, r7, pc}
	...

080013c4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	0018      	movs	r0, r3
 80013ce:	230c      	movs	r3, #12
 80013d0:	001a      	movs	r2, r3
 80013d2:	2100      	movs	r1, #0
 80013d4:	f002 febc 	bl	8004150 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80013d8:	4b26      	ldr	r3, [pc, #152]	; (8001474 <MX_ADC_Init+0xb0>)
 80013da:	4a27      	ldr	r2, [pc, #156]	; (8001478 <MX_ADC_Init+0xb4>)
 80013dc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80013de:	4b25      	ldr	r3, [pc, #148]	; (8001474 <MX_ADC_Init+0xb0>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80013e4:	4b23      	ldr	r3, [pc, #140]	; (8001474 <MX_ADC_Init+0xb0>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013ea:	4b22      	ldr	r3, [pc, #136]	; (8001474 <MX_ADC_Init+0xb0>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80013f0:	4b20      	ldr	r3, [pc, #128]	; (8001474 <MX_ADC_Init+0xb0>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013f6:	4b1f      	ldr	r3, [pc, #124]	; (8001474 <MX_ADC_Init+0xb0>)
 80013f8:	2204      	movs	r2, #4
 80013fa:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80013fc:	4b1d      	ldr	r3, [pc, #116]	; (8001474 <MX_ADC_Init+0xb0>)
 80013fe:	2200      	movs	r2, #0
 8001400:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001402:	4b1c      	ldr	r3, [pc, #112]	; (8001474 <MX_ADC_Init+0xb0>)
 8001404:	2200      	movs	r2, #0
 8001406:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001408:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <MX_ADC_Init+0xb0>)
 800140a:	2200      	movs	r2, #0
 800140c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800140e:	4b19      	ldr	r3, [pc, #100]	; (8001474 <MX_ADC_Init+0xb0>)
 8001410:	2200      	movs	r2, #0
 8001412:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001414:	4b17      	ldr	r3, [pc, #92]	; (8001474 <MX_ADC_Init+0xb0>)
 8001416:	22c2      	movs	r2, #194	; 0xc2
 8001418:	32ff      	adds	r2, #255	; 0xff
 800141a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800141c:	4b15      	ldr	r3, [pc, #84]	; (8001474 <MX_ADC_Init+0xb0>)
 800141e:	2200      	movs	r2, #0
 8001420:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001422:	4b14      	ldr	r3, [pc, #80]	; (8001474 <MX_ADC_Init+0xb0>)
 8001424:	2224      	movs	r2, #36	; 0x24
 8001426:	2100      	movs	r1, #0
 8001428:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800142a:	4b12      	ldr	r3, [pc, #72]	; (8001474 <MX_ADC_Init+0xb0>)
 800142c:	2201      	movs	r2, #1
 800142e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001430:	4b10      	ldr	r3, [pc, #64]	; (8001474 <MX_ADC_Init+0xb0>)
 8001432:	0018      	movs	r0, r3
 8001434:	f000 fb2e 	bl	8001a94 <HAL_ADC_Init>
 8001438:	1e03      	subs	r3, r0, #0
 800143a:	d001      	beq.n	8001440 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800143c:	f000 f8e2 	bl	8001604 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	2207      	movs	r2, #7
 8001444:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	2280      	movs	r2, #128	; 0x80
 800144a:	0152      	lsls	r2, r2, #5
 800144c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	2280      	movs	r2, #128	; 0x80
 8001452:	0552      	lsls	r2, r2, #21
 8001454:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001456:	1d3a      	adds	r2, r7, #4
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <MX_ADC_Init+0xb0>)
 800145a:	0011      	movs	r1, r2
 800145c:	0018      	movs	r0, r3
 800145e:	f000 fceb 	bl	8001e38 <HAL_ADC_ConfigChannel>
 8001462:	1e03      	subs	r3, r0, #0
 8001464:	d001      	beq.n	800146a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8001466:	f000 f8cd 	bl	8001604 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	46bd      	mov	sp, r7
 800146e:	b004      	add	sp, #16
 8001470:	bd80      	pop	{r7, pc}
 8001472:	46c0      	nop			; (mov r8, r8)
 8001474:	20000028 	.word	0x20000028
 8001478:	40012400 	.word	0x40012400

0800147c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08e      	sub	sp, #56	; 0x38
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001482:	2328      	movs	r3, #40	; 0x28
 8001484:	18fb      	adds	r3, r7, r3
 8001486:	0018      	movs	r0, r3
 8001488:	2310      	movs	r3, #16
 800148a:	001a      	movs	r2, r3
 800148c:	2100      	movs	r1, #0
 800148e:	f002 fe5f 	bl	8004150 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001492:	2320      	movs	r3, #32
 8001494:	18fb      	adds	r3, r7, r3
 8001496:	0018      	movs	r0, r3
 8001498:	2308      	movs	r3, #8
 800149a:	001a      	movs	r2, r3
 800149c:	2100      	movs	r1, #0
 800149e:	f002 fe57 	bl	8004150 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	0018      	movs	r0, r3
 80014a6:	231c      	movs	r3, #28
 80014a8:	001a      	movs	r2, r3
 80014aa:	2100      	movs	r1, #0
 80014ac:	f002 fe50 	bl	8004150 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014b0:	4b30      	ldr	r3, [pc, #192]	; (8001574 <MX_TIM2_Init+0xf8>)
 80014b2:	2280      	movs	r2, #128	; 0x80
 80014b4:	05d2      	lsls	r2, r2, #23
 80014b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 19;
 80014b8:	4b2e      	ldr	r3, [pc, #184]	; (8001574 <MX_TIM2_Init+0xf8>)
 80014ba:	2213      	movs	r2, #19
 80014bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014be:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <MX_TIM2_Init+0xf8>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 47999;
 80014c4:	4b2b      	ldr	r3, [pc, #172]	; (8001574 <MX_TIM2_Init+0xf8>)
 80014c6:	4a2c      	ldr	r2, [pc, #176]	; (8001578 <MX_TIM2_Init+0xfc>)
 80014c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ca:	4b2a      	ldr	r3, [pc, #168]	; (8001574 <MX_TIM2_Init+0xf8>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014d0:	4b28      	ldr	r3, [pc, #160]	; (8001574 <MX_TIM2_Init+0xf8>)
 80014d2:	2280      	movs	r2, #128	; 0x80
 80014d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014d6:	4b27      	ldr	r3, [pc, #156]	; (8001574 <MX_TIM2_Init+0xf8>)
 80014d8:	0018      	movs	r0, r3
 80014da:	f001 ff83 	bl	80033e4 <HAL_TIM_Base_Init>
 80014de:	1e03      	subs	r3, r0, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80014e2:	f000 f88f 	bl	8001604 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014e6:	2128      	movs	r1, #40	; 0x28
 80014e8:	187b      	adds	r3, r7, r1
 80014ea:	2280      	movs	r2, #128	; 0x80
 80014ec:	0152      	lsls	r2, r2, #5
 80014ee:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014f0:	187a      	adds	r2, r7, r1
 80014f2:	4b20      	ldr	r3, [pc, #128]	; (8001574 <MX_TIM2_Init+0xf8>)
 80014f4:	0011      	movs	r1, r2
 80014f6:	0018      	movs	r0, r3
 80014f8:	f002 f99a 	bl	8003830 <HAL_TIM_ConfigClockSource>
 80014fc:	1e03      	subs	r3, r0, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001500:	f000 f880 	bl	8001604 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001504:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <MX_TIM2_Init+0xf8>)
 8001506:	0018      	movs	r0, r3
 8001508:	f001 ffbc 	bl	8003484 <HAL_TIM_PWM_Init>
 800150c:	1e03      	subs	r3, r0, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001510:	f000 f878 	bl	8001604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001514:	2120      	movs	r1, #32
 8001516:	187b      	adds	r3, r7, r1
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151c:	187b      	adds	r3, r7, r1
 800151e:	2200      	movs	r2, #0
 8001520:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001522:	187a      	adds	r2, r7, r1
 8001524:	4b13      	ldr	r3, [pc, #76]	; (8001574 <MX_TIM2_Init+0xf8>)
 8001526:	0011      	movs	r1, r2
 8001528:	0018      	movs	r0, r3
 800152a:	f002 fd8f 	bl	800404c <HAL_TIMEx_MasterConfigSynchronization>
 800152e:	1e03      	subs	r3, r0, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8001532:	f000 f867 	bl	8001604 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	2260      	movs	r2, #96	; 0x60
 800153a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	2200      	movs	r2, #0
 8001540:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800154e:	1d39      	adds	r1, r7, #4
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <MX_TIM2_Init+0xf8>)
 8001552:	2200      	movs	r2, #0
 8001554:	0018      	movs	r0, r3
 8001556:	f002 f8a5 	bl	80036a4 <HAL_TIM_PWM_ConfigChannel>
 800155a:	1e03      	subs	r3, r0, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 800155e:	f000 f851 	bl	8001604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001562:	4b04      	ldr	r3, [pc, #16]	; (8001574 <MX_TIM2_Init+0xf8>)
 8001564:	0018      	movs	r0, r3
 8001566:	f000 f97b 	bl	8001860 <HAL_TIM_MspPostInit>

}
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	46bd      	mov	sp, r7
 800156e:	b00e      	add	sp, #56	; 0x38
 8001570:	bd80      	pop	{r7, pc}
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	200000ac 	.word	0x200000ac
 8001578:	0000bb7f 	.word	0x0000bb7f

0800157c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001582:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <MX_DMA_Init+0x38>)
 8001584:	695a      	ldr	r2, [r3, #20]
 8001586:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <MX_DMA_Init+0x38>)
 8001588:	2101      	movs	r1, #1
 800158a:	430a      	orrs	r2, r1
 800158c:	615a      	str	r2, [r3, #20]
 800158e:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <MX_DMA_Init+0x38>)
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	2201      	movs	r2, #1
 8001594:	4013      	ands	r3, r2
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	2100      	movs	r1, #0
 800159e:	2009      	movs	r0, #9
 80015a0:	f000 ff0c 	bl	80023bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015a4:	2009      	movs	r0, #9
 80015a6:	f000 ff1e 	bl	80023e6 <HAL_NVIC_EnableIRQ>

}
 80015aa:	46c0      	nop			; (mov r8, r8)
 80015ac:	46bd      	mov	sp, r7
 80015ae:	b002      	add	sp, #8
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	40021000 	.word	0x40021000

080015b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015be:	4b10      	ldr	r3, [pc, #64]	; (8001600 <MX_GPIO_Init+0x48>)
 80015c0:	695a      	ldr	r2, [r3, #20]
 80015c2:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <MX_GPIO_Init+0x48>)
 80015c4:	2180      	movs	r1, #128	; 0x80
 80015c6:	03c9      	lsls	r1, r1, #15
 80015c8:	430a      	orrs	r2, r1
 80015ca:	615a      	str	r2, [r3, #20]
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <MX_GPIO_Init+0x48>)
 80015ce:	695a      	ldr	r2, [r3, #20]
 80015d0:	2380      	movs	r3, #128	; 0x80
 80015d2:	03db      	lsls	r3, r3, #15
 80015d4:	4013      	ands	r3, r2
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <MX_GPIO_Init+0x48>)
 80015dc:	695a      	ldr	r2, [r3, #20]
 80015de:	4b08      	ldr	r3, [pc, #32]	; (8001600 <MX_GPIO_Init+0x48>)
 80015e0:	2180      	movs	r1, #128	; 0x80
 80015e2:	0289      	lsls	r1, r1, #10
 80015e4:	430a      	orrs	r2, r1
 80015e6:	615a      	str	r2, [r3, #20]
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <MX_GPIO_Init+0x48>)
 80015ea:	695a      	ldr	r2, [r3, #20]
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	029b      	lsls	r3, r3, #10
 80015f0:	4013      	ands	r3, r2
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	683b      	ldr	r3, [r7, #0]

}
 80015f6:	46c0      	nop			; (mov r8, r8)
 80015f8:	46bd      	mov	sp, r7
 80015fa:	b002      	add	sp, #8
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	40021000 	.word	0x40021000

08001604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001608:	b672      	cpsid	i
}
 800160a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800160c:	e7fe      	b.n	800160c <Error_Handler+0x8>
	...

08001610 <SERVO_Init>:

static SERVO_info SERVO_Info[SERVO_NUM] = {0};


void SERVO_Init(uint16_t SERVO_Number, uint32_t TIM,uint32_t CHANNEL)
{
 8001610:	b590      	push	{r4, r7, lr}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	60b9      	str	r1, [r7, #8]
 8001618:	607a      	str	r2, [r7, #4]
 800161a:	240e      	movs	r4, #14
 800161c:	193b      	adds	r3, r7, r4
 800161e:	1c02      	adds	r2, r0, #0
 8001620:	801a      	strh	r2, [r3, #0]
	HAL_TIM_PWM_Start(TIM,CHANNEL);
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	0011      	movs	r1, r2
 8001628:	0018      	movs	r0, r3
 800162a:	f001 ff83 	bl	8003534 <HAL_TIM_PWM_Start>


	//	Calculate & Save The Servo Pulse Information

	SERVO_Info[SERVO_Number].period_Min = (uint16_t) (47999 * (0.5/20.0));
 800162e:	0020      	movs	r0, r4
 8001630:	183b      	adds	r3, r7, r0
 8001632:	881a      	ldrh	r2, [r3, #0]
 8001634:	4b07      	ldr	r3, [pc, #28]	; (8001654 <SERVO_Init+0x44>)
 8001636:	0092      	lsls	r2, r2, #2
 8001638:	4907      	ldr	r1, [pc, #28]	; (8001658 <SERVO_Init+0x48>)
 800163a:	52d1      	strh	r1, [r2, r3]
	SERVO_Info[SERVO_Number].period_Max = (uint16_t) (47999 * (2.4/20.0));
 800163c:	183b      	adds	r3, r7, r0
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	4a04      	ldr	r2, [pc, #16]	; (8001654 <SERVO_Init+0x44>)
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	18d3      	adds	r3, r2, r3
 8001646:	3302      	adds	r3, #2
 8001648:	4a04      	ldr	r2, [pc, #16]	; (800165c <SERVO_Init+0x4c>)
 800164a:	801a      	strh	r2, [r3, #0]


}
 800164c:	46c0      	nop			; (mov r8, r8)
 800164e:	46bd      	mov	sp, r7
 8001650:	b005      	add	sp, #20
 8001652:	bd90      	pop	{r4, r7, pc}
 8001654:	20000104 	.word	0x20000104
 8001658:	000004af 	.word	0x000004af
 800165c:	0000167f 	.word	0x0000167f

08001660 <SERVO_RawMove>:

	TIM2->CCR1 = Pulse;
}

void SERVO_RawMove(uint16_t SERVO_Number, uint16_t Pulse)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	0002      	movs	r2, r0
 8001668:	1dbb      	adds	r3, r7, #6
 800166a:	801a      	strh	r2, [r3, #0]
 800166c:	1d3b      	adds	r3, r7, #4
 800166e:	1c0a      	adds	r2, r1, #0
 8001670:	801a      	strh	r2, [r3, #0]
	if(Pulse <= SERVO_Info[SERVO_Number].period_Max && Pulse >= SERVO_Info[SERVO_Number].period_Min)
 8001672:	1dbb      	adds	r3, r7, #6
 8001674:	881b      	ldrh	r3, [r3, #0]
 8001676:	4a0d      	ldr	r2, [pc, #52]	; (80016ac <SERVO_RawMove+0x4c>)
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	18d3      	adds	r3, r2, r3
 800167c:	3302      	adds	r3, #2
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	1d3a      	adds	r2, r7, #4
 8001682:	8812      	ldrh	r2, [r2, #0]
 8001684:	429a      	cmp	r2, r3
 8001686:	d80d      	bhi.n	80016a4 <SERVO_RawMove+0x44>
 8001688:	1dbb      	adds	r3, r7, #6
 800168a:	881a      	ldrh	r2, [r3, #0]
 800168c:	4b07      	ldr	r3, [pc, #28]	; (80016ac <SERVO_RawMove+0x4c>)
 800168e:	0092      	lsls	r2, r2, #2
 8001690:	5ad3      	ldrh	r3, [r2, r3]
 8001692:	1d3a      	adds	r2, r7, #4
 8001694:	8812      	ldrh	r2, [r2, #0]
 8001696:	429a      	cmp	r2, r3
 8001698:	d304      	bcc.n	80016a4 <SERVO_RawMove+0x44>
	{
		TIM2->CCR1 = Pulse;
 800169a:	2380      	movs	r3, #128	; 0x80
 800169c:	05db      	lsls	r3, r3, #23
 800169e:	1d3a      	adds	r2, r7, #4
 80016a0:	8812      	ldrh	r2, [r2, #0]
 80016a2:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 80016a4:	46c0      	nop			; (mov r8, r8)
 80016a6:	46bd      	mov	sp, r7
 80016a8:	b002      	add	sp, #8
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000104 	.word	0x20000104

080016b0 <SERVO_Get_MaxPulse>:

uint16_t SERVO_Get_MaxPulse(uint16_t SERVO_Number)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	0002      	movs	r2, r0
 80016b8:	1dbb      	adds	r3, r7, #6
 80016ba:	801a      	strh	r2, [r3, #0]
	return (SERVO_Info[SERVO_Number].period_Max);
 80016bc:	1dbb      	adds	r3, r7, #6
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	4a04      	ldr	r2, [pc, #16]	; (80016d4 <SERVO_Get_MaxPulse+0x24>)
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	18d3      	adds	r3, r2, r3
 80016c6:	3302      	adds	r3, #2
 80016c8:	881b      	ldrh	r3, [r3, #0]
}
 80016ca:	0018      	movs	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	b002      	add	sp, #8
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	46c0      	nop			; (mov r8, r8)
 80016d4:	20000104 	.word	0x20000104

080016d8 <SERVO_Get_MinPulse>:


/* Gets The Minimum Pulse Width Value For A Specific Motor */
uint16_t SERVO_Get_MinPulse(uint16_t SERVO_Number)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	0002      	movs	r2, r0
 80016e0:	1dbb      	adds	r3, r7, #6
 80016e2:	801a      	strh	r2, [r3, #0]
	return (SERVO_Info[SERVO_Number].period_Min);
 80016e4:	1dbb      	adds	r3, r7, #6
 80016e6:	881a      	ldrh	r2, [r3, #0]
 80016e8:	4b03      	ldr	r3, [pc, #12]	; (80016f8 <SERVO_Get_MinPulse+0x20>)
 80016ea:	0092      	lsls	r2, r2, #2
 80016ec:	5ad3      	ldrh	r3, [r2, r3]
}
 80016ee:	0018      	movs	r0, r3
 80016f0:	46bd      	mov	sp, r7
 80016f2:	b002      	add	sp, #8
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	46c0      	nop			; (mov r8, r8)
 80016f8:	20000104 	.word	0x20000104

080016fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001702:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <HAL_MspInit+0x44>)
 8001704:	699a      	ldr	r2, [r3, #24]
 8001706:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <HAL_MspInit+0x44>)
 8001708:	2101      	movs	r1, #1
 800170a:	430a      	orrs	r2, r1
 800170c:	619a      	str	r2, [r3, #24]
 800170e:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <HAL_MspInit+0x44>)
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	2201      	movs	r2, #1
 8001714:	4013      	ands	r3, r2
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800171a:	4b09      	ldr	r3, [pc, #36]	; (8001740 <HAL_MspInit+0x44>)
 800171c:	69da      	ldr	r2, [r3, #28]
 800171e:	4b08      	ldr	r3, [pc, #32]	; (8001740 <HAL_MspInit+0x44>)
 8001720:	2180      	movs	r1, #128	; 0x80
 8001722:	0549      	lsls	r1, r1, #21
 8001724:	430a      	orrs	r2, r1
 8001726:	61da      	str	r2, [r3, #28]
 8001728:	4b05      	ldr	r3, [pc, #20]	; (8001740 <HAL_MspInit+0x44>)
 800172a:	69da      	ldr	r2, [r3, #28]
 800172c:	2380      	movs	r3, #128	; 0x80
 800172e:	055b      	lsls	r3, r3, #21
 8001730:	4013      	ands	r3, r2
 8001732:	603b      	str	r3, [r7, #0]
 8001734:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	46bd      	mov	sp, r7
 800173a:	b002      	add	sp, #8
 800173c:	bd80      	pop	{r7, pc}
 800173e:	46c0      	nop			; (mov r8, r8)
 8001740:	40021000 	.word	0x40021000

08001744 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001744:	b590      	push	{r4, r7, lr}
 8001746:	b08b      	sub	sp, #44	; 0x2c
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174c:	2414      	movs	r4, #20
 800174e:	193b      	adds	r3, r7, r4
 8001750:	0018      	movs	r0, r3
 8001752:	2314      	movs	r3, #20
 8001754:	001a      	movs	r2, r3
 8001756:	2100      	movs	r1, #0
 8001758:	f002 fcfa 	bl	8004150 <memset>
  if(hadc->Instance==ADC1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a2d      	ldr	r2, [pc, #180]	; (8001818 <HAL_ADC_MspInit+0xd4>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d153      	bne.n	800180e <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001766:	4b2d      	ldr	r3, [pc, #180]	; (800181c <HAL_ADC_MspInit+0xd8>)
 8001768:	699a      	ldr	r2, [r3, #24]
 800176a:	4b2c      	ldr	r3, [pc, #176]	; (800181c <HAL_ADC_MspInit+0xd8>)
 800176c:	2180      	movs	r1, #128	; 0x80
 800176e:	0089      	lsls	r1, r1, #2
 8001770:	430a      	orrs	r2, r1
 8001772:	619a      	str	r2, [r3, #24]
 8001774:	4b29      	ldr	r3, [pc, #164]	; (800181c <HAL_ADC_MspInit+0xd8>)
 8001776:	699a      	ldr	r2, [r3, #24]
 8001778:	2380      	movs	r3, #128	; 0x80
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4013      	ands	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001782:	4b26      	ldr	r3, [pc, #152]	; (800181c <HAL_ADC_MspInit+0xd8>)
 8001784:	695a      	ldr	r2, [r3, #20]
 8001786:	4b25      	ldr	r3, [pc, #148]	; (800181c <HAL_ADC_MspInit+0xd8>)
 8001788:	2180      	movs	r1, #128	; 0x80
 800178a:	0289      	lsls	r1, r1, #10
 800178c:	430a      	orrs	r2, r1
 800178e:	615a      	str	r2, [r3, #20]
 8001790:	4b22      	ldr	r3, [pc, #136]	; (800181c <HAL_ADC_MspInit+0xd8>)
 8001792:	695a      	ldr	r2, [r3, #20]
 8001794:	2380      	movs	r3, #128	; 0x80
 8001796:	029b      	lsls	r3, r3, #10
 8001798:	4013      	ands	r3, r2
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800179e:	193b      	adds	r3, r7, r4
 80017a0:	2280      	movs	r2, #128	; 0x80
 80017a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017a4:	193b      	adds	r3, r7, r4
 80017a6:	2203      	movs	r2, #3
 80017a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	193b      	adds	r3, r7, r4
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b0:	193a      	adds	r2, r7, r4
 80017b2:	2390      	movs	r3, #144	; 0x90
 80017b4:	05db      	lsls	r3, r3, #23
 80017b6:	0011      	movs	r1, r2
 80017b8:	0018      	movs	r0, r3
 80017ba:	f000 ffc9 	bl	8002750 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80017be:	4b18      	ldr	r3, [pc, #96]	; (8001820 <HAL_ADC_MspInit+0xdc>)
 80017c0:	4a18      	ldr	r2, [pc, #96]	; (8001824 <HAL_ADC_MspInit+0xe0>)
 80017c2:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017c4:	4b16      	ldr	r3, [pc, #88]	; (8001820 <HAL_ADC_MspInit+0xdc>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80017ca:	4b15      	ldr	r3, [pc, #84]	; (8001820 <HAL_ADC_MspInit+0xdc>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80017d0:	4b13      	ldr	r3, [pc, #76]	; (8001820 <HAL_ADC_MspInit+0xdc>)
 80017d2:	2280      	movs	r2, #128	; 0x80
 80017d4:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017d6:	4b12      	ldr	r3, [pc, #72]	; (8001820 <HAL_ADC_MspInit+0xdc>)
 80017d8:	2280      	movs	r2, #128	; 0x80
 80017da:	0052      	lsls	r2, r2, #1
 80017dc:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <HAL_ADC_MspInit+0xdc>)
 80017e0:	2280      	movs	r2, #128	; 0x80
 80017e2:	00d2      	lsls	r2, r2, #3
 80017e4:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 80017e6:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <HAL_ADC_MspInit+0xdc>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <HAL_ADC_MspInit+0xdc>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <HAL_ADC_MspInit+0xdc>)
 80017f4:	0018      	movs	r0, r3
 80017f6:	f000 fe13 	bl	8002420 <HAL_DMA_Init>
 80017fa:	1e03      	subs	r3, r0, #0
 80017fc:	d001      	beq.n	8001802 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 80017fe:	f7ff ff01 	bl	8001604 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a06      	ldr	r2, [pc, #24]	; (8001820 <HAL_ADC_MspInit+0xdc>)
 8001806:	631a      	str	r2, [r3, #48]	; 0x30
 8001808:	4b05      	ldr	r3, [pc, #20]	; (8001820 <HAL_ADC_MspInit+0xdc>)
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800180e:	46c0      	nop			; (mov r8, r8)
 8001810:	46bd      	mov	sp, r7
 8001812:	b00b      	add	sp, #44	; 0x2c
 8001814:	bd90      	pop	{r4, r7, pc}
 8001816:	46c0      	nop			; (mov r8, r8)
 8001818:	40012400 	.word	0x40012400
 800181c:	40021000 	.word	0x40021000
 8001820:	20000068 	.word	0x20000068
 8001824:	40020008 	.word	0x40020008

08001828 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	2380      	movs	r3, #128	; 0x80
 8001836:	05db      	lsls	r3, r3, #23
 8001838:	429a      	cmp	r2, r3
 800183a:	d10b      	bne.n	8001854 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800183c:	4b07      	ldr	r3, [pc, #28]	; (800185c <HAL_TIM_Base_MspInit+0x34>)
 800183e:	69da      	ldr	r2, [r3, #28]
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <HAL_TIM_Base_MspInit+0x34>)
 8001842:	2101      	movs	r1, #1
 8001844:	430a      	orrs	r2, r1
 8001846:	61da      	str	r2, [r3, #28]
 8001848:	4b04      	ldr	r3, [pc, #16]	; (800185c <HAL_TIM_Base_MspInit+0x34>)
 800184a:	69db      	ldr	r3, [r3, #28]
 800184c:	2201      	movs	r2, #1
 800184e:	4013      	ands	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001854:	46c0      	nop			; (mov r8, r8)
 8001856:	46bd      	mov	sp, r7
 8001858:	b004      	add	sp, #16
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40021000 	.word	0x40021000

08001860 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001860:	b590      	push	{r4, r7, lr}
 8001862:	b089      	sub	sp, #36	; 0x24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	240c      	movs	r4, #12
 800186a:	193b      	adds	r3, r7, r4
 800186c:	0018      	movs	r0, r3
 800186e:	2314      	movs	r3, #20
 8001870:	001a      	movs	r2, r3
 8001872:	2100      	movs	r1, #0
 8001874:	f002 fc6c 	bl	8004150 <memset>
  if(htim->Instance==TIM2)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	2380      	movs	r3, #128	; 0x80
 800187e:	05db      	lsls	r3, r3, #23
 8001880:	429a      	cmp	r2, r3
 8001882:	d124      	bne.n	80018ce <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001884:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <HAL_TIM_MspPostInit+0x78>)
 8001886:	695a      	ldr	r2, [r3, #20]
 8001888:	4b13      	ldr	r3, [pc, #76]	; (80018d8 <HAL_TIM_MspPostInit+0x78>)
 800188a:	2180      	movs	r1, #128	; 0x80
 800188c:	0289      	lsls	r1, r1, #10
 800188e:	430a      	orrs	r2, r1
 8001890:	615a      	str	r2, [r3, #20]
 8001892:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <HAL_TIM_MspPostInit+0x78>)
 8001894:	695a      	ldr	r2, [r3, #20]
 8001896:	2380      	movs	r3, #128	; 0x80
 8001898:	029b      	lsls	r3, r3, #10
 800189a:	4013      	ands	r3, r2
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018a0:	0021      	movs	r1, r4
 80018a2:	187b      	adds	r3, r7, r1
 80018a4:	2201      	movs	r2, #1
 80018a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a8:	187b      	adds	r3, r7, r1
 80018aa:	2202      	movs	r2, #2
 80018ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	187b      	adds	r3, r7, r1
 80018b0:	2200      	movs	r2, #0
 80018b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b4:	187b      	adds	r3, r7, r1
 80018b6:	2200      	movs	r2, #0
 80018b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80018ba:	187b      	adds	r3, r7, r1
 80018bc:	2202      	movs	r2, #2
 80018be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c0:	187a      	adds	r2, r7, r1
 80018c2:	2390      	movs	r3, #144	; 0x90
 80018c4:	05db      	lsls	r3, r3, #23
 80018c6:	0011      	movs	r1, r2
 80018c8:	0018      	movs	r0, r3
 80018ca:	f000 ff41 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	46bd      	mov	sp, r7
 80018d2:	b009      	add	sp, #36	; 0x24
 80018d4:	bd90      	pop	{r4, r7, pc}
 80018d6:	46c0      	nop			; (mov r8, r8)
 80018d8:	40021000 	.word	0x40021000

080018dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <NMI_Handler+0x4>

080018e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018e6:	e7fe      	b.n	80018e6 <HardFault_Handler+0x4>

080018e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80018ec:	46c0      	nop			; (mov r8, r8)
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018f6:	46c0      	nop			; (mov r8, r8)
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001900:	f000 f888 	bl	8001a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001904:	46c0      	nop			; (mov r8, r8)
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001910:	4b03      	ldr	r3, [pc, #12]	; (8001920 <DMA1_Channel1_IRQHandler+0x14>)
 8001912:	0018      	movs	r0, r3
 8001914:	f000 fe32 	bl	800257c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001918:	46c0      	nop			; (mov r8, r8)
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	20000068 	.word	0x20000068

08001924 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001928:	46c0      	nop			; (mov r8, r8)
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
	...

08001930 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001930:	480d      	ldr	r0, [pc, #52]	; (8001968 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001932:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001934:	f7ff fff6 	bl	8001924 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001938:	480c      	ldr	r0, [pc, #48]	; (800196c <LoopForever+0x6>)
  ldr r1, =_edata
 800193a:	490d      	ldr	r1, [pc, #52]	; (8001970 <LoopForever+0xa>)
  ldr r2, =_sidata
 800193c:	4a0d      	ldr	r2, [pc, #52]	; (8001974 <LoopForever+0xe>)
  movs r3, #0
 800193e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001940:	e002      	b.n	8001948 <LoopCopyDataInit>

08001942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001946:	3304      	adds	r3, #4

08001948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800194a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800194c:	d3f9      	bcc.n	8001942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800194e:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001950:	4c0a      	ldr	r4, [pc, #40]	; (800197c <LoopForever+0x16>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001954:	e001      	b.n	800195a <LoopFillZerobss>

08001956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001958:	3204      	adds	r2, #4

0800195a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800195a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800195c:	d3fb      	bcc.n	8001956 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800195e:	f002 fbd3 	bl	8004108 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001962:	f7ff fcb5 	bl	80012d0 <main>

08001966 <LoopForever>:

LoopForever:
    b LoopForever
 8001966:	e7fe      	b.n	8001966 <LoopForever>
  ldr   r0, =_estack
 8001968:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800196c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001970:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001974:	08004230 	.word	0x08004230
  ldr r2, =_sbss
 8001978:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800197c:	2000010c 	.word	0x2000010c

08001980 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001980:	e7fe      	b.n	8001980 <ADC1_COMP_IRQHandler>
	...

08001984 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001988:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <HAL_Init+0x24>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <HAL_Init+0x24>)
 800198e:	2110      	movs	r1, #16
 8001990:	430a      	orrs	r2, r1
 8001992:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001994:	2003      	movs	r0, #3
 8001996:	f000 f809 	bl	80019ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800199a:	f7ff feaf 	bl	80016fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	0018      	movs	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	40022000 	.word	0x40022000

080019ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ac:	b590      	push	{r4, r7, lr}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019b4:	4b14      	ldr	r3, [pc, #80]	; (8001a08 <HAL_InitTick+0x5c>)
 80019b6:	681c      	ldr	r4, [r3, #0]
 80019b8:	4b14      	ldr	r3, [pc, #80]	; (8001a0c <HAL_InitTick+0x60>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	0019      	movs	r1, r3
 80019be:	23fa      	movs	r3, #250	; 0xfa
 80019c0:	0098      	lsls	r0, r3, #2
 80019c2:	f7fe fba1 	bl	8000108 <__udivsi3>
 80019c6:	0003      	movs	r3, r0
 80019c8:	0019      	movs	r1, r3
 80019ca:	0020      	movs	r0, r4
 80019cc:	f7fe fb9c 	bl	8000108 <__udivsi3>
 80019d0:	0003      	movs	r3, r0
 80019d2:	0018      	movs	r0, r3
 80019d4:	f000 fd17 	bl	8002406 <HAL_SYSTICK_Config>
 80019d8:	1e03      	subs	r3, r0, #0
 80019da:	d001      	beq.n	80019e0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e00f      	b.n	8001a00 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b03      	cmp	r3, #3
 80019e4:	d80b      	bhi.n	80019fe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	2301      	movs	r3, #1
 80019ea:	425b      	negs	r3, r3
 80019ec:	2200      	movs	r2, #0
 80019ee:	0018      	movs	r0, r3
 80019f0:	f000 fce4 	bl	80023bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019f4:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <HAL_InitTick+0x64>)
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
 80019fc:	e000      	b.n	8001a00 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
}
 8001a00:	0018      	movs	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	b003      	add	sp, #12
 8001a06:	bd90      	pop	{r4, r7, pc}
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	20000008 	.word	0x20000008
 8001a10:	20000004 	.word	0x20000004

08001a14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a18:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <HAL_IncTick+0x1c>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	001a      	movs	r2, r3
 8001a1e:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <HAL_IncTick+0x20>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	18d2      	adds	r2, r2, r3
 8001a24:	4b03      	ldr	r3, [pc, #12]	; (8001a34 <HAL_IncTick+0x20>)
 8001a26:	601a      	str	r2, [r3, #0]
}
 8001a28:	46c0      	nop			; (mov r8, r8)
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	46c0      	nop			; (mov r8, r8)
 8001a30:	20000008 	.word	0x20000008
 8001a34:	20000108 	.word	0x20000108

08001a38 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a3c:	4b02      	ldr	r3, [pc, #8]	; (8001a48 <HAL_GetTick+0x10>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
}
 8001a40:	0018      	movs	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	20000108 	.word	0x20000108

08001a4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a54:	f7ff fff0 	bl	8001a38 <HAL_GetTick>
 8001a58:	0003      	movs	r3, r0
 8001a5a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	3301      	adds	r3, #1
 8001a64:	d005      	beq.n	8001a72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a66:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <HAL_Delay+0x44>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	001a      	movs	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	189b      	adds	r3, r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	f7ff ffe0 	bl	8001a38 <HAL_GetTick>
 8001a78:	0002      	movs	r2, r0
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d8f7      	bhi.n	8001a74 <HAL_Delay+0x28>
  {
  }
}
 8001a84:	46c0      	nop			; (mov r8, r8)
 8001a86:	46c0      	nop			; (mov r8, r8)
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	b004      	add	sp, #16
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	46c0      	nop			; (mov r8, r8)
 8001a90:	20000008 	.word	0x20000008

08001a94 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a9c:	230f      	movs	r3, #15
 8001a9e:	18fb      	adds	r3, r7, r3
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e125      	b.n	8001cfe <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10a      	bne.n	8001ad0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2234      	movs	r2, #52	; 0x34
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	0018      	movs	r0, r3
 8001acc:	f7ff fe3a 	bl	8001744 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ad4:	2210      	movs	r2, #16
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d000      	beq.n	8001adc <HAL_ADC_Init+0x48>
 8001ada:	e103      	b.n	8001ce4 <HAL_ADC_Init+0x250>
 8001adc:	230f      	movs	r3, #15
 8001ade:	18fb      	adds	r3, r7, r3
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d000      	beq.n	8001ae8 <HAL_ADC_Init+0x54>
 8001ae6:	e0fd      	b.n	8001ce4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	2204      	movs	r2, #4
 8001af0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001af2:	d000      	beq.n	8001af6 <HAL_ADC_Init+0x62>
 8001af4:	e0f6      	b.n	8001ce4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001afa:	4a83      	ldr	r2, [pc, #524]	; (8001d08 <HAL_ADC_Init+0x274>)
 8001afc:	4013      	ands	r3, r2
 8001afe:	2202      	movs	r2, #2
 8001b00:	431a      	orrs	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	2203      	movs	r2, #3
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d112      	bne.n	8001b3a <HAL_ADC_Init+0xa6>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d009      	beq.n	8001b36 <HAL_ADC_Init+0xa2>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68da      	ldr	r2, [r3, #12]
 8001b28:	2380      	movs	r3, #128	; 0x80
 8001b2a:	021b      	lsls	r3, r3, #8
 8001b2c:	401a      	ands	r2, r3
 8001b2e:	2380      	movs	r3, #128	; 0x80
 8001b30:	021b      	lsls	r3, r3, #8
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d101      	bne.n	8001b3a <HAL_ADC_Init+0xa6>
 8001b36:	2301      	movs	r3, #1
 8001b38:	e000      	b.n	8001b3c <HAL_ADC_Init+0xa8>
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d116      	bne.n	8001b6e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	2218      	movs	r2, #24
 8001b48:	4393      	bics	r3, r2
 8001b4a:	0019      	movs	r1, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	0899      	lsrs	r1, r3, #2
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68da      	ldr	r2, [r3, #12]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4964      	ldr	r1, [pc, #400]	; (8001d0c <HAL_ADC_Init+0x278>)
 8001b7a:	400a      	ands	r2, r1
 8001b7c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	7e1b      	ldrb	r3, [r3, #24]
 8001b82:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	7e5b      	ldrb	r3, [r3, #25]
 8001b88:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b8a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	7e9b      	ldrb	r3, [r3, #26]
 8001b90:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001b92:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d002      	beq.n	8001ba2 <HAL_ADC_Init+0x10e>
 8001b9c:	2380      	movs	r3, #128	; 0x80
 8001b9e:	015b      	lsls	r3, r3, #5
 8001ba0:	e000      	b.n	8001ba4 <HAL_ADC_Init+0x110>
 8001ba2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001ba4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001baa:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d101      	bne.n	8001bb8 <HAL_ADC_Init+0x124>
 8001bb4:	2304      	movs	r3, #4
 8001bb6:	e000      	b.n	8001bba <HAL_ADC_Init+0x126>
 8001bb8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001bba:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2124      	movs	r1, #36	; 0x24
 8001bc0:	5c5b      	ldrb	r3, [r3, r1]
 8001bc2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001bc4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	7edb      	ldrb	r3, [r3, #27]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d115      	bne.n	8001c00 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	7e9b      	ldrb	r3, [r3, #26]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d105      	bne.n	8001be8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	2280      	movs	r2, #128	; 0x80
 8001be0:	0252      	lsls	r2, r2, #9
 8001be2:	4313      	orrs	r3, r2
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	e00b      	b.n	8001c00 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bec:	2220      	movs	r2, #32
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	69da      	ldr	r2, [r3, #28]
 8001c04:	23c2      	movs	r3, #194	; 0xc2
 8001c06:	33ff      	adds	r3, #255	; 0xff
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d007      	beq.n	8001c1c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001c14:	4313      	orrs	r3, r2
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68d9      	ldr	r1, [r3, #12]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68ba      	ldr	r2, [r7, #8]
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c30:	2380      	movs	r3, #128	; 0x80
 8001c32:	055b      	lsls	r3, r3, #21
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d01b      	beq.n	8001c70 <HAL_ADC_Init+0x1dc>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d017      	beq.n	8001c70 <HAL_ADC_Init+0x1dc>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d013      	beq.n	8001c70 <HAL_ADC_Init+0x1dc>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4c:	2b03      	cmp	r3, #3
 8001c4e:	d00f      	beq.n	8001c70 <HAL_ADC_Init+0x1dc>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c54:	2b04      	cmp	r3, #4
 8001c56:	d00b      	beq.n	8001c70 <HAL_ADC_Init+0x1dc>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5c:	2b05      	cmp	r3, #5
 8001c5e:	d007      	beq.n	8001c70 <HAL_ADC_Init+0x1dc>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c64:	2b06      	cmp	r3, #6
 8001c66:	d003      	beq.n	8001c70 <HAL_ADC_Init+0x1dc>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6c:	2b07      	cmp	r3, #7
 8001c6e:	d112      	bne.n	8001c96 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	695a      	ldr	r2, [r3, #20]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2107      	movs	r1, #7
 8001c7c:	438a      	bics	r2, r1
 8001c7e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6959      	ldr	r1, [r3, #20]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8a:	2207      	movs	r2, #7
 8001c8c:	401a      	ands	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	4a1c      	ldr	r2, [pc, #112]	; (8001d10 <HAL_ADC_Init+0x27c>)
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	68ba      	ldr	r2, [r7, #8]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d10b      	bne.n	8001cbe <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb0:	2203      	movs	r2, #3
 8001cb2:	4393      	bics	r3, r2
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001cbc:	e01c      	b.n	8001cf8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc2:	2212      	movs	r2, #18
 8001cc4:	4393      	bics	r3, r2
 8001cc6:	2210      	movs	r2, #16
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001cda:	230f      	movs	r3, #15
 8001cdc:	18fb      	adds	r3, r7, r3
 8001cde:	2201      	movs	r2, #1
 8001ce0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001ce2:	e009      	b.n	8001cf8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce8:	2210      	movs	r2, #16
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001cf0:	230f      	movs	r3, #15
 8001cf2:	18fb      	adds	r3, r7, r3
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001cf8:	230f      	movs	r3, #15
 8001cfa:	18fb      	adds	r3, r7, r3
 8001cfc:	781b      	ldrb	r3, [r3, #0]
}
 8001cfe:	0018      	movs	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	b004      	add	sp, #16
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	46c0      	nop			; (mov r8, r8)
 8001d08:	fffffefd 	.word	0xfffffefd
 8001d0c:	fffe0219 	.word	0xfffe0219
 8001d10:	833fffe7 	.word	0x833fffe7

08001d14 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001d14:	b590      	push	{r4, r7, lr}
 8001d16:	b087      	sub	sp, #28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d20:	2317      	movs	r3, #23
 8001d22:	18fb      	adds	r3, r7, r3
 8001d24:	2200      	movs	r2, #0
 8001d26:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	2204      	movs	r2, #4
 8001d30:	4013      	ands	r3, r2
 8001d32:	d15e      	bne.n	8001df2 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2234      	movs	r2, #52	; 0x34
 8001d38:	5c9b      	ldrb	r3, [r3, r2]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d101      	bne.n	8001d42 <HAL_ADC_Start_DMA+0x2e>
 8001d3e:	2302      	movs	r3, #2
 8001d40:	e05e      	b.n	8001e00 <HAL_ADC_Start_DMA+0xec>
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2234      	movs	r2, #52	; 0x34
 8001d46:	2101      	movs	r1, #1
 8001d48:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	7e5b      	ldrb	r3, [r3, #25]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d007      	beq.n	8001d62 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001d52:	2317      	movs	r3, #23
 8001d54:	18fc      	adds	r4, r7, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	0018      	movs	r0, r3
 8001d5a:	f000 f97b 	bl	8002054 <ADC_Enable>
 8001d5e:	0003      	movs	r3, r0
 8001d60:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d62:	2317      	movs	r3, #23
 8001d64:	18fb      	adds	r3, r7, r3
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d146      	bne.n	8001dfa <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d70:	4a25      	ldr	r2, [pc, #148]	; (8001e08 <HAL_ADC_Start_DMA+0xf4>)
 8001d72:	4013      	ands	r3, r2
 8001d74:	2280      	movs	r2, #128	; 0x80
 8001d76:	0052      	lsls	r2, r2, #1
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2234      	movs	r2, #52	; 0x34
 8001d88:	2100      	movs	r1, #0
 8001d8a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d90:	4a1e      	ldr	r2, [pc, #120]	; (8001e0c <HAL_ADC_Start_DMA+0xf8>)
 8001d92:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d98:	4a1d      	ldr	r2, [pc, #116]	; (8001e10 <HAL_ADC_Start_DMA+0xfc>)
 8001d9a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da0:	4a1c      	ldr	r2, [pc, #112]	; (8001e14 <HAL_ADC_Start_DMA+0x100>)
 8001da2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	221c      	movs	r2, #28
 8001daa:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2110      	movs	r1, #16
 8001db8:	430a      	orrs	r2, r1
 8001dba:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68da      	ldr	r2, [r3, #12]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	3340      	adds	r3, #64	; 0x40
 8001dd6:	0019      	movs	r1, r3
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f000 fb68 	bl	80024b0 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689a      	ldr	r2, [r3, #8]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2104      	movs	r1, #4
 8001dec:	430a      	orrs	r2, r1
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	e003      	b.n	8001dfa <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001df2:	2317      	movs	r3, #23
 8001df4:	18fb      	adds	r3, r7, r3
 8001df6:	2202      	movs	r2, #2
 8001df8:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001dfa:	2317      	movs	r3, #23
 8001dfc:	18fb      	adds	r3, r7, r3
 8001dfe:	781b      	ldrb	r3, [r3, #0]
}
 8001e00:	0018      	movs	r0, r3
 8001e02:	46bd      	mov	sp, r7
 8001e04:	b007      	add	sp, #28
 8001e06:	bd90      	pop	{r4, r7, pc}
 8001e08:	fffff0fe 	.word	0xfffff0fe
 8001e0c:	0800215d 	.word	0x0800215d
 8001e10:	08002211 	.word	0x08002211
 8001e14:	0800222f 	.word	0x0800222f

08001e18 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001e20:	46c0      	nop			; (mov r8, r8)
 8001e22:	46bd      	mov	sp, r7
 8001e24:	b002      	add	sp, #8
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e30:	46c0      	nop			; (mov r8, r8)
 8001e32:	46bd      	mov	sp, r7
 8001e34:	b002      	add	sp, #8
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e42:	230f      	movs	r3, #15
 8001e44:	18fb      	adds	r3, r7, r3
 8001e46:	2200      	movs	r2, #0
 8001e48:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e52:	2380      	movs	r3, #128	; 0x80
 8001e54:	055b      	lsls	r3, r3, #21
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d011      	beq.n	8001e7e <HAL_ADC_ConfigChannel+0x46>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d00d      	beq.n	8001e7e <HAL_ADC_ConfigChannel+0x46>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d009      	beq.n	8001e7e <HAL_ADC_ConfigChannel+0x46>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	d005      	beq.n	8001e7e <HAL_ADC_ConfigChannel+0x46>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d001      	beq.n	8001e7e <HAL_ADC_ConfigChannel+0x46>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2234      	movs	r2, #52	; 0x34
 8001e82:	5c9b      	ldrb	r3, [r3, r2]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <HAL_ADC_ConfigChannel+0x54>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e0d0      	b.n	800202e <HAL_ADC_ConfigChannel+0x1f6>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2234      	movs	r2, #52	; 0x34
 8001e90:	2101      	movs	r1, #1
 8001e92:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	2204      	movs	r2, #4
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	d000      	beq.n	8001ea2 <HAL_ADC_ConfigChannel+0x6a>
 8001ea0:	e0b4      	b.n	800200c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	4a64      	ldr	r2, [pc, #400]	; (8002038 <HAL_ADC_ConfigChannel+0x200>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d100      	bne.n	8001eae <HAL_ADC_ConfigChannel+0x76>
 8001eac:	e082      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	409a      	lsls	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ec8:	2380      	movs	r3, #128	; 0x80
 8001eca:	055b      	lsls	r3, r3, #21
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d037      	beq.n	8001f40 <HAL_ADC_ConfigChannel+0x108>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d033      	beq.n	8001f40 <HAL_ADC_ConfigChannel+0x108>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d02f      	beq.n	8001f40 <HAL_ADC_ConfigChannel+0x108>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	d02b      	beq.n	8001f40 <HAL_ADC_ConfigChannel+0x108>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d027      	beq.n	8001f40 <HAL_ADC_ConfigChannel+0x108>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef4:	2b05      	cmp	r3, #5
 8001ef6:	d023      	beq.n	8001f40 <HAL_ADC_ConfigChannel+0x108>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efc:	2b06      	cmp	r3, #6
 8001efe:	d01f      	beq.n	8001f40 <HAL_ADC_ConfigChannel+0x108>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f04:	2b07      	cmp	r3, #7
 8001f06:	d01b      	beq.n	8001f40 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	2107      	movs	r1, #7
 8001f14:	400b      	ands	r3, r1
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d012      	beq.n	8001f40 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	695a      	ldr	r2, [r3, #20]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2107      	movs	r1, #7
 8001f26:	438a      	bics	r2, r1
 8001f28:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6959      	ldr	r1, [r3, #20]
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	2207      	movs	r2, #7
 8001f36:	401a      	ands	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b10      	cmp	r3, #16
 8001f46:	d007      	beq.n	8001f58 <HAL_ADC_ConfigChannel+0x120>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2b11      	cmp	r3, #17
 8001f4e:	d003      	beq.n	8001f58 <HAL_ADC_ConfigChannel+0x120>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b12      	cmp	r3, #18
 8001f56:	d163      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001f58:	4b38      	ldr	r3, [pc, #224]	; (800203c <HAL_ADC_ConfigChannel+0x204>)
 8001f5a:	6819      	ldr	r1, [r3, #0]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2b10      	cmp	r3, #16
 8001f62:	d009      	beq.n	8001f78 <HAL_ADC_ConfigChannel+0x140>
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2b11      	cmp	r3, #17
 8001f6a:	d102      	bne.n	8001f72 <HAL_ADC_ConfigChannel+0x13a>
 8001f6c:	2380      	movs	r3, #128	; 0x80
 8001f6e:	03db      	lsls	r3, r3, #15
 8001f70:	e004      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x144>
 8001f72:	2380      	movs	r3, #128	; 0x80
 8001f74:	045b      	lsls	r3, r3, #17
 8001f76:	e001      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x144>
 8001f78:	2380      	movs	r3, #128	; 0x80
 8001f7a:	041b      	lsls	r3, r3, #16
 8001f7c:	4a2f      	ldr	r2, [pc, #188]	; (800203c <HAL_ADC_ConfigChannel+0x204>)
 8001f7e:	430b      	orrs	r3, r1
 8001f80:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2b10      	cmp	r3, #16
 8001f88:	d14a      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f8a:	4b2d      	ldr	r3, [pc, #180]	; (8002040 <HAL_ADC_ConfigChannel+0x208>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	492d      	ldr	r1, [pc, #180]	; (8002044 <HAL_ADC_ConfigChannel+0x20c>)
 8001f90:	0018      	movs	r0, r3
 8001f92:	f7fe f8b9 	bl	8000108 <__udivsi3>
 8001f96:	0003      	movs	r3, r0
 8001f98:	001a      	movs	r2, r3
 8001f9a:	0013      	movs	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	189b      	adds	r3, r3, r2
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fa4:	e002      	b.n	8001fac <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1f9      	bne.n	8001fa6 <HAL_ADC_ConfigChannel+0x16e>
 8001fb2:	e035      	b.n	8002020 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	4099      	lsls	r1, r3
 8001fc2:	000b      	movs	r3, r1
 8001fc4:	43d9      	mvns	r1, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	400a      	ands	r2, r1
 8001fcc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2b10      	cmp	r3, #16
 8001fd4:	d007      	beq.n	8001fe6 <HAL_ADC_ConfigChannel+0x1ae>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2b11      	cmp	r3, #17
 8001fdc:	d003      	beq.n	8001fe6 <HAL_ADC_ConfigChannel+0x1ae>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2b12      	cmp	r3, #18
 8001fe4:	d11c      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001fe6:	4b15      	ldr	r3, [pc, #84]	; (800203c <HAL_ADC_ConfigChannel+0x204>)
 8001fe8:	6819      	ldr	r1, [r3, #0]
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2b10      	cmp	r3, #16
 8001ff0:	d007      	beq.n	8002002 <HAL_ADC_ConfigChannel+0x1ca>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2b11      	cmp	r3, #17
 8001ff8:	d101      	bne.n	8001ffe <HAL_ADC_ConfigChannel+0x1c6>
 8001ffa:	4b13      	ldr	r3, [pc, #76]	; (8002048 <HAL_ADC_ConfigChannel+0x210>)
 8001ffc:	e002      	b.n	8002004 <HAL_ADC_ConfigChannel+0x1cc>
 8001ffe:	4b13      	ldr	r3, [pc, #76]	; (800204c <HAL_ADC_ConfigChannel+0x214>)
 8002000:	e000      	b.n	8002004 <HAL_ADC_ConfigChannel+0x1cc>
 8002002:	4b13      	ldr	r3, [pc, #76]	; (8002050 <HAL_ADC_ConfigChannel+0x218>)
 8002004:	4a0d      	ldr	r2, [pc, #52]	; (800203c <HAL_ADC_ConfigChannel+0x204>)
 8002006:	400b      	ands	r3, r1
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	e009      	b.n	8002020 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002010:	2220      	movs	r2, #32
 8002012:	431a      	orrs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002018:	230f      	movs	r3, #15
 800201a:	18fb      	adds	r3, r7, r3
 800201c:	2201      	movs	r2, #1
 800201e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2234      	movs	r2, #52	; 0x34
 8002024:	2100      	movs	r1, #0
 8002026:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002028:	230f      	movs	r3, #15
 800202a:	18fb      	adds	r3, r7, r3
 800202c:	781b      	ldrb	r3, [r3, #0]
}
 800202e:	0018      	movs	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	b004      	add	sp, #16
 8002034:	bd80      	pop	{r7, pc}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	00001001 	.word	0x00001001
 800203c:	40012708 	.word	0x40012708
 8002040:	20000000 	.word	0x20000000
 8002044:	000f4240 	.word	0x000f4240
 8002048:	ffbfffff 	.word	0xffbfffff
 800204c:	feffffff 	.word	0xfeffffff
 8002050:	ff7fffff 	.word	0xff7fffff

08002054 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800205c:	2300      	movs	r3, #0
 800205e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002060:	2300      	movs	r3, #0
 8002062:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	2203      	movs	r2, #3
 800206c:	4013      	ands	r3, r2
 800206e:	2b01      	cmp	r3, #1
 8002070:	d112      	bne.n	8002098 <ADC_Enable+0x44>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2201      	movs	r2, #1
 800207a:	4013      	ands	r3, r2
 800207c:	2b01      	cmp	r3, #1
 800207e:	d009      	beq.n	8002094 <ADC_Enable+0x40>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	2380      	movs	r3, #128	; 0x80
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	401a      	ands	r2, r3
 800208c:	2380      	movs	r3, #128	; 0x80
 800208e:	021b      	lsls	r3, r3, #8
 8002090:	429a      	cmp	r2, r3
 8002092:	d101      	bne.n	8002098 <ADC_Enable+0x44>
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <ADC_Enable+0x46>
 8002098:	2300      	movs	r3, #0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d152      	bne.n	8002144 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	4a2a      	ldr	r2, [pc, #168]	; (8002150 <ADC_Enable+0xfc>)
 80020a6:	4013      	ands	r3, r2
 80020a8:	d00d      	beq.n	80020c6 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ae:	2210      	movs	r2, #16
 80020b0:	431a      	orrs	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ba:	2201      	movs	r2, #1
 80020bc:	431a      	orrs	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e03f      	b.n	8002146 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2101      	movs	r1, #1
 80020d2:	430a      	orrs	r2, r1
 80020d4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020d6:	4b1f      	ldr	r3, [pc, #124]	; (8002154 <ADC_Enable+0x100>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	491f      	ldr	r1, [pc, #124]	; (8002158 <ADC_Enable+0x104>)
 80020dc:	0018      	movs	r0, r3
 80020de:	f7fe f813 	bl	8000108 <__udivsi3>
 80020e2:	0003      	movs	r3, r0
 80020e4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80020e6:	e002      	b.n	80020ee <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	3b01      	subs	r3, #1
 80020ec:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1f9      	bne.n	80020e8 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80020f4:	f7ff fca0 	bl	8001a38 <HAL_GetTick>
 80020f8:	0003      	movs	r3, r0
 80020fa:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80020fc:	e01b      	b.n	8002136 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80020fe:	f7ff fc9b 	bl	8001a38 <HAL_GetTick>
 8002102:	0002      	movs	r2, r0
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d914      	bls.n	8002136 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2201      	movs	r2, #1
 8002114:	4013      	ands	r3, r2
 8002116:	2b01      	cmp	r3, #1
 8002118:	d00d      	beq.n	8002136 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211e:	2210      	movs	r2, #16
 8002120:	431a      	orrs	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800212a:	2201      	movs	r2, #1
 800212c:	431a      	orrs	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e007      	b.n	8002146 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2201      	movs	r2, #1
 800213e:	4013      	ands	r3, r2
 8002140:	2b01      	cmp	r3, #1
 8002142:	d1dc      	bne.n	80020fe <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	0018      	movs	r0, r3
 8002148:	46bd      	mov	sp, r7
 800214a:	b004      	add	sp, #16
 800214c:	bd80      	pop	{r7, pc}
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	80000017 	.word	0x80000017
 8002154:	20000000 	.word	0x20000000
 8002158:	000f4240 	.word	0x000f4240

0800215c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002168:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800216e:	2250      	movs	r2, #80	; 0x50
 8002170:	4013      	ands	r3, r2
 8002172:	d140      	bne.n	80021f6 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002178:	2280      	movs	r2, #128	; 0x80
 800217a:	0092      	lsls	r2, r2, #2
 800217c:	431a      	orrs	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68da      	ldr	r2, [r3, #12]
 8002188:	23c0      	movs	r3, #192	; 0xc0
 800218a:	011b      	lsls	r3, r3, #4
 800218c:	4013      	ands	r3, r2
 800218e:	d12d      	bne.n	80021ec <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002194:	2b00      	cmp	r3, #0
 8002196:	d129      	bne.n	80021ec <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2208      	movs	r2, #8
 80021a0:	4013      	ands	r3, r2
 80021a2:	2b08      	cmp	r3, #8
 80021a4:	d122      	bne.n	80021ec <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	2204      	movs	r2, #4
 80021ae:	4013      	ands	r3, r2
 80021b0:	d110      	bne.n	80021d4 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	210c      	movs	r1, #12
 80021be:	438a      	bics	r2, r1
 80021c0:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c6:	4a11      	ldr	r2, [pc, #68]	; (800220c <ADC_DMAConvCplt+0xb0>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	2201      	movs	r2, #1
 80021cc:	431a      	orrs	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	639a      	str	r2, [r3, #56]	; 0x38
 80021d2:	e00b      	b.n	80021ec <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d8:	2220      	movs	r2, #32
 80021da:	431a      	orrs	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e4:	2201      	movs	r2, #1
 80021e6:	431a      	orrs	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	0018      	movs	r0, r3
 80021f0:	f7ff f826 	bl	8001240 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80021f4:	e005      	b.n	8002202 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	0010      	movs	r0, r2
 8002200:	4798      	blx	r3
}
 8002202:	46c0      	nop			; (mov r8, r8)
 8002204:	46bd      	mov	sp, r7
 8002206:	b004      	add	sp, #16
 8002208:	bd80      	pop	{r7, pc}
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	fffffefe 	.word	0xfffffefe

08002210 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	0018      	movs	r0, r3
 8002222:	f7ff fdf9 	bl	8001e18 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002226:	46c0      	nop			; (mov r8, r8)
 8002228:	46bd      	mov	sp, r7
 800222a:	b004      	add	sp, #16
 800222c:	bd80      	pop	{r7, pc}

0800222e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b084      	sub	sp, #16
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002240:	2240      	movs	r2, #64	; 0x40
 8002242:	431a      	orrs	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224c:	2204      	movs	r2, #4
 800224e:	431a      	orrs	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	0018      	movs	r0, r3
 8002258:	f7ff fde6 	bl	8001e28 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800225c:	46c0      	nop			; (mov r8, r8)
 800225e:	46bd      	mov	sp, r7
 8002260:	b004      	add	sp, #16
 8002262:	bd80      	pop	{r7, pc}

08002264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	0002      	movs	r2, r0
 800226c:	1dfb      	adds	r3, r7, #7
 800226e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002270:	1dfb      	adds	r3, r7, #7
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b7f      	cmp	r3, #127	; 0x7f
 8002276:	d809      	bhi.n	800228c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002278:	1dfb      	adds	r3, r7, #7
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	001a      	movs	r2, r3
 800227e:	231f      	movs	r3, #31
 8002280:	401a      	ands	r2, r3
 8002282:	4b04      	ldr	r3, [pc, #16]	; (8002294 <__NVIC_EnableIRQ+0x30>)
 8002284:	2101      	movs	r1, #1
 8002286:	4091      	lsls	r1, r2
 8002288:	000a      	movs	r2, r1
 800228a:	601a      	str	r2, [r3, #0]
  }
}
 800228c:	46c0      	nop			; (mov r8, r8)
 800228e:	46bd      	mov	sp, r7
 8002290:	b002      	add	sp, #8
 8002292:	bd80      	pop	{r7, pc}
 8002294:	e000e100 	.word	0xe000e100

08002298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002298:	b590      	push	{r4, r7, lr}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	0002      	movs	r2, r0
 80022a0:	6039      	str	r1, [r7, #0]
 80022a2:	1dfb      	adds	r3, r7, #7
 80022a4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80022a6:	1dfb      	adds	r3, r7, #7
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b7f      	cmp	r3, #127	; 0x7f
 80022ac:	d828      	bhi.n	8002300 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022ae:	4a2f      	ldr	r2, [pc, #188]	; (800236c <__NVIC_SetPriority+0xd4>)
 80022b0:	1dfb      	adds	r3, r7, #7
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	b25b      	sxtb	r3, r3
 80022b6:	089b      	lsrs	r3, r3, #2
 80022b8:	33c0      	adds	r3, #192	; 0xc0
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	589b      	ldr	r3, [r3, r2]
 80022be:	1dfa      	adds	r2, r7, #7
 80022c0:	7812      	ldrb	r2, [r2, #0]
 80022c2:	0011      	movs	r1, r2
 80022c4:	2203      	movs	r2, #3
 80022c6:	400a      	ands	r2, r1
 80022c8:	00d2      	lsls	r2, r2, #3
 80022ca:	21ff      	movs	r1, #255	; 0xff
 80022cc:	4091      	lsls	r1, r2
 80022ce:	000a      	movs	r2, r1
 80022d0:	43d2      	mvns	r2, r2
 80022d2:	401a      	ands	r2, r3
 80022d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	019b      	lsls	r3, r3, #6
 80022da:	22ff      	movs	r2, #255	; 0xff
 80022dc:	401a      	ands	r2, r3
 80022de:	1dfb      	adds	r3, r7, #7
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	0018      	movs	r0, r3
 80022e4:	2303      	movs	r3, #3
 80022e6:	4003      	ands	r3, r0
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022ec:	481f      	ldr	r0, [pc, #124]	; (800236c <__NVIC_SetPriority+0xd4>)
 80022ee:	1dfb      	adds	r3, r7, #7
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	b25b      	sxtb	r3, r3
 80022f4:	089b      	lsrs	r3, r3, #2
 80022f6:	430a      	orrs	r2, r1
 80022f8:	33c0      	adds	r3, #192	; 0xc0
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80022fe:	e031      	b.n	8002364 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002300:	4a1b      	ldr	r2, [pc, #108]	; (8002370 <__NVIC_SetPriority+0xd8>)
 8002302:	1dfb      	adds	r3, r7, #7
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	0019      	movs	r1, r3
 8002308:	230f      	movs	r3, #15
 800230a:	400b      	ands	r3, r1
 800230c:	3b08      	subs	r3, #8
 800230e:	089b      	lsrs	r3, r3, #2
 8002310:	3306      	adds	r3, #6
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	18d3      	adds	r3, r2, r3
 8002316:	3304      	adds	r3, #4
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	1dfa      	adds	r2, r7, #7
 800231c:	7812      	ldrb	r2, [r2, #0]
 800231e:	0011      	movs	r1, r2
 8002320:	2203      	movs	r2, #3
 8002322:	400a      	ands	r2, r1
 8002324:	00d2      	lsls	r2, r2, #3
 8002326:	21ff      	movs	r1, #255	; 0xff
 8002328:	4091      	lsls	r1, r2
 800232a:	000a      	movs	r2, r1
 800232c:	43d2      	mvns	r2, r2
 800232e:	401a      	ands	r2, r3
 8002330:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	019b      	lsls	r3, r3, #6
 8002336:	22ff      	movs	r2, #255	; 0xff
 8002338:	401a      	ands	r2, r3
 800233a:	1dfb      	adds	r3, r7, #7
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	0018      	movs	r0, r3
 8002340:	2303      	movs	r3, #3
 8002342:	4003      	ands	r3, r0
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002348:	4809      	ldr	r0, [pc, #36]	; (8002370 <__NVIC_SetPriority+0xd8>)
 800234a:	1dfb      	adds	r3, r7, #7
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	001c      	movs	r4, r3
 8002350:	230f      	movs	r3, #15
 8002352:	4023      	ands	r3, r4
 8002354:	3b08      	subs	r3, #8
 8002356:	089b      	lsrs	r3, r3, #2
 8002358:	430a      	orrs	r2, r1
 800235a:	3306      	adds	r3, #6
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	18c3      	adds	r3, r0, r3
 8002360:	3304      	adds	r3, #4
 8002362:	601a      	str	r2, [r3, #0]
}
 8002364:	46c0      	nop			; (mov r8, r8)
 8002366:	46bd      	mov	sp, r7
 8002368:	b003      	add	sp, #12
 800236a:	bd90      	pop	{r4, r7, pc}
 800236c:	e000e100 	.word	0xe000e100
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	1e5a      	subs	r2, r3, #1
 8002380:	2380      	movs	r3, #128	; 0x80
 8002382:	045b      	lsls	r3, r3, #17
 8002384:	429a      	cmp	r2, r3
 8002386:	d301      	bcc.n	800238c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002388:	2301      	movs	r3, #1
 800238a:	e010      	b.n	80023ae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800238c:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <SysTick_Config+0x44>)
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	3a01      	subs	r2, #1
 8002392:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002394:	2301      	movs	r3, #1
 8002396:	425b      	negs	r3, r3
 8002398:	2103      	movs	r1, #3
 800239a:	0018      	movs	r0, r3
 800239c:	f7ff ff7c 	bl	8002298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023a0:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <SysTick_Config+0x44>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023a6:	4b04      	ldr	r3, [pc, #16]	; (80023b8 <SysTick_Config+0x44>)
 80023a8:	2207      	movs	r2, #7
 80023aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	0018      	movs	r0, r3
 80023b0:	46bd      	mov	sp, r7
 80023b2:	b002      	add	sp, #8
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	46c0      	nop			; (mov r8, r8)
 80023b8:	e000e010 	.word	0xe000e010

080023bc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60b9      	str	r1, [r7, #8]
 80023c4:	607a      	str	r2, [r7, #4]
 80023c6:	210f      	movs	r1, #15
 80023c8:	187b      	adds	r3, r7, r1
 80023ca:	1c02      	adds	r2, r0, #0
 80023cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	187b      	adds	r3, r7, r1
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	b25b      	sxtb	r3, r3
 80023d6:	0011      	movs	r1, r2
 80023d8:	0018      	movs	r0, r3
 80023da:	f7ff ff5d 	bl	8002298 <__NVIC_SetPriority>
}
 80023de:	46c0      	nop			; (mov r8, r8)
 80023e0:	46bd      	mov	sp, r7
 80023e2:	b004      	add	sp, #16
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	0002      	movs	r2, r0
 80023ee:	1dfb      	adds	r3, r7, #7
 80023f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023f2:	1dfb      	adds	r3, r7, #7
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	b25b      	sxtb	r3, r3
 80023f8:	0018      	movs	r0, r3
 80023fa:	f7ff ff33 	bl	8002264 <__NVIC_EnableIRQ>
}
 80023fe:	46c0      	nop			; (mov r8, r8)
 8002400:	46bd      	mov	sp, r7
 8002402:	b002      	add	sp, #8
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	0018      	movs	r0, r3
 8002412:	f7ff ffaf 	bl	8002374 <SysTick_Config>
 8002416:	0003      	movs	r3, r0
}
 8002418:	0018      	movs	r0, r3
 800241a:	46bd      	mov	sp, r7
 800241c:	b002      	add	sp, #8
 800241e:	bd80      	pop	{r7, pc}

08002420 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002428:	2300      	movs	r3, #0
 800242a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e036      	b.n	80024a4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2221      	movs	r2, #33	; 0x21
 800243a:	2102      	movs	r1, #2
 800243c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	4a18      	ldr	r2, [pc, #96]	; (80024ac <HAL_DMA_Init+0x8c>)
 800244a:	4013      	ands	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002456:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002462:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800246e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	69db      	ldr	r3, [r3, #28]
 8002474:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	4313      	orrs	r3, r2
 800247a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	0018      	movs	r0, r3
 8002488:	f000 f946 	bl	8002718 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2221      	movs	r2, #33	; 0x21
 8002496:	2101      	movs	r1, #1
 8002498:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2220      	movs	r2, #32
 800249e:	2100      	movs	r1, #0
 80024a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	0018      	movs	r0, r3
 80024a6:	46bd      	mov	sp, r7
 80024a8:	b004      	add	sp, #16
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	ffffc00f 	.word	0xffffc00f

080024b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
 80024bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024be:	2317      	movs	r3, #23
 80024c0:	18fb      	adds	r3, r7, r3
 80024c2:	2200      	movs	r2, #0
 80024c4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2220      	movs	r2, #32
 80024ca:	5c9b      	ldrb	r3, [r3, r2]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d101      	bne.n	80024d4 <HAL_DMA_Start_IT+0x24>
 80024d0:	2302      	movs	r3, #2
 80024d2:	e04f      	b.n	8002574 <HAL_DMA_Start_IT+0xc4>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2220      	movs	r2, #32
 80024d8:	2101      	movs	r1, #1
 80024da:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2221      	movs	r2, #33	; 0x21
 80024e0:	5c9b      	ldrb	r3, [r3, r2]
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d13a      	bne.n	800255e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2221      	movs	r2, #33	; 0x21
 80024ec:	2102      	movs	r1, #2
 80024ee:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2101      	movs	r1, #1
 8002502:	438a      	bics	r2, r1
 8002504:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	68b9      	ldr	r1, [r7, #8]
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f000 f8d7 	bl	80026c0 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002516:	2b00      	cmp	r3, #0
 8002518:	d008      	beq.n	800252c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	210e      	movs	r1, #14
 8002526:	430a      	orrs	r2, r1
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	e00f      	b.n	800254c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	210a      	movs	r1, #10
 8002538:	430a      	orrs	r2, r1
 800253a:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2104      	movs	r1, #4
 8002548:	438a      	bics	r2, r1
 800254a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2101      	movs	r1, #1
 8002558:	430a      	orrs	r2, r1
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	e007      	b.n	800256e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2220      	movs	r2, #32
 8002562:	2100      	movs	r1, #0
 8002564:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002566:	2317      	movs	r3, #23
 8002568:	18fb      	adds	r3, r7, r3
 800256a:	2202      	movs	r2, #2
 800256c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800256e:	2317      	movs	r3, #23
 8002570:	18fb      	adds	r3, r7, r3
 8002572:	781b      	ldrb	r3, [r3, #0]
}
 8002574:	0018      	movs	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	b006      	add	sp, #24
 800257a:	bd80      	pop	{r7, pc}

0800257c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	2204      	movs	r2, #4
 800259a:	409a      	lsls	r2, r3
 800259c:	0013      	movs	r3, r2
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	4013      	ands	r3, r2
 80025a2:	d024      	beq.n	80025ee <HAL_DMA_IRQHandler+0x72>
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	2204      	movs	r2, #4
 80025a8:	4013      	ands	r3, r2
 80025aa:	d020      	beq.n	80025ee <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2220      	movs	r2, #32
 80025b4:	4013      	ands	r3, r2
 80025b6:	d107      	bne.n	80025c8 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2104      	movs	r1, #4
 80025c4:	438a      	bics	r2, r1
 80025c6:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d0:	2104      	movs	r1, #4
 80025d2:	4091      	lsls	r1, r2
 80025d4:	000a      	movs	r2, r1
 80025d6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d100      	bne.n	80025e2 <HAL_DMA_IRQHandler+0x66>
 80025e0:	e06a      	b.n	80026b8 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	0010      	movs	r0, r2
 80025ea:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80025ec:	e064      	b.n	80026b8 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	2202      	movs	r2, #2
 80025f4:	409a      	lsls	r2, r3
 80025f6:	0013      	movs	r3, r2
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	4013      	ands	r3, r2
 80025fc:	d02b      	beq.n	8002656 <HAL_DMA_IRQHandler+0xda>
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2202      	movs	r2, #2
 8002602:	4013      	ands	r3, r2
 8002604:	d027      	beq.n	8002656 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2220      	movs	r2, #32
 800260e:	4013      	ands	r3, r2
 8002610:	d10b      	bne.n	800262a <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	210a      	movs	r1, #10
 800261e:	438a      	bics	r2, r1
 8002620:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2221      	movs	r2, #33	; 0x21
 8002626:	2101      	movs	r1, #1
 8002628:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002632:	2102      	movs	r1, #2
 8002634:	4091      	lsls	r1, r2
 8002636:	000a      	movs	r2, r1
 8002638:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2220      	movs	r2, #32
 800263e:	2100      	movs	r1, #0
 8002640:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002646:	2b00      	cmp	r3, #0
 8002648:	d036      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	0010      	movs	r0, r2
 8002652:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002654:	e030      	b.n	80026b8 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	2208      	movs	r2, #8
 800265c:	409a      	lsls	r2, r3
 800265e:	0013      	movs	r3, r2
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	4013      	ands	r3, r2
 8002664:	d028      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x13c>
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	2208      	movs	r2, #8
 800266a:	4013      	ands	r3, r2
 800266c:	d024      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	210e      	movs	r1, #14
 800267a:	438a      	bics	r2, r1
 800267c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002686:	2101      	movs	r1, #1
 8002688:	4091      	lsls	r1, r2
 800268a:	000a      	movs	r2, r1
 800268c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2221      	movs	r2, #33	; 0x21
 8002698:	2101      	movs	r1, #1
 800269a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2220      	movs	r2, #32
 80026a0:	2100      	movs	r1, #0
 80026a2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d005      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	0010      	movs	r0, r2
 80026b4:	4798      	blx	r3
    }
  }
}
 80026b6:	e7ff      	b.n	80026b8 <HAL_DMA_IRQHandler+0x13c>
 80026b8:	46c0      	nop			; (mov r8, r8)
 80026ba:	46bd      	mov	sp, r7
 80026bc:	b004      	add	sp, #16
 80026be:	bd80      	pop	{r7, pc}

080026c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
 80026cc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d6:	2101      	movs	r1, #1
 80026d8:	4091      	lsls	r1, r2
 80026da:	000a      	movs	r2, r1
 80026dc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b10      	cmp	r3, #16
 80026ec:	d108      	bne.n	8002700 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80026fe:	e007      	b.n	8002710 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	60da      	str	r2, [r3, #12]
}
 8002710:	46c0      	nop			; (mov r8, r8)
 8002712:	46bd      	mov	sp, r7
 8002714:	b004      	add	sp, #16
 8002716:	bd80      	pop	{r7, pc}

08002718 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a08      	ldr	r2, [pc, #32]	; (8002748 <DMA_CalcBaseAndBitshift+0x30>)
 8002726:	4694      	mov	ip, r2
 8002728:	4463      	add	r3, ip
 800272a:	2114      	movs	r1, #20
 800272c:	0018      	movs	r0, r3
 800272e:	f7fd fceb 	bl	8000108 <__udivsi3>
 8002732:	0003      	movs	r3, r0
 8002734:	009a      	lsls	r2, r3, #2
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a03      	ldr	r2, [pc, #12]	; (800274c <DMA_CalcBaseAndBitshift+0x34>)
 800273e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002740:	46c0      	nop			; (mov r8, r8)
 8002742:	46bd      	mov	sp, r7
 8002744:	b002      	add	sp, #8
 8002746:	bd80      	pop	{r7, pc}
 8002748:	bffdfff8 	.word	0xbffdfff8
 800274c:	40020000 	.word	0x40020000

08002750 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800275a:	2300      	movs	r3, #0
 800275c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800275e:	e155      	b.n	8002a0c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2101      	movs	r1, #1
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	4091      	lsls	r1, r2
 800276a:	000a      	movs	r2, r1
 800276c:	4013      	ands	r3, r2
 800276e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d100      	bne.n	8002778 <HAL_GPIO_Init+0x28>
 8002776:	e146      	b.n	8002a06 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	2203      	movs	r2, #3
 800277e:	4013      	ands	r3, r2
 8002780:	2b01      	cmp	r3, #1
 8002782:	d005      	beq.n	8002790 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2203      	movs	r2, #3
 800278a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800278c:	2b02      	cmp	r3, #2
 800278e:	d130      	bne.n	80027f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	2203      	movs	r2, #3
 800279c:	409a      	lsls	r2, r3
 800279e:	0013      	movs	r3, r2
 80027a0:	43da      	mvns	r2, r3
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4013      	ands	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	68da      	ldr	r2, [r3, #12]
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	409a      	lsls	r2, r3
 80027b2:	0013      	movs	r3, r2
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027c6:	2201      	movs	r2, #1
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	409a      	lsls	r2, r3
 80027cc:	0013      	movs	r3, r2
 80027ce:	43da      	mvns	r2, r3
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	4013      	ands	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	091b      	lsrs	r3, r3, #4
 80027dc:	2201      	movs	r2, #1
 80027de:	401a      	ands	r2, r3
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	409a      	lsls	r2, r3
 80027e4:	0013      	movs	r3, r2
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2203      	movs	r2, #3
 80027f8:	4013      	ands	r3, r2
 80027fa:	2b03      	cmp	r3, #3
 80027fc:	d017      	beq.n	800282e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	2203      	movs	r2, #3
 800280a:	409a      	lsls	r2, r3
 800280c:	0013      	movs	r3, r2
 800280e:	43da      	mvns	r2, r3
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	4013      	ands	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	409a      	lsls	r2, r3
 8002820:	0013      	movs	r3, r2
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4313      	orrs	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2203      	movs	r2, #3
 8002834:	4013      	ands	r3, r2
 8002836:	2b02      	cmp	r3, #2
 8002838:	d123      	bne.n	8002882 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	08da      	lsrs	r2, r3, #3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	3208      	adds	r2, #8
 8002842:	0092      	lsls	r2, r2, #2
 8002844:	58d3      	ldr	r3, [r2, r3]
 8002846:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	2207      	movs	r2, #7
 800284c:	4013      	ands	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	220f      	movs	r2, #15
 8002852:	409a      	lsls	r2, r3
 8002854:	0013      	movs	r3, r2
 8002856:	43da      	mvns	r2, r3
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	4013      	ands	r3, r2
 800285c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	691a      	ldr	r2, [r3, #16]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2107      	movs	r1, #7
 8002866:	400b      	ands	r3, r1
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	409a      	lsls	r2, r3
 800286c:	0013      	movs	r3, r2
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	4313      	orrs	r3, r2
 8002872:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	08da      	lsrs	r2, r3, #3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3208      	adds	r2, #8
 800287c:	0092      	lsls	r2, r2, #2
 800287e:	6939      	ldr	r1, [r7, #16]
 8002880:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	2203      	movs	r2, #3
 800288e:	409a      	lsls	r2, r3
 8002890:	0013      	movs	r3, r2
 8002892:	43da      	mvns	r2, r3
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	4013      	ands	r3, r2
 8002898:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2203      	movs	r2, #3
 80028a0:	401a      	ands	r2, r3
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	409a      	lsls	r2, r3
 80028a8:	0013      	movs	r3, r2
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	23c0      	movs	r3, #192	; 0xc0
 80028bc:	029b      	lsls	r3, r3, #10
 80028be:	4013      	ands	r3, r2
 80028c0:	d100      	bne.n	80028c4 <HAL_GPIO_Init+0x174>
 80028c2:	e0a0      	b.n	8002a06 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c4:	4b57      	ldr	r3, [pc, #348]	; (8002a24 <HAL_GPIO_Init+0x2d4>)
 80028c6:	699a      	ldr	r2, [r3, #24]
 80028c8:	4b56      	ldr	r3, [pc, #344]	; (8002a24 <HAL_GPIO_Init+0x2d4>)
 80028ca:	2101      	movs	r1, #1
 80028cc:	430a      	orrs	r2, r1
 80028ce:	619a      	str	r2, [r3, #24]
 80028d0:	4b54      	ldr	r3, [pc, #336]	; (8002a24 <HAL_GPIO_Init+0x2d4>)
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	2201      	movs	r2, #1
 80028d6:	4013      	ands	r3, r2
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028dc:	4a52      	ldr	r2, [pc, #328]	; (8002a28 <HAL_GPIO_Init+0x2d8>)
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	089b      	lsrs	r3, r3, #2
 80028e2:	3302      	adds	r3, #2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	589b      	ldr	r3, [r3, r2]
 80028e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	2203      	movs	r2, #3
 80028ee:	4013      	ands	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	220f      	movs	r2, #15
 80028f4:	409a      	lsls	r2, r3
 80028f6:	0013      	movs	r3, r2
 80028f8:	43da      	mvns	r2, r3
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	4013      	ands	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	2390      	movs	r3, #144	; 0x90
 8002904:	05db      	lsls	r3, r3, #23
 8002906:	429a      	cmp	r2, r3
 8002908:	d019      	beq.n	800293e <HAL_GPIO_Init+0x1ee>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a47      	ldr	r2, [pc, #284]	; (8002a2c <HAL_GPIO_Init+0x2dc>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d013      	beq.n	800293a <HAL_GPIO_Init+0x1ea>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a46      	ldr	r2, [pc, #280]	; (8002a30 <HAL_GPIO_Init+0x2e0>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d00d      	beq.n	8002936 <HAL_GPIO_Init+0x1e6>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a45      	ldr	r2, [pc, #276]	; (8002a34 <HAL_GPIO_Init+0x2e4>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d007      	beq.n	8002932 <HAL_GPIO_Init+0x1e2>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a44      	ldr	r2, [pc, #272]	; (8002a38 <HAL_GPIO_Init+0x2e8>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d101      	bne.n	800292e <HAL_GPIO_Init+0x1de>
 800292a:	2304      	movs	r3, #4
 800292c:	e008      	b.n	8002940 <HAL_GPIO_Init+0x1f0>
 800292e:	2305      	movs	r3, #5
 8002930:	e006      	b.n	8002940 <HAL_GPIO_Init+0x1f0>
 8002932:	2303      	movs	r3, #3
 8002934:	e004      	b.n	8002940 <HAL_GPIO_Init+0x1f0>
 8002936:	2302      	movs	r3, #2
 8002938:	e002      	b.n	8002940 <HAL_GPIO_Init+0x1f0>
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <HAL_GPIO_Init+0x1f0>
 800293e:	2300      	movs	r3, #0
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	2103      	movs	r1, #3
 8002944:	400a      	ands	r2, r1
 8002946:	0092      	lsls	r2, r2, #2
 8002948:	4093      	lsls	r3, r2
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002950:	4935      	ldr	r1, [pc, #212]	; (8002a28 <HAL_GPIO_Init+0x2d8>)
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	089b      	lsrs	r3, r3, #2
 8002956:	3302      	adds	r3, #2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800295e:	4b37      	ldr	r3, [pc, #220]	; (8002a3c <HAL_GPIO_Init+0x2ec>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	43da      	mvns	r2, r3
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	4013      	ands	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	2380      	movs	r3, #128	; 0x80
 8002974:	035b      	lsls	r3, r3, #13
 8002976:	4013      	ands	r3, r2
 8002978:	d003      	beq.n	8002982 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4313      	orrs	r3, r2
 8002980:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002982:	4b2e      	ldr	r3, [pc, #184]	; (8002a3c <HAL_GPIO_Init+0x2ec>)
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002988:	4b2c      	ldr	r3, [pc, #176]	; (8002a3c <HAL_GPIO_Init+0x2ec>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	43da      	mvns	r2, r3
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	4013      	ands	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	2380      	movs	r3, #128	; 0x80
 800299e:	039b      	lsls	r3, r3, #14
 80029a0:	4013      	ands	r3, r2
 80029a2:	d003      	beq.n	80029ac <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80029ac:	4b23      	ldr	r3, [pc, #140]	; (8002a3c <HAL_GPIO_Init+0x2ec>)
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80029b2:	4b22      	ldr	r3, [pc, #136]	; (8002a3c <HAL_GPIO_Init+0x2ec>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	43da      	mvns	r2, r3
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	4013      	ands	r3, r2
 80029c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	2380      	movs	r3, #128	; 0x80
 80029c8:	029b      	lsls	r3, r3, #10
 80029ca:	4013      	ands	r3, r2
 80029cc:	d003      	beq.n	80029d6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80029d6:	4b19      	ldr	r3, [pc, #100]	; (8002a3c <HAL_GPIO_Init+0x2ec>)
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80029dc:	4b17      	ldr	r3, [pc, #92]	; (8002a3c <HAL_GPIO_Init+0x2ec>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	43da      	mvns	r2, r3
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	4013      	ands	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	2380      	movs	r3, #128	; 0x80
 80029f2:	025b      	lsls	r3, r3, #9
 80029f4:	4013      	ands	r3, r2
 80029f6:	d003      	beq.n	8002a00 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a00:	4b0e      	ldr	r3, [pc, #56]	; (8002a3c <HAL_GPIO_Init+0x2ec>)
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	3301      	adds	r3, #1
 8002a0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	40da      	lsrs	r2, r3
 8002a14:	1e13      	subs	r3, r2, #0
 8002a16:	d000      	beq.n	8002a1a <HAL_GPIO_Init+0x2ca>
 8002a18:	e6a2      	b.n	8002760 <HAL_GPIO_Init+0x10>
  } 
}
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	46c0      	nop			; (mov r8, r8)
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	b006      	add	sp, #24
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40021000 	.word	0x40021000
 8002a28:	40010000 	.word	0x40010000
 8002a2c:	48000400 	.word	0x48000400
 8002a30:	48000800 	.word	0x48000800
 8002a34:	48000c00 	.word	0x48000c00
 8002a38:	48001000 	.word	0x48001000
 8002a3c:	40010400 	.word	0x40010400

08002a40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b088      	sub	sp, #32
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d102      	bne.n	8002a54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	f000 fb76 	bl	8003140 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d100      	bne.n	8002a60 <HAL_RCC_OscConfig+0x20>
 8002a5e:	e08e      	b.n	8002b7e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a60:	4bc5      	ldr	r3, [pc, #788]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	220c      	movs	r2, #12
 8002a66:	4013      	ands	r3, r2
 8002a68:	2b04      	cmp	r3, #4
 8002a6a:	d00e      	beq.n	8002a8a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a6c:	4bc2      	ldr	r3, [pc, #776]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	220c      	movs	r2, #12
 8002a72:	4013      	ands	r3, r2
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	d117      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x68>
 8002a78:	4bbf      	ldr	r3, [pc, #764]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	23c0      	movs	r3, #192	; 0xc0
 8002a7e:	025b      	lsls	r3, r3, #9
 8002a80:	401a      	ands	r2, r3
 8002a82:	2380      	movs	r3, #128	; 0x80
 8002a84:	025b      	lsls	r3, r3, #9
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d10e      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a8a:	4bbb      	ldr	r3, [pc, #748]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	2380      	movs	r3, #128	; 0x80
 8002a90:	029b      	lsls	r3, r3, #10
 8002a92:	4013      	ands	r3, r2
 8002a94:	d100      	bne.n	8002a98 <HAL_RCC_OscConfig+0x58>
 8002a96:	e071      	b.n	8002b7c <HAL_RCC_OscConfig+0x13c>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d000      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x62>
 8002aa0:	e06c      	b.n	8002b7c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	f000 fb4c 	bl	8003140 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d107      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x80>
 8002ab0:	4bb1      	ldr	r3, [pc, #708]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	4bb0      	ldr	r3, [pc, #704]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002ab6:	2180      	movs	r1, #128	; 0x80
 8002ab8:	0249      	lsls	r1, r1, #9
 8002aba:	430a      	orrs	r2, r1
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	e02f      	b.n	8002b20 <HAL_RCC_OscConfig+0xe0>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10c      	bne.n	8002ae2 <HAL_RCC_OscConfig+0xa2>
 8002ac8:	4bab      	ldr	r3, [pc, #684]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	4baa      	ldr	r3, [pc, #680]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002ace:	49ab      	ldr	r1, [pc, #684]	; (8002d7c <HAL_RCC_OscConfig+0x33c>)
 8002ad0:	400a      	ands	r2, r1
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	4ba8      	ldr	r3, [pc, #672]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	4ba7      	ldr	r3, [pc, #668]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002ada:	49a9      	ldr	r1, [pc, #676]	; (8002d80 <HAL_RCC_OscConfig+0x340>)
 8002adc:	400a      	ands	r2, r1
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	e01e      	b.n	8002b20 <HAL_RCC_OscConfig+0xe0>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b05      	cmp	r3, #5
 8002ae8:	d10e      	bne.n	8002b08 <HAL_RCC_OscConfig+0xc8>
 8002aea:	4ba3      	ldr	r3, [pc, #652]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	4ba2      	ldr	r3, [pc, #648]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002af0:	2180      	movs	r1, #128	; 0x80
 8002af2:	02c9      	lsls	r1, r1, #11
 8002af4:	430a      	orrs	r2, r1
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	4b9f      	ldr	r3, [pc, #636]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	4b9e      	ldr	r3, [pc, #632]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002afe:	2180      	movs	r1, #128	; 0x80
 8002b00:	0249      	lsls	r1, r1, #9
 8002b02:	430a      	orrs	r2, r1
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	e00b      	b.n	8002b20 <HAL_RCC_OscConfig+0xe0>
 8002b08:	4b9b      	ldr	r3, [pc, #620]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	4b9a      	ldr	r3, [pc, #616]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002b0e:	499b      	ldr	r1, [pc, #620]	; (8002d7c <HAL_RCC_OscConfig+0x33c>)
 8002b10:	400a      	ands	r2, r1
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	4b98      	ldr	r3, [pc, #608]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	4b97      	ldr	r3, [pc, #604]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002b1a:	4999      	ldr	r1, [pc, #612]	; (8002d80 <HAL_RCC_OscConfig+0x340>)
 8002b1c:	400a      	ands	r2, r1
 8002b1e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d014      	beq.n	8002b52 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b28:	f7fe ff86 	bl	8001a38 <HAL_GetTick>
 8002b2c:	0003      	movs	r3, r0
 8002b2e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b32:	f7fe ff81 	bl	8001a38 <HAL_GetTick>
 8002b36:	0002      	movs	r2, r0
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b64      	cmp	r3, #100	; 0x64
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e2fd      	b.n	8003140 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b44:	4b8c      	ldr	r3, [pc, #560]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	2380      	movs	r3, #128	; 0x80
 8002b4a:	029b      	lsls	r3, r3, #10
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	d0f0      	beq.n	8002b32 <HAL_RCC_OscConfig+0xf2>
 8002b50:	e015      	b.n	8002b7e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b52:	f7fe ff71 	bl	8001a38 <HAL_GetTick>
 8002b56:	0003      	movs	r3, r0
 8002b58:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b5c:	f7fe ff6c 	bl	8001a38 <HAL_GetTick>
 8002b60:	0002      	movs	r2, r0
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b64      	cmp	r3, #100	; 0x64
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e2e8      	b.n	8003140 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b6e:	4b82      	ldr	r3, [pc, #520]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	2380      	movs	r3, #128	; 0x80
 8002b74:	029b      	lsls	r3, r3, #10
 8002b76:	4013      	ands	r3, r2
 8002b78:	d1f0      	bne.n	8002b5c <HAL_RCC_OscConfig+0x11c>
 8002b7a:	e000      	b.n	8002b7e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b7c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2202      	movs	r2, #2
 8002b84:	4013      	ands	r3, r2
 8002b86:	d100      	bne.n	8002b8a <HAL_RCC_OscConfig+0x14a>
 8002b88:	e06c      	b.n	8002c64 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002b8a:	4b7b      	ldr	r3, [pc, #492]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	220c      	movs	r2, #12
 8002b90:	4013      	ands	r3, r2
 8002b92:	d00e      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002b94:	4b78      	ldr	r3, [pc, #480]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	220c      	movs	r2, #12
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	d11f      	bne.n	8002be0 <HAL_RCC_OscConfig+0x1a0>
 8002ba0:	4b75      	ldr	r3, [pc, #468]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	23c0      	movs	r3, #192	; 0xc0
 8002ba6:	025b      	lsls	r3, r3, #9
 8002ba8:	401a      	ands	r2, r3
 8002baa:	2380      	movs	r3, #128	; 0x80
 8002bac:	021b      	lsls	r3, r3, #8
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d116      	bne.n	8002be0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb2:	4b71      	ldr	r3, [pc, #452]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	4013      	ands	r3, r2
 8002bba:	d005      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x188>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d001      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e2bb      	b.n	8003140 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc8:	4b6b      	ldr	r3, [pc, #428]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	22f8      	movs	r2, #248	; 0xf8
 8002bce:	4393      	bics	r3, r2
 8002bd0:	0019      	movs	r1, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	00da      	lsls	r2, r3, #3
 8002bd8:	4b67      	ldr	r3, [pc, #412]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bde:	e041      	b.n	8002c64 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d024      	beq.n	8002c32 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002be8:	4b63      	ldr	r3, [pc, #396]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	4b62      	ldr	r3, [pc, #392]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002bee:	2101      	movs	r1, #1
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf4:	f7fe ff20 	bl	8001a38 <HAL_GetTick>
 8002bf8:	0003      	movs	r3, r0
 8002bfa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bfe:	f7fe ff1b 	bl	8001a38 <HAL_GetTick>
 8002c02:	0002      	movs	r2, r0
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e297      	b.n	8003140 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c10:	4b59      	ldr	r3, [pc, #356]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2202      	movs	r2, #2
 8002c16:	4013      	ands	r3, r2
 8002c18:	d0f1      	beq.n	8002bfe <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c1a:	4b57      	ldr	r3, [pc, #348]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	22f8      	movs	r2, #248	; 0xf8
 8002c20:	4393      	bics	r3, r2
 8002c22:	0019      	movs	r1, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	00da      	lsls	r2, r3, #3
 8002c2a:	4b53      	ldr	r3, [pc, #332]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	e018      	b.n	8002c64 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c32:	4b51      	ldr	r3, [pc, #324]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	4b50      	ldr	r3, [pc, #320]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002c38:	2101      	movs	r1, #1
 8002c3a:	438a      	bics	r2, r1
 8002c3c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3e:	f7fe fefb 	bl	8001a38 <HAL_GetTick>
 8002c42:	0003      	movs	r3, r0
 8002c44:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c48:	f7fe fef6 	bl	8001a38 <HAL_GetTick>
 8002c4c:	0002      	movs	r2, r0
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e272      	b.n	8003140 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c5a:	4b47      	ldr	r3, [pc, #284]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	4013      	ands	r3, r2
 8002c62:	d1f1      	bne.n	8002c48 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2208      	movs	r2, #8
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	d036      	beq.n	8002cdc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d019      	beq.n	8002caa <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c76:	4b40      	ldr	r3, [pc, #256]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002c78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c7a:	4b3f      	ldr	r3, [pc, #252]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c82:	f7fe fed9 	bl	8001a38 <HAL_GetTick>
 8002c86:	0003      	movs	r3, r0
 8002c88:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c8c:	f7fe fed4 	bl	8001a38 <HAL_GetTick>
 8002c90:	0002      	movs	r2, r0
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e250      	b.n	8003140 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c9e:	4b36      	ldr	r3, [pc, #216]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d0f1      	beq.n	8002c8c <HAL_RCC_OscConfig+0x24c>
 8002ca8:	e018      	b.n	8002cdc <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002caa:	4b33      	ldr	r3, [pc, #204]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002cac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cae:	4b32      	ldr	r3, [pc, #200]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	438a      	bics	r2, r1
 8002cb4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb6:	f7fe febf 	bl	8001a38 <HAL_GetTick>
 8002cba:	0003      	movs	r3, r0
 8002cbc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cc0:	f7fe feba 	bl	8001a38 <HAL_GetTick>
 8002cc4:	0002      	movs	r2, r0
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e236      	b.n	8003140 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cd2:	4b29      	ldr	r3, [pc, #164]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d1f1      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2204      	movs	r2, #4
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	d100      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x2a8>
 8002ce6:	e0b5      	b.n	8002e54 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ce8:	201f      	movs	r0, #31
 8002cea:	183b      	adds	r3, r7, r0
 8002cec:	2200      	movs	r2, #0
 8002cee:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cf0:	4b21      	ldr	r3, [pc, #132]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002cf2:	69da      	ldr	r2, [r3, #28]
 8002cf4:	2380      	movs	r3, #128	; 0x80
 8002cf6:	055b      	lsls	r3, r3, #21
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d110      	bne.n	8002d1e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cfc:	4b1e      	ldr	r3, [pc, #120]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002cfe:	69da      	ldr	r2, [r3, #28]
 8002d00:	4b1d      	ldr	r3, [pc, #116]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002d02:	2180      	movs	r1, #128	; 0x80
 8002d04:	0549      	lsls	r1, r1, #21
 8002d06:	430a      	orrs	r2, r1
 8002d08:	61da      	str	r2, [r3, #28]
 8002d0a:	4b1b      	ldr	r3, [pc, #108]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002d0c:	69da      	ldr	r2, [r3, #28]
 8002d0e:	2380      	movs	r3, #128	; 0x80
 8002d10:	055b      	lsls	r3, r3, #21
 8002d12:	4013      	ands	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d18:	183b      	adds	r3, r7, r0
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1e:	4b19      	ldr	r3, [pc, #100]	; (8002d84 <HAL_RCC_OscConfig+0x344>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	2380      	movs	r3, #128	; 0x80
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	4013      	ands	r3, r2
 8002d28:	d11a      	bne.n	8002d60 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d2a:	4b16      	ldr	r3, [pc, #88]	; (8002d84 <HAL_RCC_OscConfig+0x344>)
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	4b15      	ldr	r3, [pc, #84]	; (8002d84 <HAL_RCC_OscConfig+0x344>)
 8002d30:	2180      	movs	r1, #128	; 0x80
 8002d32:	0049      	lsls	r1, r1, #1
 8002d34:	430a      	orrs	r2, r1
 8002d36:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d38:	f7fe fe7e 	bl	8001a38 <HAL_GetTick>
 8002d3c:	0003      	movs	r3, r0
 8002d3e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d40:	e008      	b.n	8002d54 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d42:	f7fe fe79 	bl	8001a38 <HAL_GetTick>
 8002d46:	0002      	movs	r2, r0
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b64      	cmp	r3, #100	; 0x64
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e1f5      	b.n	8003140 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d54:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <HAL_RCC_OscConfig+0x344>)
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	2380      	movs	r3, #128	; 0x80
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	d0f0      	beq.n	8002d42 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d10f      	bne.n	8002d88 <HAL_RCC_OscConfig+0x348>
 8002d68:	4b03      	ldr	r3, [pc, #12]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002d6a:	6a1a      	ldr	r2, [r3, #32]
 8002d6c:	4b02      	ldr	r3, [pc, #8]	; (8002d78 <HAL_RCC_OscConfig+0x338>)
 8002d6e:	2101      	movs	r1, #1
 8002d70:	430a      	orrs	r2, r1
 8002d72:	621a      	str	r2, [r3, #32]
 8002d74:	e036      	b.n	8002de4 <HAL_RCC_OscConfig+0x3a4>
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	fffeffff 	.word	0xfffeffff
 8002d80:	fffbffff 	.word	0xfffbffff
 8002d84:	40007000 	.word	0x40007000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10c      	bne.n	8002daa <HAL_RCC_OscConfig+0x36a>
 8002d90:	4bca      	ldr	r3, [pc, #808]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002d92:	6a1a      	ldr	r2, [r3, #32]
 8002d94:	4bc9      	ldr	r3, [pc, #804]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002d96:	2101      	movs	r1, #1
 8002d98:	438a      	bics	r2, r1
 8002d9a:	621a      	str	r2, [r3, #32]
 8002d9c:	4bc7      	ldr	r3, [pc, #796]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002d9e:	6a1a      	ldr	r2, [r3, #32]
 8002da0:	4bc6      	ldr	r3, [pc, #792]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002da2:	2104      	movs	r1, #4
 8002da4:	438a      	bics	r2, r1
 8002da6:	621a      	str	r2, [r3, #32]
 8002da8:	e01c      	b.n	8002de4 <HAL_RCC_OscConfig+0x3a4>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	2b05      	cmp	r3, #5
 8002db0:	d10c      	bne.n	8002dcc <HAL_RCC_OscConfig+0x38c>
 8002db2:	4bc2      	ldr	r3, [pc, #776]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002db4:	6a1a      	ldr	r2, [r3, #32]
 8002db6:	4bc1      	ldr	r3, [pc, #772]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002db8:	2104      	movs	r1, #4
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	621a      	str	r2, [r3, #32]
 8002dbe:	4bbf      	ldr	r3, [pc, #764]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002dc0:	6a1a      	ldr	r2, [r3, #32]
 8002dc2:	4bbe      	ldr	r3, [pc, #760]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	621a      	str	r2, [r3, #32]
 8002dca:	e00b      	b.n	8002de4 <HAL_RCC_OscConfig+0x3a4>
 8002dcc:	4bbb      	ldr	r3, [pc, #748]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002dce:	6a1a      	ldr	r2, [r3, #32]
 8002dd0:	4bba      	ldr	r3, [pc, #744]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	438a      	bics	r2, r1
 8002dd6:	621a      	str	r2, [r3, #32]
 8002dd8:	4bb8      	ldr	r3, [pc, #736]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002dda:	6a1a      	ldr	r2, [r3, #32]
 8002ddc:	4bb7      	ldr	r3, [pc, #732]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002dde:	2104      	movs	r1, #4
 8002de0:	438a      	bics	r2, r1
 8002de2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d014      	beq.n	8002e16 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dec:	f7fe fe24 	bl	8001a38 <HAL_GetTick>
 8002df0:	0003      	movs	r3, r0
 8002df2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df4:	e009      	b.n	8002e0a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002df6:	f7fe fe1f 	bl	8001a38 <HAL_GetTick>
 8002dfa:	0002      	movs	r2, r0
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	4aaf      	ldr	r2, [pc, #700]	; (80030c0 <HAL_RCC_OscConfig+0x680>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e19a      	b.n	8003140 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e0a:	4bac      	ldr	r3, [pc, #688]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	2202      	movs	r2, #2
 8002e10:	4013      	ands	r3, r2
 8002e12:	d0f0      	beq.n	8002df6 <HAL_RCC_OscConfig+0x3b6>
 8002e14:	e013      	b.n	8002e3e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e16:	f7fe fe0f 	bl	8001a38 <HAL_GetTick>
 8002e1a:	0003      	movs	r3, r0
 8002e1c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e1e:	e009      	b.n	8002e34 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e20:	f7fe fe0a 	bl	8001a38 <HAL_GetTick>
 8002e24:	0002      	movs	r2, r0
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	4aa5      	ldr	r2, [pc, #660]	; (80030c0 <HAL_RCC_OscConfig+0x680>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e185      	b.n	8003140 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e34:	4ba1      	ldr	r3, [pc, #644]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	2202      	movs	r2, #2
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	d1f0      	bne.n	8002e20 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e3e:	231f      	movs	r3, #31
 8002e40:	18fb      	adds	r3, r7, r3
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d105      	bne.n	8002e54 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e48:	4b9c      	ldr	r3, [pc, #624]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002e4a:	69da      	ldr	r2, [r3, #28]
 8002e4c:	4b9b      	ldr	r3, [pc, #620]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002e4e:	499d      	ldr	r1, [pc, #628]	; (80030c4 <HAL_RCC_OscConfig+0x684>)
 8002e50:	400a      	ands	r2, r1
 8002e52:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2210      	movs	r2, #16
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d063      	beq.n	8002f26 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d12a      	bne.n	8002ebc <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002e66:	4b95      	ldr	r3, [pc, #596]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002e68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e6a:	4b94      	ldr	r3, [pc, #592]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002e6c:	2104      	movs	r1, #4
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002e72:	4b92      	ldr	r3, [pc, #584]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002e74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e76:	4b91      	ldr	r3, [pc, #580]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002e78:	2101      	movs	r1, #1
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e7e:	f7fe fddb 	bl	8001a38 <HAL_GetTick>
 8002e82:	0003      	movs	r3, r0
 8002e84:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002e88:	f7fe fdd6 	bl	8001a38 <HAL_GetTick>
 8002e8c:	0002      	movs	r2, r0
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e152      	b.n	8003140 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002e9a:	4b88      	ldr	r3, [pc, #544]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	d0f1      	beq.n	8002e88 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002ea4:	4b85      	ldr	r3, [pc, #532]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea8:	22f8      	movs	r2, #248	; 0xf8
 8002eaa:	4393      	bics	r3, r2
 8002eac:	0019      	movs	r1, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	00da      	lsls	r2, r3, #3
 8002eb4:	4b81      	ldr	r3, [pc, #516]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	635a      	str	r2, [r3, #52]	; 0x34
 8002eba:	e034      	b.n	8002f26 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	3305      	adds	r3, #5
 8002ec2:	d111      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002ec4:	4b7d      	ldr	r3, [pc, #500]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002ec6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ec8:	4b7c      	ldr	r3, [pc, #496]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002eca:	2104      	movs	r1, #4
 8002ecc:	438a      	bics	r2, r1
 8002ece:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002ed0:	4b7a      	ldr	r3, [pc, #488]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed4:	22f8      	movs	r2, #248	; 0xf8
 8002ed6:	4393      	bics	r3, r2
 8002ed8:	0019      	movs	r1, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	00da      	lsls	r2, r3, #3
 8002ee0:	4b76      	ldr	r3, [pc, #472]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	635a      	str	r2, [r3, #52]	; 0x34
 8002ee6:	e01e      	b.n	8002f26 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002ee8:	4b74      	ldr	r3, [pc, #464]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002eea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eec:	4b73      	ldr	r3, [pc, #460]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002eee:	2104      	movs	r1, #4
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002ef4:	4b71      	ldr	r3, [pc, #452]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002ef6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ef8:	4b70      	ldr	r3, [pc, #448]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002efa:	2101      	movs	r1, #1
 8002efc:	438a      	bics	r2, r1
 8002efe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f00:	f7fe fd9a 	bl	8001a38 <HAL_GetTick>
 8002f04:	0003      	movs	r3, r0
 8002f06:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002f08:	e008      	b.n	8002f1c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002f0a:	f7fe fd95 	bl	8001a38 <HAL_GetTick>
 8002f0e:	0002      	movs	r2, r0
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e111      	b.n	8003140 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002f1c:	4b67      	ldr	r3, [pc, #412]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f20:	2202      	movs	r2, #2
 8002f22:	4013      	ands	r3, r2
 8002f24:	d1f1      	bne.n	8002f0a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	d05c      	beq.n	8002fea <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002f30:	4b62      	ldr	r3, [pc, #392]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	220c      	movs	r2, #12
 8002f36:	4013      	ands	r3, r2
 8002f38:	2b0c      	cmp	r3, #12
 8002f3a:	d00e      	beq.n	8002f5a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002f3c:	4b5f      	ldr	r3, [pc, #380]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	220c      	movs	r2, #12
 8002f42:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d114      	bne.n	8002f72 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002f48:	4b5c      	ldr	r3, [pc, #368]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	23c0      	movs	r3, #192	; 0xc0
 8002f4e:	025b      	lsls	r3, r3, #9
 8002f50:	401a      	ands	r2, r3
 8002f52:	23c0      	movs	r3, #192	; 0xc0
 8002f54:	025b      	lsls	r3, r3, #9
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d10b      	bne.n	8002f72 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002f5a:	4b58      	ldr	r3, [pc, #352]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002f5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f5e:	2380      	movs	r3, #128	; 0x80
 8002f60:	029b      	lsls	r3, r3, #10
 8002f62:	4013      	ands	r3, r2
 8002f64:	d040      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x5a8>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d03c      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e0e6      	b.n	8003140 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d01b      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002f7a:	4b50      	ldr	r3, [pc, #320]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002f7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f7e:	4b4f      	ldr	r3, [pc, #316]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002f80:	2180      	movs	r1, #128	; 0x80
 8002f82:	0249      	lsls	r1, r1, #9
 8002f84:	430a      	orrs	r2, r1
 8002f86:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f88:	f7fe fd56 	bl	8001a38 <HAL_GetTick>
 8002f8c:	0003      	movs	r3, r0
 8002f8e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002f90:	e008      	b.n	8002fa4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f92:	f7fe fd51 	bl	8001a38 <HAL_GetTick>
 8002f96:	0002      	movs	r2, r0
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e0cd      	b.n	8003140 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002fa4:	4b45      	ldr	r3, [pc, #276]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002fa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fa8:	2380      	movs	r3, #128	; 0x80
 8002faa:	029b      	lsls	r3, r3, #10
 8002fac:	4013      	ands	r3, r2
 8002fae:	d0f0      	beq.n	8002f92 <HAL_RCC_OscConfig+0x552>
 8002fb0:	e01b      	b.n	8002fea <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002fb2:	4b42      	ldr	r3, [pc, #264]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002fb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fb6:	4b41      	ldr	r3, [pc, #260]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002fb8:	4943      	ldr	r1, [pc, #268]	; (80030c8 <HAL_RCC_OscConfig+0x688>)
 8002fba:	400a      	ands	r2, r1
 8002fbc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbe:	f7fe fd3b 	bl	8001a38 <HAL_GetTick>
 8002fc2:	0003      	movs	r3, r0
 8002fc4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fc8:	f7fe fd36 	bl	8001a38 <HAL_GetTick>
 8002fcc:	0002      	movs	r2, r0
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e0b2      	b.n	8003140 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002fda:	4b38      	ldr	r3, [pc, #224]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002fdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fde:	2380      	movs	r3, #128	; 0x80
 8002fe0:	029b      	lsls	r3, r3, #10
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	d1f0      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x588>
 8002fe6:	e000      	b.n	8002fea <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002fe8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d100      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x5b4>
 8002ff2:	e0a4      	b.n	800313e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ff4:	4b31      	ldr	r3, [pc, #196]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	220c      	movs	r2, #12
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	2b08      	cmp	r3, #8
 8002ffe:	d100      	bne.n	8003002 <HAL_RCC_OscConfig+0x5c2>
 8003000:	e078      	b.n	80030f4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	2b02      	cmp	r3, #2
 8003008:	d14c      	bne.n	80030a4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800300a:	4b2c      	ldr	r3, [pc, #176]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	4b2b      	ldr	r3, [pc, #172]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8003010:	492e      	ldr	r1, [pc, #184]	; (80030cc <HAL_RCC_OscConfig+0x68c>)
 8003012:	400a      	ands	r2, r1
 8003014:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003016:	f7fe fd0f 	bl	8001a38 <HAL_GetTick>
 800301a:	0003      	movs	r3, r0
 800301c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003020:	f7fe fd0a 	bl	8001a38 <HAL_GetTick>
 8003024:	0002      	movs	r2, r0
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e086      	b.n	8003140 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003032:	4b22      	ldr	r3, [pc, #136]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	2380      	movs	r3, #128	; 0x80
 8003038:	049b      	lsls	r3, r3, #18
 800303a:	4013      	ands	r3, r2
 800303c:	d1f0      	bne.n	8003020 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800303e:	4b1f      	ldr	r3, [pc, #124]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8003040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003042:	220f      	movs	r2, #15
 8003044:	4393      	bics	r3, r2
 8003046:	0019      	movs	r1, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800304c:	4b1b      	ldr	r3, [pc, #108]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 800304e:	430a      	orrs	r2, r1
 8003050:	62da      	str	r2, [r3, #44]	; 0x2c
 8003052:	4b1a      	ldr	r3, [pc, #104]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	4a1e      	ldr	r2, [pc, #120]	; (80030d0 <HAL_RCC_OscConfig+0x690>)
 8003058:	4013      	ands	r3, r2
 800305a:	0019      	movs	r1, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003064:	431a      	orrs	r2, r3
 8003066:	4b15      	ldr	r3, [pc, #84]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8003068:	430a      	orrs	r2, r1
 800306a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800306c:	4b13      	ldr	r3, [pc, #76]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	4b12      	ldr	r3, [pc, #72]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8003072:	2180      	movs	r1, #128	; 0x80
 8003074:	0449      	lsls	r1, r1, #17
 8003076:	430a      	orrs	r2, r1
 8003078:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307a:	f7fe fcdd 	bl	8001a38 <HAL_GetTick>
 800307e:	0003      	movs	r3, r0
 8003080:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003084:	f7fe fcd8 	bl	8001a38 <HAL_GetTick>
 8003088:	0002      	movs	r2, r0
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e054      	b.n	8003140 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003096:	4b09      	ldr	r3, [pc, #36]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	2380      	movs	r3, #128	; 0x80
 800309c:	049b      	lsls	r3, r3, #18
 800309e:	4013      	ands	r3, r2
 80030a0:	d0f0      	beq.n	8003084 <HAL_RCC_OscConfig+0x644>
 80030a2:	e04c      	b.n	800313e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a4:	4b05      	ldr	r3, [pc, #20]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	4b04      	ldr	r3, [pc, #16]	; (80030bc <HAL_RCC_OscConfig+0x67c>)
 80030aa:	4908      	ldr	r1, [pc, #32]	; (80030cc <HAL_RCC_OscConfig+0x68c>)
 80030ac:	400a      	ands	r2, r1
 80030ae:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b0:	f7fe fcc2 	bl	8001a38 <HAL_GetTick>
 80030b4:	0003      	movs	r3, r0
 80030b6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030b8:	e015      	b.n	80030e6 <HAL_RCC_OscConfig+0x6a6>
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	40021000 	.word	0x40021000
 80030c0:	00001388 	.word	0x00001388
 80030c4:	efffffff 	.word	0xefffffff
 80030c8:	fffeffff 	.word	0xfffeffff
 80030cc:	feffffff 	.word	0xfeffffff
 80030d0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030d4:	f7fe fcb0 	bl	8001a38 <HAL_GetTick>
 80030d8:	0002      	movs	r2, r0
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e02c      	b.n	8003140 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030e6:	4b18      	ldr	r3, [pc, #96]	; (8003148 <HAL_RCC_OscConfig+0x708>)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	2380      	movs	r3, #128	; 0x80
 80030ec:	049b      	lsls	r3, r3, #18
 80030ee:	4013      	ands	r3, r2
 80030f0:	d1f0      	bne.n	80030d4 <HAL_RCC_OscConfig+0x694>
 80030f2:	e024      	b.n	800313e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d101      	bne.n	8003100 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e01f      	b.n	8003140 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003100:	4b11      	ldr	r3, [pc, #68]	; (8003148 <HAL_RCC_OscConfig+0x708>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003106:	4b10      	ldr	r3, [pc, #64]	; (8003148 <HAL_RCC_OscConfig+0x708>)
 8003108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	23c0      	movs	r3, #192	; 0xc0
 8003110:	025b      	lsls	r3, r3, #9
 8003112:	401a      	ands	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003118:	429a      	cmp	r2, r3
 800311a:	d10e      	bne.n	800313a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	220f      	movs	r2, #15
 8003120:	401a      	ands	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003126:	429a      	cmp	r2, r3
 8003128:	d107      	bne.n	800313a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	23f0      	movs	r3, #240	; 0xf0
 800312e:	039b      	lsls	r3, r3, #14
 8003130:	401a      	ands	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003136:	429a      	cmp	r2, r3
 8003138:	d001      	beq.n	800313e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e000      	b.n	8003140 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	0018      	movs	r0, r3
 8003142:	46bd      	mov	sp, r7
 8003144:	b008      	add	sp, #32
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40021000 	.word	0x40021000

0800314c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e0bf      	b.n	80032e0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003160:	4b61      	ldr	r3, [pc, #388]	; (80032e8 <HAL_RCC_ClockConfig+0x19c>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2201      	movs	r2, #1
 8003166:	4013      	ands	r3, r2
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	429a      	cmp	r2, r3
 800316c:	d911      	bls.n	8003192 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800316e:	4b5e      	ldr	r3, [pc, #376]	; (80032e8 <HAL_RCC_ClockConfig+0x19c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2201      	movs	r2, #1
 8003174:	4393      	bics	r3, r2
 8003176:	0019      	movs	r1, r3
 8003178:	4b5b      	ldr	r3, [pc, #364]	; (80032e8 <HAL_RCC_ClockConfig+0x19c>)
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003180:	4b59      	ldr	r3, [pc, #356]	; (80032e8 <HAL_RCC_ClockConfig+0x19c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2201      	movs	r2, #1
 8003186:	4013      	ands	r3, r2
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	429a      	cmp	r2, r3
 800318c:	d001      	beq.n	8003192 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e0a6      	b.n	80032e0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2202      	movs	r2, #2
 8003198:	4013      	ands	r3, r2
 800319a:	d015      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2204      	movs	r2, #4
 80031a2:	4013      	ands	r3, r2
 80031a4:	d006      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80031a6:	4b51      	ldr	r3, [pc, #324]	; (80032ec <HAL_RCC_ClockConfig+0x1a0>)
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	4b50      	ldr	r3, [pc, #320]	; (80032ec <HAL_RCC_ClockConfig+0x1a0>)
 80031ac:	21e0      	movs	r1, #224	; 0xe0
 80031ae:	00c9      	lsls	r1, r1, #3
 80031b0:	430a      	orrs	r2, r1
 80031b2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b4:	4b4d      	ldr	r3, [pc, #308]	; (80032ec <HAL_RCC_ClockConfig+0x1a0>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	22f0      	movs	r2, #240	; 0xf0
 80031ba:	4393      	bics	r3, r2
 80031bc:	0019      	movs	r1, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	4b4a      	ldr	r3, [pc, #296]	; (80032ec <HAL_RCC_ClockConfig+0x1a0>)
 80031c4:	430a      	orrs	r2, r1
 80031c6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2201      	movs	r2, #1
 80031ce:	4013      	ands	r3, r2
 80031d0:	d04c      	beq.n	800326c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d107      	bne.n	80031ea <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031da:	4b44      	ldr	r3, [pc, #272]	; (80032ec <HAL_RCC_ClockConfig+0x1a0>)
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	2380      	movs	r3, #128	; 0x80
 80031e0:	029b      	lsls	r3, r3, #10
 80031e2:	4013      	ands	r3, r2
 80031e4:	d120      	bne.n	8003228 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e07a      	b.n	80032e0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d107      	bne.n	8003202 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031f2:	4b3e      	ldr	r3, [pc, #248]	; (80032ec <HAL_RCC_ClockConfig+0x1a0>)
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	2380      	movs	r3, #128	; 0x80
 80031f8:	049b      	lsls	r3, r3, #18
 80031fa:	4013      	ands	r3, r2
 80031fc:	d114      	bne.n	8003228 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e06e      	b.n	80032e0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2b03      	cmp	r3, #3
 8003208:	d107      	bne.n	800321a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800320a:	4b38      	ldr	r3, [pc, #224]	; (80032ec <HAL_RCC_ClockConfig+0x1a0>)
 800320c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800320e:	2380      	movs	r3, #128	; 0x80
 8003210:	029b      	lsls	r3, r3, #10
 8003212:	4013      	ands	r3, r2
 8003214:	d108      	bne.n	8003228 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e062      	b.n	80032e0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800321a:	4b34      	ldr	r3, [pc, #208]	; (80032ec <HAL_RCC_ClockConfig+0x1a0>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2202      	movs	r2, #2
 8003220:	4013      	ands	r3, r2
 8003222:	d101      	bne.n	8003228 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e05b      	b.n	80032e0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003228:	4b30      	ldr	r3, [pc, #192]	; (80032ec <HAL_RCC_ClockConfig+0x1a0>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2203      	movs	r2, #3
 800322e:	4393      	bics	r3, r2
 8003230:	0019      	movs	r1, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	4b2d      	ldr	r3, [pc, #180]	; (80032ec <HAL_RCC_ClockConfig+0x1a0>)
 8003238:	430a      	orrs	r2, r1
 800323a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800323c:	f7fe fbfc 	bl	8001a38 <HAL_GetTick>
 8003240:	0003      	movs	r3, r0
 8003242:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003244:	e009      	b.n	800325a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003246:	f7fe fbf7 	bl	8001a38 <HAL_GetTick>
 800324a:	0002      	movs	r2, r0
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	4a27      	ldr	r2, [pc, #156]	; (80032f0 <HAL_RCC_ClockConfig+0x1a4>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d901      	bls.n	800325a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e042      	b.n	80032e0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800325a:	4b24      	ldr	r3, [pc, #144]	; (80032ec <HAL_RCC_ClockConfig+0x1a0>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	220c      	movs	r2, #12
 8003260:	401a      	ands	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	429a      	cmp	r2, r3
 800326a:	d1ec      	bne.n	8003246 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800326c:	4b1e      	ldr	r3, [pc, #120]	; (80032e8 <HAL_RCC_ClockConfig+0x19c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2201      	movs	r2, #1
 8003272:	4013      	ands	r3, r2
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	d211      	bcs.n	800329e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327a:	4b1b      	ldr	r3, [pc, #108]	; (80032e8 <HAL_RCC_ClockConfig+0x19c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2201      	movs	r2, #1
 8003280:	4393      	bics	r3, r2
 8003282:	0019      	movs	r1, r3
 8003284:	4b18      	ldr	r3, [pc, #96]	; (80032e8 <HAL_RCC_ClockConfig+0x19c>)
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800328c:	4b16      	ldr	r3, [pc, #88]	; (80032e8 <HAL_RCC_ClockConfig+0x19c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2201      	movs	r2, #1
 8003292:	4013      	ands	r3, r2
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	429a      	cmp	r2, r3
 8003298:	d001      	beq.n	800329e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e020      	b.n	80032e0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2204      	movs	r2, #4
 80032a4:	4013      	ands	r3, r2
 80032a6:	d009      	beq.n	80032bc <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80032a8:	4b10      	ldr	r3, [pc, #64]	; (80032ec <HAL_RCC_ClockConfig+0x1a0>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	4a11      	ldr	r2, [pc, #68]	; (80032f4 <HAL_RCC_ClockConfig+0x1a8>)
 80032ae:	4013      	ands	r3, r2
 80032b0:	0019      	movs	r1, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68da      	ldr	r2, [r3, #12]
 80032b6:	4b0d      	ldr	r3, [pc, #52]	; (80032ec <HAL_RCC_ClockConfig+0x1a0>)
 80032b8:	430a      	orrs	r2, r1
 80032ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80032bc:	f000 f820 	bl	8003300 <HAL_RCC_GetSysClockFreq>
 80032c0:	0001      	movs	r1, r0
 80032c2:	4b0a      	ldr	r3, [pc, #40]	; (80032ec <HAL_RCC_ClockConfig+0x1a0>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	091b      	lsrs	r3, r3, #4
 80032c8:	220f      	movs	r2, #15
 80032ca:	4013      	ands	r3, r2
 80032cc:	4a0a      	ldr	r2, [pc, #40]	; (80032f8 <HAL_RCC_ClockConfig+0x1ac>)
 80032ce:	5cd3      	ldrb	r3, [r2, r3]
 80032d0:	000a      	movs	r2, r1
 80032d2:	40da      	lsrs	r2, r3
 80032d4:	4b09      	ldr	r3, [pc, #36]	; (80032fc <HAL_RCC_ClockConfig+0x1b0>)
 80032d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80032d8:	2003      	movs	r0, #3
 80032da:	f7fe fb67 	bl	80019ac <HAL_InitTick>
  
  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	0018      	movs	r0, r3
 80032e2:	46bd      	mov	sp, r7
 80032e4:	b004      	add	sp, #16
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40022000 	.word	0x40022000
 80032ec:	40021000 	.word	0x40021000
 80032f0:	00001388 	.word	0x00001388
 80032f4:	fffff8ff 	.word	0xfffff8ff
 80032f8:	080041f8 	.word	0x080041f8
 80032fc:	20000000 	.word	0x20000000

08003300 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003306:	2300      	movs	r3, #0
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	2300      	movs	r3, #0
 800330c:	60bb      	str	r3, [r7, #8]
 800330e:	2300      	movs	r3, #0
 8003310:	617b      	str	r3, [r7, #20]
 8003312:	2300      	movs	r3, #0
 8003314:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003316:	2300      	movs	r3, #0
 8003318:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800331a:	4b2d      	ldr	r3, [pc, #180]	; (80033d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	220c      	movs	r2, #12
 8003324:	4013      	ands	r3, r2
 8003326:	2b0c      	cmp	r3, #12
 8003328:	d046      	beq.n	80033b8 <HAL_RCC_GetSysClockFreq+0xb8>
 800332a:	d848      	bhi.n	80033be <HAL_RCC_GetSysClockFreq+0xbe>
 800332c:	2b04      	cmp	r3, #4
 800332e:	d002      	beq.n	8003336 <HAL_RCC_GetSysClockFreq+0x36>
 8003330:	2b08      	cmp	r3, #8
 8003332:	d003      	beq.n	800333c <HAL_RCC_GetSysClockFreq+0x3c>
 8003334:	e043      	b.n	80033be <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003336:	4b27      	ldr	r3, [pc, #156]	; (80033d4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003338:	613b      	str	r3, [r7, #16]
      break;
 800333a:	e043      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	0c9b      	lsrs	r3, r3, #18
 8003340:	220f      	movs	r2, #15
 8003342:	4013      	ands	r3, r2
 8003344:	4a24      	ldr	r2, [pc, #144]	; (80033d8 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003346:	5cd3      	ldrb	r3, [r2, r3]
 8003348:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800334a:	4b21      	ldr	r3, [pc, #132]	; (80033d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800334c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334e:	220f      	movs	r2, #15
 8003350:	4013      	ands	r3, r2
 8003352:	4a22      	ldr	r2, [pc, #136]	; (80033dc <HAL_RCC_GetSysClockFreq+0xdc>)
 8003354:	5cd3      	ldrb	r3, [r2, r3]
 8003356:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	23c0      	movs	r3, #192	; 0xc0
 800335c:	025b      	lsls	r3, r3, #9
 800335e:	401a      	ands	r2, r3
 8003360:	2380      	movs	r3, #128	; 0x80
 8003362:	025b      	lsls	r3, r3, #9
 8003364:	429a      	cmp	r2, r3
 8003366:	d109      	bne.n	800337c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003368:	68b9      	ldr	r1, [r7, #8]
 800336a:	481a      	ldr	r0, [pc, #104]	; (80033d4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800336c:	f7fc fecc 	bl	8000108 <__udivsi3>
 8003370:	0003      	movs	r3, r0
 8003372:	001a      	movs	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4353      	muls	r3, r2
 8003378:	617b      	str	r3, [r7, #20]
 800337a:	e01a      	b.n	80033b2 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	23c0      	movs	r3, #192	; 0xc0
 8003380:	025b      	lsls	r3, r3, #9
 8003382:	401a      	ands	r2, r3
 8003384:	23c0      	movs	r3, #192	; 0xc0
 8003386:	025b      	lsls	r3, r3, #9
 8003388:	429a      	cmp	r2, r3
 800338a:	d109      	bne.n	80033a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800338c:	68b9      	ldr	r1, [r7, #8]
 800338e:	4814      	ldr	r0, [pc, #80]	; (80033e0 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003390:	f7fc feba 	bl	8000108 <__udivsi3>
 8003394:	0003      	movs	r3, r0
 8003396:	001a      	movs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4353      	muls	r3, r2
 800339c:	617b      	str	r3, [r7, #20]
 800339e:	e008      	b.n	80033b2 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033a0:	68b9      	ldr	r1, [r7, #8]
 80033a2:	480c      	ldr	r0, [pc, #48]	; (80033d4 <HAL_RCC_GetSysClockFreq+0xd4>)
 80033a4:	f7fc feb0 	bl	8000108 <__udivsi3>
 80033a8:	0003      	movs	r3, r0
 80033aa:	001a      	movs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4353      	muls	r3, r2
 80033b0:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	613b      	str	r3, [r7, #16]
      break;
 80033b6:	e005      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80033b8:	4b09      	ldr	r3, [pc, #36]	; (80033e0 <HAL_RCC_GetSysClockFreq+0xe0>)
 80033ba:	613b      	str	r3, [r7, #16]
      break;
 80033bc:	e002      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033be:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <HAL_RCC_GetSysClockFreq+0xd4>)
 80033c0:	613b      	str	r3, [r7, #16]
      break;
 80033c2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80033c4:	693b      	ldr	r3, [r7, #16]
}
 80033c6:	0018      	movs	r0, r3
 80033c8:	46bd      	mov	sp, r7
 80033ca:	b006      	add	sp, #24
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	46c0      	nop			; (mov r8, r8)
 80033d0:	40021000 	.word	0x40021000
 80033d4:	007a1200 	.word	0x007a1200
 80033d8:	08004208 	.word	0x08004208
 80033dc:	08004218 	.word	0x08004218
 80033e0:	02dc6c00 	.word	0x02dc6c00

080033e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e042      	b.n	800347c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	223d      	movs	r2, #61	; 0x3d
 80033fa:	5c9b      	ldrb	r3, [r3, r2]
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d107      	bne.n	8003412 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	223c      	movs	r2, #60	; 0x3c
 8003406:	2100      	movs	r1, #0
 8003408:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	0018      	movs	r0, r3
 800340e:	f7fe fa0b 	bl	8001828 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	223d      	movs	r2, #61	; 0x3d
 8003416:	2102      	movs	r1, #2
 8003418:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	3304      	adds	r3, #4
 8003422:	0019      	movs	r1, r3
 8003424:	0010      	movs	r0, r2
 8003426:	f000 fad7 	bl	80039d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2246      	movs	r2, #70	; 0x46
 800342e:	2101      	movs	r1, #1
 8003430:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	223e      	movs	r2, #62	; 0x3e
 8003436:	2101      	movs	r1, #1
 8003438:	5499      	strb	r1, [r3, r2]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	223f      	movs	r2, #63	; 0x3f
 800343e:	2101      	movs	r1, #1
 8003440:	5499      	strb	r1, [r3, r2]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2240      	movs	r2, #64	; 0x40
 8003446:	2101      	movs	r1, #1
 8003448:	5499      	strb	r1, [r3, r2]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2241      	movs	r2, #65	; 0x41
 800344e:	2101      	movs	r1, #1
 8003450:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2242      	movs	r2, #66	; 0x42
 8003456:	2101      	movs	r1, #1
 8003458:	5499      	strb	r1, [r3, r2]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2243      	movs	r2, #67	; 0x43
 800345e:	2101      	movs	r1, #1
 8003460:	5499      	strb	r1, [r3, r2]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2244      	movs	r2, #68	; 0x44
 8003466:	2101      	movs	r1, #1
 8003468:	5499      	strb	r1, [r3, r2]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2245      	movs	r2, #69	; 0x45
 800346e:	2101      	movs	r1, #1
 8003470:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	223d      	movs	r2, #61	; 0x3d
 8003476:	2101      	movs	r1, #1
 8003478:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	0018      	movs	r0, r3
 800347e:	46bd      	mov	sp, r7
 8003480:	b002      	add	sp, #8
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e042      	b.n	800351c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	223d      	movs	r2, #61	; 0x3d
 800349a:	5c9b      	ldrb	r3, [r3, r2]
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d107      	bne.n	80034b2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	223c      	movs	r2, #60	; 0x3c
 80034a6:	2100      	movs	r1, #0
 80034a8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	0018      	movs	r0, r3
 80034ae:	f000 f839 	bl	8003524 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	223d      	movs	r2, #61	; 0x3d
 80034b6:	2102      	movs	r1, #2
 80034b8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3304      	adds	r3, #4
 80034c2:	0019      	movs	r1, r3
 80034c4:	0010      	movs	r0, r2
 80034c6:	f000 fa87 	bl	80039d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2246      	movs	r2, #70	; 0x46
 80034ce:	2101      	movs	r1, #1
 80034d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	223e      	movs	r2, #62	; 0x3e
 80034d6:	2101      	movs	r1, #1
 80034d8:	5499      	strb	r1, [r3, r2]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	223f      	movs	r2, #63	; 0x3f
 80034de:	2101      	movs	r1, #1
 80034e0:	5499      	strb	r1, [r3, r2]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2240      	movs	r2, #64	; 0x40
 80034e6:	2101      	movs	r1, #1
 80034e8:	5499      	strb	r1, [r3, r2]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2241      	movs	r2, #65	; 0x41
 80034ee:	2101      	movs	r1, #1
 80034f0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2242      	movs	r2, #66	; 0x42
 80034f6:	2101      	movs	r1, #1
 80034f8:	5499      	strb	r1, [r3, r2]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2243      	movs	r2, #67	; 0x43
 80034fe:	2101      	movs	r1, #1
 8003500:	5499      	strb	r1, [r3, r2]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2244      	movs	r2, #68	; 0x44
 8003506:	2101      	movs	r1, #1
 8003508:	5499      	strb	r1, [r3, r2]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2245      	movs	r2, #69	; 0x45
 800350e:	2101      	movs	r1, #1
 8003510:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	223d      	movs	r2, #61	; 0x3d
 8003516:	2101      	movs	r1, #1
 8003518:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	0018      	movs	r0, r3
 800351e:	46bd      	mov	sp, r7
 8003520:	b002      	add	sp, #8
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800352c:	46c0      	nop			; (mov r8, r8)
 800352e:	46bd      	mov	sp, r7
 8003530:	b002      	add	sp, #8
 8003532:	bd80      	pop	{r7, pc}

08003534 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d108      	bne.n	8003556 <HAL_TIM_PWM_Start+0x22>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	223e      	movs	r2, #62	; 0x3e
 8003548:	5c9b      	ldrb	r3, [r3, r2]
 800354a:	b2db      	uxtb	r3, r3
 800354c:	3b01      	subs	r3, #1
 800354e:	1e5a      	subs	r2, r3, #1
 8003550:	4193      	sbcs	r3, r2
 8003552:	b2db      	uxtb	r3, r3
 8003554:	e01f      	b.n	8003596 <HAL_TIM_PWM_Start+0x62>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	2b04      	cmp	r3, #4
 800355a:	d108      	bne.n	800356e <HAL_TIM_PWM_Start+0x3a>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	223f      	movs	r2, #63	; 0x3f
 8003560:	5c9b      	ldrb	r3, [r3, r2]
 8003562:	b2db      	uxtb	r3, r3
 8003564:	3b01      	subs	r3, #1
 8003566:	1e5a      	subs	r2, r3, #1
 8003568:	4193      	sbcs	r3, r2
 800356a:	b2db      	uxtb	r3, r3
 800356c:	e013      	b.n	8003596 <HAL_TIM_PWM_Start+0x62>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b08      	cmp	r3, #8
 8003572:	d108      	bne.n	8003586 <HAL_TIM_PWM_Start+0x52>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2240      	movs	r2, #64	; 0x40
 8003578:	5c9b      	ldrb	r3, [r3, r2]
 800357a:	b2db      	uxtb	r3, r3
 800357c:	3b01      	subs	r3, #1
 800357e:	1e5a      	subs	r2, r3, #1
 8003580:	4193      	sbcs	r3, r2
 8003582:	b2db      	uxtb	r3, r3
 8003584:	e007      	b.n	8003596 <HAL_TIM_PWM_Start+0x62>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2241      	movs	r2, #65	; 0x41
 800358a:	5c9b      	ldrb	r3, [r3, r2]
 800358c:	b2db      	uxtb	r3, r3
 800358e:	3b01      	subs	r3, #1
 8003590:	1e5a      	subs	r2, r3, #1
 8003592:	4193      	sbcs	r3, r2
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e074      	b.n	8003688 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d104      	bne.n	80035ae <HAL_TIM_PWM_Start+0x7a>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	223e      	movs	r2, #62	; 0x3e
 80035a8:	2102      	movs	r1, #2
 80035aa:	5499      	strb	r1, [r3, r2]
 80035ac:	e013      	b.n	80035d6 <HAL_TIM_PWM_Start+0xa2>
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	2b04      	cmp	r3, #4
 80035b2:	d104      	bne.n	80035be <HAL_TIM_PWM_Start+0x8a>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	223f      	movs	r2, #63	; 0x3f
 80035b8:	2102      	movs	r1, #2
 80035ba:	5499      	strb	r1, [r3, r2]
 80035bc:	e00b      	b.n	80035d6 <HAL_TIM_PWM_Start+0xa2>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d104      	bne.n	80035ce <HAL_TIM_PWM_Start+0x9a>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2240      	movs	r2, #64	; 0x40
 80035c8:	2102      	movs	r1, #2
 80035ca:	5499      	strb	r1, [r3, r2]
 80035cc:	e003      	b.n	80035d6 <HAL_TIM_PWM_Start+0xa2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2241      	movs	r2, #65	; 0x41
 80035d2:	2102      	movs	r1, #2
 80035d4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6839      	ldr	r1, [r7, #0]
 80035dc:	2201      	movs	r2, #1
 80035de:	0018      	movs	r0, r3
 80035e0:	f000 fd10 	bl	8004004 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a29      	ldr	r2, [pc, #164]	; (8003690 <HAL_TIM_PWM_Start+0x15c>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d00e      	beq.n	800360c <HAL_TIM_PWM_Start+0xd8>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a28      	ldr	r2, [pc, #160]	; (8003694 <HAL_TIM_PWM_Start+0x160>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d009      	beq.n	800360c <HAL_TIM_PWM_Start+0xd8>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a26      	ldr	r2, [pc, #152]	; (8003698 <HAL_TIM_PWM_Start+0x164>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d004      	beq.n	800360c <HAL_TIM_PWM_Start+0xd8>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a25      	ldr	r2, [pc, #148]	; (800369c <HAL_TIM_PWM_Start+0x168>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d101      	bne.n	8003610 <HAL_TIM_PWM_Start+0xdc>
 800360c:	2301      	movs	r3, #1
 800360e:	e000      	b.n	8003612 <HAL_TIM_PWM_Start+0xde>
 8003610:	2300      	movs	r3, #0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d008      	beq.n	8003628 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2180      	movs	r1, #128	; 0x80
 8003622:	0209      	lsls	r1, r1, #8
 8003624:	430a      	orrs	r2, r1
 8003626:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a18      	ldr	r2, [pc, #96]	; (8003690 <HAL_TIM_PWM_Start+0x15c>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d00f      	beq.n	8003652 <HAL_TIM_PWM_Start+0x11e>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	2380      	movs	r3, #128	; 0x80
 8003638:	05db      	lsls	r3, r3, #23
 800363a:	429a      	cmp	r2, r3
 800363c:	d009      	beq.n	8003652 <HAL_TIM_PWM_Start+0x11e>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a17      	ldr	r2, [pc, #92]	; (80036a0 <HAL_TIM_PWM_Start+0x16c>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d004      	beq.n	8003652 <HAL_TIM_PWM_Start+0x11e>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a11      	ldr	r2, [pc, #68]	; (8003694 <HAL_TIM_PWM_Start+0x160>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d111      	bne.n	8003676 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	2207      	movs	r2, #7
 800365a:	4013      	ands	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2b06      	cmp	r3, #6
 8003662:	d010      	beq.n	8003686 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2101      	movs	r1, #1
 8003670:	430a      	orrs	r2, r1
 8003672:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003674:	e007      	b.n	8003686 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2101      	movs	r1, #1
 8003682:	430a      	orrs	r2, r1
 8003684:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	0018      	movs	r0, r3
 800368a:	46bd      	mov	sp, r7
 800368c:	b004      	add	sp, #16
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40012c00 	.word	0x40012c00
 8003694:	40014000 	.word	0x40014000
 8003698:	40014400 	.word	0x40014400
 800369c:	40014800 	.word	0x40014800
 80036a0:	40000400 	.word	0x40000400

080036a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036b0:	2317      	movs	r3, #23
 80036b2:	18fb      	adds	r3, r7, r3
 80036b4:	2200      	movs	r2, #0
 80036b6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	223c      	movs	r2, #60	; 0x3c
 80036bc:	5c9b      	ldrb	r3, [r3, r2]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d101      	bne.n	80036c6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80036c2:	2302      	movs	r3, #2
 80036c4:	e0ad      	b.n	8003822 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	223c      	movs	r2, #60	; 0x3c
 80036ca:	2101      	movs	r1, #1
 80036cc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b0c      	cmp	r3, #12
 80036d2:	d100      	bne.n	80036d6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80036d4:	e076      	b.n	80037c4 <HAL_TIM_PWM_ConfigChannel+0x120>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b0c      	cmp	r3, #12
 80036da:	d900      	bls.n	80036de <HAL_TIM_PWM_ConfigChannel+0x3a>
 80036dc:	e095      	b.n	800380a <HAL_TIM_PWM_ConfigChannel+0x166>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b08      	cmp	r3, #8
 80036e2:	d04e      	beq.n	8003782 <HAL_TIM_PWM_ConfigChannel+0xde>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b08      	cmp	r3, #8
 80036e8:	d900      	bls.n	80036ec <HAL_TIM_PWM_ConfigChannel+0x48>
 80036ea:	e08e      	b.n	800380a <HAL_TIM_PWM_ConfigChannel+0x166>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_TIM_PWM_ConfigChannel+0x56>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b04      	cmp	r3, #4
 80036f6:	d021      	beq.n	800373c <HAL_TIM_PWM_ConfigChannel+0x98>
 80036f8:	e087      	b.n	800380a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	0011      	movs	r1, r2
 8003702:	0018      	movs	r0, r3
 8003704:	f000 f9e8 	bl	8003ad8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	699a      	ldr	r2, [r3, #24]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2108      	movs	r1, #8
 8003714:	430a      	orrs	r2, r1
 8003716:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	699a      	ldr	r2, [r3, #24]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2104      	movs	r1, #4
 8003724:	438a      	bics	r2, r1
 8003726:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6999      	ldr	r1, [r3, #24]
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	691a      	ldr	r2, [r3, #16]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	619a      	str	r2, [r3, #24]
      break;
 800373a:	e06b      	b.n	8003814 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	0011      	movs	r1, r2
 8003744:	0018      	movs	r0, r3
 8003746:	f000 fa4f 	bl	8003be8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	699a      	ldr	r2, [r3, #24]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2180      	movs	r1, #128	; 0x80
 8003756:	0109      	lsls	r1, r1, #4
 8003758:	430a      	orrs	r2, r1
 800375a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	699a      	ldr	r2, [r3, #24]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4931      	ldr	r1, [pc, #196]	; (800382c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003768:	400a      	ands	r2, r1
 800376a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6999      	ldr	r1, [r3, #24]
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	021a      	lsls	r2, r3, #8
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	430a      	orrs	r2, r1
 800377e:	619a      	str	r2, [r3, #24]
      break;
 8003780:	e048      	b.n	8003814 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68ba      	ldr	r2, [r7, #8]
 8003788:	0011      	movs	r1, r2
 800378a:	0018      	movs	r0, r3
 800378c:	f000 fab0 	bl	8003cf0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	69da      	ldr	r2, [r3, #28]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2108      	movs	r1, #8
 800379c:	430a      	orrs	r2, r1
 800379e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	69da      	ldr	r2, [r3, #28]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2104      	movs	r1, #4
 80037ac:	438a      	bics	r2, r1
 80037ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	69d9      	ldr	r1, [r3, #28]
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	691a      	ldr	r2, [r3, #16]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	61da      	str	r2, [r3, #28]
      break;
 80037c2:	e027      	b.n	8003814 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	0011      	movs	r1, r2
 80037cc:	0018      	movs	r0, r3
 80037ce:	f000 fb15 	bl	8003dfc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	69da      	ldr	r2, [r3, #28]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2180      	movs	r1, #128	; 0x80
 80037de:	0109      	lsls	r1, r1, #4
 80037e0:	430a      	orrs	r2, r1
 80037e2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	69da      	ldr	r2, [r3, #28]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	490f      	ldr	r1, [pc, #60]	; (800382c <HAL_TIM_PWM_ConfigChannel+0x188>)
 80037f0:	400a      	ands	r2, r1
 80037f2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	69d9      	ldr	r1, [r3, #28]
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	021a      	lsls	r2, r3, #8
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	61da      	str	r2, [r3, #28]
      break;
 8003808:	e004      	b.n	8003814 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800380a:	2317      	movs	r3, #23
 800380c:	18fb      	adds	r3, r7, r3
 800380e:	2201      	movs	r2, #1
 8003810:	701a      	strb	r2, [r3, #0]
      break;
 8003812:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	223c      	movs	r2, #60	; 0x3c
 8003818:	2100      	movs	r1, #0
 800381a:	5499      	strb	r1, [r3, r2]

  return status;
 800381c:	2317      	movs	r3, #23
 800381e:	18fb      	adds	r3, r7, r3
 8003820:	781b      	ldrb	r3, [r3, #0]
}
 8003822:	0018      	movs	r0, r3
 8003824:	46bd      	mov	sp, r7
 8003826:	b006      	add	sp, #24
 8003828:	bd80      	pop	{r7, pc}
 800382a:	46c0      	nop			; (mov r8, r8)
 800382c:	fffffbff 	.word	0xfffffbff

08003830 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800383a:	230f      	movs	r3, #15
 800383c:	18fb      	adds	r3, r7, r3
 800383e:	2200      	movs	r2, #0
 8003840:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	223c      	movs	r2, #60	; 0x3c
 8003846:	5c9b      	ldrb	r3, [r3, r2]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d101      	bne.n	8003850 <HAL_TIM_ConfigClockSource+0x20>
 800384c:	2302      	movs	r3, #2
 800384e:	e0bc      	b.n	80039ca <HAL_TIM_ConfigClockSource+0x19a>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	223c      	movs	r2, #60	; 0x3c
 8003854:	2101      	movs	r1, #1
 8003856:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	223d      	movs	r2, #61	; 0x3d
 800385c:	2102      	movs	r1, #2
 800385e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2277      	movs	r2, #119	; 0x77
 800386c:	4393      	bics	r3, r2
 800386e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	4a58      	ldr	r2, [pc, #352]	; (80039d4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003874:	4013      	ands	r3, r2
 8003876:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68ba      	ldr	r2, [r7, #8]
 800387e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2280      	movs	r2, #128	; 0x80
 8003886:	0192      	lsls	r2, r2, #6
 8003888:	4293      	cmp	r3, r2
 800388a:	d040      	beq.n	800390e <HAL_TIM_ConfigClockSource+0xde>
 800388c:	2280      	movs	r2, #128	; 0x80
 800388e:	0192      	lsls	r2, r2, #6
 8003890:	4293      	cmp	r3, r2
 8003892:	d900      	bls.n	8003896 <HAL_TIM_ConfigClockSource+0x66>
 8003894:	e088      	b.n	80039a8 <HAL_TIM_ConfigClockSource+0x178>
 8003896:	2280      	movs	r2, #128	; 0x80
 8003898:	0152      	lsls	r2, r2, #5
 800389a:	4293      	cmp	r3, r2
 800389c:	d100      	bne.n	80038a0 <HAL_TIM_ConfigClockSource+0x70>
 800389e:	e088      	b.n	80039b2 <HAL_TIM_ConfigClockSource+0x182>
 80038a0:	2280      	movs	r2, #128	; 0x80
 80038a2:	0152      	lsls	r2, r2, #5
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d900      	bls.n	80038aa <HAL_TIM_ConfigClockSource+0x7a>
 80038a8:	e07e      	b.n	80039a8 <HAL_TIM_ConfigClockSource+0x178>
 80038aa:	2b70      	cmp	r3, #112	; 0x70
 80038ac:	d018      	beq.n	80038e0 <HAL_TIM_ConfigClockSource+0xb0>
 80038ae:	d900      	bls.n	80038b2 <HAL_TIM_ConfigClockSource+0x82>
 80038b0:	e07a      	b.n	80039a8 <HAL_TIM_ConfigClockSource+0x178>
 80038b2:	2b60      	cmp	r3, #96	; 0x60
 80038b4:	d04f      	beq.n	8003956 <HAL_TIM_ConfigClockSource+0x126>
 80038b6:	d900      	bls.n	80038ba <HAL_TIM_ConfigClockSource+0x8a>
 80038b8:	e076      	b.n	80039a8 <HAL_TIM_ConfigClockSource+0x178>
 80038ba:	2b50      	cmp	r3, #80	; 0x50
 80038bc:	d03b      	beq.n	8003936 <HAL_TIM_ConfigClockSource+0x106>
 80038be:	d900      	bls.n	80038c2 <HAL_TIM_ConfigClockSource+0x92>
 80038c0:	e072      	b.n	80039a8 <HAL_TIM_ConfigClockSource+0x178>
 80038c2:	2b40      	cmp	r3, #64	; 0x40
 80038c4:	d057      	beq.n	8003976 <HAL_TIM_ConfigClockSource+0x146>
 80038c6:	d900      	bls.n	80038ca <HAL_TIM_ConfigClockSource+0x9a>
 80038c8:	e06e      	b.n	80039a8 <HAL_TIM_ConfigClockSource+0x178>
 80038ca:	2b30      	cmp	r3, #48	; 0x30
 80038cc:	d063      	beq.n	8003996 <HAL_TIM_ConfigClockSource+0x166>
 80038ce:	d86b      	bhi.n	80039a8 <HAL_TIM_ConfigClockSource+0x178>
 80038d0:	2b20      	cmp	r3, #32
 80038d2:	d060      	beq.n	8003996 <HAL_TIM_ConfigClockSource+0x166>
 80038d4:	d868      	bhi.n	80039a8 <HAL_TIM_ConfigClockSource+0x178>
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d05d      	beq.n	8003996 <HAL_TIM_ConfigClockSource+0x166>
 80038da:	2b10      	cmp	r3, #16
 80038dc:	d05b      	beq.n	8003996 <HAL_TIM_ConfigClockSource+0x166>
 80038de:	e063      	b.n	80039a8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6818      	ldr	r0, [r3, #0]
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	6899      	ldr	r1, [r3, #8]
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f000 fb68 	bl	8003fc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	2277      	movs	r2, #119	; 0x77
 8003900:	4313      	orrs	r3, r2
 8003902:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	609a      	str	r2, [r3, #8]
      break;
 800390c:	e052      	b.n	80039b4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6818      	ldr	r0, [r3, #0]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	6899      	ldr	r1, [r3, #8]
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685a      	ldr	r2, [r3, #4]
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	f000 fb51 	bl	8003fc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2180      	movs	r1, #128	; 0x80
 800392e:	01c9      	lsls	r1, r1, #7
 8003930:	430a      	orrs	r2, r1
 8003932:	609a      	str	r2, [r3, #8]
      break;
 8003934:	e03e      	b.n	80039b4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6818      	ldr	r0, [r3, #0]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	6859      	ldr	r1, [r3, #4]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	001a      	movs	r2, r3
 8003944:	f000 fac4 	bl	8003ed0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2150      	movs	r1, #80	; 0x50
 800394e:	0018      	movs	r0, r3
 8003950:	f000 fb1e 	bl	8003f90 <TIM_ITRx_SetConfig>
      break;
 8003954:	e02e      	b.n	80039b4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6818      	ldr	r0, [r3, #0]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	6859      	ldr	r1, [r3, #4]
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	001a      	movs	r2, r3
 8003964:	f000 fae2 	bl	8003f2c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2160      	movs	r1, #96	; 0x60
 800396e:	0018      	movs	r0, r3
 8003970:	f000 fb0e 	bl	8003f90 <TIM_ITRx_SetConfig>
      break;
 8003974:	e01e      	b.n	80039b4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6818      	ldr	r0, [r3, #0]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	6859      	ldr	r1, [r3, #4]
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	001a      	movs	r2, r3
 8003984:	f000 faa4 	bl	8003ed0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2140      	movs	r1, #64	; 0x40
 800398e:	0018      	movs	r0, r3
 8003990:	f000 fafe 	bl	8003f90 <TIM_ITRx_SetConfig>
      break;
 8003994:	e00e      	b.n	80039b4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	0019      	movs	r1, r3
 80039a0:	0010      	movs	r0, r2
 80039a2:	f000 faf5 	bl	8003f90 <TIM_ITRx_SetConfig>
      break;
 80039a6:	e005      	b.n	80039b4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80039a8:	230f      	movs	r3, #15
 80039aa:	18fb      	adds	r3, r7, r3
 80039ac:	2201      	movs	r2, #1
 80039ae:	701a      	strb	r2, [r3, #0]
      break;
 80039b0:	e000      	b.n	80039b4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80039b2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	223d      	movs	r2, #61	; 0x3d
 80039b8:	2101      	movs	r1, #1
 80039ba:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	223c      	movs	r2, #60	; 0x3c
 80039c0:	2100      	movs	r1, #0
 80039c2:	5499      	strb	r1, [r3, r2]

  return status;
 80039c4:	230f      	movs	r3, #15
 80039c6:	18fb      	adds	r3, r7, r3
 80039c8:	781b      	ldrb	r3, [r3, #0]
}
 80039ca:	0018      	movs	r0, r3
 80039cc:	46bd      	mov	sp, r7
 80039ce:	b004      	add	sp, #16
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	ffff00ff 	.word	0xffff00ff

080039d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a34      	ldr	r2, [pc, #208]	; (8003abc <TIM_Base_SetConfig+0xe4>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d008      	beq.n	8003a02 <TIM_Base_SetConfig+0x2a>
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	2380      	movs	r3, #128	; 0x80
 80039f4:	05db      	lsls	r3, r3, #23
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d003      	beq.n	8003a02 <TIM_Base_SetConfig+0x2a>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a30      	ldr	r2, [pc, #192]	; (8003ac0 <TIM_Base_SetConfig+0xe8>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d108      	bne.n	8003a14 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2270      	movs	r2, #112	; 0x70
 8003a06:	4393      	bics	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a29      	ldr	r2, [pc, #164]	; (8003abc <TIM_Base_SetConfig+0xe4>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d018      	beq.n	8003a4e <TIM_Base_SetConfig+0x76>
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	2380      	movs	r3, #128	; 0x80
 8003a20:	05db      	lsls	r3, r3, #23
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d013      	beq.n	8003a4e <TIM_Base_SetConfig+0x76>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a25      	ldr	r2, [pc, #148]	; (8003ac0 <TIM_Base_SetConfig+0xe8>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d00f      	beq.n	8003a4e <TIM_Base_SetConfig+0x76>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a24      	ldr	r2, [pc, #144]	; (8003ac4 <TIM_Base_SetConfig+0xec>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d00b      	beq.n	8003a4e <TIM_Base_SetConfig+0x76>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a23      	ldr	r2, [pc, #140]	; (8003ac8 <TIM_Base_SetConfig+0xf0>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d007      	beq.n	8003a4e <TIM_Base_SetConfig+0x76>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a22      	ldr	r2, [pc, #136]	; (8003acc <TIM_Base_SetConfig+0xf4>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d003      	beq.n	8003a4e <TIM_Base_SetConfig+0x76>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a21      	ldr	r2, [pc, #132]	; (8003ad0 <TIM_Base_SetConfig+0xf8>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d108      	bne.n	8003a60 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	4a20      	ldr	r2, [pc, #128]	; (8003ad4 <TIM_Base_SetConfig+0xfc>)
 8003a52:	4013      	ands	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2280      	movs	r2, #128	; 0x80
 8003a64:	4393      	bics	r3, r2
 8003a66:	001a      	movs	r2, r3
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	689a      	ldr	r2, [r3, #8]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a0c      	ldr	r2, [pc, #48]	; (8003abc <TIM_Base_SetConfig+0xe4>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d00b      	beq.n	8003aa6 <TIM_Base_SetConfig+0xce>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a0d      	ldr	r2, [pc, #52]	; (8003ac8 <TIM_Base_SetConfig+0xf0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d007      	beq.n	8003aa6 <TIM_Base_SetConfig+0xce>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a0c      	ldr	r2, [pc, #48]	; (8003acc <TIM_Base_SetConfig+0xf4>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d003      	beq.n	8003aa6 <TIM_Base_SetConfig+0xce>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a0b      	ldr	r2, [pc, #44]	; (8003ad0 <TIM_Base_SetConfig+0xf8>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d103      	bne.n	8003aae <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	691a      	ldr	r2, [r3, #16]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	615a      	str	r2, [r3, #20]
}
 8003ab4:	46c0      	nop			; (mov r8, r8)
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	b004      	add	sp, #16
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40012c00 	.word	0x40012c00
 8003ac0:	40000400 	.word	0x40000400
 8003ac4:	40002000 	.word	0x40002000
 8003ac8:	40014000 	.word	0x40014000
 8003acc:	40014400 	.word	0x40014400
 8003ad0:	40014800 	.word	0x40014800
 8003ad4:	fffffcff 	.word	0xfffffcff

08003ad8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	4393      	bics	r3, r2
 8003aea:	001a      	movs	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2270      	movs	r2, #112	; 0x70
 8003b06:	4393      	bics	r3, r2
 8003b08:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2203      	movs	r2, #3
 8003b0e:	4393      	bics	r3, r2
 8003b10:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	2202      	movs	r2, #2
 8003b20:	4393      	bics	r3, r2
 8003b22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a27      	ldr	r2, [pc, #156]	; (8003bd0 <TIM_OC1_SetConfig+0xf8>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d00b      	beq.n	8003b4e <TIM_OC1_SetConfig+0x76>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a26      	ldr	r2, [pc, #152]	; (8003bd4 <TIM_OC1_SetConfig+0xfc>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d007      	beq.n	8003b4e <TIM_OC1_SetConfig+0x76>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a25      	ldr	r2, [pc, #148]	; (8003bd8 <TIM_OC1_SetConfig+0x100>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d003      	beq.n	8003b4e <TIM_OC1_SetConfig+0x76>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a24      	ldr	r2, [pc, #144]	; (8003bdc <TIM_OC1_SetConfig+0x104>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d10c      	bne.n	8003b68 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	2208      	movs	r2, #8
 8003b52:	4393      	bics	r3, r2
 8003b54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	2204      	movs	r2, #4
 8003b64:	4393      	bics	r3, r2
 8003b66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a19      	ldr	r2, [pc, #100]	; (8003bd0 <TIM_OC1_SetConfig+0xf8>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d00b      	beq.n	8003b88 <TIM_OC1_SetConfig+0xb0>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a18      	ldr	r2, [pc, #96]	; (8003bd4 <TIM_OC1_SetConfig+0xfc>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d007      	beq.n	8003b88 <TIM_OC1_SetConfig+0xb0>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a17      	ldr	r2, [pc, #92]	; (8003bd8 <TIM_OC1_SetConfig+0x100>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d003      	beq.n	8003b88 <TIM_OC1_SetConfig+0xb0>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a16      	ldr	r2, [pc, #88]	; (8003bdc <TIM_OC1_SetConfig+0x104>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d111      	bne.n	8003bac <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	4a15      	ldr	r2, [pc, #84]	; (8003be0 <TIM_OC1_SetConfig+0x108>)
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	4a14      	ldr	r2, [pc, #80]	; (8003be4 <TIM_OC1_SetConfig+0x10c>)
 8003b94:	4013      	ands	r3, r2
 8003b96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	621a      	str	r2, [r3, #32]
}
 8003bc6:	46c0      	nop			; (mov r8, r8)
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	b006      	add	sp, #24
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	46c0      	nop			; (mov r8, r8)
 8003bd0:	40012c00 	.word	0x40012c00
 8003bd4:	40014000 	.word	0x40014000
 8003bd8:	40014400 	.word	0x40014400
 8003bdc:	40014800 	.word	0x40014800
 8003be0:	fffffeff 	.word	0xfffffeff
 8003be4:	fffffdff 	.word	0xfffffdff

08003be8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	2210      	movs	r2, #16
 8003bf8:	4393      	bics	r3, r2
 8003bfa:	001a      	movs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	4a2e      	ldr	r2, [pc, #184]	; (8003cd0 <TIM_OC2_SetConfig+0xe8>)
 8003c16:	4013      	ands	r3, r2
 8003c18:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	4a2d      	ldr	r2, [pc, #180]	; (8003cd4 <TIM_OC2_SetConfig+0xec>)
 8003c1e:	4013      	ands	r3, r2
 8003c20:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	021b      	lsls	r3, r3, #8
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	2220      	movs	r2, #32
 8003c32:	4393      	bics	r3, r2
 8003c34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	011b      	lsls	r3, r3, #4
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a24      	ldr	r2, [pc, #144]	; (8003cd8 <TIM_OC2_SetConfig+0xf0>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d10d      	bne.n	8003c66 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	2280      	movs	r2, #128	; 0x80
 8003c4e:	4393      	bics	r3, r2
 8003c50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	011b      	lsls	r3, r3, #4
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	2240      	movs	r2, #64	; 0x40
 8003c62:	4393      	bics	r3, r2
 8003c64:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a1b      	ldr	r2, [pc, #108]	; (8003cd8 <TIM_OC2_SetConfig+0xf0>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d00b      	beq.n	8003c86 <TIM_OC2_SetConfig+0x9e>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a1a      	ldr	r2, [pc, #104]	; (8003cdc <TIM_OC2_SetConfig+0xf4>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d007      	beq.n	8003c86 <TIM_OC2_SetConfig+0x9e>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a19      	ldr	r2, [pc, #100]	; (8003ce0 <TIM_OC2_SetConfig+0xf8>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d003      	beq.n	8003c86 <TIM_OC2_SetConfig+0x9e>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a18      	ldr	r2, [pc, #96]	; (8003ce4 <TIM_OC2_SetConfig+0xfc>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d113      	bne.n	8003cae <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	4a17      	ldr	r2, [pc, #92]	; (8003ce8 <TIM_OC2_SetConfig+0x100>)
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	4a16      	ldr	r2, [pc, #88]	; (8003cec <TIM_OC2_SetConfig+0x104>)
 8003c92:	4013      	ands	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	621a      	str	r2, [r3, #32]
}
 8003cc8:	46c0      	nop			; (mov r8, r8)
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	b006      	add	sp, #24
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	ffff8fff 	.word	0xffff8fff
 8003cd4:	fffffcff 	.word	0xfffffcff
 8003cd8:	40012c00 	.word	0x40012c00
 8003cdc:	40014000 	.word	0x40014000
 8003ce0:	40014400 	.word	0x40014400
 8003ce4:	40014800 	.word	0x40014800
 8003ce8:	fffffbff 	.word	0xfffffbff
 8003cec:	fffff7ff 	.word	0xfffff7ff

08003cf0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	4a35      	ldr	r2, [pc, #212]	; (8003dd4 <TIM_OC3_SetConfig+0xe4>)
 8003d00:	401a      	ands	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2270      	movs	r2, #112	; 0x70
 8003d1c:	4393      	bics	r3, r2
 8003d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2203      	movs	r2, #3
 8003d24:	4393      	bics	r3, r2
 8003d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	4a28      	ldr	r2, [pc, #160]	; (8003dd8 <TIM_OC3_SetConfig+0xe8>)
 8003d36:	4013      	ands	r3, r2
 8003d38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	021b      	lsls	r3, r3, #8
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a24      	ldr	r2, [pc, #144]	; (8003ddc <TIM_OC3_SetConfig+0xec>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d10d      	bne.n	8003d6a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	4a23      	ldr	r2, [pc, #140]	; (8003de0 <TIM_OC3_SetConfig+0xf0>)
 8003d52:	4013      	ands	r3, r2
 8003d54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	021b      	lsls	r3, r3, #8
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	4a1f      	ldr	r2, [pc, #124]	; (8003de4 <TIM_OC3_SetConfig+0xf4>)
 8003d66:	4013      	ands	r3, r2
 8003d68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a1b      	ldr	r2, [pc, #108]	; (8003ddc <TIM_OC3_SetConfig+0xec>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d00b      	beq.n	8003d8a <TIM_OC3_SetConfig+0x9a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a1c      	ldr	r2, [pc, #112]	; (8003de8 <TIM_OC3_SetConfig+0xf8>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d007      	beq.n	8003d8a <TIM_OC3_SetConfig+0x9a>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a1b      	ldr	r2, [pc, #108]	; (8003dec <TIM_OC3_SetConfig+0xfc>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d003      	beq.n	8003d8a <TIM_OC3_SetConfig+0x9a>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a1a      	ldr	r2, [pc, #104]	; (8003df0 <TIM_OC3_SetConfig+0x100>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d113      	bne.n	8003db2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	4a19      	ldr	r2, [pc, #100]	; (8003df4 <TIM_OC3_SetConfig+0x104>)
 8003d8e:	4013      	ands	r3, r2
 8003d90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	4a18      	ldr	r2, [pc, #96]	; (8003df8 <TIM_OC3_SetConfig+0x108>)
 8003d96:	4013      	ands	r3, r2
 8003d98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	011b      	lsls	r3, r3, #4
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	011b      	lsls	r3, r3, #4
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	621a      	str	r2, [r3, #32]
}
 8003dcc:	46c0      	nop			; (mov r8, r8)
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	b006      	add	sp, #24
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	fffffeff 	.word	0xfffffeff
 8003dd8:	fffffdff 	.word	0xfffffdff
 8003ddc:	40012c00 	.word	0x40012c00
 8003de0:	fffff7ff 	.word	0xfffff7ff
 8003de4:	fffffbff 	.word	0xfffffbff
 8003de8:	40014000 	.word	0x40014000
 8003dec:	40014400 	.word	0x40014400
 8003df0:	40014800 	.word	0x40014800
 8003df4:	ffffefff 	.word	0xffffefff
 8003df8:	ffffdfff 	.word	0xffffdfff

08003dfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	4a28      	ldr	r2, [pc, #160]	; (8003eac <TIM_OC4_SetConfig+0xb0>)
 8003e0c:	401a      	ands	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4a22      	ldr	r2, [pc, #136]	; (8003eb0 <TIM_OC4_SetConfig+0xb4>)
 8003e28:	4013      	ands	r3, r2
 8003e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4a21      	ldr	r2, [pc, #132]	; (8003eb4 <TIM_OC4_SetConfig+0xb8>)
 8003e30:	4013      	ands	r3, r2
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	021b      	lsls	r3, r3, #8
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	4a1d      	ldr	r2, [pc, #116]	; (8003eb8 <TIM_OC4_SetConfig+0xbc>)
 8003e44:	4013      	ands	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	031b      	lsls	r3, r3, #12
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a19      	ldr	r2, [pc, #100]	; (8003ebc <TIM_OC4_SetConfig+0xc0>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d00b      	beq.n	8003e74 <TIM_OC4_SetConfig+0x78>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a18      	ldr	r2, [pc, #96]	; (8003ec0 <TIM_OC4_SetConfig+0xc4>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d007      	beq.n	8003e74 <TIM_OC4_SetConfig+0x78>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a17      	ldr	r2, [pc, #92]	; (8003ec4 <TIM_OC4_SetConfig+0xc8>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d003      	beq.n	8003e74 <TIM_OC4_SetConfig+0x78>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a16      	ldr	r2, [pc, #88]	; (8003ec8 <TIM_OC4_SetConfig+0xcc>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d109      	bne.n	8003e88 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	4a15      	ldr	r2, [pc, #84]	; (8003ecc <TIM_OC4_SetConfig+0xd0>)
 8003e78:	4013      	ands	r3, r2
 8003e7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	019b      	lsls	r3, r3, #6
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	621a      	str	r2, [r3, #32]
}
 8003ea2:	46c0      	nop			; (mov r8, r8)
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	b006      	add	sp, #24
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	46c0      	nop			; (mov r8, r8)
 8003eac:	ffffefff 	.word	0xffffefff
 8003eb0:	ffff8fff 	.word	0xffff8fff
 8003eb4:	fffffcff 	.word	0xfffffcff
 8003eb8:	ffffdfff 	.word	0xffffdfff
 8003ebc:	40012c00 	.word	0x40012c00
 8003ec0:	40014000 	.word	0x40014000
 8003ec4:	40014400 	.word	0x40014400
 8003ec8:	40014800 	.word	0x40014800
 8003ecc:	ffffbfff 	.word	0xffffbfff

08003ed0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	4393      	bics	r3, r2
 8003eea:	001a      	movs	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	22f0      	movs	r2, #240	; 0xf0
 8003efa:	4393      	bics	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	011b      	lsls	r3, r3, #4
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	220a      	movs	r2, #10
 8003f0c:	4393      	bics	r3, r2
 8003f0e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	621a      	str	r2, [r3, #32]
}
 8003f24:	46c0      	nop			; (mov r8, r8)
 8003f26:	46bd      	mov	sp, r7
 8003f28:	b006      	add	sp, #24
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	2210      	movs	r2, #16
 8003f3e:	4393      	bics	r3, r2
 8003f40:	001a      	movs	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	4a0d      	ldr	r2, [pc, #52]	; (8003f8c <TIM_TI2_ConfigInputStage+0x60>)
 8003f56:	4013      	ands	r3, r2
 8003f58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	031b      	lsls	r3, r3, #12
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	22a0      	movs	r2, #160	; 0xa0
 8003f68:	4393      	bics	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	011b      	lsls	r3, r3, #4
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	621a      	str	r2, [r3, #32]
}
 8003f82:	46c0      	nop			; (mov r8, r8)
 8003f84:	46bd      	mov	sp, r7
 8003f86:	b006      	add	sp, #24
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	46c0      	nop			; (mov r8, r8)
 8003f8c:	ffff0fff 	.word	0xffff0fff

08003f90 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2270      	movs	r2, #112	; 0x70
 8003fa4:	4393      	bics	r3, r2
 8003fa6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	2207      	movs	r2, #7
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	609a      	str	r2, [r3, #8]
}
 8003fba:	46c0      	nop			; (mov r8, r8)
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	b004      	add	sp, #16
 8003fc0:	bd80      	pop	{r7, pc}
	...

08003fc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
 8003fd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	4a09      	ldr	r2, [pc, #36]	; (8004000 <TIM_ETR_SetConfig+0x3c>)
 8003fdc:	4013      	ands	r3, r2
 8003fde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	021a      	lsls	r2, r3, #8
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	609a      	str	r2, [r3, #8]
}
 8003ff8:	46c0      	nop			; (mov r8, r8)
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	b006      	add	sp, #24
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	ffff00ff 	.word	0xffff00ff

08004004 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	221f      	movs	r2, #31
 8004014:	4013      	ands	r3, r2
 8004016:	2201      	movs	r2, #1
 8004018:	409a      	lsls	r2, r3
 800401a:	0013      	movs	r3, r2
 800401c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	43d2      	mvns	r2, r2
 8004026:	401a      	ands	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6a1a      	ldr	r2, [r3, #32]
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	211f      	movs	r1, #31
 8004034:	400b      	ands	r3, r1
 8004036:	6879      	ldr	r1, [r7, #4]
 8004038:	4099      	lsls	r1, r3
 800403a:	000b      	movs	r3, r1
 800403c:	431a      	orrs	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	621a      	str	r2, [r3, #32]
}
 8004042:	46c0      	nop			; (mov r8, r8)
 8004044:	46bd      	mov	sp, r7
 8004046:	b006      	add	sp, #24
 8004048:	bd80      	pop	{r7, pc}
	...

0800404c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	223c      	movs	r2, #60	; 0x3c
 800405a:	5c9b      	ldrb	r3, [r3, r2]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d101      	bne.n	8004064 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004060:	2302      	movs	r3, #2
 8004062:	e047      	b.n	80040f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	223c      	movs	r2, #60	; 0x3c
 8004068:	2101      	movs	r1, #1
 800406a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	223d      	movs	r2, #61	; 0x3d
 8004070:	2102      	movs	r1, #2
 8004072:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2270      	movs	r2, #112	; 0x70
 8004088:	4393      	bics	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	4313      	orrs	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a16      	ldr	r2, [pc, #88]	; (80040fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d00f      	beq.n	80040c8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	2380      	movs	r3, #128	; 0x80
 80040ae:	05db      	lsls	r3, r3, #23
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d009      	beq.n	80040c8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a11      	ldr	r2, [pc, #68]	; (8004100 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d004      	beq.n	80040c8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a10      	ldr	r2, [pc, #64]	; (8004104 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d10c      	bne.n	80040e2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	2280      	movs	r2, #128	; 0x80
 80040cc:	4393      	bics	r3, r2
 80040ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	223d      	movs	r2, #61	; 0x3d
 80040e6:	2101      	movs	r1, #1
 80040e8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	223c      	movs	r2, #60	; 0x3c
 80040ee:	2100      	movs	r1, #0
 80040f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	0018      	movs	r0, r3
 80040f6:	46bd      	mov	sp, r7
 80040f8:	b004      	add	sp, #16
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	40012c00 	.word	0x40012c00
 8004100:	40000400 	.word	0x40000400
 8004104:	40014000 	.word	0x40014000

08004108 <__libc_init_array>:
 8004108:	b570      	push	{r4, r5, r6, lr}
 800410a:	2600      	movs	r6, #0
 800410c:	4d0c      	ldr	r5, [pc, #48]	; (8004140 <__libc_init_array+0x38>)
 800410e:	4c0d      	ldr	r4, [pc, #52]	; (8004144 <__libc_init_array+0x3c>)
 8004110:	1b64      	subs	r4, r4, r5
 8004112:	10a4      	asrs	r4, r4, #2
 8004114:	42a6      	cmp	r6, r4
 8004116:	d109      	bne.n	800412c <__libc_init_array+0x24>
 8004118:	2600      	movs	r6, #0
 800411a:	f000 f821 	bl	8004160 <_init>
 800411e:	4d0a      	ldr	r5, [pc, #40]	; (8004148 <__libc_init_array+0x40>)
 8004120:	4c0a      	ldr	r4, [pc, #40]	; (800414c <__libc_init_array+0x44>)
 8004122:	1b64      	subs	r4, r4, r5
 8004124:	10a4      	asrs	r4, r4, #2
 8004126:	42a6      	cmp	r6, r4
 8004128:	d105      	bne.n	8004136 <__libc_init_array+0x2e>
 800412a:	bd70      	pop	{r4, r5, r6, pc}
 800412c:	00b3      	lsls	r3, r6, #2
 800412e:	58eb      	ldr	r3, [r5, r3]
 8004130:	4798      	blx	r3
 8004132:	3601      	adds	r6, #1
 8004134:	e7ee      	b.n	8004114 <__libc_init_array+0xc>
 8004136:	00b3      	lsls	r3, r6, #2
 8004138:	58eb      	ldr	r3, [r5, r3]
 800413a:	4798      	blx	r3
 800413c:	3601      	adds	r6, #1
 800413e:	e7f2      	b.n	8004126 <__libc_init_array+0x1e>
 8004140:	08004228 	.word	0x08004228
 8004144:	08004228 	.word	0x08004228
 8004148:	08004228 	.word	0x08004228
 800414c:	0800422c 	.word	0x0800422c

08004150 <memset>:
 8004150:	0003      	movs	r3, r0
 8004152:	1882      	adds	r2, r0, r2
 8004154:	4293      	cmp	r3, r2
 8004156:	d100      	bne.n	800415a <memset+0xa>
 8004158:	4770      	bx	lr
 800415a:	7019      	strb	r1, [r3, #0]
 800415c:	3301      	adds	r3, #1
 800415e:	e7f9      	b.n	8004154 <memset+0x4>

08004160 <_init>:
 8004160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004162:	46c0      	nop			; (mov r8, r8)
 8004164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004166:	bc08      	pop	{r3}
 8004168:	469e      	mov	lr, r3
 800416a:	4770      	bx	lr

0800416c <_fini>:
 800416c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800416e:	46c0      	nop			; (mov r8, r8)
 8004170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004172:	bc08      	pop	{r3}
 8004174:	469e      	mov	lr, r3
 8004176:	4770      	bx	lr
