
Project_7.0_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003070  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003130  08003130  00013130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003160  08003160  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003160  08003160  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003160  08003160  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003160  08003160  00013160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003164  08003164  00013164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003168  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  08003174  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08003174  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ba7  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ae2  00000000  00000000  00029bdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  0002b6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  0002c138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e7b  00000000  00000000  0002cad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c0c0  00000000  00000000  00045953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092e69  00000000  00000000  00051a13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e487c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002534  00000000  00000000  000e48cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003118 	.word	0x08003118

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003118 	.word	0x08003118

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_ADC_ConvCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	TIM2->CCR1 = (AD_RES<<4);
 8000228:	4b04      	ldr	r3, [pc, #16]	; (800023c <HAL_ADC_ConvCpltCallback+0x1c>)
 800022a:	881b      	ldrh	r3, [r3, #0]
 800022c:	011a      	lsls	r2, r3, #4
 800022e:	2380      	movs	r3, #128	; 0x80
 8000230:	05db      	lsls	r3, r3, #23
 8000232:	635a      	str	r2, [r3, #52]	; 0x34

}
 8000234:	46c0      	nop			; (mov r8, r8)
 8000236:	46bd      	mov	sp, r7
 8000238:	b002      	add	sp, #8
 800023a:	bd80      	pop	{r7, pc}
 800023c:	20000028 	.word	0x20000028

08000240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000244:	f000 fad2 	bl	80007ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000248:	f000 f822 	bl	8000290 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800024c:	f000 f95e 	bl	800050c <MX_GPIO_Init>
  MX_DMA_Init();
 8000250:	f000 f93e 	bl	80004d0 <MX_DMA_Init>
  MX_ADC_Init();
 8000254:	f000 f860 	bl	8000318 <MX_ADC_Init>
  MX_TIM2_Init();
 8000258:	f000 f8ba 	bl	80003d0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800025c:	4b09      	ldr	r3, [pc, #36]	; (8000284 <main+0x44>)
 800025e:	2100      	movs	r1, #0
 8000260:	0018      	movs	r0, r3
 8000262:	f002 f943 	bl	80024ec <HAL_TIM_PWM_Start>
  HAL_ADCEx_Calibration_Start(&hadc);
 8000266:	4b08      	ldr	r3, [pc, #32]	; (8000288 <main+0x48>)
 8000268:	0018      	movs	r0, r3
 800026a:	f000 ff2f 	bl	80010cc <HAL_ADCEx_Calibration_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      HAL_ADC_Start_DMA(&hadc, &AD_RES, 1);
 800026e:	4907      	ldr	r1, [pc, #28]	; (800028c <main+0x4c>)
 8000270:	4b05      	ldr	r3, [pc, #20]	; (8000288 <main+0x48>)
 8000272:	2201      	movs	r2, #1
 8000274:	0018      	movs	r0, r3
 8000276:	f000 fc81 	bl	8000b7c <HAL_ADC_Start_DMA>
      HAL_Delay(1);
 800027a:	2001      	movs	r0, #1
 800027c:	f000 fb1a 	bl	80008b4 <HAL_Delay>
      HAL_ADC_Start_DMA(&hadc, &AD_RES, 1);
 8000280:	e7f5      	b.n	800026e <main+0x2e>
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	200000b0 	.word	0x200000b0
 8000288:	2000002c 	.word	0x2000002c
 800028c:	20000028 	.word	0x20000028

08000290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000290:	b590      	push	{r4, r7, lr}
 8000292:	b093      	sub	sp, #76	; 0x4c
 8000294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000296:	2414      	movs	r4, #20
 8000298:	193b      	adds	r3, r7, r4
 800029a:	0018      	movs	r0, r3
 800029c:	2334      	movs	r3, #52	; 0x34
 800029e:	001a      	movs	r2, r3
 80002a0:	2100      	movs	r1, #0
 80002a2:	f002 ff31 	bl	8003108 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	0018      	movs	r0, r3
 80002aa:	2310      	movs	r3, #16
 80002ac:	001a      	movs	r2, r3
 80002ae:	2100      	movs	r1, #0
 80002b0:	f002 ff2a 	bl	8003108 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSI48;
 80002b4:	0021      	movs	r1, r4
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	2230      	movs	r2, #48	; 0x30
 80002ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	2201      	movs	r2, #1
 80002c0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2201      	movs	r2, #1
 80002c6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	2210      	movs	r2, #16
 80002cc:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	2200      	movs	r2, #0
 80002d2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	0018      	movs	r0, r3
 80002d8:	f001 fb8e 	bl	80019f8 <HAL_RCC_OscConfig>
 80002dc:	1e03      	subs	r3, r0, #0
 80002de:	d001      	beq.n	80002e4 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80002e0:	f000 f93a 	bl	8000558 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	2207      	movs	r2, #7
 80002e8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	2203      	movs	r2, #3
 80002ee:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	2200      	movs	r2, #0
 80002f4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	2200      	movs	r2, #0
 80002fa:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	2101      	movs	r1, #1
 8000300:	0018      	movs	r0, r3
 8000302:	f001 feff 	bl	8002104 <HAL_RCC_ClockConfig>
 8000306:	1e03      	subs	r3, r0, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800030a:	f000 f925 	bl	8000558 <Error_Handler>
  }
}
 800030e:	46c0      	nop			; (mov r8, r8)
 8000310:	46bd      	mov	sp, r7
 8000312:	b013      	add	sp, #76	; 0x4c
 8000314:	bd90      	pop	{r4, r7, pc}
	...

08000318 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	0018      	movs	r0, r3
 8000322:	230c      	movs	r3, #12
 8000324:	001a      	movs	r2, r3
 8000326:	2100      	movs	r1, #0
 8000328:	f002 feee 	bl	8003108 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800032c:	4b26      	ldr	r3, [pc, #152]	; (80003c8 <MX_ADC_Init+0xb0>)
 800032e:	4a27      	ldr	r2, [pc, #156]	; (80003cc <MX_ADC_Init+0xb4>)
 8000330:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000332:	4b25      	ldr	r3, [pc, #148]	; (80003c8 <MX_ADC_Init+0xb0>)
 8000334:	2200      	movs	r2, #0
 8000336:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000338:	4b23      	ldr	r3, [pc, #140]	; (80003c8 <MX_ADC_Init+0xb0>)
 800033a:	2200      	movs	r2, #0
 800033c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800033e:	4b22      	ldr	r3, [pc, #136]	; (80003c8 <MX_ADC_Init+0xb0>)
 8000340:	2200      	movs	r2, #0
 8000342:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000344:	4b20      	ldr	r3, [pc, #128]	; (80003c8 <MX_ADC_Init+0xb0>)
 8000346:	2201      	movs	r2, #1
 8000348:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800034a:	4b1f      	ldr	r3, [pc, #124]	; (80003c8 <MX_ADC_Init+0xb0>)
 800034c:	2204      	movs	r2, #4
 800034e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000350:	4b1d      	ldr	r3, [pc, #116]	; (80003c8 <MX_ADC_Init+0xb0>)
 8000352:	2200      	movs	r2, #0
 8000354:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000356:	4b1c      	ldr	r3, [pc, #112]	; (80003c8 <MX_ADC_Init+0xb0>)
 8000358:	2200      	movs	r2, #0
 800035a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800035c:	4b1a      	ldr	r3, [pc, #104]	; (80003c8 <MX_ADC_Init+0xb0>)
 800035e:	2200      	movs	r2, #0
 8000360:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000362:	4b19      	ldr	r3, [pc, #100]	; (80003c8 <MX_ADC_Init+0xb0>)
 8000364:	2200      	movs	r2, #0
 8000366:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000368:	4b17      	ldr	r3, [pc, #92]	; (80003c8 <MX_ADC_Init+0xb0>)
 800036a:	22c2      	movs	r2, #194	; 0xc2
 800036c:	32ff      	adds	r2, #255	; 0xff
 800036e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000370:	4b15      	ldr	r3, [pc, #84]	; (80003c8 <MX_ADC_Init+0xb0>)
 8000372:	2200      	movs	r2, #0
 8000374:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000376:	4b14      	ldr	r3, [pc, #80]	; (80003c8 <MX_ADC_Init+0xb0>)
 8000378:	2224      	movs	r2, #36	; 0x24
 800037a:	2100      	movs	r1, #0
 800037c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800037e:	4b12      	ldr	r3, [pc, #72]	; (80003c8 <MX_ADC_Init+0xb0>)
 8000380:	2201      	movs	r2, #1
 8000382:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000384:	4b10      	ldr	r3, [pc, #64]	; (80003c8 <MX_ADC_Init+0xb0>)
 8000386:	0018      	movs	r0, r3
 8000388:	f000 fab8 	bl	80008fc <HAL_ADC_Init>
 800038c:	1e03      	subs	r3, r0, #0
 800038e:	d001      	beq.n	8000394 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000390:	f000 f8e2 	bl	8000558 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000394:	1d3b      	adds	r3, r7, #4
 8000396:	2207      	movs	r2, #7
 8000398:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	2280      	movs	r2, #128	; 0x80
 800039e:	0152      	lsls	r2, r2, #5
 80003a0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	2280      	movs	r2, #128	; 0x80
 80003a6:	0552      	lsls	r2, r2, #21
 80003a8:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003aa:	1d3a      	adds	r2, r7, #4
 80003ac:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <MX_ADC_Init+0xb0>)
 80003ae:	0011      	movs	r1, r2
 80003b0:	0018      	movs	r0, r3
 80003b2:	f000 fc75 	bl	8000ca0 <HAL_ADC_ConfigChannel>
 80003b6:	1e03      	subs	r3, r0, #0
 80003b8:	d001      	beq.n	80003be <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80003ba:	f000 f8cd 	bl	8000558 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80003be:	46c0      	nop			; (mov r8, r8)
 80003c0:	46bd      	mov	sp, r7
 80003c2:	b004      	add	sp, #16
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	46c0      	nop			; (mov r8, r8)
 80003c8:	2000002c 	.word	0x2000002c
 80003cc:	40012400 	.word	0x40012400

080003d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b08e      	sub	sp, #56	; 0x38
 80003d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003d6:	2328      	movs	r3, #40	; 0x28
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	0018      	movs	r0, r3
 80003dc:	2310      	movs	r3, #16
 80003de:	001a      	movs	r2, r3
 80003e0:	2100      	movs	r1, #0
 80003e2:	f002 fe91 	bl	8003108 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003e6:	2320      	movs	r3, #32
 80003e8:	18fb      	adds	r3, r7, r3
 80003ea:	0018      	movs	r0, r3
 80003ec:	2308      	movs	r3, #8
 80003ee:	001a      	movs	r2, r3
 80003f0:	2100      	movs	r1, #0
 80003f2:	f002 fe89 	bl	8003108 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	0018      	movs	r0, r3
 80003fa:	231c      	movs	r3, #28
 80003fc:	001a      	movs	r2, r3
 80003fe:	2100      	movs	r1, #0
 8000400:	f002 fe82 	bl	8003108 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000404:	4b30      	ldr	r3, [pc, #192]	; (80004c8 <MX_TIM2_Init+0xf8>)
 8000406:	2280      	movs	r2, #128	; 0x80
 8000408:	05d2      	lsls	r2, r2, #23
 800040a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800040c:	4b2e      	ldr	r3, [pc, #184]	; (80004c8 <MX_TIM2_Init+0xf8>)
 800040e:	2200      	movs	r2, #0
 8000410:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000412:	4b2d      	ldr	r3, [pc, #180]	; (80004c8 <MX_TIM2_Init+0xf8>)
 8000414:	2200      	movs	r2, #0
 8000416:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000418:	4b2b      	ldr	r3, [pc, #172]	; (80004c8 <MX_TIM2_Init+0xf8>)
 800041a:	4a2c      	ldr	r2, [pc, #176]	; (80004cc <MX_TIM2_Init+0xfc>)
 800041c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800041e:	4b2a      	ldr	r3, [pc, #168]	; (80004c8 <MX_TIM2_Init+0xf8>)
 8000420:	2200      	movs	r2, #0
 8000422:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000424:	4b28      	ldr	r3, [pc, #160]	; (80004c8 <MX_TIM2_Init+0xf8>)
 8000426:	2280      	movs	r2, #128	; 0x80
 8000428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800042a:	4b27      	ldr	r3, [pc, #156]	; (80004c8 <MX_TIM2_Init+0xf8>)
 800042c:	0018      	movs	r0, r3
 800042e:	f001 ffb5 	bl	800239c <HAL_TIM_Base_Init>
 8000432:	1e03      	subs	r3, r0, #0
 8000434:	d001      	beq.n	800043a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000436:	f000 f88f 	bl	8000558 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800043a:	2128      	movs	r1, #40	; 0x28
 800043c:	187b      	adds	r3, r7, r1
 800043e:	2280      	movs	r2, #128	; 0x80
 8000440:	0152      	lsls	r2, r2, #5
 8000442:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000444:	187a      	adds	r2, r7, r1
 8000446:	4b20      	ldr	r3, [pc, #128]	; (80004c8 <MX_TIM2_Init+0xf8>)
 8000448:	0011      	movs	r1, r2
 800044a:	0018      	movs	r0, r3
 800044c:	f002 f9cc 	bl	80027e8 <HAL_TIM_ConfigClockSource>
 8000450:	1e03      	subs	r3, r0, #0
 8000452:	d001      	beq.n	8000458 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000454:	f000 f880 	bl	8000558 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000458:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <MX_TIM2_Init+0xf8>)
 800045a:	0018      	movs	r0, r3
 800045c:	f001 ffee 	bl	800243c <HAL_TIM_PWM_Init>
 8000460:	1e03      	subs	r3, r0, #0
 8000462:	d001      	beq.n	8000468 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000464:	f000 f878 	bl	8000558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000468:	2120      	movs	r1, #32
 800046a:	187b      	adds	r3, r7, r1
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000470:	187b      	adds	r3, r7, r1
 8000472:	2200      	movs	r2, #0
 8000474:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000476:	187a      	adds	r2, r7, r1
 8000478:	4b13      	ldr	r3, [pc, #76]	; (80004c8 <MX_TIM2_Init+0xf8>)
 800047a:	0011      	movs	r1, r2
 800047c:	0018      	movs	r0, r3
 800047e:	f002 fdc1 	bl	8003004 <HAL_TIMEx_MasterConfigSynchronization>
 8000482:	1e03      	subs	r3, r0, #0
 8000484:	d001      	beq.n	800048a <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000486:	f000 f867 	bl	8000558 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	2260      	movs	r2, #96	; 0x60
 800048e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	2200      	movs	r2, #0
 8000494:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800049c:	1d3b      	adds	r3, r7, #4
 800049e:	2200      	movs	r2, #0
 80004a0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004a2:	1d39      	adds	r1, r7, #4
 80004a4:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <MX_TIM2_Init+0xf8>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	0018      	movs	r0, r3
 80004aa:	f002 f8d7 	bl	800265c <HAL_TIM_PWM_ConfigChannel>
 80004ae:	1e03      	subs	r3, r0, #0
 80004b0:	d001      	beq.n	80004b6 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80004b2:	f000 f851 	bl	8000558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80004b6:	4b04      	ldr	r3, [pc, #16]	; (80004c8 <MX_TIM2_Init+0xf8>)
 80004b8:	0018      	movs	r0, r3
 80004ba:	f000 f905 	bl	80006c8 <HAL_TIM_MspPostInit>

}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	46bd      	mov	sp, r7
 80004c2:	b00e      	add	sp, #56	; 0x38
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	200000b0 	.word	0x200000b0
 80004cc:	0000ffff 	.word	0x0000ffff

080004d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004d6:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <MX_DMA_Init+0x38>)
 80004d8:	695a      	ldr	r2, [r3, #20]
 80004da:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <MX_DMA_Init+0x38>)
 80004dc:	2101      	movs	r1, #1
 80004de:	430a      	orrs	r2, r1
 80004e0:	615a      	str	r2, [r3, #20]
 80004e2:	4b09      	ldr	r3, [pc, #36]	; (8000508 <MX_DMA_Init+0x38>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	2201      	movs	r2, #1
 80004e8:	4013      	ands	r3, r2
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2100      	movs	r1, #0
 80004f2:	2009      	movs	r0, #9
 80004f4:	f000 ff3e 	bl	8001374 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004f8:	2009      	movs	r0, #9
 80004fa:	f000 ff50 	bl	800139e <HAL_NVIC_EnableIRQ>

}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	46bd      	mov	sp, r7
 8000502:	b002      	add	sp, #8
 8000504:	bd80      	pop	{r7, pc}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	40021000 	.word	0x40021000

0800050c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000512:	4b10      	ldr	r3, [pc, #64]	; (8000554 <MX_GPIO_Init+0x48>)
 8000514:	695a      	ldr	r2, [r3, #20]
 8000516:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <MX_GPIO_Init+0x48>)
 8000518:	2180      	movs	r1, #128	; 0x80
 800051a:	03c9      	lsls	r1, r1, #15
 800051c:	430a      	orrs	r2, r1
 800051e:	615a      	str	r2, [r3, #20]
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <MX_GPIO_Init+0x48>)
 8000522:	695a      	ldr	r2, [r3, #20]
 8000524:	2380      	movs	r3, #128	; 0x80
 8000526:	03db      	lsls	r3, r3, #15
 8000528:	4013      	ands	r3, r2
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052e:	4b09      	ldr	r3, [pc, #36]	; (8000554 <MX_GPIO_Init+0x48>)
 8000530:	695a      	ldr	r2, [r3, #20]
 8000532:	4b08      	ldr	r3, [pc, #32]	; (8000554 <MX_GPIO_Init+0x48>)
 8000534:	2180      	movs	r1, #128	; 0x80
 8000536:	0289      	lsls	r1, r1, #10
 8000538:	430a      	orrs	r2, r1
 800053a:	615a      	str	r2, [r3, #20]
 800053c:	4b05      	ldr	r3, [pc, #20]	; (8000554 <MX_GPIO_Init+0x48>)
 800053e:	695a      	ldr	r2, [r3, #20]
 8000540:	2380      	movs	r3, #128	; 0x80
 8000542:	029b      	lsls	r3, r3, #10
 8000544:	4013      	ands	r3, r2
 8000546:	603b      	str	r3, [r7, #0]
 8000548:	683b      	ldr	r3, [r7, #0]

}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	46bd      	mov	sp, r7
 800054e:	b002      	add	sp, #8
 8000550:	bd80      	pop	{r7, pc}
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	40021000 	.word	0x40021000

08000558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800055c:	b672      	cpsid	i
}
 800055e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000560:	e7fe      	b.n	8000560 <Error_Handler+0x8>
	...

08000564 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800056a:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <HAL_MspInit+0x44>)
 800056c:	699a      	ldr	r2, [r3, #24]
 800056e:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <HAL_MspInit+0x44>)
 8000570:	2101      	movs	r1, #1
 8000572:	430a      	orrs	r2, r1
 8000574:	619a      	str	r2, [r3, #24]
 8000576:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <HAL_MspInit+0x44>)
 8000578:	699b      	ldr	r3, [r3, #24]
 800057a:	2201      	movs	r2, #1
 800057c:	4013      	ands	r3, r2
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000582:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <HAL_MspInit+0x44>)
 8000584:	69da      	ldr	r2, [r3, #28]
 8000586:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <HAL_MspInit+0x44>)
 8000588:	2180      	movs	r1, #128	; 0x80
 800058a:	0549      	lsls	r1, r1, #21
 800058c:	430a      	orrs	r2, r1
 800058e:	61da      	str	r2, [r3, #28]
 8000590:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <HAL_MspInit+0x44>)
 8000592:	69da      	ldr	r2, [r3, #28]
 8000594:	2380      	movs	r3, #128	; 0x80
 8000596:	055b      	lsls	r3, r3, #21
 8000598:	4013      	ands	r3, r2
 800059a:	603b      	str	r3, [r7, #0]
 800059c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	46bd      	mov	sp, r7
 80005a2:	b002      	add	sp, #8
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	40021000 	.word	0x40021000

080005ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005ac:	b590      	push	{r4, r7, lr}
 80005ae:	b08b      	sub	sp, #44	; 0x2c
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b4:	2414      	movs	r4, #20
 80005b6:	193b      	adds	r3, r7, r4
 80005b8:	0018      	movs	r0, r3
 80005ba:	2314      	movs	r3, #20
 80005bc:	001a      	movs	r2, r3
 80005be:	2100      	movs	r1, #0
 80005c0:	f002 fda2 	bl	8003108 <memset>
  if(hadc->Instance==ADC1)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a2d      	ldr	r2, [pc, #180]	; (8000680 <HAL_ADC_MspInit+0xd4>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d153      	bne.n	8000676 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005ce:	4b2d      	ldr	r3, [pc, #180]	; (8000684 <HAL_ADC_MspInit+0xd8>)
 80005d0:	699a      	ldr	r2, [r3, #24]
 80005d2:	4b2c      	ldr	r3, [pc, #176]	; (8000684 <HAL_ADC_MspInit+0xd8>)
 80005d4:	2180      	movs	r1, #128	; 0x80
 80005d6:	0089      	lsls	r1, r1, #2
 80005d8:	430a      	orrs	r2, r1
 80005da:	619a      	str	r2, [r3, #24]
 80005dc:	4b29      	ldr	r3, [pc, #164]	; (8000684 <HAL_ADC_MspInit+0xd8>)
 80005de:	699a      	ldr	r2, [r3, #24]
 80005e0:	2380      	movs	r3, #128	; 0x80
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	4013      	ands	r3, r2
 80005e6:	613b      	str	r3, [r7, #16]
 80005e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ea:	4b26      	ldr	r3, [pc, #152]	; (8000684 <HAL_ADC_MspInit+0xd8>)
 80005ec:	695a      	ldr	r2, [r3, #20]
 80005ee:	4b25      	ldr	r3, [pc, #148]	; (8000684 <HAL_ADC_MspInit+0xd8>)
 80005f0:	2180      	movs	r1, #128	; 0x80
 80005f2:	0289      	lsls	r1, r1, #10
 80005f4:	430a      	orrs	r2, r1
 80005f6:	615a      	str	r2, [r3, #20]
 80005f8:	4b22      	ldr	r3, [pc, #136]	; (8000684 <HAL_ADC_MspInit+0xd8>)
 80005fa:	695a      	ldr	r2, [r3, #20]
 80005fc:	2380      	movs	r3, #128	; 0x80
 80005fe:	029b      	lsls	r3, r3, #10
 8000600:	4013      	ands	r3, r2
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000606:	193b      	adds	r3, r7, r4
 8000608:	2280      	movs	r2, #128	; 0x80
 800060a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800060c:	193b      	adds	r3, r7, r4
 800060e:	2203      	movs	r2, #3
 8000610:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	193b      	adds	r3, r7, r4
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000618:	193a      	adds	r2, r7, r4
 800061a:	2390      	movs	r3, #144	; 0x90
 800061c:	05db      	lsls	r3, r3, #23
 800061e:	0011      	movs	r1, r2
 8000620:	0018      	movs	r0, r3
 8000622:	f001 f871 	bl	8001708 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000626:	4b18      	ldr	r3, [pc, #96]	; (8000688 <HAL_ADC_MspInit+0xdc>)
 8000628:	4a18      	ldr	r2, [pc, #96]	; (800068c <HAL_ADC_MspInit+0xe0>)
 800062a:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800062c:	4b16      	ldr	r3, [pc, #88]	; (8000688 <HAL_ADC_MspInit+0xdc>)
 800062e:	2200      	movs	r2, #0
 8000630:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000632:	4b15      	ldr	r3, [pc, #84]	; (8000688 <HAL_ADC_MspInit+0xdc>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000638:	4b13      	ldr	r3, [pc, #76]	; (8000688 <HAL_ADC_MspInit+0xdc>)
 800063a:	2280      	movs	r2, #128	; 0x80
 800063c:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800063e:	4b12      	ldr	r3, [pc, #72]	; (8000688 <HAL_ADC_MspInit+0xdc>)
 8000640:	2280      	movs	r2, #128	; 0x80
 8000642:	0052      	lsls	r2, r2, #1
 8000644:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000646:	4b10      	ldr	r3, [pc, #64]	; (8000688 <HAL_ADC_MspInit+0xdc>)
 8000648:	2280      	movs	r2, #128	; 0x80
 800064a:	00d2      	lsls	r2, r2, #3
 800064c:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <HAL_ADC_MspInit+0xdc>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <HAL_ADC_MspInit+0xdc>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800065a:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <HAL_ADC_MspInit+0xdc>)
 800065c:	0018      	movs	r0, r3
 800065e:	f000 febb 	bl	80013d8 <HAL_DMA_Init>
 8000662:	1e03      	subs	r3, r0, #0
 8000664:	d001      	beq.n	800066a <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000666:	f7ff ff77 	bl	8000558 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4a06      	ldr	r2, [pc, #24]	; (8000688 <HAL_ADC_MspInit+0xdc>)
 800066e:	631a      	str	r2, [r3, #48]	; 0x30
 8000670:	4b05      	ldr	r3, [pc, #20]	; (8000688 <HAL_ADC_MspInit+0xdc>)
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	46bd      	mov	sp, r7
 800067a:	b00b      	add	sp, #44	; 0x2c
 800067c:	bd90      	pop	{r4, r7, pc}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	40012400 	.word	0x40012400
 8000684:	40021000 	.word	0x40021000
 8000688:	2000006c 	.word	0x2000006c
 800068c:	40020008 	.word	0x40020008

08000690 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	2380      	movs	r3, #128	; 0x80
 800069e:	05db      	lsls	r3, r3, #23
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d10b      	bne.n	80006bc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006a4:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <HAL_TIM_Base_MspInit+0x34>)
 80006a6:	69da      	ldr	r2, [r3, #28]
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <HAL_TIM_Base_MspInit+0x34>)
 80006aa:	2101      	movs	r1, #1
 80006ac:	430a      	orrs	r2, r1
 80006ae:	61da      	str	r2, [r3, #28]
 80006b0:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <HAL_TIM_Base_MspInit+0x34>)
 80006b2:	69db      	ldr	r3, [r3, #28]
 80006b4:	2201      	movs	r2, #1
 80006b6:	4013      	ands	r3, r2
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80006bc:	46c0      	nop			; (mov r8, r8)
 80006be:	46bd      	mov	sp, r7
 80006c0:	b004      	add	sp, #16
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40021000 	.word	0x40021000

080006c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006c8:	b590      	push	{r4, r7, lr}
 80006ca:	b089      	sub	sp, #36	; 0x24
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d0:	240c      	movs	r4, #12
 80006d2:	193b      	adds	r3, r7, r4
 80006d4:	0018      	movs	r0, r3
 80006d6:	2314      	movs	r3, #20
 80006d8:	001a      	movs	r2, r3
 80006da:	2100      	movs	r1, #0
 80006dc:	f002 fd14 	bl	8003108 <memset>
  if(htim->Instance==TIM2)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	2380      	movs	r3, #128	; 0x80
 80006e6:	05db      	lsls	r3, r3, #23
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d124      	bne.n	8000736 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ec:	4b14      	ldr	r3, [pc, #80]	; (8000740 <HAL_TIM_MspPostInit+0x78>)
 80006ee:	695a      	ldr	r2, [r3, #20]
 80006f0:	4b13      	ldr	r3, [pc, #76]	; (8000740 <HAL_TIM_MspPostInit+0x78>)
 80006f2:	2180      	movs	r1, #128	; 0x80
 80006f4:	0289      	lsls	r1, r1, #10
 80006f6:	430a      	orrs	r2, r1
 80006f8:	615a      	str	r2, [r3, #20]
 80006fa:	4b11      	ldr	r3, [pc, #68]	; (8000740 <HAL_TIM_MspPostInit+0x78>)
 80006fc:	695a      	ldr	r2, [r3, #20]
 80006fe:	2380      	movs	r3, #128	; 0x80
 8000700:	029b      	lsls	r3, r3, #10
 8000702:	4013      	ands	r3, r2
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000708:	0021      	movs	r1, r4
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2201      	movs	r2, #1
 800070e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000710:	187b      	adds	r3, r7, r1
 8000712:	2202      	movs	r2, #2
 8000714:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071c:	187b      	adds	r3, r7, r1
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2202      	movs	r2, #2
 8000726:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000728:	187a      	adds	r2, r7, r1
 800072a:	2390      	movs	r3, #144	; 0x90
 800072c:	05db      	lsls	r3, r3, #23
 800072e:	0011      	movs	r1, r2
 8000730:	0018      	movs	r0, r3
 8000732:	f000 ffe9 	bl	8001708 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	46bd      	mov	sp, r7
 800073a:	b009      	add	sp, #36	; 0x24
 800073c:	bd90      	pop	{r4, r7, pc}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	40021000 	.word	0x40021000

08000744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000748:	e7fe      	b.n	8000748 <NMI_Handler+0x4>

0800074a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800074e:	e7fe      	b.n	800074e <HardFault_Handler+0x4>

08000750 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000754:	46c0      	nop			; (mov r8, r8)
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000768:	f000 f888 	bl	800087c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800076c:	46c0      	nop			; (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000778:	4b03      	ldr	r3, [pc, #12]	; (8000788 <DMA1_Channel1_IRQHandler+0x14>)
 800077a:	0018      	movs	r0, r3
 800077c:	f000 feda 	bl	8001534 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000780:	46c0      	nop			; (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	2000006c 	.word	0x2000006c

0800078c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000790:	46c0      	nop			; (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000798:	480d      	ldr	r0, [pc, #52]	; (80007d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800079a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800079c:	f7ff fff6 	bl	800078c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a0:	480c      	ldr	r0, [pc, #48]	; (80007d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80007a2:	490d      	ldr	r1, [pc, #52]	; (80007d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007a4:	4a0d      	ldr	r2, [pc, #52]	; (80007dc <LoopForever+0xe>)
  movs r3, #0
 80007a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007a8:	e002      	b.n	80007b0 <LoopCopyDataInit>

080007aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ae:	3304      	adds	r3, #4

080007b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b4:	d3f9      	bcc.n	80007aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007b6:	4a0a      	ldr	r2, [pc, #40]	; (80007e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007b8:	4c0a      	ldr	r4, [pc, #40]	; (80007e4 <LoopForever+0x16>)
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007bc:	e001      	b.n	80007c2 <LoopFillZerobss>

080007be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c0:	3204      	adds	r2, #4

080007c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c4:	d3fb      	bcc.n	80007be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007c6:	f002 fc7b 	bl	80030c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ca:	f7ff fd39 	bl	8000240 <main>

080007ce <LoopForever>:

LoopForever:
    b LoopForever
 80007ce:	e7fe      	b.n	80007ce <LoopForever>
  ldr   r0, =_estack
 80007d0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80007d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007dc:	08003168 	.word	0x08003168
  ldr r2, =_sbss
 80007e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007e4:	200000fc 	.word	0x200000fc

080007e8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007e8:	e7fe      	b.n	80007e8 <ADC1_COMP_IRQHandler>
	...

080007ec <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007f0:	4b07      	ldr	r3, [pc, #28]	; (8000810 <HAL_Init+0x24>)
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <HAL_Init+0x24>)
 80007f6:	2110      	movs	r1, #16
 80007f8:	430a      	orrs	r2, r1
 80007fa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80007fc:	2003      	movs	r0, #3
 80007fe:	f000 f809 	bl	8000814 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000802:	f7ff feaf 	bl	8000564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000806:	2300      	movs	r3, #0
}
 8000808:	0018      	movs	r0, r3
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	40022000 	.word	0x40022000

08000814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000814:	b590      	push	{r4, r7, lr}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800081c:	4b14      	ldr	r3, [pc, #80]	; (8000870 <HAL_InitTick+0x5c>)
 800081e:	681c      	ldr	r4, [r3, #0]
 8000820:	4b14      	ldr	r3, [pc, #80]	; (8000874 <HAL_InitTick+0x60>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	0019      	movs	r1, r3
 8000826:	23fa      	movs	r3, #250	; 0xfa
 8000828:	0098      	lsls	r0, r3, #2
 800082a:	f7ff fc6d 	bl	8000108 <__udivsi3>
 800082e:	0003      	movs	r3, r0
 8000830:	0019      	movs	r1, r3
 8000832:	0020      	movs	r0, r4
 8000834:	f7ff fc68 	bl	8000108 <__udivsi3>
 8000838:	0003      	movs	r3, r0
 800083a:	0018      	movs	r0, r3
 800083c:	f000 fdbf 	bl	80013be <HAL_SYSTICK_Config>
 8000840:	1e03      	subs	r3, r0, #0
 8000842:	d001      	beq.n	8000848 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000844:	2301      	movs	r3, #1
 8000846:	e00f      	b.n	8000868 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b03      	cmp	r3, #3
 800084c:	d80b      	bhi.n	8000866 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800084e:	6879      	ldr	r1, [r7, #4]
 8000850:	2301      	movs	r3, #1
 8000852:	425b      	negs	r3, r3
 8000854:	2200      	movs	r2, #0
 8000856:	0018      	movs	r0, r3
 8000858:	f000 fd8c 	bl	8001374 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <HAL_InitTick+0x64>)
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000862:	2300      	movs	r3, #0
 8000864:	e000      	b.n	8000868 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000866:	2301      	movs	r3, #1
}
 8000868:	0018      	movs	r0, r3
 800086a:	46bd      	mov	sp, r7
 800086c:	b003      	add	sp, #12
 800086e:	bd90      	pop	{r4, r7, pc}
 8000870:	20000000 	.word	0x20000000
 8000874:	20000008 	.word	0x20000008
 8000878:	20000004 	.word	0x20000004

0800087c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000880:	4b05      	ldr	r3, [pc, #20]	; (8000898 <HAL_IncTick+0x1c>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	001a      	movs	r2, r3
 8000886:	4b05      	ldr	r3, [pc, #20]	; (800089c <HAL_IncTick+0x20>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	18d2      	adds	r2, r2, r3
 800088c:	4b03      	ldr	r3, [pc, #12]	; (800089c <HAL_IncTick+0x20>)
 800088e:	601a      	str	r2, [r3, #0]
}
 8000890:	46c0      	nop			; (mov r8, r8)
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	20000008 	.word	0x20000008
 800089c:	200000f8 	.word	0x200000f8

080008a0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  return uwTick;
 80008a4:	4b02      	ldr	r3, [pc, #8]	; (80008b0 <HAL_GetTick+0x10>)
 80008a6:	681b      	ldr	r3, [r3, #0]
}
 80008a8:	0018      	movs	r0, r3
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	200000f8 	.word	0x200000f8

080008b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008bc:	f7ff fff0 	bl	80008a0 <HAL_GetTick>
 80008c0:	0003      	movs	r3, r0
 80008c2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	3301      	adds	r3, #1
 80008cc:	d005      	beq.n	80008da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008ce:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <HAL_Delay+0x44>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	001a      	movs	r2, r3
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	189b      	adds	r3, r3, r2
 80008d8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	f7ff ffe0 	bl	80008a0 <HAL_GetTick>
 80008e0:	0002      	movs	r2, r0
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	1ad3      	subs	r3, r2, r3
 80008e6:	68fa      	ldr	r2, [r7, #12]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d8f7      	bhi.n	80008dc <HAL_Delay+0x28>
  {
  }
}
 80008ec:	46c0      	nop			; (mov r8, r8)
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	46bd      	mov	sp, r7
 80008f2:	b004      	add	sp, #16
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	20000008 	.word	0x20000008

080008fc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000904:	230f      	movs	r3, #15
 8000906:	18fb      	adds	r3, r7, r3
 8000908:	2200      	movs	r2, #0
 800090a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 800090c:	2300      	movs	r3, #0
 800090e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d101      	bne.n	800091a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000916:	2301      	movs	r3, #1
 8000918:	e125      	b.n	8000b66 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800091e:	2b00      	cmp	r3, #0
 8000920:	d10a      	bne.n	8000938 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2200      	movs	r2, #0
 8000926:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2234      	movs	r2, #52	; 0x34
 800092c:	2100      	movs	r1, #0
 800092e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	0018      	movs	r0, r3
 8000934:	f7ff fe3a 	bl	80005ac <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800093c:	2210      	movs	r2, #16
 800093e:	4013      	ands	r3, r2
 8000940:	d000      	beq.n	8000944 <HAL_ADC_Init+0x48>
 8000942:	e103      	b.n	8000b4c <HAL_ADC_Init+0x250>
 8000944:	230f      	movs	r3, #15
 8000946:	18fb      	adds	r3, r7, r3
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d000      	beq.n	8000950 <HAL_ADC_Init+0x54>
 800094e:	e0fd      	b.n	8000b4c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	689b      	ldr	r3, [r3, #8]
 8000956:	2204      	movs	r2, #4
 8000958:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800095a:	d000      	beq.n	800095e <HAL_ADC_Init+0x62>
 800095c:	e0f6      	b.n	8000b4c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000962:	4a83      	ldr	r2, [pc, #524]	; (8000b70 <HAL_ADC_Init+0x274>)
 8000964:	4013      	ands	r3, r2
 8000966:	2202      	movs	r2, #2
 8000968:	431a      	orrs	r2, r3
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	689b      	ldr	r3, [r3, #8]
 8000974:	2203      	movs	r2, #3
 8000976:	4013      	ands	r3, r2
 8000978:	2b01      	cmp	r3, #1
 800097a:	d112      	bne.n	80009a2 <HAL_ADC_Init+0xa6>
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	2201      	movs	r2, #1
 8000984:	4013      	ands	r3, r2
 8000986:	2b01      	cmp	r3, #1
 8000988:	d009      	beq.n	800099e <HAL_ADC_Init+0xa2>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	68da      	ldr	r2, [r3, #12]
 8000990:	2380      	movs	r3, #128	; 0x80
 8000992:	021b      	lsls	r3, r3, #8
 8000994:	401a      	ands	r2, r3
 8000996:	2380      	movs	r3, #128	; 0x80
 8000998:	021b      	lsls	r3, r3, #8
 800099a:	429a      	cmp	r2, r3
 800099c:	d101      	bne.n	80009a2 <HAL_ADC_Init+0xa6>
 800099e:	2301      	movs	r3, #1
 80009a0:	e000      	b.n	80009a4 <HAL_ADC_Init+0xa8>
 80009a2:	2300      	movs	r3, #0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d116      	bne.n	80009d6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	68db      	ldr	r3, [r3, #12]
 80009ae:	2218      	movs	r2, #24
 80009b0:	4393      	bics	r3, r2
 80009b2:	0019      	movs	r1, r3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	689a      	ldr	r2, [r3, #8]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	430a      	orrs	r2, r1
 80009be:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	691b      	ldr	r3, [r3, #16]
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	0899      	lsrs	r1, r3, #2
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	685a      	ldr	r2, [r3, #4]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	430a      	orrs	r2, r1
 80009d4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	68da      	ldr	r2, [r3, #12]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4964      	ldr	r1, [pc, #400]	; (8000b74 <HAL_ADC_Init+0x278>)
 80009e2:	400a      	ands	r2, r1
 80009e4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	7e1b      	ldrb	r3, [r3, #24]
 80009ea:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	7e5b      	ldrb	r3, [r3, #25]
 80009f0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80009f2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	7e9b      	ldrb	r3, [r3, #26]
 80009f8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80009fa:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d002      	beq.n	8000a0a <HAL_ADC_Init+0x10e>
 8000a04:	2380      	movs	r3, #128	; 0x80
 8000a06:	015b      	lsls	r3, r3, #5
 8000a08:	e000      	b.n	8000a0c <HAL_ADC_Init+0x110>
 8000a0a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000a0c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000a12:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	691b      	ldr	r3, [r3, #16]
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	d101      	bne.n	8000a20 <HAL_ADC_Init+0x124>
 8000a1c:	2304      	movs	r3, #4
 8000a1e:	e000      	b.n	8000a22 <HAL_ADC_Init+0x126>
 8000a20:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000a22:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2124      	movs	r1, #36	; 0x24
 8000a28:	5c5b      	ldrb	r3, [r3, r1]
 8000a2a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000a2c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000a2e:	68ba      	ldr	r2, [r7, #8]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	7edb      	ldrb	r3, [r3, #27]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d115      	bne.n	8000a68 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	7e9b      	ldrb	r3, [r3, #26]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d105      	bne.n	8000a50 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	2280      	movs	r2, #128	; 0x80
 8000a48:	0252      	lsls	r2, r2, #9
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	e00b      	b.n	8000a68 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a54:	2220      	movs	r2, #32
 8000a56:	431a      	orrs	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a60:	2201      	movs	r2, #1
 8000a62:	431a      	orrs	r2, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	69da      	ldr	r2, [r3, #28]
 8000a6c:	23c2      	movs	r3, #194	; 0xc2
 8000a6e:	33ff      	adds	r3, #255	; 0xff
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d007      	beq.n	8000a84 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	68ba      	ldr	r2, [r7, #8]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	68d9      	ldr	r1, [r3, #12]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	68ba      	ldr	r2, [r7, #8]
 8000a90:	430a      	orrs	r2, r1
 8000a92:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a98:	2380      	movs	r3, #128	; 0x80
 8000a9a:	055b      	lsls	r3, r3, #21
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d01b      	beq.n	8000ad8 <HAL_ADC_Init+0x1dc>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d017      	beq.n	8000ad8 <HAL_ADC_Init+0x1dc>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aac:	2b02      	cmp	r3, #2
 8000aae:	d013      	beq.n	8000ad8 <HAL_ADC_Init+0x1dc>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ab4:	2b03      	cmp	r3, #3
 8000ab6:	d00f      	beq.n	8000ad8 <HAL_ADC_Init+0x1dc>
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000abc:	2b04      	cmp	r3, #4
 8000abe:	d00b      	beq.n	8000ad8 <HAL_ADC_Init+0x1dc>
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac4:	2b05      	cmp	r3, #5
 8000ac6:	d007      	beq.n	8000ad8 <HAL_ADC_Init+0x1dc>
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000acc:	2b06      	cmp	r3, #6
 8000ace:	d003      	beq.n	8000ad8 <HAL_ADC_Init+0x1dc>
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ad4:	2b07      	cmp	r3, #7
 8000ad6:	d112      	bne.n	8000afe <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	695a      	ldr	r2, [r3, #20]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2107      	movs	r1, #7
 8000ae4:	438a      	bics	r2, r1
 8000ae6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	6959      	ldr	r1, [r3, #20]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af2:	2207      	movs	r2, #7
 8000af4:	401a      	ands	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	430a      	orrs	r2, r1
 8000afc:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	4a1c      	ldr	r2, [pc, #112]	; (8000b78 <HAL_ADC_Init+0x27c>)
 8000b06:	4013      	ands	r3, r2
 8000b08:	68ba      	ldr	r2, [r7, #8]
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	d10b      	bne.n	8000b26 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2200      	movs	r2, #0
 8000b12:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b18:	2203      	movs	r2, #3
 8000b1a:	4393      	bics	r3, r2
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	431a      	orrs	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000b24:	e01c      	b.n	8000b60 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b2a:	2212      	movs	r2, #18
 8000b2c:	4393      	bics	r3, r2
 8000b2e:	2210      	movs	r2, #16
 8000b30:	431a      	orrs	r2, r3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	431a      	orrs	r2, r3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000b42:	230f      	movs	r3, #15
 8000b44:	18fb      	adds	r3, r7, r3
 8000b46:	2201      	movs	r2, #1
 8000b48:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000b4a:	e009      	b.n	8000b60 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b50:	2210      	movs	r2, #16
 8000b52:	431a      	orrs	r2, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000b58:	230f      	movs	r3, #15
 8000b5a:	18fb      	adds	r3, r7, r3
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b60:	230f      	movs	r3, #15
 8000b62:	18fb      	adds	r3, r7, r3
 8000b64:	781b      	ldrb	r3, [r3, #0]
}
 8000b66:	0018      	movs	r0, r3
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	b004      	add	sp, #16
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	fffffefd 	.word	0xfffffefd
 8000b74:	fffe0219 	.word	0xfffe0219
 8000b78:	833fffe7 	.word	0x833fffe7

08000b7c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000b7c:	b590      	push	{r4, r7, lr}
 8000b7e:	b087      	sub	sp, #28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b88:	2317      	movs	r3, #23
 8000b8a:	18fb      	adds	r3, r7, r3
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	2204      	movs	r2, #4
 8000b98:	4013      	ands	r3, r2
 8000b9a:	d15e      	bne.n	8000c5a <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	2234      	movs	r2, #52	; 0x34
 8000ba0:	5c9b      	ldrb	r3, [r3, r2]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d101      	bne.n	8000baa <HAL_ADC_Start_DMA+0x2e>
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	e05e      	b.n	8000c68 <HAL_ADC_Start_DMA+0xec>
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	2234      	movs	r2, #52	; 0x34
 8000bae:	2101      	movs	r1, #1
 8000bb0:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	7e5b      	ldrb	r3, [r3, #25]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d007      	beq.n	8000bca <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000bba:	2317      	movs	r3, #23
 8000bbc:	18fc      	adds	r4, r7, r3
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f000 f97b 	bl	8000ebc <ADC_Enable>
 8000bc6:	0003      	movs	r3, r0
 8000bc8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000bca:	2317      	movs	r3, #23
 8000bcc:	18fb      	adds	r3, r7, r3
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d146      	bne.n	8000c62 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bd8:	4a25      	ldr	r2, [pc, #148]	; (8000c70 <HAL_ADC_Start_DMA+0xf4>)
 8000bda:	4013      	ands	r3, r2
 8000bdc:	2280      	movs	r2, #128	; 0x80
 8000bde:	0052      	lsls	r2, r2, #1
 8000be0:	431a      	orrs	r2, r3
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	2200      	movs	r2, #0
 8000bea:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	2234      	movs	r2, #52	; 0x34
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf8:	4a1e      	ldr	r2, [pc, #120]	; (8000c74 <HAL_ADC_Start_DMA+0xf8>)
 8000bfa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c00:	4a1d      	ldr	r2, [pc, #116]	; (8000c78 <HAL_ADC_Start_DMA+0xfc>)
 8000c02:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c08:	4a1c      	ldr	r2, [pc, #112]	; (8000c7c <HAL_ADC_Start_DMA+0x100>)
 8000c0a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	221c      	movs	r2, #28
 8000c12:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	685a      	ldr	r2, [r3, #4]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2110      	movs	r1, #16
 8000c20:	430a      	orrs	r2, r1
 8000c22:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	68da      	ldr	r2, [r3, #12]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2101      	movs	r1, #1
 8000c30:	430a      	orrs	r2, r1
 8000c32:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	3340      	adds	r3, #64	; 0x40
 8000c3e:	0019      	movs	r1, r3
 8000c40:	68ba      	ldr	r2, [r7, #8]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	f000 fc10 	bl	8001468 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	689a      	ldr	r2, [r3, #8]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2104      	movs	r1, #4
 8000c54:	430a      	orrs	r2, r1
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	e003      	b.n	8000c62 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000c5a:	2317      	movs	r3, #23
 8000c5c:	18fb      	adds	r3, r7, r3
 8000c5e:	2202      	movs	r2, #2
 8000c60:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000c62:	2317      	movs	r3, #23
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	781b      	ldrb	r3, [r3, #0]
}
 8000c68:	0018      	movs	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	b007      	add	sp, #28
 8000c6e:	bd90      	pop	{r4, r7, pc}
 8000c70:	fffff0fe 	.word	0xfffff0fe
 8000c74:	08000fc5 	.word	0x08000fc5
 8000c78:	08001079 	.word	0x08001079
 8000c7c:	08001097 	.word	0x08001097

08000c80 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000c88:	46c0      	nop			; (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	b002      	add	sp, #8
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000c98:	46c0      	nop			; (mov r8, r8)
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	b002      	add	sp, #8
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000caa:	230f      	movs	r3, #15
 8000cac:	18fb      	adds	r3, r7, r3
 8000cae:	2200      	movs	r2, #0
 8000cb0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cba:	2380      	movs	r3, #128	; 0x80
 8000cbc:	055b      	lsls	r3, r3, #21
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d011      	beq.n	8000ce6 <HAL_ADC_ConfigChannel+0x46>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d00d      	beq.n	8000ce6 <HAL_ADC_ConfigChannel+0x46>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d009      	beq.n	8000ce6 <HAL_ADC_ConfigChannel+0x46>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd6:	2b03      	cmp	r3, #3
 8000cd8:	d005      	beq.n	8000ce6 <HAL_ADC_ConfigChannel+0x46>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cde:	2b04      	cmp	r3, #4
 8000ce0:	d001      	beq.n	8000ce6 <HAL_ADC_ConfigChannel+0x46>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2234      	movs	r2, #52	; 0x34
 8000cea:	5c9b      	ldrb	r3, [r3, r2]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d101      	bne.n	8000cf4 <HAL_ADC_ConfigChannel+0x54>
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	e0d0      	b.n	8000e96 <HAL_ADC_ConfigChannel+0x1f6>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2234      	movs	r2, #52	; 0x34
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	2204      	movs	r2, #4
 8000d04:	4013      	ands	r3, r2
 8000d06:	d000      	beq.n	8000d0a <HAL_ADC_ConfigChannel+0x6a>
 8000d08:	e0b4      	b.n	8000e74 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	4a64      	ldr	r2, [pc, #400]	; (8000ea0 <HAL_ADC_ConfigChannel+0x200>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d100      	bne.n	8000d16 <HAL_ADC_ConfigChannel+0x76>
 8000d14:	e082      	b.n	8000e1c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2201      	movs	r2, #1
 8000d22:	409a      	lsls	r2, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d30:	2380      	movs	r3, #128	; 0x80
 8000d32:	055b      	lsls	r3, r3, #21
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d037      	beq.n	8000da8 <HAL_ADC_ConfigChannel+0x108>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d033      	beq.n	8000da8 <HAL_ADC_ConfigChannel+0x108>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d02f      	beq.n	8000da8 <HAL_ADC_ConfigChannel+0x108>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d4c:	2b03      	cmp	r3, #3
 8000d4e:	d02b      	beq.n	8000da8 <HAL_ADC_ConfigChannel+0x108>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d54:	2b04      	cmp	r3, #4
 8000d56:	d027      	beq.n	8000da8 <HAL_ADC_ConfigChannel+0x108>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d5c:	2b05      	cmp	r3, #5
 8000d5e:	d023      	beq.n	8000da8 <HAL_ADC_ConfigChannel+0x108>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d64:	2b06      	cmp	r3, #6
 8000d66:	d01f      	beq.n	8000da8 <HAL_ADC_ConfigChannel+0x108>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d6c:	2b07      	cmp	r3, #7
 8000d6e:	d01b      	beq.n	8000da8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	689a      	ldr	r2, [r3, #8]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	2107      	movs	r1, #7
 8000d7c:	400b      	ands	r3, r1
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d012      	beq.n	8000da8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	695a      	ldr	r2, [r3, #20]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2107      	movs	r1, #7
 8000d8e:	438a      	bics	r2, r1
 8000d90:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	6959      	ldr	r1, [r3, #20]
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	2207      	movs	r2, #7
 8000d9e:	401a      	ands	r2, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	430a      	orrs	r2, r1
 8000da6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b10      	cmp	r3, #16
 8000dae:	d007      	beq.n	8000dc0 <HAL_ADC_ConfigChannel+0x120>
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b11      	cmp	r3, #17
 8000db6:	d003      	beq.n	8000dc0 <HAL_ADC_ConfigChannel+0x120>
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b12      	cmp	r3, #18
 8000dbe:	d163      	bne.n	8000e88 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000dc0:	4b38      	ldr	r3, [pc, #224]	; (8000ea4 <HAL_ADC_ConfigChannel+0x204>)
 8000dc2:	6819      	ldr	r1, [r3, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b10      	cmp	r3, #16
 8000dca:	d009      	beq.n	8000de0 <HAL_ADC_ConfigChannel+0x140>
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b11      	cmp	r3, #17
 8000dd2:	d102      	bne.n	8000dda <HAL_ADC_ConfigChannel+0x13a>
 8000dd4:	2380      	movs	r3, #128	; 0x80
 8000dd6:	03db      	lsls	r3, r3, #15
 8000dd8:	e004      	b.n	8000de4 <HAL_ADC_ConfigChannel+0x144>
 8000dda:	2380      	movs	r3, #128	; 0x80
 8000ddc:	045b      	lsls	r3, r3, #17
 8000dde:	e001      	b.n	8000de4 <HAL_ADC_ConfigChannel+0x144>
 8000de0:	2380      	movs	r3, #128	; 0x80
 8000de2:	041b      	lsls	r3, r3, #16
 8000de4:	4a2f      	ldr	r2, [pc, #188]	; (8000ea4 <HAL_ADC_ConfigChannel+0x204>)
 8000de6:	430b      	orrs	r3, r1
 8000de8:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b10      	cmp	r3, #16
 8000df0:	d14a      	bne.n	8000e88 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000df2:	4b2d      	ldr	r3, [pc, #180]	; (8000ea8 <HAL_ADC_ConfigChannel+0x208>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	492d      	ldr	r1, [pc, #180]	; (8000eac <HAL_ADC_ConfigChannel+0x20c>)
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f7ff f985 	bl	8000108 <__udivsi3>
 8000dfe:	0003      	movs	r3, r0
 8000e00:	001a      	movs	r2, r3
 8000e02:	0013      	movs	r3, r2
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	189b      	adds	r3, r3, r2
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e0c:	e002      	b.n	8000e14 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	3b01      	subs	r3, #1
 8000e12:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d1f9      	bne.n	8000e0e <HAL_ADC_ConfigChannel+0x16e>
 8000e1a:	e035      	b.n	8000e88 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2101      	movs	r1, #1
 8000e28:	4099      	lsls	r1, r3
 8000e2a:	000b      	movs	r3, r1
 8000e2c:	43d9      	mvns	r1, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	400a      	ands	r2, r1
 8000e34:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2b10      	cmp	r3, #16
 8000e3c:	d007      	beq.n	8000e4e <HAL_ADC_ConfigChannel+0x1ae>
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2b11      	cmp	r3, #17
 8000e44:	d003      	beq.n	8000e4e <HAL_ADC_ConfigChannel+0x1ae>
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2b12      	cmp	r3, #18
 8000e4c:	d11c      	bne.n	8000e88 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000e4e:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <HAL_ADC_ConfigChannel+0x204>)
 8000e50:	6819      	ldr	r1, [r3, #0]
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2b10      	cmp	r3, #16
 8000e58:	d007      	beq.n	8000e6a <HAL_ADC_ConfigChannel+0x1ca>
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2b11      	cmp	r3, #17
 8000e60:	d101      	bne.n	8000e66 <HAL_ADC_ConfigChannel+0x1c6>
 8000e62:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <HAL_ADC_ConfigChannel+0x210>)
 8000e64:	e002      	b.n	8000e6c <HAL_ADC_ConfigChannel+0x1cc>
 8000e66:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <HAL_ADC_ConfigChannel+0x214>)
 8000e68:	e000      	b.n	8000e6c <HAL_ADC_ConfigChannel+0x1cc>
 8000e6a:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <HAL_ADC_ConfigChannel+0x218>)
 8000e6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ea4 <HAL_ADC_ConfigChannel+0x204>)
 8000e6e:	400b      	ands	r3, r1
 8000e70:	6013      	str	r3, [r2, #0]
 8000e72:	e009      	b.n	8000e88 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e78:	2220      	movs	r2, #32
 8000e7a:	431a      	orrs	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8000e80:	230f      	movs	r3, #15
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	2201      	movs	r2, #1
 8000e86:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2234      	movs	r2, #52	; 0x34
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000e90:	230f      	movs	r3, #15
 8000e92:	18fb      	adds	r3, r7, r3
 8000e94:	781b      	ldrb	r3, [r3, #0]
}
 8000e96:	0018      	movs	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	b004      	add	sp, #16
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	00001001 	.word	0x00001001
 8000ea4:	40012708 	.word	0x40012708
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	000f4240 	.word	0x000f4240
 8000eb0:	ffbfffff 	.word	0xffbfffff
 8000eb4:	feffffff 	.word	0xfeffffff
 8000eb8:	ff7fffff 	.word	0xff7fffff

08000ebc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d112      	bne.n	8000f00 <ADC_Enable+0x44>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d009      	beq.n	8000efc <ADC_Enable+0x40>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	68da      	ldr	r2, [r3, #12]
 8000eee:	2380      	movs	r3, #128	; 0x80
 8000ef0:	021b      	lsls	r3, r3, #8
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	2380      	movs	r3, #128	; 0x80
 8000ef6:	021b      	lsls	r3, r3, #8
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d101      	bne.n	8000f00 <ADC_Enable+0x44>
 8000efc:	2301      	movs	r3, #1
 8000efe:	e000      	b.n	8000f02 <ADC_Enable+0x46>
 8000f00:	2300      	movs	r3, #0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d152      	bne.n	8000fac <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	4a2a      	ldr	r2, [pc, #168]	; (8000fb8 <ADC_Enable+0xfc>)
 8000f0e:	4013      	ands	r3, r2
 8000f10:	d00d      	beq.n	8000f2e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f16:	2210      	movs	r2, #16
 8000f18:	431a      	orrs	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f22:	2201      	movs	r2, #1
 8000f24:	431a      	orrs	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e03f      	b.n	8000fae <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	689a      	ldr	r2, [r3, #8]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2101      	movs	r1, #1
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f3e:	4b1f      	ldr	r3, [pc, #124]	; (8000fbc <ADC_Enable+0x100>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	491f      	ldr	r1, [pc, #124]	; (8000fc0 <ADC_Enable+0x104>)
 8000f44:	0018      	movs	r0, r3
 8000f46:	f7ff f8df 	bl	8000108 <__udivsi3>
 8000f4a:	0003      	movs	r3, r0
 8000f4c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f4e:	e002      	b.n	8000f56 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d1f9      	bne.n	8000f50 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f5c:	f7ff fca0 	bl	80008a0 <HAL_GetTick>
 8000f60:	0003      	movs	r3, r0
 8000f62:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000f64:	e01b      	b.n	8000f9e <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000f66:	f7ff fc9b 	bl	80008a0 <HAL_GetTick>
 8000f6a:	0002      	movs	r2, r0
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d914      	bls.n	8000f9e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d00d      	beq.n	8000f9e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f86:	2210      	movs	r2, #16
 8000f88:	431a      	orrs	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f92:	2201      	movs	r2, #1
 8000f94:	431a      	orrs	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e007      	b.n	8000fae <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d1dc      	bne.n	8000f66 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	0018      	movs	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	b004      	add	sp, #16
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	80000017 	.word	0x80000017
 8000fbc:	20000000 	.word	0x20000000
 8000fc0:	000f4240 	.word	0x000f4240

08000fc4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fd6:	2250      	movs	r2, #80	; 0x50
 8000fd8:	4013      	ands	r3, r2
 8000fda:	d140      	bne.n	800105e <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fe0:	2280      	movs	r2, #128	; 0x80
 8000fe2:	0092      	lsls	r2, r2, #2
 8000fe4:	431a      	orrs	r2, r3
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	68da      	ldr	r2, [r3, #12]
 8000ff0:	23c0      	movs	r3, #192	; 0xc0
 8000ff2:	011b      	lsls	r3, r3, #4
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	d12d      	bne.n	8001054 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d129      	bne.n	8001054 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2208      	movs	r2, #8
 8001008:	4013      	ands	r3, r2
 800100a:	2b08      	cmp	r3, #8
 800100c:	d122      	bne.n	8001054 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	2204      	movs	r2, #4
 8001016:	4013      	ands	r3, r2
 8001018:	d110      	bne.n	800103c <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	685a      	ldr	r2, [r3, #4]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	210c      	movs	r1, #12
 8001026:	438a      	bics	r2, r1
 8001028:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800102e:	4a11      	ldr	r2, [pc, #68]	; (8001074 <ADC_DMAConvCplt+0xb0>)
 8001030:	4013      	ands	r3, r2
 8001032:	2201      	movs	r2, #1
 8001034:	431a      	orrs	r2, r3
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	639a      	str	r2, [r3, #56]	; 0x38
 800103a:	e00b      	b.n	8001054 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001040:	2220      	movs	r2, #32
 8001042:	431a      	orrs	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800104c:	2201      	movs	r2, #1
 800104e:	431a      	orrs	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	0018      	movs	r0, r3
 8001058:	f7ff f8e2 	bl	8000220 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 800105c:	e005      	b.n	800106a <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	0010      	movs	r0, r2
 8001068:	4798      	blx	r3
}
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	46bd      	mov	sp, r7
 800106e:	b004      	add	sp, #16
 8001070:	bd80      	pop	{r7, pc}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	fffffefe 	.word	0xfffffefe

08001078 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001084:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	0018      	movs	r0, r3
 800108a:	f7ff fdf9 	bl	8000c80 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	46bd      	mov	sp, r7
 8001092:	b004      	add	sp, #16
 8001094:	bd80      	pop	{r7, pc}

08001096 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b084      	sub	sp, #16
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010a8:	2240      	movs	r2, #64	; 0x40
 80010aa:	431a      	orrs	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010b4:	2204      	movs	r2, #4
 80010b6:	431a      	orrs	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	0018      	movs	r0, r3
 80010c0:	f7ff fde6 	bl	8000c90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80010c4:	46c0      	nop			; (mov r8, r8)
 80010c6:	46bd      	mov	sp, r7
 80010c8:	b004      	add	sp, #16
 80010ca:	bd80      	pop	{r7, pc}

080010cc <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010d4:	2317      	movs	r3, #23
 80010d6:	18fb      	adds	r3, r7, r3
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80010dc:	2300      	movs	r3, #0
 80010de:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80010e0:	2300      	movs	r3, #0
 80010e2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2234      	movs	r2, #52	; 0x34
 80010e8:	5c9b      	ldrb	r3, [r3, r2]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d101      	bne.n	80010f2 <HAL_ADCEx_Calibration_Start+0x26>
 80010ee:	2302      	movs	r3, #2
 80010f0:	e08d      	b.n	800120e <HAL_ADCEx_Calibration_Start+0x142>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2234      	movs	r2, #52	; 0x34
 80010f6:	2101      	movs	r1, #1
 80010f8:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	2203      	movs	r2, #3
 8001102:	4013      	ands	r3, r2
 8001104:	2b01      	cmp	r3, #1
 8001106:	d112      	bne.n	800112e <HAL_ADCEx_Calibration_Start+0x62>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2201      	movs	r2, #1
 8001110:	4013      	ands	r3, r2
 8001112:	2b01      	cmp	r3, #1
 8001114:	d009      	beq.n	800112a <HAL_ADCEx_Calibration_Start+0x5e>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	68da      	ldr	r2, [r3, #12]
 800111c:	2380      	movs	r3, #128	; 0x80
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	401a      	ands	r2, r3
 8001122:	2380      	movs	r3, #128	; 0x80
 8001124:	021b      	lsls	r3, r3, #8
 8001126:	429a      	cmp	r2, r3
 8001128:	d101      	bne.n	800112e <HAL_ADCEx_Calibration_Start+0x62>
 800112a:	2301      	movs	r3, #1
 800112c:	e000      	b.n	8001130 <HAL_ADCEx_Calibration_Start+0x64>
 800112e:	2300      	movs	r3, #0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d15b      	bne.n	80011ec <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001138:	4a37      	ldr	r2, [pc, #220]	; (8001218 <HAL_ADCEx_Calibration_Start+0x14c>)
 800113a:	4013      	ands	r3, r2
 800113c:	2202      	movs	r2, #2
 800113e:	431a      	orrs	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	2203      	movs	r2, #3
 800114c:	4013      	ands	r3, r2
 800114e:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	68da      	ldr	r2, [r3, #12]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2103      	movs	r1, #3
 800115c:	438a      	bics	r2, r1
 800115e:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	689a      	ldr	r2, [r3, #8]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2180      	movs	r1, #128	; 0x80
 800116c:	0609      	lsls	r1, r1, #24
 800116e:	430a      	orrs	r2, r1
 8001170:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001172:	f7ff fb95 	bl	80008a0 <HAL_GetTick>
 8001176:	0003      	movs	r3, r0
 8001178:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800117a:	e01d      	b.n	80011b8 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800117c:	f7ff fb90 	bl	80008a0 <HAL_GetTick>
 8001180:	0002      	movs	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d916      	bls.n	80011b8 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	0fdb      	lsrs	r3, r3, #31
 8001192:	07da      	lsls	r2, r3, #31
 8001194:	2380      	movs	r3, #128	; 0x80
 8001196:	061b      	lsls	r3, r3, #24
 8001198:	429a      	cmp	r2, r3
 800119a:	d10d      	bne.n	80011b8 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011a0:	2212      	movs	r2, #18
 80011a2:	4393      	bics	r3, r2
 80011a4:	2210      	movs	r2, #16
 80011a6:	431a      	orrs	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2234      	movs	r2, #52	; 0x34
 80011b0:	2100      	movs	r1, #0
 80011b2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e02a      	b.n	800120e <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	0fdb      	lsrs	r3, r3, #31
 80011c0:	07da      	lsls	r2, r3, #31
 80011c2:	2380      	movs	r3, #128	; 0x80
 80011c4:	061b      	lsls	r3, r3, #24
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d0d8      	beq.n	800117c <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	68d9      	ldr	r1, [r3, #12]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	430a      	orrs	r2, r1
 80011d8:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011de:	2203      	movs	r2, #3
 80011e0:	4393      	bics	r3, r2
 80011e2:	2201      	movs	r2, #1
 80011e4:	431a      	orrs	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	639a      	str	r2, [r3, #56]	; 0x38
 80011ea:	e009      	b.n	8001200 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011f0:	2220      	movs	r2, #32
 80011f2:	431a      	orrs	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80011f8:	2317      	movs	r3, #23
 80011fa:	18fb      	adds	r3, r7, r3
 80011fc:	2201      	movs	r2, #1
 80011fe:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2234      	movs	r2, #52	; 0x34
 8001204:	2100      	movs	r1, #0
 8001206:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001208:	2317      	movs	r3, #23
 800120a:	18fb      	adds	r3, r7, r3
 800120c:	781b      	ldrb	r3, [r3, #0]
}
 800120e:	0018      	movs	r0, r3
 8001210:	46bd      	mov	sp, r7
 8001212:	b006      	add	sp, #24
 8001214:	bd80      	pop	{r7, pc}
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	fffffefd 	.word	0xfffffefd

0800121c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	0002      	movs	r2, r0
 8001224:	1dfb      	adds	r3, r7, #7
 8001226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001228:	1dfb      	adds	r3, r7, #7
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b7f      	cmp	r3, #127	; 0x7f
 800122e:	d809      	bhi.n	8001244 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001230:	1dfb      	adds	r3, r7, #7
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	001a      	movs	r2, r3
 8001236:	231f      	movs	r3, #31
 8001238:	401a      	ands	r2, r3
 800123a:	4b04      	ldr	r3, [pc, #16]	; (800124c <__NVIC_EnableIRQ+0x30>)
 800123c:	2101      	movs	r1, #1
 800123e:	4091      	lsls	r1, r2
 8001240:	000a      	movs	r2, r1
 8001242:	601a      	str	r2, [r3, #0]
  }
}
 8001244:	46c0      	nop			; (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	b002      	add	sp, #8
 800124a:	bd80      	pop	{r7, pc}
 800124c:	e000e100 	.word	0xe000e100

08001250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001250:	b590      	push	{r4, r7, lr}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	0002      	movs	r2, r0
 8001258:	6039      	str	r1, [r7, #0]
 800125a:	1dfb      	adds	r3, r7, #7
 800125c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800125e:	1dfb      	adds	r3, r7, #7
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b7f      	cmp	r3, #127	; 0x7f
 8001264:	d828      	bhi.n	80012b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001266:	4a2f      	ldr	r2, [pc, #188]	; (8001324 <__NVIC_SetPriority+0xd4>)
 8001268:	1dfb      	adds	r3, r7, #7
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	b25b      	sxtb	r3, r3
 800126e:	089b      	lsrs	r3, r3, #2
 8001270:	33c0      	adds	r3, #192	; 0xc0
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	589b      	ldr	r3, [r3, r2]
 8001276:	1dfa      	adds	r2, r7, #7
 8001278:	7812      	ldrb	r2, [r2, #0]
 800127a:	0011      	movs	r1, r2
 800127c:	2203      	movs	r2, #3
 800127e:	400a      	ands	r2, r1
 8001280:	00d2      	lsls	r2, r2, #3
 8001282:	21ff      	movs	r1, #255	; 0xff
 8001284:	4091      	lsls	r1, r2
 8001286:	000a      	movs	r2, r1
 8001288:	43d2      	mvns	r2, r2
 800128a:	401a      	ands	r2, r3
 800128c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	019b      	lsls	r3, r3, #6
 8001292:	22ff      	movs	r2, #255	; 0xff
 8001294:	401a      	ands	r2, r3
 8001296:	1dfb      	adds	r3, r7, #7
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	0018      	movs	r0, r3
 800129c:	2303      	movs	r3, #3
 800129e:	4003      	ands	r3, r0
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012a4:	481f      	ldr	r0, [pc, #124]	; (8001324 <__NVIC_SetPriority+0xd4>)
 80012a6:	1dfb      	adds	r3, r7, #7
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	b25b      	sxtb	r3, r3
 80012ac:	089b      	lsrs	r3, r3, #2
 80012ae:	430a      	orrs	r2, r1
 80012b0:	33c0      	adds	r3, #192	; 0xc0
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80012b6:	e031      	b.n	800131c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012b8:	4a1b      	ldr	r2, [pc, #108]	; (8001328 <__NVIC_SetPriority+0xd8>)
 80012ba:	1dfb      	adds	r3, r7, #7
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	0019      	movs	r1, r3
 80012c0:	230f      	movs	r3, #15
 80012c2:	400b      	ands	r3, r1
 80012c4:	3b08      	subs	r3, #8
 80012c6:	089b      	lsrs	r3, r3, #2
 80012c8:	3306      	adds	r3, #6
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	18d3      	adds	r3, r2, r3
 80012ce:	3304      	adds	r3, #4
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	1dfa      	adds	r2, r7, #7
 80012d4:	7812      	ldrb	r2, [r2, #0]
 80012d6:	0011      	movs	r1, r2
 80012d8:	2203      	movs	r2, #3
 80012da:	400a      	ands	r2, r1
 80012dc:	00d2      	lsls	r2, r2, #3
 80012de:	21ff      	movs	r1, #255	; 0xff
 80012e0:	4091      	lsls	r1, r2
 80012e2:	000a      	movs	r2, r1
 80012e4:	43d2      	mvns	r2, r2
 80012e6:	401a      	ands	r2, r3
 80012e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	019b      	lsls	r3, r3, #6
 80012ee:	22ff      	movs	r2, #255	; 0xff
 80012f0:	401a      	ands	r2, r3
 80012f2:	1dfb      	adds	r3, r7, #7
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	0018      	movs	r0, r3
 80012f8:	2303      	movs	r3, #3
 80012fa:	4003      	ands	r3, r0
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001300:	4809      	ldr	r0, [pc, #36]	; (8001328 <__NVIC_SetPriority+0xd8>)
 8001302:	1dfb      	adds	r3, r7, #7
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	001c      	movs	r4, r3
 8001308:	230f      	movs	r3, #15
 800130a:	4023      	ands	r3, r4
 800130c:	3b08      	subs	r3, #8
 800130e:	089b      	lsrs	r3, r3, #2
 8001310:	430a      	orrs	r2, r1
 8001312:	3306      	adds	r3, #6
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	18c3      	adds	r3, r0, r3
 8001318:	3304      	adds	r3, #4
 800131a:	601a      	str	r2, [r3, #0]
}
 800131c:	46c0      	nop			; (mov r8, r8)
 800131e:	46bd      	mov	sp, r7
 8001320:	b003      	add	sp, #12
 8001322:	bd90      	pop	{r4, r7, pc}
 8001324:	e000e100 	.word	0xe000e100
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	1e5a      	subs	r2, r3, #1
 8001338:	2380      	movs	r3, #128	; 0x80
 800133a:	045b      	lsls	r3, r3, #17
 800133c:	429a      	cmp	r2, r3
 800133e:	d301      	bcc.n	8001344 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001340:	2301      	movs	r3, #1
 8001342:	e010      	b.n	8001366 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001344:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <SysTick_Config+0x44>)
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	3a01      	subs	r2, #1
 800134a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800134c:	2301      	movs	r3, #1
 800134e:	425b      	negs	r3, r3
 8001350:	2103      	movs	r1, #3
 8001352:	0018      	movs	r0, r3
 8001354:	f7ff ff7c 	bl	8001250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <SysTick_Config+0x44>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800135e:	4b04      	ldr	r3, [pc, #16]	; (8001370 <SysTick_Config+0x44>)
 8001360:	2207      	movs	r2, #7
 8001362:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001364:	2300      	movs	r3, #0
}
 8001366:	0018      	movs	r0, r3
 8001368:	46bd      	mov	sp, r7
 800136a:	b002      	add	sp, #8
 800136c:	bd80      	pop	{r7, pc}
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	e000e010 	.word	0xe000e010

08001374 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	60b9      	str	r1, [r7, #8]
 800137c:	607a      	str	r2, [r7, #4]
 800137e:	210f      	movs	r1, #15
 8001380:	187b      	adds	r3, r7, r1
 8001382:	1c02      	adds	r2, r0, #0
 8001384:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001386:	68ba      	ldr	r2, [r7, #8]
 8001388:	187b      	adds	r3, r7, r1
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	b25b      	sxtb	r3, r3
 800138e:	0011      	movs	r1, r2
 8001390:	0018      	movs	r0, r3
 8001392:	f7ff ff5d 	bl	8001250 <__NVIC_SetPriority>
}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	46bd      	mov	sp, r7
 800139a:	b004      	add	sp, #16
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	0002      	movs	r2, r0
 80013a6:	1dfb      	adds	r3, r7, #7
 80013a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013aa:	1dfb      	adds	r3, r7, #7
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	b25b      	sxtb	r3, r3
 80013b0:	0018      	movs	r0, r3
 80013b2:	f7ff ff33 	bl	800121c <__NVIC_EnableIRQ>
}
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	46bd      	mov	sp, r7
 80013ba:	b002      	add	sp, #8
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	0018      	movs	r0, r3
 80013ca:	f7ff ffaf 	bl	800132c <SysTick_Config>
 80013ce:	0003      	movs	r3, r0
}
 80013d0:	0018      	movs	r0, r3
 80013d2:	46bd      	mov	sp, r7
 80013d4:	b002      	add	sp, #8
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e036      	b.n	800145c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2221      	movs	r2, #33	; 0x21
 80013f2:	2102      	movs	r1, #2
 80013f4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	4a18      	ldr	r2, [pc, #96]	; (8001464 <HAL_DMA_Init+0x8c>)
 8001402:	4013      	ands	r3, r2
 8001404:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800140e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800141a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	695b      	ldr	r3, [r3, #20]
 8001420:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001426:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	69db      	ldr	r3, [r3, #28]
 800142c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	4313      	orrs	r3, r2
 8001432:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	0018      	movs	r0, r3
 8001440:	f000 f946 	bl	80016d0 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2221      	movs	r2, #33	; 0x21
 800144e:	2101      	movs	r1, #1
 8001450:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2220      	movs	r2, #32
 8001456:	2100      	movs	r1, #0
 8001458:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800145a:	2300      	movs	r3, #0
}
 800145c:	0018      	movs	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	b004      	add	sp, #16
 8001462:	bd80      	pop	{r7, pc}
 8001464:	ffffc00f 	.word	0xffffc00f

08001468 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
 8001474:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001476:	2317      	movs	r3, #23
 8001478:	18fb      	adds	r3, r7, r3
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2220      	movs	r2, #32
 8001482:	5c9b      	ldrb	r3, [r3, r2]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d101      	bne.n	800148c <HAL_DMA_Start_IT+0x24>
 8001488:	2302      	movs	r3, #2
 800148a:	e04f      	b.n	800152c <HAL_DMA_Start_IT+0xc4>
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2220      	movs	r2, #32
 8001490:	2101      	movs	r1, #1
 8001492:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2221      	movs	r2, #33	; 0x21
 8001498:	5c9b      	ldrb	r3, [r3, r2]
 800149a:	b2db      	uxtb	r3, r3
 800149c:	2b01      	cmp	r3, #1
 800149e:	d13a      	bne.n	8001516 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2221      	movs	r2, #33	; 0x21
 80014a4:	2102      	movs	r1, #2
 80014a6:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2200      	movs	r2, #0
 80014ac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2101      	movs	r1, #1
 80014ba:	438a      	bics	r2, r1
 80014bc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	68b9      	ldr	r1, [r7, #8]
 80014c4:	68f8      	ldr	r0, [r7, #12]
 80014c6:	f000 f8d7 	bl	8001678 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d008      	beq.n	80014e4 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	210e      	movs	r1, #14
 80014de:	430a      	orrs	r2, r1
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	e00f      	b.n	8001504 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	210a      	movs	r1, #10
 80014f0:	430a      	orrs	r2, r1
 80014f2:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2104      	movs	r1, #4
 8001500:	438a      	bics	r2, r1
 8001502:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2101      	movs	r1, #1
 8001510:	430a      	orrs	r2, r1
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	e007      	b.n	8001526 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2220      	movs	r2, #32
 800151a:	2100      	movs	r1, #0
 800151c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800151e:	2317      	movs	r3, #23
 8001520:	18fb      	adds	r3, r7, r3
 8001522:	2202      	movs	r2, #2
 8001524:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001526:	2317      	movs	r3, #23
 8001528:	18fb      	adds	r3, r7, r3
 800152a:	781b      	ldrb	r3, [r3, #0]
}
 800152c:	0018      	movs	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	b006      	add	sp, #24
 8001532:	bd80      	pop	{r7, pc}

08001534 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	2204      	movs	r2, #4
 8001552:	409a      	lsls	r2, r3
 8001554:	0013      	movs	r3, r2
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	4013      	ands	r3, r2
 800155a:	d024      	beq.n	80015a6 <HAL_DMA_IRQHandler+0x72>
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	2204      	movs	r2, #4
 8001560:	4013      	ands	r3, r2
 8001562:	d020      	beq.n	80015a6 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2220      	movs	r2, #32
 800156c:	4013      	ands	r3, r2
 800156e:	d107      	bne.n	8001580 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2104      	movs	r1, #4
 800157c:	438a      	bics	r2, r1
 800157e:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001588:	2104      	movs	r1, #4
 800158a:	4091      	lsls	r1, r2
 800158c:	000a      	movs	r2, r1
 800158e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001594:	2b00      	cmp	r3, #0
 8001596:	d100      	bne.n	800159a <HAL_DMA_IRQHandler+0x66>
 8001598:	e06a      	b.n	8001670 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	0010      	movs	r0, r2
 80015a2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80015a4:	e064      	b.n	8001670 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	2202      	movs	r2, #2
 80015ac:	409a      	lsls	r2, r3
 80015ae:	0013      	movs	r3, r2
 80015b0:	68fa      	ldr	r2, [r7, #12]
 80015b2:	4013      	ands	r3, r2
 80015b4:	d02b      	beq.n	800160e <HAL_DMA_IRQHandler+0xda>
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	2202      	movs	r2, #2
 80015ba:	4013      	ands	r3, r2
 80015bc:	d027      	beq.n	800160e <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2220      	movs	r2, #32
 80015c6:	4013      	ands	r3, r2
 80015c8:	d10b      	bne.n	80015e2 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	210a      	movs	r1, #10
 80015d6:	438a      	bics	r2, r1
 80015d8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2221      	movs	r2, #33	; 0x21
 80015de:	2101      	movs	r1, #1
 80015e0:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ea:	2102      	movs	r1, #2
 80015ec:	4091      	lsls	r1, r2
 80015ee:	000a      	movs	r2, r1
 80015f0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2220      	movs	r2, #32
 80015f6:	2100      	movs	r1, #0
 80015f8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d036      	beq.n	8001670 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	0010      	movs	r0, r2
 800160a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800160c:	e030      	b.n	8001670 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	2208      	movs	r2, #8
 8001614:	409a      	lsls	r2, r3
 8001616:	0013      	movs	r3, r2
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	4013      	ands	r3, r2
 800161c:	d028      	beq.n	8001670 <HAL_DMA_IRQHandler+0x13c>
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	2208      	movs	r2, #8
 8001622:	4013      	ands	r3, r2
 8001624:	d024      	beq.n	8001670 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	210e      	movs	r1, #14
 8001632:	438a      	bics	r2, r1
 8001634:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800163e:	2101      	movs	r1, #1
 8001640:	4091      	lsls	r1, r2
 8001642:	000a      	movs	r2, r1
 8001644:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2201      	movs	r2, #1
 800164a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2221      	movs	r2, #33	; 0x21
 8001650:	2101      	movs	r1, #1
 8001652:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2220      	movs	r2, #32
 8001658:	2100      	movs	r1, #0
 800165a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001660:	2b00      	cmp	r3, #0
 8001662:	d005      	beq.n	8001670 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	0010      	movs	r0, r2
 800166c:	4798      	blx	r3
    }
  }
}
 800166e:	e7ff      	b.n	8001670 <HAL_DMA_IRQHandler+0x13c>
 8001670:	46c0      	nop			; (mov r8, r8)
 8001672:	46bd      	mov	sp, r7
 8001674:	b004      	add	sp, #16
 8001676:	bd80      	pop	{r7, pc}

08001678 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
 8001684:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800168e:	2101      	movs	r1, #1
 8001690:	4091      	lsls	r1, r2
 8001692:	000a      	movs	r2, r1
 8001694:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b10      	cmp	r3, #16
 80016a4:	d108      	bne.n	80016b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80016b6:	e007      	b.n	80016c8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68ba      	ldr	r2, [r7, #8]
 80016be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	60da      	str	r2, [r3, #12]
}
 80016c8:	46c0      	nop			; (mov r8, r8)
 80016ca:	46bd      	mov	sp, r7
 80016cc:	b004      	add	sp, #16
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a08      	ldr	r2, [pc, #32]	; (8001700 <DMA_CalcBaseAndBitshift+0x30>)
 80016de:	4694      	mov	ip, r2
 80016e0:	4463      	add	r3, ip
 80016e2:	2114      	movs	r1, #20
 80016e4:	0018      	movs	r0, r3
 80016e6:	f7fe fd0f 	bl	8000108 <__udivsi3>
 80016ea:	0003      	movs	r3, r0
 80016ec:	009a      	lsls	r2, r3, #2
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a03      	ldr	r2, [pc, #12]	; (8001704 <DMA_CalcBaseAndBitshift+0x34>)
 80016f6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80016f8:	46c0      	nop			; (mov r8, r8)
 80016fa:	46bd      	mov	sp, r7
 80016fc:	b002      	add	sp, #8
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	bffdfff8 	.word	0xbffdfff8
 8001704:	40020000 	.word	0x40020000

08001708 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001716:	e155      	b.n	80019c4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2101      	movs	r1, #1
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	4091      	lsls	r1, r2
 8001722:	000a      	movs	r2, r1
 8001724:	4013      	ands	r3, r2
 8001726:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d100      	bne.n	8001730 <HAL_GPIO_Init+0x28>
 800172e:	e146      	b.n	80019be <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	2203      	movs	r2, #3
 8001736:	4013      	ands	r3, r2
 8001738:	2b01      	cmp	r3, #1
 800173a:	d005      	beq.n	8001748 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2203      	movs	r2, #3
 8001742:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001744:	2b02      	cmp	r3, #2
 8001746:	d130      	bne.n	80017aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	2203      	movs	r2, #3
 8001754:	409a      	lsls	r2, r3
 8001756:	0013      	movs	r3, r2
 8001758:	43da      	mvns	r2, r3
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	4013      	ands	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	68da      	ldr	r2, [r3, #12]
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	409a      	lsls	r2, r3
 800176a:	0013      	movs	r3, r2
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	4313      	orrs	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800177e:	2201      	movs	r2, #1
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	409a      	lsls	r2, r3
 8001784:	0013      	movs	r3, r2
 8001786:	43da      	mvns	r2, r3
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	4013      	ands	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	091b      	lsrs	r3, r3, #4
 8001794:	2201      	movs	r2, #1
 8001796:	401a      	ands	r2, r3
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	409a      	lsls	r2, r3
 800179c:	0013      	movs	r3, r2
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2203      	movs	r2, #3
 80017b0:	4013      	ands	r3, r2
 80017b2:	2b03      	cmp	r3, #3
 80017b4:	d017      	beq.n	80017e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	2203      	movs	r2, #3
 80017c2:	409a      	lsls	r2, r3
 80017c4:	0013      	movs	r3, r2
 80017c6:	43da      	mvns	r2, r3
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	4013      	ands	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	689a      	ldr	r2, [r3, #8]
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	409a      	lsls	r2, r3
 80017d8:	0013      	movs	r3, r2
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4313      	orrs	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2203      	movs	r2, #3
 80017ec:	4013      	ands	r3, r2
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d123      	bne.n	800183a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	08da      	lsrs	r2, r3, #3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	3208      	adds	r2, #8
 80017fa:	0092      	lsls	r2, r2, #2
 80017fc:	58d3      	ldr	r3, [r2, r3]
 80017fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	2207      	movs	r2, #7
 8001804:	4013      	ands	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	220f      	movs	r2, #15
 800180a:	409a      	lsls	r2, r3
 800180c:	0013      	movs	r3, r2
 800180e:	43da      	mvns	r2, r3
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	4013      	ands	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	691a      	ldr	r2, [r3, #16]
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	2107      	movs	r1, #7
 800181e:	400b      	ands	r3, r1
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	409a      	lsls	r2, r3
 8001824:	0013      	movs	r3, r2
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	4313      	orrs	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	08da      	lsrs	r2, r3, #3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3208      	adds	r2, #8
 8001834:	0092      	lsls	r2, r2, #2
 8001836:	6939      	ldr	r1, [r7, #16]
 8001838:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	2203      	movs	r2, #3
 8001846:	409a      	lsls	r2, r3
 8001848:	0013      	movs	r3, r2
 800184a:	43da      	mvns	r2, r3
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	4013      	ands	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2203      	movs	r2, #3
 8001858:	401a      	ands	r2, r3
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	409a      	lsls	r2, r3
 8001860:	0013      	movs	r3, r2
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	4313      	orrs	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	23c0      	movs	r3, #192	; 0xc0
 8001874:	029b      	lsls	r3, r3, #10
 8001876:	4013      	ands	r3, r2
 8001878:	d100      	bne.n	800187c <HAL_GPIO_Init+0x174>
 800187a:	e0a0      	b.n	80019be <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187c:	4b57      	ldr	r3, [pc, #348]	; (80019dc <HAL_GPIO_Init+0x2d4>)
 800187e:	699a      	ldr	r2, [r3, #24]
 8001880:	4b56      	ldr	r3, [pc, #344]	; (80019dc <HAL_GPIO_Init+0x2d4>)
 8001882:	2101      	movs	r1, #1
 8001884:	430a      	orrs	r2, r1
 8001886:	619a      	str	r2, [r3, #24]
 8001888:	4b54      	ldr	r3, [pc, #336]	; (80019dc <HAL_GPIO_Init+0x2d4>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	2201      	movs	r2, #1
 800188e:	4013      	ands	r3, r2
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001894:	4a52      	ldr	r2, [pc, #328]	; (80019e0 <HAL_GPIO_Init+0x2d8>)
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	089b      	lsrs	r3, r3, #2
 800189a:	3302      	adds	r3, #2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	589b      	ldr	r3, [r3, r2]
 80018a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	2203      	movs	r2, #3
 80018a6:	4013      	ands	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	220f      	movs	r2, #15
 80018ac:	409a      	lsls	r2, r3
 80018ae:	0013      	movs	r3, r2
 80018b0:	43da      	mvns	r2, r3
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	4013      	ands	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	2390      	movs	r3, #144	; 0x90
 80018bc:	05db      	lsls	r3, r3, #23
 80018be:	429a      	cmp	r2, r3
 80018c0:	d019      	beq.n	80018f6 <HAL_GPIO_Init+0x1ee>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a47      	ldr	r2, [pc, #284]	; (80019e4 <HAL_GPIO_Init+0x2dc>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d013      	beq.n	80018f2 <HAL_GPIO_Init+0x1ea>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a46      	ldr	r2, [pc, #280]	; (80019e8 <HAL_GPIO_Init+0x2e0>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d00d      	beq.n	80018ee <HAL_GPIO_Init+0x1e6>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a45      	ldr	r2, [pc, #276]	; (80019ec <HAL_GPIO_Init+0x2e4>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d007      	beq.n	80018ea <HAL_GPIO_Init+0x1e2>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a44      	ldr	r2, [pc, #272]	; (80019f0 <HAL_GPIO_Init+0x2e8>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d101      	bne.n	80018e6 <HAL_GPIO_Init+0x1de>
 80018e2:	2304      	movs	r3, #4
 80018e4:	e008      	b.n	80018f8 <HAL_GPIO_Init+0x1f0>
 80018e6:	2305      	movs	r3, #5
 80018e8:	e006      	b.n	80018f8 <HAL_GPIO_Init+0x1f0>
 80018ea:	2303      	movs	r3, #3
 80018ec:	e004      	b.n	80018f8 <HAL_GPIO_Init+0x1f0>
 80018ee:	2302      	movs	r3, #2
 80018f0:	e002      	b.n	80018f8 <HAL_GPIO_Init+0x1f0>
 80018f2:	2301      	movs	r3, #1
 80018f4:	e000      	b.n	80018f8 <HAL_GPIO_Init+0x1f0>
 80018f6:	2300      	movs	r3, #0
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	2103      	movs	r1, #3
 80018fc:	400a      	ands	r2, r1
 80018fe:	0092      	lsls	r2, r2, #2
 8001900:	4093      	lsls	r3, r2
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4313      	orrs	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001908:	4935      	ldr	r1, [pc, #212]	; (80019e0 <HAL_GPIO_Init+0x2d8>)
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	089b      	lsrs	r3, r3, #2
 800190e:	3302      	adds	r3, #2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001916:	4b37      	ldr	r3, [pc, #220]	; (80019f4 <HAL_GPIO_Init+0x2ec>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	43da      	mvns	r2, r3
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	4013      	ands	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	2380      	movs	r3, #128	; 0x80
 800192c:	035b      	lsls	r3, r3, #13
 800192e:	4013      	ands	r3, r2
 8001930:	d003      	beq.n	800193a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	4313      	orrs	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800193a:	4b2e      	ldr	r3, [pc, #184]	; (80019f4 <HAL_GPIO_Init+0x2ec>)
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001940:	4b2c      	ldr	r3, [pc, #176]	; (80019f4 <HAL_GPIO_Init+0x2ec>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	43da      	mvns	r2, r3
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	4013      	ands	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	2380      	movs	r3, #128	; 0x80
 8001956:	039b      	lsls	r3, r3, #14
 8001958:	4013      	ands	r3, r2
 800195a:	d003      	beq.n	8001964 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	4313      	orrs	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001964:	4b23      	ldr	r3, [pc, #140]	; (80019f4 <HAL_GPIO_Init+0x2ec>)
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800196a:	4b22      	ldr	r3, [pc, #136]	; (80019f4 <HAL_GPIO_Init+0x2ec>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	43da      	mvns	r2, r3
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4013      	ands	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	2380      	movs	r3, #128	; 0x80
 8001980:	029b      	lsls	r3, r3, #10
 8001982:	4013      	ands	r3, r2
 8001984:	d003      	beq.n	800198e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4313      	orrs	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800198e:	4b19      	ldr	r3, [pc, #100]	; (80019f4 <HAL_GPIO_Init+0x2ec>)
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001994:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <HAL_GPIO_Init+0x2ec>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	43da      	mvns	r2, r3
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	4013      	ands	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685a      	ldr	r2, [r3, #4]
 80019a8:	2380      	movs	r3, #128	; 0x80
 80019aa:	025b      	lsls	r3, r3, #9
 80019ac:	4013      	ands	r3, r2
 80019ae:	d003      	beq.n	80019b8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019b8:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <HAL_GPIO_Init+0x2ec>)
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	3301      	adds	r3, #1
 80019c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	40da      	lsrs	r2, r3
 80019cc:	1e13      	subs	r3, r2, #0
 80019ce:	d000      	beq.n	80019d2 <HAL_GPIO_Init+0x2ca>
 80019d0:	e6a2      	b.n	8001718 <HAL_GPIO_Init+0x10>
  } 
}
 80019d2:	46c0      	nop			; (mov r8, r8)
 80019d4:	46c0      	nop			; (mov r8, r8)
 80019d6:	46bd      	mov	sp, r7
 80019d8:	b006      	add	sp, #24
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40010000 	.word	0x40010000
 80019e4:	48000400 	.word	0x48000400
 80019e8:	48000800 	.word	0x48000800
 80019ec:	48000c00 	.word	0x48000c00
 80019f0:	48001000 	.word	0x48001000
 80019f4:	40010400 	.word	0x40010400

080019f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d102      	bne.n	8001a0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	f000 fb76 	bl	80020f8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2201      	movs	r2, #1
 8001a12:	4013      	ands	r3, r2
 8001a14:	d100      	bne.n	8001a18 <HAL_RCC_OscConfig+0x20>
 8001a16:	e08e      	b.n	8001b36 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a18:	4bc5      	ldr	r3, [pc, #788]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	220c      	movs	r2, #12
 8001a1e:	4013      	ands	r3, r2
 8001a20:	2b04      	cmp	r3, #4
 8001a22:	d00e      	beq.n	8001a42 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a24:	4bc2      	ldr	r3, [pc, #776]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	220c      	movs	r2, #12
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	2b08      	cmp	r3, #8
 8001a2e:	d117      	bne.n	8001a60 <HAL_RCC_OscConfig+0x68>
 8001a30:	4bbf      	ldr	r3, [pc, #764]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	23c0      	movs	r3, #192	; 0xc0
 8001a36:	025b      	lsls	r3, r3, #9
 8001a38:	401a      	ands	r2, r3
 8001a3a:	2380      	movs	r3, #128	; 0x80
 8001a3c:	025b      	lsls	r3, r3, #9
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d10e      	bne.n	8001a60 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a42:	4bbb      	ldr	r3, [pc, #748]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	2380      	movs	r3, #128	; 0x80
 8001a48:	029b      	lsls	r3, r3, #10
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d100      	bne.n	8001a50 <HAL_RCC_OscConfig+0x58>
 8001a4e:	e071      	b.n	8001b34 <HAL_RCC_OscConfig+0x13c>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d000      	beq.n	8001a5a <HAL_RCC_OscConfig+0x62>
 8001a58:	e06c      	b.n	8001b34 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	f000 fb4c 	bl	80020f8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d107      	bne.n	8001a78 <HAL_RCC_OscConfig+0x80>
 8001a68:	4bb1      	ldr	r3, [pc, #708]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	4bb0      	ldr	r3, [pc, #704]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001a6e:	2180      	movs	r1, #128	; 0x80
 8001a70:	0249      	lsls	r1, r1, #9
 8001a72:	430a      	orrs	r2, r1
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	e02f      	b.n	8001ad8 <HAL_RCC_OscConfig+0xe0>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d10c      	bne.n	8001a9a <HAL_RCC_OscConfig+0xa2>
 8001a80:	4bab      	ldr	r3, [pc, #684]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	4baa      	ldr	r3, [pc, #680]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001a86:	49ab      	ldr	r1, [pc, #684]	; (8001d34 <HAL_RCC_OscConfig+0x33c>)
 8001a88:	400a      	ands	r2, r1
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	4ba8      	ldr	r3, [pc, #672]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4ba7      	ldr	r3, [pc, #668]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001a92:	49a9      	ldr	r1, [pc, #676]	; (8001d38 <HAL_RCC_OscConfig+0x340>)
 8001a94:	400a      	ands	r2, r1
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	e01e      	b.n	8001ad8 <HAL_RCC_OscConfig+0xe0>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b05      	cmp	r3, #5
 8001aa0:	d10e      	bne.n	8001ac0 <HAL_RCC_OscConfig+0xc8>
 8001aa2:	4ba3      	ldr	r3, [pc, #652]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	4ba2      	ldr	r3, [pc, #648]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001aa8:	2180      	movs	r1, #128	; 0x80
 8001aaa:	02c9      	lsls	r1, r1, #11
 8001aac:	430a      	orrs	r2, r1
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	4b9f      	ldr	r3, [pc, #636]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4b9e      	ldr	r3, [pc, #632]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001ab6:	2180      	movs	r1, #128	; 0x80
 8001ab8:	0249      	lsls	r1, r1, #9
 8001aba:	430a      	orrs	r2, r1
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	e00b      	b.n	8001ad8 <HAL_RCC_OscConfig+0xe0>
 8001ac0:	4b9b      	ldr	r3, [pc, #620]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b9a      	ldr	r3, [pc, #616]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001ac6:	499b      	ldr	r1, [pc, #620]	; (8001d34 <HAL_RCC_OscConfig+0x33c>)
 8001ac8:	400a      	ands	r2, r1
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	4b98      	ldr	r3, [pc, #608]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b97      	ldr	r3, [pc, #604]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001ad2:	4999      	ldr	r1, [pc, #612]	; (8001d38 <HAL_RCC_OscConfig+0x340>)
 8001ad4:	400a      	ands	r2, r1
 8001ad6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d014      	beq.n	8001b0a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae0:	f7fe fede 	bl	80008a0 <HAL_GetTick>
 8001ae4:	0003      	movs	r3, r0
 8001ae6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aea:	f7fe fed9 	bl	80008a0 <HAL_GetTick>
 8001aee:	0002      	movs	r2, r0
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b64      	cmp	r3, #100	; 0x64
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e2fd      	b.n	80020f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afc:	4b8c      	ldr	r3, [pc, #560]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	2380      	movs	r3, #128	; 0x80
 8001b02:	029b      	lsls	r3, r3, #10
 8001b04:	4013      	ands	r3, r2
 8001b06:	d0f0      	beq.n	8001aea <HAL_RCC_OscConfig+0xf2>
 8001b08:	e015      	b.n	8001b36 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0a:	f7fe fec9 	bl	80008a0 <HAL_GetTick>
 8001b0e:	0003      	movs	r3, r0
 8001b10:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b14:	f7fe fec4 	bl	80008a0 <HAL_GetTick>
 8001b18:	0002      	movs	r2, r0
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b64      	cmp	r3, #100	; 0x64
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e2e8      	b.n	80020f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b26:	4b82      	ldr	r3, [pc, #520]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	2380      	movs	r3, #128	; 0x80
 8001b2c:	029b      	lsls	r3, r3, #10
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d1f0      	bne.n	8001b14 <HAL_RCC_OscConfig+0x11c>
 8001b32:	e000      	b.n	8001b36 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b34:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d100      	bne.n	8001b42 <HAL_RCC_OscConfig+0x14a>
 8001b40:	e06c      	b.n	8001c1c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b42:	4b7b      	ldr	r3, [pc, #492]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	220c      	movs	r2, #12
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d00e      	beq.n	8001b6a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b4c:	4b78      	ldr	r3, [pc, #480]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	220c      	movs	r2, #12
 8001b52:	4013      	ands	r3, r2
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	d11f      	bne.n	8001b98 <HAL_RCC_OscConfig+0x1a0>
 8001b58:	4b75      	ldr	r3, [pc, #468]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	23c0      	movs	r3, #192	; 0xc0
 8001b5e:	025b      	lsls	r3, r3, #9
 8001b60:	401a      	ands	r2, r3
 8001b62:	2380      	movs	r3, #128	; 0x80
 8001b64:	021b      	lsls	r3, r3, #8
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d116      	bne.n	8001b98 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b6a:	4b71      	ldr	r3, [pc, #452]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2202      	movs	r2, #2
 8001b70:	4013      	ands	r3, r2
 8001b72:	d005      	beq.n	8001b80 <HAL_RCC_OscConfig+0x188>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d001      	beq.n	8001b80 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e2bb      	b.n	80020f8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b80:	4b6b      	ldr	r3, [pc, #428]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	22f8      	movs	r2, #248	; 0xf8
 8001b86:	4393      	bics	r3, r2
 8001b88:	0019      	movs	r1, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	00da      	lsls	r2, r3, #3
 8001b90:	4b67      	ldr	r3, [pc, #412]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001b92:	430a      	orrs	r2, r1
 8001b94:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b96:	e041      	b.n	8001c1c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d024      	beq.n	8001bea <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ba0:	4b63      	ldr	r3, [pc, #396]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b62      	ldr	r3, [pc, #392]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bac:	f7fe fe78 	bl	80008a0 <HAL_GetTick>
 8001bb0:	0003      	movs	r3, r0
 8001bb2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bb6:	f7fe fe73 	bl	80008a0 <HAL_GetTick>
 8001bba:	0002      	movs	r2, r0
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e297      	b.n	80020f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc8:	4b59      	ldr	r3, [pc, #356]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2202      	movs	r2, #2
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d0f1      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd2:	4b57      	ldr	r3, [pc, #348]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	22f8      	movs	r2, #248	; 0xf8
 8001bd8:	4393      	bics	r3, r2
 8001bda:	0019      	movs	r1, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	00da      	lsls	r2, r3, #3
 8001be2:	4b53      	ldr	r3, [pc, #332]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001be4:	430a      	orrs	r2, r1
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	e018      	b.n	8001c1c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bea:	4b51      	ldr	r3, [pc, #324]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	4b50      	ldr	r3, [pc, #320]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	438a      	bics	r2, r1
 8001bf4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf6:	f7fe fe53 	bl	80008a0 <HAL_GetTick>
 8001bfa:	0003      	movs	r3, r0
 8001bfc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c00:	f7fe fe4e 	bl	80008a0 <HAL_GetTick>
 8001c04:	0002      	movs	r2, r0
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e272      	b.n	80020f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c12:	4b47      	ldr	r3, [pc, #284]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2202      	movs	r2, #2
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d1f1      	bne.n	8001c00 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2208      	movs	r2, #8
 8001c22:	4013      	ands	r3, r2
 8001c24:	d036      	beq.n	8001c94 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d019      	beq.n	8001c62 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c2e:	4b40      	ldr	r3, [pc, #256]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001c30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c32:	4b3f      	ldr	r3, [pc, #252]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001c34:	2101      	movs	r1, #1
 8001c36:	430a      	orrs	r2, r1
 8001c38:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c3a:	f7fe fe31 	bl	80008a0 <HAL_GetTick>
 8001c3e:	0003      	movs	r3, r0
 8001c40:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c44:	f7fe fe2c 	bl	80008a0 <HAL_GetTick>
 8001c48:	0002      	movs	r2, r0
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e250      	b.n	80020f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c56:	4b36      	ldr	r3, [pc, #216]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d0f1      	beq.n	8001c44 <HAL_RCC_OscConfig+0x24c>
 8001c60:	e018      	b.n	8001c94 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c62:	4b33      	ldr	r3, [pc, #204]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001c64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c66:	4b32      	ldr	r3, [pc, #200]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001c68:	2101      	movs	r1, #1
 8001c6a:	438a      	bics	r2, r1
 8001c6c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c6e:	f7fe fe17 	bl	80008a0 <HAL_GetTick>
 8001c72:	0003      	movs	r3, r0
 8001c74:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c78:	f7fe fe12 	bl	80008a0 <HAL_GetTick>
 8001c7c:	0002      	movs	r2, r0
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e236      	b.n	80020f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c8a:	4b29      	ldr	r3, [pc, #164]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8e:	2202      	movs	r2, #2
 8001c90:	4013      	ands	r3, r2
 8001c92:	d1f1      	bne.n	8001c78 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2204      	movs	r2, #4
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	d100      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x2a8>
 8001c9e:	e0b5      	b.n	8001e0c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ca0:	201f      	movs	r0, #31
 8001ca2:	183b      	adds	r3, r7, r0
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ca8:	4b21      	ldr	r3, [pc, #132]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001caa:	69da      	ldr	r2, [r3, #28]
 8001cac:	2380      	movs	r3, #128	; 0x80
 8001cae:	055b      	lsls	r3, r3, #21
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d110      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cb4:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001cb6:	69da      	ldr	r2, [r3, #28]
 8001cb8:	4b1d      	ldr	r3, [pc, #116]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001cba:	2180      	movs	r1, #128	; 0x80
 8001cbc:	0549      	lsls	r1, r1, #21
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	61da      	str	r2, [r3, #28]
 8001cc2:	4b1b      	ldr	r3, [pc, #108]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001cc4:	69da      	ldr	r2, [r3, #28]
 8001cc6:	2380      	movs	r3, #128	; 0x80
 8001cc8:	055b      	lsls	r3, r3, #21
 8001cca:	4013      	ands	r3, r2
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001cd0:	183b      	adds	r3, r7, r0
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd6:	4b19      	ldr	r3, [pc, #100]	; (8001d3c <HAL_RCC_OscConfig+0x344>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	2380      	movs	r3, #128	; 0x80
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	4013      	ands	r3, r2
 8001ce0:	d11a      	bne.n	8001d18 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ce2:	4b16      	ldr	r3, [pc, #88]	; (8001d3c <HAL_RCC_OscConfig+0x344>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <HAL_RCC_OscConfig+0x344>)
 8001ce8:	2180      	movs	r1, #128	; 0x80
 8001cea:	0049      	lsls	r1, r1, #1
 8001cec:	430a      	orrs	r2, r1
 8001cee:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cf0:	f7fe fdd6 	bl	80008a0 <HAL_GetTick>
 8001cf4:	0003      	movs	r3, r0
 8001cf6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cfa:	f7fe fdd1 	bl	80008a0 <HAL_GetTick>
 8001cfe:	0002      	movs	r2, r0
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b64      	cmp	r3, #100	; 0x64
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e1f5      	b.n	80020f8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0c:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <HAL_RCC_OscConfig+0x344>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	2380      	movs	r3, #128	; 0x80
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4013      	ands	r3, r2
 8001d16:	d0f0      	beq.n	8001cfa <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d10f      	bne.n	8001d40 <HAL_RCC_OscConfig+0x348>
 8001d20:	4b03      	ldr	r3, [pc, #12]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001d22:	6a1a      	ldr	r2, [r3, #32]
 8001d24:	4b02      	ldr	r3, [pc, #8]	; (8001d30 <HAL_RCC_OscConfig+0x338>)
 8001d26:	2101      	movs	r1, #1
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	621a      	str	r2, [r3, #32]
 8001d2c:	e036      	b.n	8001d9c <HAL_RCC_OscConfig+0x3a4>
 8001d2e:	46c0      	nop			; (mov r8, r8)
 8001d30:	40021000 	.word	0x40021000
 8001d34:	fffeffff 	.word	0xfffeffff
 8001d38:	fffbffff 	.word	0xfffbffff
 8001d3c:	40007000 	.word	0x40007000
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d10c      	bne.n	8001d62 <HAL_RCC_OscConfig+0x36a>
 8001d48:	4bca      	ldr	r3, [pc, #808]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001d4a:	6a1a      	ldr	r2, [r3, #32]
 8001d4c:	4bc9      	ldr	r3, [pc, #804]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001d4e:	2101      	movs	r1, #1
 8001d50:	438a      	bics	r2, r1
 8001d52:	621a      	str	r2, [r3, #32]
 8001d54:	4bc7      	ldr	r3, [pc, #796]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001d56:	6a1a      	ldr	r2, [r3, #32]
 8001d58:	4bc6      	ldr	r3, [pc, #792]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001d5a:	2104      	movs	r1, #4
 8001d5c:	438a      	bics	r2, r1
 8001d5e:	621a      	str	r2, [r3, #32]
 8001d60:	e01c      	b.n	8001d9c <HAL_RCC_OscConfig+0x3a4>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	2b05      	cmp	r3, #5
 8001d68:	d10c      	bne.n	8001d84 <HAL_RCC_OscConfig+0x38c>
 8001d6a:	4bc2      	ldr	r3, [pc, #776]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001d6c:	6a1a      	ldr	r2, [r3, #32]
 8001d6e:	4bc1      	ldr	r3, [pc, #772]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001d70:	2104      	movs	r1, #4
 8001d72:	430a      	orrs	r2, r1
 8001d74:	621a      	str	r2, [r3, #32]
 8001d76:	4bbf      	ldr	r3, [pc, #764]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001d78:	6a1a      	ldr	r2, [r3, #32]
 8001d7a:	4bbe      	ldr	r3, [pc, #760]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	621a      	str	r2, [r3, #32]
 8001d82:	e00b      	b.n	8001d9c <HAL_RCC_OscConfig+0x3a4>
 8001d84:	4bbb      	ldr	r3, [pc, #748]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001d86:	6a1a      	ldr	r2, [r3, #32]
 8001d88:	4bba      	ldr	r3, [pc, #744]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	438a      	bics	r2, r1
 8001d8e:	621a      	str	r2, [r3, #32]
 8001d90:	4bb8      	ldr	r3, [pc, #736]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001d92:	6a1a      	ldr	r2, [r3, #32]
 8001d94:	4bb7      	ldr	r3, [pc, #732]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001d96:	2104      	movs	r1, #4
 8001d98:	438a      	bics	r2, r1
 8001d9a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d014      	beq.n	8001dce <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da4:	f7fe fd7c 	bl	80008a0 <HAL_GetTick>
 8001da8:	0003      	movs	r3, r0
 8001daa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dac:	e009      	b.n	8001dc2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dae:	f7fe fd77 	bl	80008a0 <HAL_GetTick>
 8001db2:	0002      	movs	r2, r0
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	4aaf      	ldr	r2, [pc, #700]	; (8002078 <HAL_RCC_OscConfig+0x680>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e19a      	b.n	80020f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc2:	4bac      	ldr	r3, [pc, #688]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d0f0      	beq.n	8001dae <HAL_RCC_OscConfig+0x3b6>
 8001dcc:	e013      	b.n	8001df6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dce:	f7fe fd67 	bl	80008a0 <HAL_GetTick>
 8001dd2:	0003      	movs	r3, r0
 8001dd4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd6:	e009      	b.n	8001dec <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dd8:	f7fe fd62 	bl	80008a0 <HAL_GetTick>
 8001ddc:	0002      	movs	r2, r0
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	4aa5      	ldr	r2, [pc, #660]	; (8002078 <HAL_RCC_OscConfig+0x680>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e185      	b.n	80020f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dec:	4ba1      	ldr	r3, [pc, #644]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	2202      	movs	r2, #2
 8001df2:	4013      	ands	r3, r2
 8001df4:	d1f0      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001df6:	231f      	movs	r3, #31
 8001df8:	18fb      	adds	r3, r7, r3
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d105      	bne.n	8001e0c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e00:	4b9c      	ldr	r3, [pc, #624]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001e02:	69da      	ldr	r2, [r3, #28]
 8001e04:	4b9b      	ldr	r3, [pc, #620]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001e06:	499d      	ldr	r1, [pc, #628]	; (800207c <HAL_RCC_OscConfig+0x684>)
 8001e08:	400a      	ands	r2, r1
 8001e0a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2210      	movs	r2, #16
 8001e12:	4013      	ands	r3, r2
 8001e14:	d063      	beq.n	8001ede <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d12a      	bne.n	8001e74 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e1e:	4b95      	ldr	r3, [pc, #596]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001e20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e22:	4b94      	ldr	r3, [pc, #592]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001e24:	2104      	movs	r1, #4
 8001e26:	430a      	orrs	r2, r1
 8001e28:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001e2a:	4b92      	ldr	r3, [pc, #584]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001e2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e2e:	4b91      	ldr	r3, [pc, #580]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001e30:	2101      	movs	r1, #1
 8001e32:	430a      	orrs	r2, r1
 8001e34:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e36:	f7fe fd33 	bl	80008a0 <HAL_GetTick>
 8001e3a:	0003      	movs	r3, r0
 8001e3c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e40:	f7fe fd2e 	bl	80008a0 <HAL_GetTick>
 8001e44:	0002      	movs	r2, r0
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e152      	b.n	80020f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e52:	4b88      	ldr	r3, [pc, #544]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e56:	2202      	movs	r2, #2
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d0f1      	beq.n	8001e40 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e5c:	4b85      	ldr	r3, [pc, #532]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e60:	22f8      	movs	r2, #248	; 0xf8
 8001e62:	4393      	bics	r3, r2
 8001e64:	0019      	movs	r1, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	00da      	lsls	r2, r3, #3
 8001e6c:	4b81      	ldr	r3, [pc, #516]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	635a      	str	r2, [r3, #52]	; 0x34
 8001e72:	e034      	b.n	8001ede <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	695b      	ldr	r3, [r3, #20]
 8001e78:	3305      	adds	r3, #5
 8001e7a:	d111      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001e7c:	4b7d      	ldr	r3, [pc, #500]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001e7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e80:	4b7c      	ldr	r3, [pc, #496]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001e82:	2104      	movs	r1, #4
 8001e84:	438a      	bics	r2, r1
 8001e86:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e88:	4b7a      	ldr	r3, [pc, #488]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e8c:	22f8      	movs	r2, #248	; 0xf8
 8001e8e:	4393      	bics	r3, r2
 8001e90:	0019      	movs	r1, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	00da      	lsls	r2, r3, #3
 8001e98:	4b76      	ldr	r3, [pc, #472]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	635a      	str	r2, [r3, #52]	; 0x34
 8001e9e:	e01e      	b.n	8001ede <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ea0:	4b74      	ldr	r3, [pc, #464]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001ea2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ea4:	4b73      	ldr	r3, [pc, #460]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001ea6:	2104      	movs	r1, #4
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001eac:	4b71      	ldr	r3, [pc, #452]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001eae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eb0:	4b70      	ldr	r3, [pc, #448]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	438a      	bics	r2, r1
 8001eb6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb8:	f7fe fcf2 	bl	80008a0 <HAL_GetTick>
 8001ebc:	0003      	movs	r3, r0
 8001ebe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ec2:	f7fe fced 	bl	80008a0 <HAL_GetTick>
 8001ec6:	0002      	movs	r2, r0
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e111      	b.n	80020f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ed4:	4b67      	ldr	r3, [pc, #412]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed8:	2202      	movs	r2, #2
 8001eda:	4013      	ands	r3, r2
 8001edc:	d1f1      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2220      	movs	r2, #32
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	d05c      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001ee8:	4b62      	ldr	r3, [pc, #392]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	220c      	movs	r2, #12
 8001eee:	4013      	ands	r3, r2
 8001ef0:	2b0c      	cmp	r3, #12
 8001ef2:	d00e      	beq.n	8001f12 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001ef4:	4b5f      	ldr	r3, [pc, #380]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	220c      	movs	r2, #12
 8001efa:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	d114      	bne.n	8001f2a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001f00:	4b5c      	ldr	r3, [pc, #368]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	23c0      	movs	r3, #192	; 0xc0
 8001f06:	025b      	lsls	r3, r3, #9
 8001f08:	401a      	ands	r2, r3
 8001f0a:	23c0      	movs	r3, #192	; 0xc0
 8001f0c:	025b      	lsls	r3, r3, #9
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d10b      	bne.n	8001f2a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001f12:	4b58      	ldr	r3, [pc, #352]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001f14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f16:	2380      	movs	r3, #128	; 0x80
 8001f18:	029b      	lsls	r3, r3, #10
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d040      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x5a8>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d03c      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e0e6      	b.n	80020f8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d01b      	beq.n	8001f6a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001f32:	4b50      	ldr	r3, [pc, #320]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001f34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f36:	4b4f      	ldr	r3, [pc, #316]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001f38:	2180      	movs	r1, #128	; 0x80
 8001f3a:	0249      	lsls	r1, r1, #9
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f40:	f7fe fcae 	bl	80008a0 <HAL_GetTick>
 8001f44:	0003      	movs	r3, r0
 8001f46:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f4a:	f7fe fca9 	bl	80008a0 <HAL_GetTick>
 8001f4e:	0002      	movs	r2, r0
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e0cd      	b.n	80020f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001f5c:	4b45      	ldr	r3, [pc, #276]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001f5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f60:	2380      	movs	r3, #128	; 0x80
 8001f62:	029b      	lsls	r3, r3, #10
 8001f64:	4013      	ands	r3, r2
 8001f66:	d0f0      	beq.n	8001f4a <HAL_RCC_OscConfig+0x552>
 8001f68:	e01b      	b.n	8001fa2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001f6a:	4b42      	ldr	r3, [pc, #264]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001f6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f6e:	4b41      	ldr	r3, [pc, #260]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001f70:	4943      	ldr	r1, [pc, #268]	; (8002080 <HAL_RCC_OscConfig+0x688>)
 8001f72:	400a      	ands	r2, r1
 8001f74:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f76:	f7fe fc93 	bl	80008a0 <HAL_GetTick>
 8001f7a:	0003      	movs	r3, r0
 8001f7c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f80:	f7fe fc8e 	bl	80008a0 <HAL_GetTick>
 8001f84:	0002      	movs	r2, r0
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e0b2      	b.n	80020f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001f92:	4b38      	ldr	r3, [pc, #224]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001f94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f96:	2380      	movs	r3, #128	; 0x80
 8001f98:	029b      	lsls	r3, r3, #10
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0x588>
 8001f9e:	e000      	b.n	8001fa2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001fa0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d100      	bne.n	8001fac <HAL_RCC_OscConfig+0x5b4>
 8001faa:	e0a4      	b.n	80020f6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fac:	4b31      	ldr	r3, [pc, #196]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	220c      	movs	r2, #12
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b08      	cmp	r3, #8
 8001fb6:	d100      	bne.n	8001fba <HAL_RCC_OscConfig+0x5c2>
 8001fb8:	e078      	b.n	80020ac <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d14c      	bne.n	800205c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc2:	4b2c      	ldr	r3, [pc, #176]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	4b2b      	ldr	r3, [pc, #172]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001fc8:	492e      	ldr	r1, [pc, #184]	; (8002084 <HAL_RCC_OscConfig+0x68c>)
 8001fca:	400a      	ands	r2, r1
 8001fcc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fce:	f7fe fc67 	bl	80008a0 <HAL_GetTick>
 8001fd2:	0003      	movs	r3, r0
 8001fd4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fd8:	f7fe fc62 	bl	80008a0 <HAL_GetTick>
 8001fdc:	0002      	movs	r2, r0
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e086      	b.n	80020f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fea:	4b22      	ldr	r3, [pc, #136]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	2380      	movs	r3, #128	; 0x80
 8001ff0:	049b      	lsls	r3, r3, #18
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d1f0      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ff6:	4b1f      	ldr	r3, [pc, #124]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8001ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffa:	220f      	movs	r2, #15
 8001ffc:	4393      	bics	r3, r2
 8001ffe:	0019      	movs	r1, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002004:	4b1b      	ldr	r3, [pc, #108]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8002006:	430a      	orrs	r2, r1
 8002008:	62da      	str	r2, [r3, #44]	; 0x2c
 800200a:	4b1a      	ldr	r3, [pc, #104]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	4a1e      	ldr	r2, [pc, #120]	; (8002088 <HAL_RCC_OscConfig+0x690>)
 8002010:	4013      	ands	r3, r2
 8002012:	0019      	movs	r1, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201c:	431a      	orrs	r2, r3
 800201e:	4b15      	ldr	r3, [pc, #84]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8002020:	430a      	orrs	r2, r1
 8002022:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002024:	4b13      	ldr	r3, [pc, #76]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	4b12      	ldr	r3, [pc, #72]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 800202a:	2180      	movs	r1, #128	; 0x80
 800202c:	0449      	lsls	r1, r1, #17
 800202e:	430a      	orrs	r2, r1
 8002030:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002032:	f7fe fc35 	bl	80008a0 <HAL_GetTick>
 8002036:	0003      	movs	r3, r0
 8002038:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800203c:	f7fe fc30 	bl	80008a0 <HAL_GetTick>
 8002040:	0002      	movs	r2, r0
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e054      	b.n	80020f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800204e:	4b09      	ldr	r3, [pc, #36]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	2380      	movs	r3, #128	; 0x80
 8002054:	049b      	lsls	r3, r3, #18
 8002056:	4013      	ands	r3, r2
 8002058:	d0f0      	beq.n	800203c <HAL_RCC_OscConfig+0x644>
 800205a:	e04c      	b.n	80020f6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4b04      	ldr	r3, [pc, #16]	; (8002074 <HAL_RCC_OscConfig+0x67c>)
 8002062:	4908      	ldr	r1, [pc, #32]	; (8002084 <HAL_RCC_OscConfig+0x68c>)
 8002064:	400a      	ands	r2, r1
 8002066:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002068:	f7fe fc1a 	bl	80008a0 <HAL_GetTick>
 800206c:	0003      	movs	r3, r0
 800206e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002070:	e015      	b.n	800209e <HAL_RCC_OscConfig+0x6a6>
 8002072:	46c0      	nop			; (mov r8, r8)
 8002074:	40021000 	.word	0x40021000
 8002078:	00001388 	.word	0x00001388
 800207c:	efffffff 	.word	0xefffffff
 8002080:	fffeffff 	.word	0xfffeffff
 8002084:	feffffff 	.word	0xfeffffff
 8002088:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800208c:	f7fe fc08 	bl	80008a0 <HAL_GetTick>
 8002090:	0002      	movs	r2, r0
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e02c      	b.n	80020f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800209e:	4b18      	ldr	r3, [pc, #96]	; (8002100 <HAL_RCC_OscConfig+0x708>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	2380      	movs	r3, #128	; 0x80
 80020a4:	049b      	lsls	r3, r3, #18
 80020a6:	4013      	ands	r3, r2
 80020a8:	d1f0      	bne.n	800208c <HAL_RCC_OscConfig+0x694>
 80020aa:	e024      	b.n	80020f6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d101      	bne.n	80020b8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e01f      	b.n	80020f8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80020b8:	4b11      	ldr	r3, [pc, #68]	; (8002100 <HAL_RCC_OscConfig+0x708>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80020be:	4b10      	ldr	r3, [pc, #64]	; (8002100 <HAL_RCC_OscConfig+0x708>)
 80020c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	23c0      	movs	r3, #192	; 0xc0
 80020c8:	025b      	lsls	r3, r3, #9
 80020ca:	401a      	ands	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d10e      	bne.n	80020f2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	220f      	movs	r2, #15
 80020d8:	401a      	ands	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020de:	429a      	cmp	r2, r3
 80020e0:	d107      	bne.n	80020f2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	23f0      	movs	r3, #240	; 0xf0
 80020e6:	039b      	lsls	r3, r3, #14
 80020e8:	401a      	ands	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d001      	beq.n	80020f6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e000      	b.n	80020f8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	0018      	movs	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	b008      	add	sp, #32
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40021000 	.word	0x40021000

08002104 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e0bf      	b.n	8002298 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002118:	4b61      	ldr	r3, [pc, #388]	; (80022a0 <HAL_RCC_ClockConfig+0x19c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2201      	movs	r2, #1
 800211e:	4013      	ands	r3, r2
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	429a      	cmp	r2, r3
 8002124:	d911      	bls.n	800214a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002126:	4b5e      	ldr	r3, [pc, #376]	; (80022a0 <HAL_RCC_ClockConfig+0x19c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2201      	movs	r2, #1
 800212c:	4393      	bics	r3, r2
 800212e:	0019      	movs	r1, r3
 8002130:	4b5b      	ldr	r3, [pc, #364]	; (80022a0 <HAL_RCC_ClockConfig+0x19c>)
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	430a      	orrs	r2, r1
 8002136:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002138:	4b59      	ldr	r3, [pc, #356]	; (80022a0 <HAL_RCC_ClockConfig+0x19c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2201      	movs	r2, #1
 800213e:	4013      	ands	r3, r2
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	429a      	cmp	r2, r3
 8002144:	d001      	beq.n	800214a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e0a6      	b.n	8002298 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2202      	movs	r2, #2
 8002150:	4013      	ands	r3, r2
 8002152:	d015      	beq.n	8002180 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2204      	movs	r2, #4
 800215a:	4013      	ands	r3, r2
 800215c:	d006      	beq.n	800216c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800215e:	4b51      	ldr	r3, [pc, #324]	; (80022a4 <HAL_RCC_ClockConfig+0x1a0>)
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	4b50      	ldr	r3, [pc, #320]	; (80022a4 <HAL_RCC_ClockConfig+0x1a0>)
 8002164:	21e0      	movs	r1, #224	; 0xe0
 8002166:	00c9      	lsls	r1, r1, #3
 8002168:	430a      	orrs	r2, r1
 800216a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800216c:	4b4d      	ldr	r3, [pc, #308]	; (80022a4 <HAL_RCC_ClockConfig+0x1a0>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	22f0      	movs	r2, #240	; 0xf0
 8002172:	4393      	bics	r3, r2
 8002174:	0019      	movs	r1, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	4b4a      	ldr	r3, [pc, #296]	; (80022a4 <HAL_RCC_ClockConfig+0x1a0>)
 800217c:	430a      	orrs	r2, r1
 800217e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2201      	movs	r2, #1
 8002186:	4013      	ands	r3, r2
 8002188:	d04c      	beq.n	8002224 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d107      	bne.n	80021a2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002192:	4b44      	ldr	r3, [pc, #272]	; (80022a4 <HAL_RCC_ClockConfig+0x1a0>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	2380      	movs	r3, #128	; 0x80
 8002198:	029b      	lsls	r3, r3, #10
 800219a:	4013      	ands	r3, r2
 800219c:	d120      	bne.n	80021e0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e07a      	b.n	8002298 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d107      	bne.n	80021ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021aa:	4b3e      	ldr	r3, [pc, #248]	; (80022a4 <HAL_RCC_ClockConfig+0x1a0>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	2380      	movs	r3, #128	; 0x80
 80021b0:	049b      	lsls	r3, r3, #18
 80021b2:	4013      	ands	r3, r2
 80021b4:	d114      	bne.n	80021e0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e06e      	b.n	8002298 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b03      	cmp	r3, #3
 80021c0:	d107      	bne.n	80021d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80021c2:	4b38      	ldr	r3, [pc, #224]	; (80022a4 <HAL_RCC_ClockConfig+0x1a0>)
 80021c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021c6:	2380      	movs	r3, #128	; 0x80
 80021c8:	029b      	lsls	r3, r3, #10
 80021ca:	4013      	ands	r3, r2
 80021cc:	d108      	bne.n	80021e0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e062      	b.n	8002298 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d2:	4b34      	ldr	r3, [pc, #208]	; (80022a4 <HAL_RCC_ClockConfig+0x1a0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2202      	movs	r2, #2
 80021d8:	4013      	ands	r3, r2
 80021da:	d101      	bne.n	80021e0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e05b      	b.n	8002298 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021e0:	4b30      	ldr	r3, [pc, #192]	; (80022a4 <HAL_RCC_ClockConfig+0x1a0>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2203      	movs	r2, #3
 80021e6:	4393      	bics	r3, r2
 80021e8:	0019      	movs	r1, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	4b2d      	ldr	r3, [pc, #180]	; (80022a4 <HAL_RCC_ClockConfig+0x1a0>)
 80021f0:	430a      	orrs	r2, r1
 80021f2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021f4:	f7fe fb54 	bl	80008a0 <HAL_GetTick>
 80021f8:	0003      	movs	r3, r0
 80021fa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fc:	e009      	b.n	8002212 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021fe:	f7fe fb4f 	bl	80008a0 <HAL_GetTick>
 8002202:	0002      	movs	r2, r0
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	4a27      	ldr	r2, [pc, #156]	; (80022a8 <HAL_RCC_ClockConfig+0x1a4>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e042      	b.n	8002298 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002212:	4b24      	ldr	r3, [pc, #144]	; (80022a4 <HAL_RCC_ClockConfig+0x1a0>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	220c      	movs	r2, #12
 8002218:	401a      	ands	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	429a      	cmp	r2, r3
 8002222:	d1ec      	bne.n	80021fe <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002224:	4b1e      	ldr	r3, [pc, #120]	; (80022a0 <HAL_RCC_ClockConfig+0x19c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2201      	movs	r2, #1
 800222a:	4013      	ands	r3, r2
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	429a      	cmp	r2, r3
 8002230:	d211      	bcs.n	8002256 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002232:	4b1b      	ldr	r3, [pc, #108]	; (80022a0 <HAL_RCC_ClockConfig+0x19c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2201      	movs	r2, #1
 8002238:	4393      	bics	r3, r2
 800223a:	0019      	movs	r1, r3
 800223c:	4b18      	ldr	r3, [pc, #96]	; (80022a0 <HAL_RCC_ClockConfig+0x19c>)
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	430a      	orrs	r2, r1
 8002242:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002244:	4b16      	ldr	r3, [pc, #88]	; (80022a0 <HAL_RCC_ClockConfig+0x19c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2201      	movs	r2, #1
 800224a:	4013      	ands	r3, r2
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	429a      	cmp	r2, r3
 8002250:	d001      	beq.n	8002256 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e020      	b.n	8002298 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2204      	movs	r2, #4
 800225c:	4013      	ands	r3, r2
 800225e:	d009      	beq.n	8002274 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002260:	4b10      	ldr	r3, [pc, #64]	; (80022a4 <HAL_RCC_ClockConfig+0x1a0>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	4a11      	ldr	r2, [pc, #68]	; (80022ac <HAL_RCC_ClockConfig+0x1a8>)
 8002266:	4013      	ands	r3, r2
 8002268:	0019      	movs	r1, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	4b0d      	ldr	r3, [pc, #52]	; (80022a4 <HAL_RCC_ClockConfig+0x1a0>)
 8002270:	430a      	orrs	r2, r1
 8002272:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002274:	f000 f820 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 8002278:	0001      	movs	r1, r0
 800227a:	4b0a      	ldr	r3, [pc, #40]	; (80022a4 <HAL_RCC_ClockConfig+0x1a0>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	091b      	lsrs	r3, r3, #4
 8002280:	220f      	movs	r2, #15
 8002282:	4013      	ands	r3, r2
 8002284:	4a0a      	ldr	r2, [pc, #40]	; (80022b0 <HAL_RCC_ClockConfig+0x1ac>)
 8002286:	5cd3      	ldrb	r3, [r2, r3]
 8002288:	000a      	movs	r2, r1
 800228a:	40da      	lsrs	r2, r3
 800228c:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <HAL_RCC_ClockConfig+0x1b0>)
 800228e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002290:	2003      	movs	r0, #3
 8002292:	f7fe fabf 	bl	8000814 <HAL_InitTick>
  
  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	0018      	movs	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	b004      	add	sp, #16
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40022000 	.word	0x40022000
 80022a4:	40021000 	.word	0x40021000
 80022a8:	00001388 	.word	0x00001388
 80022ac:	fffff8ff 	.word	0xfffff8ff
 80022b0:	08003130 	.word	0x08003130
 80022b4:	20000000 	.word	0x20000000

080022b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	2300      	movs	r3, #0
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	2300      	movs	r3, #0
 80022c8:	617b      	str	r3, [r7, #20]
 80022ca:	2300      	movs	r3, #0
 80022cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80022d2:	4b2d      	ldr	r3, [pc, #180]	; (8002388 <HAL_RCC_GetSysClockFreq+0xd0>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	220c      	movs	r2, #12
 80022dc:	4013      	ands	r3, r2
 80022de:	2b0c      	cmp	r3, #12
 80022e0:	d046      	beq.n	8002370 <HAL_RCC_GetSysClockFreq+0xb8>
 80022e2:	d848      	bhi.n	8002376 <HAL_RCC_GetSysClockFreq+0xbe>
 80022e4:	2b04      	cmp	r3, #4
 80022e6:	d002      	beq.n	80022ee <HAL_RCC_GetSysClockFreq+0x36>
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	d003      	beq.n	80022f4 <HAL_RCC_GetSysClockFreq+0x3c>
 80022ec:	e043      	b.n	8002376 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022ee:	4b27      	ldr	r3, [pc, #156]	; (800238c <HAL_RCC_GetSysClockFreq+0xd4>)
 80022f0:	613b      	str	r3, [r7, #16]
      break;
 80022f2:	e043      	b.n	800237c <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	0c9b      	lsrs	r3, r3, #18
 80022f8:	220f      	movs	r2, #15
 80022fa:	4013      	ands	r3, r2
 80022fc:	4a24      	ldr	r2, [pc, #144]	; (8002390 <HAL_RCC_GetSysClockFreq+0xd8>)
 80022fe:	5cd3      	ldrb	r3, [r2, r3]
 8002300:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002302:	4b21      	ldr	r3, [pc, #132]	; (8002388 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002306:	220f      	movs	r2, #15
 8002308:	4013      	ands	r3, r2
 800230a:	4a22      	ldr	r2, [pc, #136]	; (8002394 <HAL_RCC_GetSysClockFreq+0xdc>)
 800230c:	5cd3      	ldrb	r3, [r2, r3]
 800230e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	23c0      	movs	r3, #192	; 0xc0
 8002314:	025b      	lsls	r3, r3, #9
 8002316:	401a      	ands	r2, r3
 8002318:	2380      	movs	r3, #128	; 0x80
 800231a:	025b      	lsls	r3, r3, #9
 800231c:	429a      	cmp	r2, r3
 800231e:	d109      	bne.n	8002334 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002320:	68b9      	ldr	r1, [r7, #8]
 8002322:	481a      	ldr	r0, [pc, #104]	; (800238c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002324:	f7fd fef0 	bl	8000108 <__udivsi3>
 8002328:	0003      	movs	r3, r0
 800232a:	001a      	movs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4353      	muls	r3, r2
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	e01a      	b.n	800236a <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	23c0      	movs	r3, #192	; 0xc0
 8002338:	025b      	lsls	r3, r3, #9
 800233a:	401a      	ands	r2, r3
 800233c:	23c0      	movs	r3, #192	; 0xc0
 800233e:	025b      	lsls	r3, r3, #9
 8002340:	429a      	cmp	r2, r3
 8002342:	d109      	bne.n	8002358 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002344:	68b9      	ldr	r1, [r7, #8]
 8002346:	4814      	ldr	r0, [pc, #80]	; (8002398 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002348:	f7fd fede 	bl	8000108 <__udivsi3>
 800234c:	0003      	movs	r3, r0
 800234e:	001a      	movs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4353      	muls	r3, r2
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	e008      	b.n	800236a <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002358:	68b9      	ldr	r1, [r7, #8]
 800235a:	480c      	ldr	r0, [pc, #48]	; (800238c <HAL_RCC_GetSysClockFreq+0xd4>)
 800235c:	f7fd fed4 	bl	8000108 <__udivsi3>
 8002360:	0003      	movs	r3, r0
 8002362:	001a      	movs	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4353      	muls	r3, r2
 8002368:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	613b      	str	r3, [r7, #16]
      break;
 800236e:	e005      	b.n	800237c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002370:	4b09      	ldr	r3, [pc, #36]	; (8002398 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002372:	613b      	str	r3, [r7, #16]
      break;
 8002374:	e002      	b.n	800237c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002376:	4b05      	ldr	r3, [pc, #20]	; (800238c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002378:	613b      	str	r3, [r7, #16]
      break;
 800237a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800237c:	693b      	ldr	r3, [r7, #16]
}
 800237e:	0018      	movs	r0, r3
 8002380:	46bd      	mov	sp, r7
 8002382:	b006      	add	sp, #24
 8002384:	bd80      	pop	{r7, pc}
 8002386:	46c0      	nop			; (mov r8, r8)
 8002388:	40021000 	.word	0x40021000
 800238c:	007a1200 	.word	0x007a1200
 8002390:	08003140 	.word	0x08003140
 8002394:	08003150 	.word	0x08003150
 8002398:	02dc6c00 	.word	0x02dc6c00

0800239c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e042      	b.n	8002434 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	223d      	movs	r2, #61	; 0x3d
 80023b2:	5c9b      	ldrb	r3, [r3, r2]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d107      	bne.n	80023ca <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	223c      	movs	r2, #60	; 0x3c
 80023be:	2100      	movs	r1, #0
 80023c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	0018      	movs	r0, r3
 80023c6:	f7fe f963 	bl	8000690 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	223d      	movs	r2, #61	; 0x3d
 80023ce:	2102      	movs	r1, #2
 80023d0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3304      	adds	r3, #4
 80023da:	0019      	movs	r1, r3
 80023dc:	0010      	movs	r0, r2
 80023de:	f000 fad7 	bl	8002990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2246      	movs	r2, #70	; 0x46
 80023e6:	2101      	movs	r1, #1
 80023e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	223e      	movs	r2, #62	; 0x3e
 80023ee:	2101      	movs	r1, #1
 80023f0:	5499      	strb	r1, [r3, r2]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	223f      	movs	r2, #63	; 0x3f
 80023f6:	2101      	movs	r1, #1
 80023f8:	5499      	strb	r1, [r3, r2]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2240      	movs	r2, #64	; 0x40
 80023fe:	2101      	movs	r1, #1
 8002400:	5499      	strb	r1, [r3, r2]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2241      	movs	r2, #65	; 0x41
 8002406:	2101      	movs	r1, #1
 8002408:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2242      	movs	r2, #66	; 0x42
 800240e:	2101      	movs	r1, #1
 8002410:	5499      	strb	r1, [r3, r2]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2243      	movs	r2, #67	; 0x43
 8002416:	2101      	movs	r1, #1
 8002418:	5499      	strb	r1, [r3, r2]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2244      	movs	r2, #68	; 0x44
 800241e:	2101      	movs	r1, #1
 8002420:	5499      	strb	r1, [r3, r2]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2245      	movs	r2, #69	; 0x45
 8002426:	2101      	movs	r1, #1
 8002428:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	223d      	movs	r2, #61	; 0x3d
 800242e:	2101      	movs	r1, #1
 8002430:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	0018      	movs	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	b002      	add	sp, #8
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e042      	b.n	80024d4 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	223d      	movs	r2, #61	; 0x3d
 8002452:	5c9b      	ldrb	r3, [r3, r2]
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d107      	bne.n	800246a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	223c      	movs	r2, #60	; 0x3c
 800245e:	2100      	movs	r1, #0
 8002460:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	0018      	movs	r0, r3
 8002466:	f000 f839 	bl	80024dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	223d      	movs	r2, #61	; 0x3d
 800246e:	2102      	movs	r1, #2
 8002470:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3304      	adds	r3, #4
 800247a:	0019      	movs	r1, r3
 800247c:	0010      	movs	r0, r2
 800247e:	f000 fa87 	bl	8002990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2246      	movs	r2, #70	; 0x46
 8002486:	2101      	movs	r1, #1
 8002488:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	223e      	movs	r2, #62	; 0x3e
 800248e:	2101      	movs	r1, #1
 8002490:	5499      	strb	r1, [r3, r2]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	223f      	movs	r2, #63	; 0x3f
 8002496:	2101      	movs	r1, #1
 8002498:	5499      	strb	r1, [r3, r2]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2240      	movs	r2, #64	; 0x40
 800249e:	2101      	movs	r1, #1
 80024a0:	5499      	strb	r1, [r3, r2]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2241      	movs	r2, #65	; 0x41
 80024a6:	2101      	movs	r1, #1
 80024a8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2242      	movs	r2, #66	; 0x42
 80024ae:	2101      	movs	r1, #1
 80024b0:	5499      	strb	r1, [r3, r2]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2243      	movs	r2, #67	; 0x43
 80024b6:	2101      	movs	r1, #1
 80024b8:	5499      	strb	r1, [r3, r2]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2244      	movs	r2, #68	; 0x44
 80024be:	2101      	movs	r1, #1
 80024c0:	5499      	strb	r1, [r3, r2]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2245      	movs	r2, #69	; 0x45
 80024c6:	2101      	movs	r1, #1
 80024c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	223d      	movs	r2, #61	; 0x3d
 80024ce:	2101      	movs	r1, #1
 80024d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	0018      	movs	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	b002      	add	sp, #8
 80024da:	bd80      	pop	{r7, pc}

080024dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80024e4:	46c0      	nop			; (mov r8, r8)
 80024e6:	46bd      	mov	sp, r7
 80024e8:	b002      	add	sp, #8
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d108      	bne.n	800250e <HAL_TIM_PWM_Start+0x22>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	223e      	movs	r2, #62	; 0x3e
 8002500:	5c9b      	ldrb	r3, [r3, r2]
 8002502:	b2db      	uxtb	r3, r3
 8002504:	3b01      	subs	r3, #1
 8002506:	1e5a      	subs	r2, r3, #1
 8002508:	4193      	sbcs	r3, r2
 800250a:	b2db      	uxtb	r3, r3
 800250c:	e01f      	b.n	800254e <HAL_TIM_PWM_Start+0x62>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	2b04      	cmp	r3, #4
 8002512:	d108      	bne.n	8002526 <HAL_TIM_PWM_Start+0x3a>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	223f      	movs	r2, #63	; 0x3f
 8002518:	5c9b      	ldrb	r3, [r3, r2]
 800251a:	b2db      	uxtb	r3, r3
 800251c:	3b01      	subs	r3, #1
 800251e:	1e5a      	subs	r2, r3, #1
 8002520:	4193      	sbcs	r3, r2
 8002522:	b2db      	uxtb	r3, r3
 8002524:	e013      	b.n	800254e <HAL_TIM_PWM_Start+0x62>
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	2b08      	cmp	r3, #8
 800252a:	d108      	bne.n	800253e <HAL_TIM_PWM_Start+0x52>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2240      	movs	r2, #64	; 0x40
 8002530:	5c9b      	ldrb	r3, [r3, r2]
 8002532:	b2db      	uxtb	r3, r3
 8002534:	3b01      	subs	r3, #1
 8002536:	1e5a      	subs	r2, r3, #1
 8002538:	4193      	sbcs	r3, r2
 800253a:	b2db      	uxtb	r3, r3
 800253c:	e007      	b.n	800254e <HAL_TIM_PWM_Start+0x62>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2241      	movs	r2, #65	; 0x41
 8002542:	5c9b      	ldrb	r3, [r3, r2]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	3b01      	subs	r3, #1
 8002548:	1e5a      	subs	r2, r3, #1
 800254a:	4193      	sbcs	r3, r2
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e074      	b.n	8002640 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d104      	bne.n	8002566 <HAL_TIM_PWM_Start+0x7a>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	223e      	movs	r2, #62	; 0x3e
 8002560:	2102      	movs	r1, #2
 8002562:	5499      	strb	r1, [r3, r2]
 8002564:	e013      	b.n	800258e <HAL_TIM_PWM_Start+0xa2>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	2b04      	cmp	r3, #4
 800256a:	d104      	bne.n	8002576 <HAL_TIM_PWM_Start+0x8a>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	223f      	movs	r2, #63	; 0x3f
 8002570:	2102      	movs	r1, #2
 8002572:	5499      	strb	r1, [r3, r2]
 8002574:	e00b      	b.n	800258e <HAL_TIM_PWM_Start+0xa2>
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	2b08      	cmp	r3, #8
 800257a:	d104      	bne.n	8002586 <HAL_TIM_PWM_Start+0x9a>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2240      	movs	r2, #64	; 0x40
 8002580:	2102      	movs	r1, #2
 8002582:	5499      	strb	r1, [r3, r2]
 8002584:	e003      	b.n	800258e <HAL_TIM_PWM_Start+0xa2>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2241      	movs	r2, #65	; 0x41
 800258a:	2102      	movs	r1, #2
 800258c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6839      	ldr	r1, [r7, #0]
 8002594:	2201      	movs	r2, #1
 8002596:	0018      	movs	r0, r3
 8002598:	f000 fd10 	bl	8002fbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a29      	ldr	r2, [pc, #164]	; (8002648 <HAL_TIM_PWM_Start+0x15c>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d00e      	beq.n	80025c4 <HAL_TIM_PWM_Start+0xd8>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a28      	ldr	r2, [pc, #160]	; (800264c <HAL_TIM_PWM_Start+0x160>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d009      	beq.n	80025c4 <HAL_TIM_PWM_Start+0xd8>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a26      	ldr	r2, [pc, #152]	; (8002650 <HAL_TIM_PWM_Start+0x164>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d004      	beq.n	80025c4 <HAL_TIM_PWM_Start+0xd8>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a25      	ldr	r2, [pc, #148]	; (8002654 <HAL_TIM_PWM_Start+0x168>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d101      	bne.n	80025c8 <HAL_TIM_PWM_Start+0xdc>
 80025c4:	2301      	movs	r3, #1
 80025c6:	e000      	b.n	80025ca <HAL_TIM_PWM_Start+0xde>
 80025c8:	2300      	movs	r3, #0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d008      	beq.n	80025e0 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2180      	movs	r1, #128	; 0x80
 80025da:	0209      	lsls	r1, r1, #8
 80025dc:	430a      	orrs	r2, r1
 80025de:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a18      	ldr	r2, [pc, #96]	; (8002648 <HAL_TIM_PWM_Start+0x15c>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d00f      	beq.n	800260a <HAL_TIM_PWM_Start+0x11e>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	2380      	movs	r3, #128	; 0x80
 80025f0:	05db      	lsls	r3, r3, #23
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d009      	beq.n	800260a <HAL_TIM_PWM_Start+0x11e>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a17      	ldr	r2, [pc, #92]	; (8002658 <HAL_TIM_PWM_Start+0x16c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d004      	beq.n	800260a <HAL_TIM_PWM_Start+0x11e>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a11      	ldr	r2, [pc, #68]	; (800264c <HAL_TIM_PWM_Start+0x160>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d111      	bne.n	800262e <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	2207      	movs	r2, #7
 8002612:	4013      	ands	r3, r2
 8002614:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2b06      	cmp	r3, #6
 800261a:	d010      	beq.n	800263e <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2101      	movs	r1, #1
 8002628:	430a      	orrs	r2, r1
 800262a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800262c:	e007      	b.n	800263e <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2101      	movs	r1, #1
 800263a:	430a      	orrs	r2, r1
 800263c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	0018      	movs	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	b004      	add	sp, #16
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40012c00 	.word	0x40012c00
 800264c:	40014000 	.word	0x40014000
 8002650:	40014400 	.word	0x40014400
 8002654:	40014800 	.word	0x40014800
 8002658:	40000400 	.word	0x40000400

0800265c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002668:	2317      	movs	r3, #23
 800266a:	18fb      	adds	r3, r7, r3
 800266c:	2200      	movs	r2, #0
 800266e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	223c      	movs	r2, #60	; 0x3c
 8002674:	5c9b      	ldrb	r3, [r3, r2]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d101      	bne.n	800267e <HAL_TIM_PWM_ConfigChannel+0x22>
 800267a:	2302      	movs	r3, #2
 800267c:	e0ad      	b.n	80027da <HAL_TIM_PWM_ConfigChannel+0x17e>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	223c      	movs	r2, #60	; 0x3c
 8002682:	2101      	movs	r1, #1
 8002684:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b0c      	cmp	r3, #12
 800268a:	d100      	bne.n	800268e <HAL_TIM_PWM_ConfigChannel+0x32>
 800268c:	e076      	b.n	800277c <HAL_TIM_PWM_ConfigChannel+0x120>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b0c      	cmp	r3, #12
 8002692:	d900      	bls.n	8002696 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002694:	e095      	b.n	80027c2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2b08      	cmp	r3, #8
 800269a:	d04e      	beq.n	800273a <HAL_TIM_PWM_ConfigChannel+0xde>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b08      	cmp	r3, #8
 80026a0:	d900      	bls.n	80026a4 <HAL_TIM_PWM_ConfigChannel+0x48>
 80026a2:	e08e      	b.n	80027c2 <HAL_TIM_PWM_ConfigChannel+0x166>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_TIM_PWM_ConfigChannel+0x56>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b04      	cmp	r3, #4
 80026ae:	d021      	beq.n	80026f4 <HAL_TIM_PWM_ConfigChannel+0x98>
 80026b0:	e087      	b.n	80027c2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	0011      	movs	r1, r2
 80026ba:	0018      	movs	r0, r3
 80026bc:	f000 f9e8 	bl	8002a90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	699a      	ldr	r2, [r3, #24]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2108      	movs	r1, #8
 80026cc:	430a      	orrs	r2, r1
 80026ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	699a      	ldr	r2, [r3, #24]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2104      	movs	r1, #4
 80026dc:	438a      	bics	r2, r1
 80026de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6999      	ldr	r1, [r3, #24]
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	691a      	ldr	r2, [r3, #16]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	619a      	str	r2, [r3, #24]
      break;
 80026f2:	e06b      	b.n	80027cc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	0011      	movs	r1, r2
 80026fc:	0018      	movs	r0, r3
 80026fe:	f000 fa4f 	bl	8002ba0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	699a      	ldr	r2, [r3, #24]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2180      	movs	r1, #128	; 0x80
 800270e:	0109      	lsls	r1, r1, #4
 8002710:	430a      	orrs	r2, r1
 8002712:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	699a      	ldr	r2, [r3, #24]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4931      	ldr	r1, [pc, #196]	; (80027e4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002720:	400a      	ands	r2, r1
 8002722:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6999      	ldr	r1, [r3, #24]
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	021a      	lsls	r2, r3, #8
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	430a      	orrs	r2, r1
 8002736:	619a      	str	r2, [r3, #24]
      break;
 8002738:	e048      	b.n	80027cc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	0011      	movs	r1, r2
 8002742:	0018      	movs	r0, r3
 8002744:	f000 fab0 	bl	8002ca8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	69da      	ldr	r2, [r3, #28]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2108      	movs	r1, #8
 8002754:	430a      	orrs	r2, r1
 8002756:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	69da      	ldr	r2, [r3, #28]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2104      	movs	r1, #4
 8002764:	438a      	bics	r2, r1
 8002766:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	69d9      	ldr	r1, [r3, #28]
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	691a      	ldr	r2, [r3, #16]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	430a      	orrs	r2, r1
 8002778:	61da      	str	r2, [r3, #28]
      break;
 800277a:	e027      	b.n	80027cc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68ba      	ldr	r2, [r7, #8]
 8002782:	0011      	movs	r1, r2
 8002784:	0018      	movs	r0, r3
 8002786:	f000 fb15 	bl	8002db4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	69da      	ldr	r2, [r3, #28]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2180      	movs	r1, #128	; 0x80
 8002796:	0109      	lsls	r1, r1, #4
 8002798:	430a      	orrs	r2, r1
 800279a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	69da      	ldr	r2, [r3, #28]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	490f      	ldr	r1, [pc, #60]	; (80027e4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80027a8:	400a      	ands	r2, r1
 80027aa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	69d9      	ldr	r1, [r3, #28]
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	021a      	lsls	r2, r3, #8
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	61da      	str	r2, [r3, #28]
      break;
 80027c0:	e004      	b.n	80027cc <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80027c2:	2317      	movs	r3, #23
 80027c4:	18fb      	adds	r3, r7, r3
 80027c6:	2201      	movs	r2, #1
 80027c8:	701a      	strb	r2, [r3, #0]
      break;
 80027ca:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	223c      	movs	r2, #60	; 0x3c
 80027d0:	2100      	movs	r1, #0
 80027d2:	5499      	strb	r1, [r3, r2]

  return status;
 80027d4:	2317      	movs	r3, #23
 80027d6:	18fb      	adds	r3, r7, r3
 80027d8:	781b      	ldrb	r3, [r3, #0]
}
 80027da:	0018      	movs	r0, r3
 80027dc:	46bd      	mov	sp, r7
 80027de:	b006      	add	sp, #24
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	fffffbff 	.word	0xfffffbff

080027e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027f2:	230f      	movs	r3, #15
 80027f4:	18fb      	adds	r3, r7, r3
 80027f6:	2200      	movs	r2, #0
 80027f8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	223c      	movs	r2, #60	; 0x3c
 80027fe:	5c9b      	ldrb	r3, [r3, r2]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_TIM_ConfigClockSource+0x20>
 8002804:	2302      	movs	r3, #2
 8002806:	e0bc      	b.n	8002982 <HAL_TIM_ConfigClockSource+0x19a>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	223c      	movs	r2, #60	; 0x3c
 800280c:	2101      	movs	r1, #1
 800280e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	223d      	movs	r2, #61	; 0x3d
 8002814:	2102      	movs	r1, #2
 8002816:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2277      	movs	r2, #119	; 0x77
 8002824:	4393      	bics	r3, r2
 8002826:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	4a58      	ldr	r2, [pc, #352]	; (800298c <HAL_TIM_ConfigClockSource+0x1a4>)
 800282c:	4013      	ands	r3, r2
 800282e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2280      	movs	r2, #128	; 0x80
 800283e:	0192      	lsls	r2, r2, #6
 8002840:	4293      	cmp	r3, r2
 8002842:	d040      	beq.n	80028c6 <HAL_TIM_ConfigClockSource+0xde>
 8002844:	2280      	movs	r2, #128	; 0x80
 8002846:	0192      	lsls	r2, r2, #6
 8002848:	4293      	cmp	r3, r2
 800284a:	d900      	bls.n	800284e <HAL_TIM_ConfigClockSource+0x66>
 800284c:	e088      	b.n	8002960 <HAL_TIM_ConfigClockSource+0x178>
 800284e:	2280      	movs	r2, #128	; 0x80
 8002850:	0152      	lsls	r2, r2, #5
 8002852:	4293      	cmp	r3, r2
 8002854:	d100      	bne.n	8002858 <HAL_TIM_ConfigClockSource+0x70>
 8002856:	e088      	b.n	800296a <HAL_TIM_ConfigClockSource+0x182>
 8002858:	2280      	movs	r2, #128	; 0x80
 800285a:	0152      	lsls	r2, r2, #5
 800285c:	4293      	cmp	r3, r2
 800285e:	d900      	bls.n	8002862 <HAL_TIM_ConfigClockSource+0x7a>
 8002860:	e07e      	b.n	8002960 <HAL_TIM_ConfigClockSource+0x178>
 8002862:	2b70      	cmp	r3, #112	; 0x70
 8002864:	d018      	beq.n	8002898 <HAL_TIM_ConfigClockSource+0xb0>
 8002866:	d900      	bls.n	800286a <HAL_TIM_ConfigClockSource+0x82>
 8002868:	e07a      	b.n	8002960 <HAL_TIM_ConfigClockSource+0x178>
 800286a:	2b60      	cmp	r3, #96	; 0x60
 800286c:	d04f      	beq.n	800290e <HAL_TIM_ConfigClockSource+0x126>
 800286e:	d900      	bls.n	8002872 <HAL_TIM_ConfigClockSource+0x8a>
 8002870:	e076      	b.n	8002960 <HAL_TIM_ConfigClockSource+0x178>
 8002872:	2b50      	cmp	r3, #80	; 0x50
 8002874:	d03b      	beq.n	80028ee <HAL_TIM_ConfigClockSource+0x106>
 8002876:	d900      	bls.n	800287a <HAL_TIM_ConfigClockSource+0x92>
 8002878:	e072      	b.n	8002960 <HAL_TIM_ConfigClockSource+0x178>
 800287a:	2b40      	cmp	r3, #64	; 0x40
 800287c:	d057      	beq.n	800292e <HAL_TIM_ConfigClockSource+0x146>
 800287e:	d900      	bls.n	8002882 <HAL_TIM_ConfigClockSource+0x9a>
 8002880:	e06e      	b.n	8002960 <HAL_TIM_ConfigClockSource+0x178>
 8002882:	2b30      	cmp	r3, #48	; 0x30
 8002884:	d063      	beq.n	800294e <HAL_TIM_ConfigClockSource+0x166>
 8002886:	d86b      	bhi.n	8002960 <HAL_TIM_ConfigClockSource+0x178>
 8002888:	2b20      	cmp	r3, #32
 800288a:	d060      	beq.n	800294e <HAL_TIM_ConfigClockSource+0x166>
 800288c:	d868      	bhi.n	8002960 <HAL_TIM_ConfigClockSource+0x178>
 800288e:	2b00      	cmp	r3, #0
 8002890:	d05d      	beq.n	800294e <HAL_TIM_ConfigClockSource+0x166>
 8002892:	2b10      	cmp	r3, #16
 8002894:	d05b      	beq.n	800294e <HAL_TIM_ConfigClockSource+0x166>
 8002896:	e063      	b.n	8002960 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6818      	ldr	r0, [r3, #0]
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	6899      	ldr	r1, [r3, #8]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f000 fb68 	bl	8002f7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	2277      	movs	r2, #119	; 0x77
 80028b8:	4313      	orrs	r3, r2
 80028ba:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68ba      	ldr	r2, [r7, #8]
 80028c2:	609a      	str	r2, [r3, #8]
      break;
 80028c4:	e052      	b.n	800296c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6818      	ldr	r0, [r3, #0]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	6899      	ldr	r1, [r3, #8]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685a      	ldr	r2, [r3, #4]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	f000 fb51 	bl	8002f7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2180      	movs	r1, #128	; 0x80
 80028e6:	01c9      	lsls	r1, r1, #7
 80028e8:	430a      	orrs	r2, r1
 80028ea:	609a      	str	r2, [r3, #8]
      break;
 80028ec:	e03e      	b.n	800296c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6818      	ldr	r0, [r3, #0]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	6859      	ldr	r1, [r3, #4]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	001a      	movs	r2, r3
 80028fc:	f000 fac4 	bl	8002e88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2150      	movs	r1, #80	; 0x50
 8002906:	0018      	movs	r0, r3
 8002908:	f000 fb1e 	bl	8002f48 <TIM_ITRx_SetConfig>
      break;
 800290c:	e02e      	b.n	800296c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6818      	ldr	r0, [r3, #0]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	6859      	ldr	r1, [r3, #4]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	001a      	movs	r2, r3
 800291c:	f000 fae2 	bl	8002ee4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2160      	movs	r1, #96	; 0x60
 8002926:	0018      	movs	r0, r3
 8002928:	f000 fb0e 	bl	8002f48 <TIM_ITRx_SetConfig>
      break;
 800292c:	e01e      	b.n	800296c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6818      	ldr	r0, [r3, #0]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	6859      	ldr	r1, [r3, #4]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	001a      	movs	r2, r3
 800293c:	f000 faa4 	bl	8002e88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2140      	movs	r1, #64	; 0x40
 8002946:	0018      	movs	r0, r3
 8002948:	f000 fafe 	bl	8002f48 <TIM_ITRx_SetConfig>
      break;
 800294c:	e00e      	b.n	800296c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	0019      	movs	r1, r3
 8002958:	0010      	movs	r0, r2
 800295a:	f000 faf5 	bl	8002f48 <TIM_ITRx_SetConfig>
      break;
 800295e:	e005      	b.n	800296c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002960:	230f      	movs	r3, #15
 8002962:	18fb      	adds	r3, r7, r3
 8002964:	2201      	movs	r2, #1
 8002966:	701a      	strb	r2, [r3, #0]
      break;
 8002968:	e000      	b.n	800296c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800296a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	223d      	movs	r2, #61	; 0x3d
 8002970:	2101      	movs	r1, #1
 8002972:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	223c      	movs	r2, #60	; 0x3c
 8002978:	2100      	movs	r1, #0
 800297a:	5499      	strb	r1, [r3, r2]

  return status;
 800297c:	230f      	movs	r3, #15
 800297e:	18fb      	adds	r3, r7, r3
 8002980:	781b      	ldrb	r3, [r3, #0]
}
 8002982:	0018      	movs	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	b004      	add	sp, #16
 8002988:	bd80      	pop	{r7, pc}
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	ffff00ff 	.word	0xffff00ff

08002990 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a34      	ldr	r2, [pc, #208]	; (8002a74 <TIM_Base_SetConfig+0xe4>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d008      	beq.n	80029ba <TIM_Base_SetConfig+0x2a>
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	2380      	movs	r3, #128	; 0x80
 80029ac:	05db      	lsls	r3, r3, #23
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d003      	beq.n	80029ba <TIM_Base_SetConfig+0x2a>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a30      	ldr	r2, [pc, #192]	; (8002a78 <TIM_Base_SetConfig+0xe8>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d108      	bne.n	80029cc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2270      	movs	r2, #112	; 0x70
 80029be:	4393      	bics	r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a29      	ldr	r2, [pc, #164]	; (8002a74 <TIM_Base_SetConfig+0xe4>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d018      	beq.n	8002a06 <TIM_Base_SetConfig+0x76>
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	2380      	movs	r3, #128	; 0x80
 80029d8:	05db      	lsls	r3, r3, #23
 80029da:	429a      	cmp	r2, r3
 80029dc:	d013      	beq.n	8002a06 <TIM_Base_SetConfig+0x76>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a25      	ldr	r2, [pc, #148]	; (8002a78 <TIM_Base_SetConfig+0xe8>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d00f      	beq.n	8002a06 <TIM_Base_SetConfig+0x76>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a24      	ldr	r2, [pc, #144]	; (8002a7c <TIM_Base_SetConfig+0xec>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d00b      	beq.n	8002a06 <TIM_Base_SetConfig+0x76>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a23      	ldr	r2, [pc, #140]	; (8002a80 <TIM_Base_SetConfig+0xf0>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d007      	beq.n	8002a06 <TIM_Base_SetConfig+0x76>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a22      	ldr	r2, [pc, #136]	; (8002a84 <TIM_Base_SetConfig+0xf4>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d003      	beq.n	8002a06 <TIM_Base_SetConfig+0x76>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a21      	ldr	r2, [pc, #132]	; (8002a88 <TIM_Base_SetConfig+0xf8>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d108      	bne.n	8002a18 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	4a20      	ldr	r2, [pc, #128]	; (8002a8c <TIM_Base_SetConfig+0xfc>)
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2280      	movs	r2, #128	; 0x80
 8002a1c:	4393      	bics	r3, r2
 8002a1e:	001a      	movs	r2, r3
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a0c      	ldr	r2, [pc, #48]	; (8002a74 <TIM_Base_SetConfig+0xe4>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d00b      	beq.n	8002a5e <TIM_Base_SetConfig+0xce>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a0d      	ldr	r2, [pc, #52]	; (8002a80 <TIM_Base_SetConfig+0xf0>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d007      	beq.n	8002a5e <TIM_Base_SetConfig+0xce>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a0c      	ldr	r2, [pc, #48]	; (8002a84 <TIM_Base_SetConfig+0xf4>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d003      	beq.n	8002a5e <TIM_Base_SetConfig+0xce>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a0b      	ldr	r2, [pc, #44]	; (8002a88 <TIM_Base_SetConfig+0xf8>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d103      	bne.n	8002a66 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	691a      	ldr	r2, [r3, #16]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	615a      	str	r2, [r3, #20]
}
 8002a6c:	46c0      	nop			; (mov r8, r8)
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	b004      	add	sp, #16
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40012c00 	.word	0x40012c00
 8002a78:	40000400 	.word	0x40000400
 8002a7c:	40002000 	.word	0x40002000
 8002a80:	40014000 	.word	0x40014000
 8002a84:	40014400 	.word	0x40014400
 8002a88:	40014800 	.word	0x40014800
 8002a8c:	fffffcff 	.word	0xfffffcff

08002a90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	4393      	bics	r3, r2
 8002aa2:	001a      	movs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2270      	movs	r2, #112	; 0x70
 8002abe:	4393      	bics	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2203      	movs	r2, #3
 8002ac6:	4393      	bics	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	4393      	bics	r3, r2
 8002ada:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a27      	ldr	r2, [pc, #156]	; (8002b88 <TIM_OC1_SetConfig+0xf8>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d00b      	beq.n	8002b06 <TIM_OC1_SetConfig+0x76>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a26      	ldr	r2, [pc, #152]	; (8002b8c <TIM_OC1_SetConfig+0xfc>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d007      	beq.n	8002b06 <TIM_OC1_SetConfig+0x76>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a25      	ldr	r2, [pc, #148]	; (8002b90 <TIM_OC1_SetConfig+0x100>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d003      	beq.n	8002b06 <TIM_OC1_SetConfig+0x76>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a24      	ldr	r2, [pc, #144]	; (8002b94 <TIM_OC1_SetConfig+0x104>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d10c      	bne.n	8002b20 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	2208      	movs	r2, #8
 8002b0a:	4393      	bics	r3, r2
 8002b0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	2204      	movs	r2, #4
 8002b1c:	4393      	bics	r3, r2
 8002b1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a19      	ldr	r2, [pc, #100]	; (8002b88 <TIM_OC1_SetConfig+0xf8>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d00b      	beq.n	8002b40 <TIM_OC1_SetConfig+0xb0>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a18      	ldr	r2, [pc, #96]	; (8002b8c <TIM_OC1_SetConfig+0xfc>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d007      	beq.n	8002b40 <TIM_OC1_SetConfig+0xb0>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a17      	ldr	r2, [pc, #92]	; (8002b90 <TIM_OC1_SetConfig+0x100>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d003      	beq.n	8002b40 <TIM_OC1_SetConfig+0xb0>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a16      	ldr	r2, [pc, #88]	; (8002b94 <TIM_OC1_SetConfig+0x104>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d111      	bne.n	8002b64 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	4a15      	ldr	r2, [pc, #84]	; (8002b98 <TIM_OC1_SetConfig+0x108>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	4a14      	ldr	r2, [pc, #80]	; (8002b9c <TIM_OC1_SetConfig+0x10c>)
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	621a      	str	r2, [r3, #32]
}
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	46bd      	mov	sp, r7
 8002b82:	b006      	add	sp, #24
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	46c0      	nop			; (mov r8, r8)
 8002b88:	40012c00 	.word	0x40012c00
 8002b8c:	40014000 	.word	0x40014000
 8002b90:	40014400 	.word	0x40014400
 8002b94:	40014800 	.word	0x40014800
 8002b98:	fffffeff 	.word	0xfffffeff
 8002b9c:	fffffdff 	.word	0xfffffdff

08002ba0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	2210      	movs	r2, #16
 8002bb0:	4393      	bics	r3, r2
 8002bb2:	001a      	movs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	4a2e      	ldr	r2, [pc, #184]	; (8002c88 <TIM_OC2_SetConfig+0xe8>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	4a2d      	ldr	r2, [pc, #180]	; (8002c8c <TIM_OC2_SetConfig+0xec>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	021b      	lsls	r3, r3, #8
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	2220      	movs	r2, #32
 8002bea:	4393      	bics	r3, r2
 8002bec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	011b      	lsls	r3, r3, #4
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a24      	ldr	r2, [pc, #144]	; (8002c90 <TIM_OC2_SetConfig+0xf0>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d10d      	bne.n	8002c1e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	2280      	movs	r2, #128	; 0x80
 8002c06:	4393      	bics	r3, r2
 8002c08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	011b      	lsls	r3, r3, #4
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	2240      	movs	r2, #64	; 0x40
 8002c1a:	4393      	bics	r3, r2
 8002c1c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a1b      	ldr	r2, [pc, #108]	; (8002c90 <TIM_OC2_SetConfig+0xf0>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d00b      	beq.n	8002c3e <TIM_OC2_SetConfig+0x9e>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a1a      	ldr	r2, [pc, #104]	; (8002c94 <TIM_OC2_SetConfig+0xf4>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d007      	beq.n	8002c3e <TIM_OC2_SetConfig+0x9e>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a19      	ldr	r2, [pc, #100]	; (8002c98 <TIM_OC2_SetConfig+0xf8>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d003      	beq.n	8002c3e <TIM_OC2_SetConfig+0x9e>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a18      	ldr	r2, [pc, #96]	; (8002c9c <TIM_OC2_SetConfig+0xfc>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d113      	bne.n	8002c66 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	4a17      	ldr	r2, [pc, #92]	; (8002ca0 <TIM_OC2_SetConfig+0x100>)
 8002c42:	4013      	ands	r3, r2
 8002c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	4a16      	ldr	r2, [pc, #88]	; (8002ca4 <TIM_OC2_SetConfig+0x104>)
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	621a      	str	r2, [r3, #32]
}
 8002c80:	46c0      	nop			; (mov r8, r8)
 8002c82:	46bd      	mov	sp, r7
 8002c84:	b006      	add	sp, #24
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	ffff8fff 	.word	0xffff8fff
 8002c8c:	fffffcff 	.word	0xfffffcff
 8002c90:	40012c00 	.word	0x40012c00
 8002c94:	40014000 	.word	0x40014000
 8002c98:	40014400 	.word	0x40014400
 8002c9c:	40014800 	.word	0x40014800
 8002ca0:	fffffbff 	.word	0xfffffbff
 8002ca4:	fffff7ff 	.word	0xfffff7ff

08002ca8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	4a35      	ldr	r2, [pc, #212]	; (8002d8c <TIM_OC3_SetConfig+0xe4>)
 8002cb8:	401a      	ands	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2270      	movs	r2, #112	; 0x70
 8002cd4:	4393      	bics	r3, r2
 8002cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2203      	movs	r2, #3
 8002cdc:	4393      	bics	r3, r2
 8002cde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	4a28      	ldr	r2, [pc, #160]	; (8002d90 <TIM_OC3_SetConfig+0xe8>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	021b      	lsls	r3, r3, #8
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a24      	ldr	r2, [pc, #144]	; (8002d94 <TIM_OC3_SetConfig+0xec>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d10d      	bne.n	8002d22 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	4a23      	ldr	r2, [pc, #140]	; (8002d98 <TIM_OC3_SetConfig+0xf0>)
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	021b      	lsls	r3, r3, #8
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	4a1f      	ldr	r2, [pc, #124]	; (8002d9c <TIM_OC3_SetConfig+0xf4>)
 8002d1e:	4013      	ands	r3, r2
 8002d20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a1b      	ldr	r2, [pc, #108]	; (8002d94 <TIM_OC3_SetConfig+0xec>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d00b      	beq.n	8002d42 <TIM_OC3_SetConfig+0x9a>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a1c      	ldr	r2, [pc, #112]	; (8002da0 <TIM_OC3_SetConfig+0xf8>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d007      	beq.n	8002d42 <TIM_OC3_SetConfig+0x9a>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a1b      	ldr	r2, [pc, #108]	; (8002da4 <TIM_OC3_SetConfig+0xfc>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d003      	beq.n	8002d42 <TIM_OC3_SetConfig+0x9a>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a1a      	ldr	r2, [pc, #104]	; (8002da8 <TIM_OC3_SetConfig+0x100>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d113      	bne.n	8002d6a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	4a19      	ldr	r2, [pc, #100]	; (8002dac <TIM_OC3_SetConfig+0x104>)
 8002d46:	4013      	ands	r3, r2
 8002d48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	4a18      	ldr	r2, [pc, #96]	; (8002db0 <TIM_OC3_SetConfig+0x108>)
 8002d4e:	4013      	ands	r3, r2
 8002d50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	011b      	lsls	r3, r3, #4
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	011b      	lsls	r3, r3, #4
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	621a      	str	r2, [r3, #32]
}
 8002d84:	46c0      	nop			; (mov r8, r8)
 8002d86:	46bd      	mov	sp, r7
 8002d88:	b006      	add	sp, #24
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	fffffeff 	.word	0xfffffeff
 8002d90:	fffffdff 	.word	0xfffffdff
 8002d94:	40012c00 	.word	0x40012c00
 8002d98:	fffff7ff 	.word	0xfffff7ff
 8002d9c:	fffffbff 	.word	0xfffffbff
 8002da0:	40014000 	.word	0x40014000
 8002da4:	40014400 	.word	0x40014400
 8002da8:	40014800 	.word	0x40014800
 8002dac:	ffffefff 	.word	0xffffefff
 8002db0:	ffffdfff 	.word	0xffffdfff

08002db4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	4a28      	ldr	r2, [pc, #160]	; (8002e64 <TIM_OC4_SetConfig+0xb0>)
 8002dc4:	401a      	ands	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4a22      	ldr	r2, [pc, #136]	; (8002e68 <TIM_OC4_SetConfig+0xb4>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4a21      	ldr	r2, [pc, #132]	; (8002e6c <TIM_OC4_SetConfig+0xb8>)
 8002de8:	4013      	ands	r3, r2
 8002dea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	021b      	lsls	r3, r3, #8
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	4a1d      	ldr	r2, [pc, #116]	; (8002e70 <TIM_OC4_SetConfig+0xbc>)
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	031b      	lsls	r3, r3, #12
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a19      	ldr	r2, [pc, #100]	; (8002e74 <TIM_OC4_SetConfig+0xc0>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d00b      	beq.n	8002e2c <TIM_OC4_SetConfig+0x78>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a18      	ldr	r2, [pc, #96]	; (8002e78 <TIM_OC4_SetConfig+0xc4>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d007      	beq.n	8002e2c <TIM_OC4_SetConfig+0x78>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a17      	ldr	r2, [pc, #92]	; (8002e7c <TIM_OC4_SetConfig+0xc8>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d003      	beq.n	8002e2c <TIM_OC4_SetConfig+0x78>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a16      	ldr	r2, [pc, #88]	; (8002e80 <TIM_OC4_SetConfig+0xcc>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d109      	bne.n	8002e40 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	4a15      	ldr	r2, [pc, #84]	; (8002e84 <TIM_OC4_SetConfig+0xd0>)
 8002e30:	4013      	ands	r3, r2
 8002e32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	019b      	lsls	r3, r3, #6
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	621a      	str	r2, [r3, #32]
}
 8002e5a:	46c0      	nop			; (mov r8, r8)
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	b006      	add	sp, #24
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	ffffefff 	.word	0xffffefff
 8002e68:	ffff8fff 	.word	0xffff8fff
 8002e6c:	fffffcff 	.word	0xfffffcff
 8002e70:	ffffdfff 	.word	0xffffdfff
 8002e74:	40012c00 	.word	0x40012c00
 8002e78:	40014000 	.word	0x40014000
 8002e7c:	40014400 	.word	0x40014400
 8002e80:	40014800 	.word	0x40014800
 8002e84:	ffffbfff 	.word	0xffffbfff

08002e88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	4393      	bics	r3, r2
 8002ea2:	001a      	movs	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	22f0      	movs	r2, #240	; 0xf0
 8002eb2:	4393      	bics	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	220a      	movs	r2, #10
 8002ec4:	4393      	bics	r3, r2
 8002ec6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	621a      	str	r2, [r3, #32]
}
 8002edc:	46c0      	nop			; (mov r8, r8)
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	b006      	add	sp, #24
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	2210      	movs	r2, #16
 8002ef6:	4393      	bics	r3, r2
 8002ef8:	001a      	movs	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	4a0d      	ldr	r2, [pc, #52]	; (8002f44 <TIM_TI2_ConfigInputStage+0x60>)
 8002f0e:	4013      	ands	r3, r2
 8002f10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	031b      	lsls	r3, r3, #12
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	22a0      	movs	r2, #160	; 0xa0
 8002f20:	4393      	bics	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	011b      	lsls	r3, r3, #4
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	621a      	str	r2, [r3, #32]
}
 8002f3a:	46c0      	nop			; (mov r8, r8)
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	b006      	add	sp, #24
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	ffff0fff 	.word	0xffff0fff

08002f48 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2270      	movs	r2, #112	; 0x70
 8002f5c:	4393      	bics	r3, r2
 8002f5e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	2207      	movs	r2, #7
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	609a      	str	r2, [r3, #8]
}
 8002f72:	46c0      	nop			; (mov r8, r8)
 8002f74:	46bd      	mov	sp, r7
 8002f76:	b004      	add	sp, #16
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
 8002f88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	4a09      	ldr	r2, [pc, #36]	; (8002fb8 <TIM_ETR_SetConfig+0x3c>)
 8002f94:	4013      	ands	r3, r2
 8002f96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	021a      	lsls	r2, r3, #8
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	609a      	str	r2, [r3, #8]
}
 8002fb0:	46c0      	nop			; (mov r8, r8)
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	b006      	add	sp, #24
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	ffff00ff 	.word	0xffff00ff

08002fbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	221f      	movs	r2, #31
 8002fcc:	4013      	ands	r3, r2
 8002fce:	2201      	movs	r2, #1
 8002fd0:	409a      	lsls	r2, r3
 8002fd2:	0013      	movs	r3, r2
 8002fd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	43d2      	mvns	r2, r2
 8002fde:	401a      	ands	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6a1a      	ldr	r2, [r3, #32]
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	211f      	movs	r1, #31
 8002fec:	400b      	ands	r3, r1
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	4099      	lsls	r1, r3
 8002ff2:	000b      	movs	r3, r1
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	621a      	str	r2, [r3, #32]
}
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	b006      	add	sp, #24
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	223c      	movs	r2, #60	; 0x3c
 8003012:	5c9b      	ldrb	r3, [r3, r2]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d101      	bne.n	800301c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003018:	2302      	movs	r3, #2
 800301a:	e047      	b.n	80030ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	223c      	movs	r2, #60	; 0x3c
 8003020:	2101      	movs	r1, #1
 8003022:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	223d      	movs	r2, #61	; 0x3d
 8003028:	2102      	movs	r1, #2
 800302a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2270      	movs	r2, #112	; 0x70
 8003040:	4393      	bics	r3, r2
 8003042:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	4313      	orrs	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a16      	ldr	r2, [pc, #88]	; (80030b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d00f      	beq.n	8003080 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	2380      	movs	r3, #128	; 0x80
 8003066:	05db      	lsls	r3, r3, #23
 8003068:	429a      	cmp	r2, r3
 800306a:	d009      	beq.n	8003080 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a11      	ldr	r2, [pc, #68]	; (80030b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d004      	beq.n	8003080 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a10      	ldr	r2, [pc, #64]	; (80030bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d10c      	bne.n	800309a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2280      	movs	r2, #128	; 0x80
 8003084:	4393      	bics	r3, r2
 8003086:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	4313      	orrs	r3, r2
 8003090:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68ba      	ldr	r2, [r7, #8]
 8003098:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	223d      	movs	r2, #61	; 0x3d
 800309e:	2101      	movs	r1, #1
 80030a0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	223c      	movs	r2, #60	; 0x3c
 80030a6:	2100      	movs	r1, #0
 80030a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	0018      	movs	r0, r3
 80030ae:	46bd      	mov	sp, r7
 80030b0:	b004      	add	sp, #16
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40012c00 	.word	0x40012c00
 80030b8:	40000400 	.word	0x40000400
 80030bc:	40014000 	.word	0x40014000

080030c0 <__libc_init_array>:
 80030c0:	b570      	push	{r4, r5, r6, lr}
 80030c2:	2600      	movs	r6, #0
 80030c4:	4d0c      	ldr	r5, [pc, #48]	; (80030f8 <__libc_init_array+0x38>)
 80030c6:	4c0d      	ldr	r4, [pc, #52]	; (80030fc <__libc_init_array+0x3c>)
 80030c8:	1b64      	subs	r4, r4, r5
 80030ca:	10a4      	asrs	r4, r4, #2
 80030cc:	42a6      	cmp	r6, r4
 80030ce:	d109      	bne.n	80030e4 <__libc_init_array+0x24>
 80030d0:	2600      	movs	r6, #0
 80030d2:	f000 f821 	bl	8003118 <_init>
 80030d6:	4d0a      	ldr	r5, [pc, #40]	; (8003100 <__libc_init_array+0x40>)
 80030d8:	4c0a      	ldr	r4, [pc, #40]	; (8003104 <__libc_init_array+0x44>)
 80030da:	1b64      	subs	r4, r4, r5
 80030dc:	10a4      	asrs	r4, r4, #2
 80030de:	42a6      	cmp	r6, r4
 80030e0:	d105      	bne.n	80030ee <__libc_init_array+0x2e>
 80030e2:	bd70      	pop	{r4, r5, r6, pc}
 80030e4:	00b3      	lsls	r3, r6, #2
 80030e6:	58eb      	ldr	r3, [r5, r3]
 80030e8:	4798      	blx	r3
 80030ea:	3601      	adds	r6, #1
 80030ec:	e7ee      	b.n	80030cc <__libc_init_array+0xc>
 80030ee:	00b3      	lsls	r3, r6, #2
 80030f0:	58eb      	ldr	r3, [r5, r3]
 80030f2:	4798      	blx	r3
 80030f4:	3601      	adds	r6, #1
 80030f6:	e7f2      	b.n	80030de <__libc_init_array+0x1e>
 80030f8:	08003160 	.word	0x08003160
 80030fc:	08003160 	.word	0x08003160
 8003100:	08003160 	.word	0x08003160
 8003104:	08003164 	.word	0x08003164

08003108 <memset>:
 8003108:	0003      	movs	r3, r0
 800310a:	1882      	adds	r2, r0, r2
 800310c:	4293      	cmp	r3, r2
 800310e:	d100      	bne.n	8003112 <memset+0xa>
 8003110:	4770      	bx	lr
 8003112:	7019      	strb	r1, [r3, #0]
 8003114:	3301      	adds	r3, #1
 8003116:	e7f9      	b.n	800310c <memset+0x4>

08003118 <_init>:
 8003118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800311e:	bc08      	pop	{r3}
 8003120:	469e      	mov	lr, r3
 8003122:	4770      	bx	lr

08003124 <_fini>:
 8003124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800312a:	bc08      	pop	{r3}
 800312c:	469e      	mov	lr, r3
 800312e:	4770      	bx	lr
