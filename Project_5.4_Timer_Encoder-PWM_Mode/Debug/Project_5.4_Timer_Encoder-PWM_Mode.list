
Project_5.4_Timer_Encoder-PWM_Mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f90  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08004050  08004050  00014050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040dc  080040dc  000200d8  2**0
                  CONTENTS
  4 .ARM          00000000  080040dc  080040dc  000200d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040dc  080040dc  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040dc  080040dc  000140dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040e0  080040e0  000140e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  080040e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  200000d8  080041bc  000200d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  080041bc  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c803  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000193b  00000000  00000000  0002c903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  0002e240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b00  00000000  00000000  0002ede8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001917b  00000000  00000000  0002f8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d97e  00000000  00000000  00048a63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096624  00000000  00000000  000563e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eca05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002da8  00000000  00000000  000eca58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000d8 	.word	0x200000d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004038 	.word	0x08004038

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000dc 	.word	0x200000dc
 8000104:	08004038 	.word	0x08004038

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */
uint8_t start_msg[50] = {"Encoder is starting\n\r"};
uint8_t stop_msg[50] = {"Encoder is stopped\n\r"};
uint8_t status = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	0002      	movs	r2, r0
 800023c:	1dbb      	adds	r3, r7, #6
 800023e:	801a      	strh	r2, [r3, #0]

	if(GPIO_Pin == GPIO_PIN_10){                                                        // Oluşan kesmenin GPIO 10 pininden olup olmadığını kontrol ediyoruz.
 8000240:	1dbb      	adds	r3, r7, #6
 8000242:	881a      	ldrh	r2, [r3, #0]
 8000244:	2380      	movs	r3, #128	; 0x80
 8000246:	00db      	lsls	r3, r3, #3
 8000248:	429a      	cmp	r2, r3
 800024a:	d136      	bne.n	80002ba <HAL_GPIO_EXTI_Callback+0x86>

		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 800024c:	2380      	movs	r3, #128	; 0x80
 800024e:	005a      	lsls	r2, r3, #1
 8000250:	2390      	movs	r3, #144	; 0x90
 8000252:	05db      	lsls	r3, r3, #23
 8000254:	0011      	movs	r1, r2
 8000256:	0018      	movs	r0, r3
 8000258:	f000 fee5 	bl	8001026 <HAL_GPIO_TogglePin>
		switch (status){
 800025c:	4b19      	ldr	r3, [pc, #100]	; (80002c4 <HAL_GPIO_EXTI_Callback+0x90>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d002      	beq.n	800026a <HAL_GPIO_EXTI_Callback+0x36>
 8000264:	2b01      	cmp	r3, #1
 8000266:	d014      	beq.n	8000292 <HAL_GPIO_EXTI_Callback+0x5e>


		}

	}
}
 8000268:	e028      	b.n	80002bc <HAL_GPIO_EXTI_Callback+0x88>
	    	  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800026a:	4b17      	ldr	r3, [pc, #92]	; (80002c8 <HAL_GPIO_EXTI_Callback+0x94>)
 800026c:	213c      	movs	r1, #60	; 0x3c
 800026e:	0018      	movs	r0, r3
 8000270:	f001 ff92 	bl	8002198 <HAL_TIM_Encoder_Start>
	    	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000274:	4b15      	ldr	r3, [pc, #84]	; (80002cc <HAL_GPIO_EXTI_Callback+0x98>)
 8000276:	2100      	movs	r1, #0
 8000278:	0018      	movs	r0, r3
 800027a:	f001 fdb1 	bl	8001de0 <HAL_TIM_PWM_Start>
	    	  HAL_UART_Transmit(&huart2, start_msg, sizeof(start_msg), 100);
 800027e:	4914      	ldr	r1, [pc, #80]	; (80002d0 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000280:	4814      	ldr	r0, [pc, #80]	; (80002d4 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000282:	2364      	movs	r3, #100	; 0x64
 8000284:	2232      	movs	r2, #50	; 0x32
 8000286:	f002 fe49 	bl	8002f1c <HAL_UART_Transmit>
	    	  status = 1;
 800028a:	4b0e      	ldr	r3, [pc, #56]	; (80002c4 <HAL_GPIO_EXTI_Callback+0x90>)
 800028c:	2201      	movs	r2, #1
 800028e:	701a      	strb	r2, [r3, #0]
	    	  break;
 8000290:	e014      	b.n	80002bc <HAL_GPIO_EXTI_Callback+0x88>
	    	  HAL_TIM_Encoder_Stop(&htim2, TIM_CHANNEL_ALL);
 8000292:	4b0d      	ldr	r3, [pc, #52]	; (80002c8 <HAL_GPIO_EXTI_Callback+0x94>)
 8000294:	213c      	movs	r1, #60	; 0x3c
 8000296:	0018      	movs	r0, r3
 8000298:	f002 f822 	bl	80022e0 <HAL_TIM_Encoder_Stop>
			  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 800029c:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <HAL_GPIO_EXTI_Callback+0x98>)
 800029e:	2100      	movs	r1, #0
 80002a0:	0018      	movs	r0, r3
 80002a2:	f001 fe55 	bl	8001f50 <HAL_TIM_PWM_Stop>
	          HAL_UART_Transmit(&huart2, stop_msg, sizeof(stop_msg), 100);
 80002a6:	490c      	ldr	r1, [pc, #48]	; (80002d8 <HAL_GPIO_EXTI_Callback+0xa4>)
 80002a8:	480a      	ldr	r0, [pc, #40]	; (80002d4 <HAL_GPIO_EXTI_Callback+0xa0>)
 80002aa:	2364      	movs	r3, #100	; 0x64
 80002ac:	2232      	movs	r2, #50	; 0x32
 80002ae:	f002 fe35 	bl	8002f1c <HAL_UART_Transmit>
	          status=0;
 80002b2:	4b04      	ldr	r3, [pc, #16]	; (80002c4 <HAL_GPIO_EXTI_Callback+0x90>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	701a      	strb	r2, [r3, #0]
	          break;
 80002b8:	e000      	b.n	80002bc <HAL_GPIO_EXTI_Callback+0x88>
	}
 80002ba:	46c0      	nop			; (mov r8, r8)
}
 80002bc:	46c0      	nop			; (mov r8, r8)
 80002be:	46bd      	mov	sp, r7
 80002c0:	b002      	add	sp, #8
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	20000208 	.word	0x20000208
 80002c8:	200000f4 	.word	0x200000f4
 80002cc:	2000013c 	.word	0x2000013c
 80002d0:	20000000 	.word	0x20000000
 80002d4:	20000184 	.word	0x20000184
 80002d8:	20000034 	.word	0x20000034

080002dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b08e      	sub	sp, #56	; 0x38
 80002e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t msg[50] = {'\0'};
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	3304      	adds	r3, #4
 80002ea:	222e      	movs	r2, #46	; 0x2e
 80002ec:	2100      	movs	r1, #0
 80002ee:	0018      	movs	r0, r3
 80002f0:	f003 fa30 	bl	8003754 <memset>
	uint16_t LED_Duty_Cycle = 0;
 80002f4:	2336      	movs	r3, #54	; 0x36
 80002f6:	18fb      	adds	r3, r7, r3
 80002f8:	2200      	movs	r2, #0
 80002fa:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002fc:	f000 fb98 	bl	8000a30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000300:	f000 f832 	bl	8000368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000304:	f000 f994 	bl	8000630 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000308:	f000 f882 	bl	8000410 <MX_TIM2_Init>
  MX_TIM3_Init();
 800030c:	f000 f8e2 	bl	80004d4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000310:	f000 f95e 	bl	80005d0 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (status) {
 8000314:	4b10      	ldr	r3, [pc, #64]	; (8000358 <main+0x7c>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d00e      	beq.n	800033a <main+0x5e>

			sprintf(msg, "Brightness of the LED = %d\n\r", ((TIM2->CNT)) >> 1);
 800031c:	2380      	movs	r3, #128	; 0x80
 800031e:	05db      	lsls	r3, r3, #23
 8000320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000322:	085a      	lsrs	r2, r3, #1
 8000324:	490d      	ldr	r1, [pc, #52]	; (800035c <main+0x80>)
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	0018      	movs	r0, r3
 800032a:	f003 fa1b 	bl	8003764 <siprintf>
			HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 800032e:	1d39      	adds	r1, r7, #4
 8000330:	480b      	ldr	r0, [pc, #44]	; (8000360 <main+0x84>)
 8000332:	2364      	movs	r3, #100	; 0x64
 8000334:	2232      	movs	r2, #50	; 0x32
 8000336:	f002 fdf1 	bl	8002f1c <HAL_UART_Transmit>

		}
		HAL_Delay(100);
 800033a:	2064      	movs	r0, #100	; 0x64
 800033c:	f000 fbdc 	bl	8000af8 <HAL_Delay>
		LED_Duty_Cycle = ((TIM2->CNT));
 8000340:	2380      	movs	r3, #128	; 0x80
 8000342:	05db      	lsls	r3, r3, #23
 8000344:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000346:	2136      	movs	r1, #54	; 0x36
 8000348:	187b      	adds	r3, r7, r1
 800034a:	801a      	strh	r2, [r3, #0]
		TIM3->CCR1 = LED_Duty_Cycle;
 800034c:	4b05      	ldr	r3, [pc, #20]	; (8000364 <main+0x88>)
 800034e:	187a      	adds	r2, r7, r1
 8000350:	8812      	ldrh	r2, [r2, #0]
 8000352:	635a      	str	r2, [r3, #52]	; 0x34
		if (status) {
 8000354:	e7de      	b.n	8000314 <main+0x38>
 8000356:	46c0      	nop			; (mov r8, r8)
 8000358:	20000208 	.word	0x20000208
 800035c:	08004050 	.word	0x08004050
 8000360:	20000184 	.word	0x20000184
 8000364:	40000400 	.word	0x40000400

08000368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000368:	b590      	push	{r4, r7, lr}
 800036a:	b099      	sub	sp, #100	; 0x64
 800036c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800036e:	242c      	movs	r4, #44	; 0x2c
 8000370:	193b      	adds	r3, r7, r4
 8000372:	0018      	movs	r0, r3
 8000374:	2334      	movs	r3, #52	; 0x34
 8000376:	001a      	movs	r2, r3
 8000378:	2100      	movs	r1, #0
 800037a:	f003 f9eb 	bl	8003754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800037e:	231c      	movs	r3, #28
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	0018      	movs	r0, r3
 8000384:	2310      	movs	r3, #16
 8000386:	001a      	movs	r2, r3
 8000388:	2100      	movs	r1, #0
 800038a:	f003 f9e3 	bl	8003754 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800038e:	003b      	movs	r3, r7
 8000390:	0018      	movs	r0, r3
 8000392:	231c      	movs	r3, #28
 8000394:	001a      	movs	r2, r3
 8000396:	2100      	movs	r1, #0
 8000398:	f003 f9dc 	bl	8003754 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800039c:	193b      	adds	r3, r7, r4
 800039e:	2220      	movs	r2, #32
 80003a0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80003a2:	193b      	adds	r3, r7, r4
 80003a4:	2201      	movs	r2, #1
 80003a6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003a8:	193b      	adds	r3, r7, r4
 80003aa:	2200      	movs	r2, #0
 80003ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ae:	193b      	adds	r3, r7, r4
 80003b0:	0018      	movs	r0, r3
 80003b2:	f000 fe6f 	bl	8001094 <HAL_RCC_OscConfig>
 80003b6:	1e03      	subs	r3, r0, #0
 80003b8:	d001      	beq.n	80003be <SystemClock_Config+0x56>
  {
    Error_Handler();
 80003ba:	f000 f995 	bl	80006e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003be:	211c      	movs	r1, #28
 80003c0:	187b      	adds	r3, r7, r1
 80003c2:	2207      	movs	r2, #7
 80003c4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80003c6:	187b      	adds	r3, r7, r1
 80003c8:	2203      	movs	r2, #3
 80003ca:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003cc:	187b      	adds	r3, r7, r1
 80003ce:	2200      	movs	r2, #0
 80003d0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003d2:	187b      	adds	r3, r7, r1
 80003d4:	2200      	movs	r2, #0
 80003d6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003d8:	187b      	adds	r3, r7, r1
 80003da:	2101      	movs	r1, #1
 80003dc:	0018      	movs	r0, r3
 80003de:	f001 f9df 	bl	80017a0 <HAL_RCC_ClockConfig>
 80003e2:	1e03      	subs	r3, r0, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003e6:	f000 f97f 	bl	80006e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80003ea:	003b      	movs	r3, r7
 80003ec:	2202      	movs	r2, #2
 80003ee:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80003f0:	003b      	movs	r3, r7
 80003f2:	2200      	movs	r2, #0
 80003f4:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003f6:	003b      	movs	r3, r7
 80003f8:	0018      	movs	r0, r3
 80003fa:	f001 fb4b 	bl	8001a94 <HAL_RCCEx_PeriphCLKConfig>
 80003fe:	1e03      	subs	r3, r0, #0
 8000400:	d001      	beq.n	8000406 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000402:	f000 f971 	bl	80006e8 <Error_Handler>
  }
}
 8000406:	46c0      	nop			; (mov r8, r8)
 8000408:	46bd      	mov	sp, r7
 800040a:	b019      	add	sp, #100	; 0x64
 800040c:	bd90      	pop	{r4, r7, pc}
	...

08000410 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000410:	b590      	push	{r4, r7, lr}
 8000412:	b08d      	sub	sp, #52	; 0x34
 8000414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000416:	240c      	movs	r4, #12
 8000418:	193b      	adds	r3, r7, r4
 800041a:	0018      	movs	r0, r3
 800041c:	2324      	movs	r3, #36	; 0x24
 800041e:	001a      	movs	r2, r3
 8000420:	2100      	movs	r1, #0
 8000422:	f003 f997 	bl	8003754 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	0018      	movs	r0, r3
 800042a:	2308      	movs	r3, #8
 800042c:	001a      	movs	r2, r3
 800042e:	2100      	movs	r1, #0
 8000430:	f003 f990 	bl	8003754 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000434:	4b26      	ldr	r3, [pc, #152]	; (80004d0 <MX_TIM2_Init+0xc0>)
 8000436:	2280      	movs	r2, #128	; 0x80
 8000438:	05d2      	lsls	r2, r2, #23
 800043a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800043c:	4b24      	ldr	r3, [pc, #144]	; (80004d0 <MX_TIM2_Init+0xc0>)
 800043e:	2200      	movs	r2, #0
 8000440:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000442:	4b23      	ldr	r3, [pc, #140]	; (80004d0 <MX_TIM2_Init+0xc0>)
 8000444:	2220      	movs	r2, #32
 8000446:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64;
 8000448:	4b21      	ldr	r3, [pc, #132]	; (80004d0 <MX_TIM2_Init+0xc0>)
 800044a:	2240      	movs	r2, #64	; 0x40
 800044c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800044e:	4b20      	ldr	r3, [pc, #128]	; (80004d0 <MX_TIM2_Init+0xc0>)
 8000450:	2200      	movs	r2, #0
 8000452:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000454:	4b1e      	ldr	r3, [pc, #120]	; (80004d0 <MX_TIM2_Init+0xc0>)
 8000456:	2280      	movs	r2, #128	; 0x80
 8000458:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800045a:	0021      	movs	r1, r4
 800045c:	187b      	adds	r3, r7, r1
 800045e:	2203      	movs	r2, #3
 8000460:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000462:	187b      	adds	r3, r7, r1
 8000464:	2200      	movs	r2, #0
 8000466:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000468:	187b      	adds	r3, r7, r1
 800046a:	2201      	movs	r2, #1
 800046c:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800046e:	187b      	adds	r3, r7, r1
 8000470:	2200      	movs	r2, #0
 8000472:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 15;
 8000474:	187b      	adds	r3, r7, r1
 8000476:	220f      	movs	r2, #15
 8000478:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800047a:	187b      	adds	r3, r7, r1
 800047c:	2200      	movs	r2, #0
 800047e:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000480:	187b      	adds	r3, r7, r1
 8000482:	2201      	movs	r2, #1
 8000484:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000486:	187b      	adds	r3, r7, r1
 8000488:	2200      	movs	r2, #0
 800048a:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 15;
 800048c:	187b      	adds	r3, r7, r1
 800048e:	220f      	movs	r2, #15
 8000490:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000492:	187a      	adds	r2, r7, r1
 8000494:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <MX_TIM2_Init+0xc0>)
 8000496:	0011      	movs	r1, r2
 8000498:	0018      	movs	r0, r3
 800049a:	f001 fdd5 	bl	8002048 <HAL_TIM_Encoder_Init>
 800049e:	1e03      	subs	r3, r0, #0
 80004a0:	d001      	beq.n	80004a6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80004a2:	f000 f921 	bl	80006e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	2200      	movs	r2, #0
 80004b0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004b2:	1d3a      	adds	r2, r7, #4
 80004b4:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <MX_TIM2_Init+0xc0>)
 80004b6:	0011      	movs	r1, r2
 80004b8:	0018      	movs	r0, r3
 80004ba:	f002 fc7d 	bl	8002db8 <HAL_TIMEx_MasterConfigSynchronization>
 80004be:	1e03      	subs	r3, r0, #0
 80004c0:	d001      	beq.n	80004c6 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80004c2:	f000 f911 	bl	80006e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	46bd      	mov	sp, r7
 80004ca:	b00d      	add	sp, #52	; 0x34
 80004cc:	bd90      	pop	{r4, r7, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	200000f4 	.word	0x200000f4

080004d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08e      	sub	sp, #56	; 0x38
 80004d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004da:	2328      	movs	r3, #40	; 0x28
 80004dc:	18fb      	adds	r3, r7, r3
 80004de:	0018      	movs	r0, r3
 80004e0:	2310      	movs	r3, #16
 80004e2:	001a      	movs	r2, r3
 80004e4:	2100      	movs	r1, #0
 80004e6:	f003 f935 	bl	8003754 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004ea:	2320      	movs	r3, #32
 80004ec:	18fb      	adds	r3, r7, r3
 80004ee:	0018      	movs	r0, r3
 80004f0:	2308      	movs	r3, #8
 80004f2:	001a      	movs	r2, r3
 80004f4:	2100      	movs	r1, #0
 80004f6:	f003 f92d 	bl	8003754 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	0018      	movs	r0, r3
 80004fe:	231c      	movs	r3, #28
 8000500:	001a      	movs	r2, r3
 8000502:	2100      	movs	r1, #0
 8000504:	f003 f926 	bl	8003754 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000508:	4b2f      	ldr	r3, [pc, #188]	; (80005c8 <MX_TIM3_Init+0xf4>)
 800050a:	4a30      	ldr	r2, [pc, #192]	; (80005cc <MX_TIM3_Init+0xf8>)
 800050c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800050e:	4b2e      	ldr	r3, [pc, #184]	; (80005c8 <MX_TIM3_Init+0xf4>)
 8000510:	2200      	movs	r2, #0
 8000512:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000514:	4b2c      	ldr	r3, [pc, #176]	; (80005c8 <MX_TIM3_Init+0xf4>)
 8000516:	2200      	movs	r2, #0
 8000518:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64;
 800051a:	4b2b      	ldr	r3, [pc, #172]	; (80005c8 <MX_TIM3_Init+0xf4>)
 800051c:	2240      	movs	r2, #64	; 0x40
 800051e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000520:	4b29      	ldr	r3, [pc, #164]	; (80005c8 <MX_TIM3_Init+0xf4>)
 8000522:	2200      	movs	r2, #0
 8000524:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000526:	4b28      	ldr	r3, [pc, #160]	; (80005c8 <MX_TIM3_Init+0xf4>)
 8000528:	2280      	movs	r2, #128	; 0x80
 800052a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800052c:	4b26      	ldr	r3, [pc, #152]	; (80005c8 <MX_TIM3_Init+0xf4>)
 800052e:	0018      	movs	r0, r3
 8000530:	f001 fbae 	bl	8001c90 <HAL_TIM_Base_Init>
 8000534:	1e03      	subs	r3, r0, #0
 8000536:	d001      	beq.n	800053c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000538:	f000 f8d6 	bl	80006e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800053c:	2128      	movs	r1, #40	; 0x28
 800053e:	187b      	adds	r3, r7, r1
 8000540:	2280      	movs	r2, #128	; 0x80
 8000542:	0152      	lsls	r2, r2, #5
 8000544:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000546:	187a      	adds	r2, r7, r1
 8000548:	4b1f      	ldr	r3, [pc, #124]	; (80005c8 <MX_TIM3_Init+0xf4>)
 800054a:	0011      	movs	r1, r2
 800054c:	0018      	movs	r0, r3
 800054e:	f002 f825 	bl	800259c <HAL_TIM_ConfigClockSource>
 8000552:	1e03      	subs	r3, r0, #0
 8000554:	d001      	beq.n	800055a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000556:	f000 f8c7 	bl	80006e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800055a:	4b1b      	ldr	r3, [pc, #108]	; (80005c8 <MX_TIM3_Init+0xf4>)
 800055c:	0018      	movs	r0, r3
 800055e:	f001 fbe7 	bl	8001d30 <HAL_TIM_PWM_Init>
 8000562:	1e03      	subs	r3, r0, #0
 8000564:	d001      	beq.n	800056a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000566:	f000 f8bf 	bl	80006e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800056a:	2120      	movs	r1, #32
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2200      	movs	r2, #0
 8000576:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000578:	187a      	adds	r2, r7, r1
 800057a:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <MX_TIM3_Init+0xf4>)
 800057c:	0011      	movs	r1, r2
 800057e:	0018      	movs	r0, r3
 8000580:	f002 fc1a 	bl	8002db8 <HAL_TIMEx_MasterConfigSynchronization>
 8000584:	1e03      	subs	r3, r0, #0
 8000586:	d001      	beq.n	800058c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000588:	f000 f8ae 	bl	80006e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	2270      	movs	r2, #112	; 0x70
 8000590:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2200      	movs	r2, #0
 8000596:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000598:	1d3b      	adds	r3, r7, #4
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	2200      	movs	r2, #0
 80005a2:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005a4:	1d39      	adds	r1, r7, #4
 80005a6:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <MX_TIM3_Init+0xf4>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	0018      	movs	r0, r3
 80005ac:	f001 ff30 	bl	8002410 <HAL_TIM_PWM_ConfigChannel>
 80005b0:	1e03      	subs	r3, r0, #0
 80005b2:	d001      	beq.n	80005b8 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80005b4:	f000 f898 	bl	80006e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80005b8:	4b03      	ldr	r3, [pc, #12]	; (80005c8 <MX_TIM3_Init+0xf4>)
 80005ba:	0018      	movs	r0, r3
 80005bc:	f000 f926 	bl	800080c <HAL_TIM_MspPostInit>

}
 80005c0:	46c0      	nop			; (mov r8, r8)
 80005c2:	46bd      	mov	sp, r7
 80005c4:	b00e      	add	sp, #56	; 0x38
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	2000013c 	.word	0x2000013c
 80005cc:	40000400 	.word	0x40000400

080005d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005d4:	4b14      	ldr	r3, [pc, #80]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005d6:	4a15      	ldr	r2, [pc, #84]	; (800062c <MX_USART2_UART_Init+0x5c>)
 80005d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80005da:	4b13      	ldr	r3, [pc, #76]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005dc:	2296      	movs	r2, #150	; 0x96
 80005de:	0192      	lsls	r2, r2, #6
 80005e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005e2:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005f6:	220c      	movs	r2, #12
 80005f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_USART2_UART_Init+0x58>)
 8000602:	2200      	movs	r2, #0
 8000604:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <MX_USART2_UART_Init+0x58>)
 8000608:	2200      	movs	r2, #0
 800060a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_USART2_UART_Init+0x58>)
 800060e:	2200      	movs	r2, #0
 8000610:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000612:	4b05      	ldr	r3, [pc, #20]	; (8000628 <MX_USART2_UART_Init+0x58>)
 8000614:	0018      	movs	r0, r3
 8000616:	f002 fc2d 	bl	8002e74 <HAL_UART_Init>
 800061a:	1e03      	subs	r3, r0, #0
 800061c:	d001      	beq.n	8000622 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800061e:	f000 f863 	bl	80006e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000184 	.word	0x20000184
 800062c:	40004400 	.word	0x40004400

08000630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	0018      	movs	r0, r3
 800063a:	2314      	movs	r3, #20
 800063c:	001a      	movs	r2, r3
 800063e:	2100      	movs	r1, #0
 8000640:	f003 f888 	bl	8003754 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000644:	4b27      	ldr	r3, [pc, #156]	; (80006e4 <MX_GPIO_Init+0xb4>)
 8000646:	695a      	ldr	r2, [r3, #20]
 8000648:	4b26      	ldr	r3, [pc, #152]	; (80006e4 <MX_GPIO_Init+0xb4>)
 800064a:	2180      	movs	r1, #128	; 0x80
 800064c:	0289      	lsls	r1, r1, #10
 800064e:	430a      	orrs	r2, r1
 8000650:	615a      	str	r2, [r3, #20]
 8000652:	4b24      	ldr	r3, [pc, #144]	; (80006e4 <MX_GPIO_Init+0xb4>)
 8000654:	695a      	ldr	r2, [r3, #20]
 8000656:	2380      	movs	r3, #128	; 0x80
 8000658:	029b      	lsls	r3, r3, #10
 800065a:	4013      	ands	r3, r2
 800065c:	603b      	str	r3, [r7, #0]
 800065e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000660:	2380      	movs	r3, #128	; 0x80
 8000662:	0059      	lsls	r1, r3, #1
 8000664:	2390      	movs	r3, #144	; 0x90
 8000666:	05db      	lsls	r3, r3, #23
 8000668:	2200      	movs	r2, #0
 800066a:	0018      	movs	r0, r3
 800066c:	f000 fcbe 	bl	8000fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2280      	movs	r2, #128	; 0x80
 8000674:	0052      	lsls	r2, r2, #1
 8000676:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	2201      	movs	r2, #1
 800067c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068a:	1d3a      	adds	r2, r7, #4
 800068c:	2390      	movs	r3, #144	; 0x90
 800068e:	05db      	lsls	r3, r3, #23
 8000690:	0011      	movs	r1, r2
 8000692:	0018      	movs	r0, r3
 8000694:	f000 fb32 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	2280      	movs	r2, #128	; 0x80
 800069c:	00d2      	lsls	r2, r2, #3
 800069e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	2288      	movs	r2, #136	; 0x88
 80006a4:	0352      	lsls	r2, r2, #13
 80006a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	2201      	movs	r2, #1
 80006ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ae:	1d3a      	adds	r2, r7, #4
 80006b0:	2390      	movs	r3, #144	; 0x90
 80006b2:	05db      	lsls	r3, r3, #23
 80006b4:	0011      	movs	r1, r2
 80006b6:	0018      	movs	r0, r3
 80006b8:	f000 fb20 	bl	8000cfc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80006bc:	2200      	movs	r2, #0
 80006be:	2100      	movs	r1, #0
 80006c0:	2007      	movs	r0, #7
 80006c2:	f000 fae9 	bl	8000c98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80006c6:	2007      	movs	r0, #7
 80006c8:	f000 fafb 	bl	8000cc2 <HAL_NVIC_EnableIRQ>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80006cc:	2380      	movs	r3, #128	; 0x80
 80006ce:	0059      	lsls	r1, r3, #1
 80006d0:	2390      	movs	r3, #144	; 0x90
 80006d2:	05db      	lsls	r3, r3, #23
 80006d4:	2201      	movs	r2, #1
 80006d6:	0018      	movs	r0, r3
 80006d8:	f000 fc88 	bl	8000fec <HAL_GPIO_WritePin>

}
 80006dc:	46c0      	nop			; (mov r8, r8)
 80006de:	46bd      	mov	sp, r7
 80006e0:	b006      	add	sp, #24
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40021000 	.word	0x40021000

080006e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ec:	b672      	cpsid	i
}
 80006ee:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <Error_Handler+0x8>
	...

080006f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fa:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <HAL_MspInit+0x44>)
 80006fc:	699a      	ldr	r2, [r3, #24]
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <HAL_MspInit+0x44>)
 8000700:	2101      	movs	r1, #1
 8000702:	430a      	orrs	r2, r1
 8000704:	619a      	str	r2, [r3, #24]
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <HAL_MspInit+0x44>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	2201      	movs	r2, #1
 800070c:	4013      	ands	r3, r2
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <HAL_MspInit+0x44>)
 8000714:	69da      	ldr	r2, [r3, #28]
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <HAL_MspInit+0x44>)
 8000718:	2180      	movs	r1, #128	; 0x80
 800071a:	0549      	lsls	r1, r1, #21
 800071c:	430a      	orrs	r2, r1
 800071e:	61da      	str	r2, [r3, #28]
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <HAL_MspInit+0x44>)
 8000722:	69da      	ldr	r2, [r3, #28]
 8000724:	2380      	movs	r3, #128	; 0x80
 8000726:	055b      	lsls	r3, r3, #21
 8000728:	4013      	ands	r3, r2
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	46bd      	mov	sp, r7
 8000732:	b002      	add	sp, #8
 8000734:	bd80      	pop	{r7, pc}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	40021000 	.word	0x40021000

0800073c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800073c:	b590      	push	{r4, r7, lr}
 800073e:	b08b      	sub	sp, #44	; 0x2c
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000744:	2414      	movs	r4, #20
 8000746:	193b      	adds	r3, r7, r4
 8000748:	0018      	movs	r0, r3
 800074a:	2314      	movs	r3, #20
 800074c:	001a      	movs	r2, r3
 800074e:	2100      	movs	r1, #0
 8000750:	f003 f800 	bl	8003754 <memset>
  if(htim_encoder->Instance==TIM2)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	2380      	movs	r3, #128	; 0x80
 800075a:	05db      	lsls	r3, r3, #23
 800075c:	429a      	cmp	r2, r3
 800075e:	d130      	bne.n	80007c2 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000760:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <HAL_TIM_Encoder_MspInit+0x90>)
 8000762:	69da      	ldr	r2, [r3, #28]
 8000764:	4b19      	ldr	r3, [pc, #100]	; (80007cc <HAL_TIM_Encoder_MspInit+0x90>)
 8000766:	2101      	movs	r1, #1
 8000768:	430a      	orrs	r2, r1
 800076a:	61da      	str	r2, [r3, #28]
 800076c:	4b17      	ldr	r3, [pc, #92]	; (80007cc <HAL_TIM_Encoder_MspInit+0x90>)
 800076e:	69db      	ldr	r3, [r3, #28]
 8000770:	2201      	movs	r2, #1
 8000772:	4013      	ands	r3, r2
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000778:	4b14      	ldr	r3, [pc, #80]	; (80007cc <HAL_TIM_Encoder_MspInit+0x90>)
 800077a:	695a      	ldr	r2, [r3, #20]
 800077c:	4b13      	ldr	r3, [pc, #76]	; (80007cc <HAL_TIM_Encoder_MspInit+0x90>)
 800077e:	2180      	movs	r1, #128	; 0x80
 8000780:	0289      	lsls	r1, r1, #10
 8000782:	430a      	orrs	r2, r1
 8000784:	615a      	str	r2, [r3, #20]
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <HAL_TIM_Encoder_MspInit+0x90>)
 8000788:	695a      	ldr	r2, [r3, #20]
 800078a:	2380      	movs	r3, #128	; 0x80
 800078c:	029b      	lsls	r3, r3, #10
 800078e:	4013      	ands	r3, r2
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000794:	0021      	movs	r1, r4
 8000796:	187b      	adds	r3, r7, r1
 8000798:	2203      	movs	r2, #3
 800079a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079c:	187b      	adds	r3, r7, r1
 800079e:	2202      	movs	r2, #2
 80007a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80007ae:	187b      	adds	r3, r7, r1
 80007b0:	2202      	movs	r2, #2
 80007b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b4:	187a      	adds	r2, r7, r1
 80007b6:	2390      	movs	r3, #144	; 0x90
 80007b8:	05db      	lsls	r3, r3, #23
 80007ba:	0011      	movs	r1, r2
 80007bc:	0018      	movs	r0, r3
 80007be:	f000 fa9d 	bl	8000cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	46bd      	mov	sp, r7
 80007c6:	b00b      	add	sp, #44	; 0x2c
 80007c8:	bd90      	pop	{r4, r7, pc}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	40021000 	.word	0x40021000

080007d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a09      	ldr	r2, [pc, #36]	; (8000804 <HAL_TIM_Base_MspInit+0x34>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d10b      	bne.n	80007fa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <HAL_TIM_Base_MspInit+0x38>)
 80007e4:	69da      	ldr	r2, [r3, #28]
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <HAL_TIM_Base_MspInit+0x38>)
 80007e8:	2102      	movs	r1, #2
 80007ea:	430a      	orrs	r2, r1
 80007ec:	61da      	str	r2, [r3, #28]
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <HAL_TIM_Base_MspInit+0x38>)
 80007f0:	69db      	ldr	r3, [r3, #28]
 80007f2:	2202      	movs	r2, #2
 80007f4:	4013      	ands	r3, r2
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	b004      	add	sp, #16
 8000800:	bd80      	pop	{r7, pc}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	40000400 	.word	0x40000400
 8000808:	40021000 	.word	0x40021000

0800080c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b089      	sub	sp, #36	; 0x24
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	240c      	movs	r4, #12
 8000816:	193b      	adds	r3, r7, r4
 8000818:	0018      	movs	r0, r3
 800081a:	2314      	movs	r3, #20
 800081c:	001a      	movs	r2, r3
 800081e:	2100      	movs	r1, #0
 8000820:	f002 ff98 	bl	8003754 <memset>
  if(htim->Instance==TIM3)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a15      	ldr	r2, [pc, #84]	; (8000880 <HAL_TIM_MspPostInit+0x74>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d124      	bne.n	8000878 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	4b15      	ldr	r3, [pc, #84]	; (8000884 <HAL_TIM_MspPostInit+0x78>)
 8000830:	695a      	ldr	r2, [r3, #20]
 8000832:	4b14      	ldr	r3, [pc, #80]	; (8000884 <HAL_TIM_MspPostInit+0x78>)
 8000834:	2180      	movs	r1, #128	; 0x80
 8000836:	0289      	lsls	r1, r1, #10
 8000838:	430a      	orrs	r2, r1
 800083a:	615a      	str	r2, [r3, #20]
 800083c:	4b11      	ldr	r3, [pc, #68]	; (8000884 <HAL_TIM_MspPostInit+0x78>)
 800083e:	695a      	ldr	r2, [r3, #20]
 8000840:	2380      	movs	r3, #128	; 0x80
 8000842:	029b      	lsls	r3, r3, #10
 8000844:	4013      	ands	r3, r2
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800084a:	0021      	movs	r1, r4
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2240      	movs	r2, #64	; 0x40
 8000850:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2202      	movs	r2, #2
 8000856:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	187b      	adds	r3, r7, r1
 8000860:	2200      	movs	r2, #0
 8000862:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000864:	187b      	adds	r3, r7, r1
 8000866:	2201      	movs	r2, #1
 8000868:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086a:	187a      	adds	r2, r7, r1
 800086c:	2390      	movs	r3, #144	; 0x90
 800086e:	05db      	lsls	r3, r3, #23
 8000870:	0011      	movs	r1, r2
 8000872:	0018      	movs	r0, r3
 8000874:	f000 fa42 	bl	8000cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000878:	46c0      	nop			; (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	b009      	add	sp, #36	; 0x24
 800087e:	bd90      	pop	{r4, r7, pc}
 8000880:	40000400 	.word	0x40000400
 8000884:	40021000 	.word	0x40021000

08000888 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000888:	b590      	push	{r4, r7, lr}
 800088a:	b08b      	sub	sp, #44	; 0x2c
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000890:	2414      	movs	r4, #20
 8000892:	193b      	adds	r3, r7, r4
 8000894:	0018      	movs	r0, r3
 8000896:	2314      	movs	r3, #20
 8000898:	001a      	movs	r2, r3
 800089a:	2100      	movs	r1, #0
 800089c:	f002 ff5a 	bl	8003754 <memset>
  if(huart->Instance==USART2)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a1c      	ldr	r2, [pc, #112]	; (8000918 <HAL_UART_MspInit+0x90>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d132      	bne.n	8000910 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008aa:	4b1c      	ldr	r3, [pc, #112]	; (800091c <HAL_UART_MspInit+0x94>)
 80008ac:	69da      	ldr	r2, [r3, #28]
 80008ae:	4b1b      	ldr	r3, [pc, #108]	; (800091c <HAL_UART_MspInit+0x94>)
 80008b0:	2180      	movs	r1, #128	; 0x80
 80008b2:	0289      	lsls	r1, r1, #10
 80008b4:	430a      	orrs	r2, r1
 80008b6:	61da      	str	r2, [r3, #28]
 80008b8:	4b18      	ldr	r3, [pc, #96]	; (800091c <HAL_UART_MspInit+0x94>)
 80008ba:	69da      	ldr	r2, [r3, #28]
 80008bc:	2380      	movs	r3, #128	; 0x80
 80008be:	029b      	lsls	r3, r3, #10
 80008c0:	4013      	ands	r3, r2
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <HAL_UART_MspInit+0x94>)
 80008c8:	695a      	ldr	r2, [r3, #20]
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <HAL_UART_MspInit+0x94>)
 80008cc:	2180      	movs	r1, #128	; 0x80
 80008ce:	0289      	lsls	r1, r1, #10
 80008d0:	430a      	orrs	r2, r1
 80008d2:	615a      	str	r2, [r3, #20]
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <HAL_UART_MspInit+0x94>)
 80008d6:	695a      	ldr	r2, [r3, #20]
 80008d8:	2380      	movs	r3, #128	; 0x80
 80008da:	029b      	lsls	r3, r3, #10
 80008dc:	4013      	ands	r3, r2
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008e2:	0021      	movs	r1, r4
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	220c      	movs	r2, #12
 80008e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	2202      	movs	r2, #2
 80008ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008f6:	187b      	adds	r3, r7, r1
 80008f8:	2203      	movs	r2, #3
 80008fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	2201      	movs	r2, #1
 8000900:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000902:	187a      	adds	r2, r7, r1
 8000904:	2390      	movs	r3, #144	; 0x90
 8000906:	05db      	lsls	r3, r3, #23
 8000908:	0011      	movs	r1, r2
 800090a:	0018      	movs	r0, r3
 800090c:	f000 f9f6 	bl	8000cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000910:	46c0      	nop			; (mov r8, r8)
 8000912:	46bd      	mov	sp, r7
 8000914:	b00b      	add	sp, #44	; 0x2c
 8000916:	bd90      	pop	{r4, r7, pc}
 8000918:	40004400 	.word	0x40004400
 800091c:	40021000 	.word	0x40021000

08000920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <NMI_Handler+0x4>

08000926 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092a:	e7fe      	b.n	800092a <HardFault_Handler+0x4>

0800092c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000930:	46c0      	nop			; (mov r8, r8)
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000944:	f000 f8bc 	bl	8000ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000948:	46c0      	nop			; (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000952:	2380      	movs	r3, #128	; 0x80
 8000954:	00db      	lsls	r3, r3, #3
 8000956:	0018      	movs	r0, r3
 8000958:	f000 fb80 	bl	800105c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800095c:	46c0      	nop			; (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800096c:	4a14      	ldr	r2, [pc, #80]	; (80009c0 <_sbrk+0x5c>)
 800096e:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <_sbrk+0x60>)
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000978:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <_sbrk+0x64>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d102      	bne.n	8000986 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000980:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <_sbrk+0x64>)
 8000982:	4a12      	ldr	r2, [pc, #72]	; (80009cc <_sbrk+0x68>)
 8000984:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000986:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <_sbrk+0x64>)
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	18d3      	adds	r3, r2, r3
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	429a      	cmp	r2, r3
 8000992:	d207      	bcs.n	80009a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000994:	f002 feb4 	bl	8003700 <__errno>
 8000998:	0003      	movs	r3, r0
 800099a:	220c      	movs	r2, #12
 800099c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800099e:	2301      	movs	r3, #1
 80009a0:	425b      	negs	r3, r3
 80009a2:	e009      	b.n	80009b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009a4:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <_sbrk+0x64>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009aa:	4b07      	ldr	r3, [pc, #28]	; (80009c8 <_sbrk+0x64>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	18d2      	adds	r2, r2, r3
 80009b2:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <_sbrk+0x64>)
 80009b4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80009b6:	68fb      	ldr	r3, [r7, #12]
}
 80009b8:	0018      	movs	r0, r3
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b006      	add	sp, #24
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20004000 	.word	0x20004000
 80009c4:	00000400 	.word	0x00000400
 80009c8:	2000020c 	.word	0x2000020c
 80009cc:	20000228 	.word	0x20000228

080009d0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80009d4:	46c0      	nop			; (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009dc:	480d      	ldr	r0, [pc, #52]	; (8000a14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009de:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e0:	480d      	ldr	r0, [pc, #52]	; (8000a18 <LoopForever+0x6>)
  ldr r1, =_edata
 80009e2:	490e      	ldr	r1, [pc, #56]	; (8000a1c <LoopForever+0xa>)
  ldr r2, =_sidata
 80009e4:	4a0e      	ldr	r2, [pc, #56]	; (8000a20 <LoopForever+0xe>)
  movs r3, #0
 80009e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e8:	e002      	b.n	80009f0 <LoopCopyDataInit>

080009ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ee:	3304      	adds	r3, #4

080009f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f4:	d3f9      	bcc.n	80009ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009f6:	4a0b      	ldr	r2, [pc, #44]	; (8000a24 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009f8:	4c0b      	ldr	r4, [pc, #44]	; (8000a28 <LoopForever+0x16>)
  movs r3, #0
 80009fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009fc:	e001      	b.n	8000a02 <LoopFillZerobss>

080009fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a00:	3204      	adds	r2, #4

08000a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a04:	d3fb      	bcc.n	80009fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a06:	f7ff ffe3 	bl	80009d0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000a0a:	f002 fe7f 	bl	800370c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a0e:	f7ff fc65 	bl	80002dc <main>

08000a12 <LoopForever>:

LoopForever:
    b LoopForever
 8000a12:	e7fe      	b.n	8000a12 <LoopForever>
  ldr   r0, =_estack
 8000a14:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a1c:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8000a20:	080040e4 	.word	0x080040e4
  ldr r2, =_sbss
 8000a24:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8000a28:	20000224 	.word	0x20000224

08000a2c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a2c:	e7fe      	b.n	8000a2c <ADC1_COMP_IRQHandler>
	...

08000a30 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a34:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <HAL_Init+0x24>)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_Init+0x24>)
 8000a3a:	2110      	movs	r1, #16
 8000a3c:	430a      	orrs	r2, r1
 8000a3e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a40:	2003      	movs	r0, #3
 8000a42:	f000 f809 	bl	8000a58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a46:	f7ff fe55 	bl	80006f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a4a:	2300      	movs	r3, #0
}
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	40022000 	.word	0x40022000

08000a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a58:	b590      	push	{r4, r7, lr}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a60:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <HAL_InitTick+0x5c>)
 8000a62:	681c      	ldr	r4, [r3, #0]
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <HAL_InitTick+0x60>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	0019      	movs	r1, r3
 8000a6a:	23fa      	movs	r3, #250	; 0xfa
 8000a6c:	0098      	lsls	r0, r3, #2
 8000a6e:	f7ff fb55 	bl	800011c <__udivsi3>
 8000a72:	0003      	movs	r3, r0
 8000a74:	0019      	movs	r1, r3
 8000a76:	0020      	movs	r0, r4
 8000a78:	f7ff fb50 	bl	800011c <__udivsi3>
 8000a7c:	0003      	movs	r3, r0
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f000 f92f 	bl	8000ce2 <HAL_SYSTICK_Config>
 8000a84:	1e03      	subs	r3, r0, #0
 8000a86:	d001      	beq.n	8000a8c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	e00f      	b.n	8000aac <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2b03      	cmp	r3, #3
 8000a90:	d80b      	bhi.n	8000aaa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a92:	6879      	ldr	r1, [r7, #4]
 8000a94:	2301      	movs	r3, #1
 8000a96:	425b      	negs	r3, r3
 8000a98:	2200      	movs	r2, #0
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f000 f8fc 	bl	8000c98 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <HAL_InitTick+0x64>)
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	e000      	b.n	8000aac <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
}
 8000aac:	0018      	movs	r0, r3
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	b003      	add	sp, #12
 8000ab2:	bd90      	pop	{r4, r7, pc}
 8000ab4:	20000068 	.word	0x20000068
 8000ab8:	20000070 	.word	0x20000070
 8000abc:	2000006c 	.word	0x2000006c

08000ac0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac4:	4b05      	ldr	r3, [pc, #20]	; (8000adc <HAL_IncTick+0x1c>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	001a      	movs	r2, r3
 8000aca:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <HAL_IncTick+0x20>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	18d2      	adds	r2, r2, r3
 8000ad0:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <HAL_IncTick+0x20>)
 8000ad2:	601a      	str	r2, [r3, #0]
}
 8000ad4:	46c0      	nop			; (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	20000070 	.word	0x20000070
 8000ae0:	20000210 	.word	0x20000210

08000ae4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae8:	4b02      	ldr	r3, [pc, #8]	; (8000af4 <HAL_GetTick+0x10>)
 8000aea:	681b      	ldr	r3, [r3, #0]
}
 8000aec:	0018      	movs	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	20000210 	.word	0x20000210

08000af8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b00:	f7ff fff0 	bl	8000ae4 <HAL_GetTick>
 8000b04:	0003      	movs	r3, r0
 8000b06:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	d005      	beq.n	8000b1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b12:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <HAL_Delay+0x44>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	001a      	movs	r2, r3
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	189b      	adds	r3, r3, r2
 8000b1c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	f7ff ffe0 	bl	8000ae4 <HAL_GetTick>
 8000b24:	0002      	movs	r2, r0
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d8f7      	bhi.n	8000b20 <HAL_Delay+0x28>
  {
  }
}
 8000b30:	46c0      	nop			; (mov r8, r8)
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b004      	add	sp, #16
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	20000070 	.word	0x20000070

08000b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	0002      	movs	r2, r0
 8000b48:	1dfb      	adds	r3, r7, #7
 8000b4a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b4c:	1dfb      	adds	r3, r7, #7
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b7f      	cmp	r3, #127	; 0x7f
 8000b52:	d809      	bhi.n	8000b68 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b54:	1dfb      	adds	r3, r7, #7
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	001a      	movs	r2, r3
 8000b5a:	231f      	movs	r3, #31
 8000b5c:	401a      	ands	r2, r3
 8000b5e:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <__NVIC_EnableIRQ+0x30>)
 8000b60:	2101      	movs	r1, #1
 8000b62:	4091      	lsls	r1, r2
 8000b64:	000a      	movs	r2, r1
 8000b66:	601a      	str	r2, [r3, #0]
  }
}
 8000b68:	46c0      	nop			; (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	b002      	add	sp, #8
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	e000e100 	.word	0xe000e100

08000b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b74:	b590      	push	{r4, r7, lr}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	0002      	movs	r2, r0
 8000b7c:	6039      	str	r1, [r7, #0]
 8000b7e:	1dfb      	adds	r3, r7, #7
 8000b80:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b82:	1dfb      	adds	r3, r7, #7
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b7f      	cmp	r3, #127	; 0x7f
 8000b88:	d828      	bhi.n	8000bdc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b8a:	4a2f      	ldr	r2, [pc, #188]	; (8000c48 <__NVIC_SetPriority+0xd4>)
 8000b8c:	1dfb      	adds	r3, r7, #7
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	b25b      	sxtb	r3, r3
 8000b92:	089b      	lsrs	r3, r3, #2
 8000b94:	33c0      	adds	r3, #192	; 0xc0
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	589b      	ldr	r3, [r3, r2]
 8000b9a:	1dfa      	adds	r2, r7, #7
 8000b9c:	7812      	ldrb	r2, [r2, #0]
 8000b9e:	0011      	movs	r1, r2
 8000ba0:	2203      	movs	r2, #3
 8000ba2:	400a      	ands	r2, r1
 8000ba4:	00d2      	lsls	r2, r2, #3
 8000ba6:	21ff      	movs	r1, #255	; 0xff
 8000ba8:	4091      	lsls	r1, r2
 8000baa:	000a      	movs	r2, r1
 8000bac:	43d2      	mvns	r2, r2
 8000bae:	401a      	ands	r2, r3
 8000bb0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	019b      	lsls	r3, r3, #6
 8000bb6:	22ff      	movs	r2, #255	; 0xff
 8000bb8:	401a      	ands	r2, r3
 8000bba:	1dfb      	adds	r3, r7, #7
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	4003      	ands	r3, r0
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bc8:	481f      	ldr	r0, [pc, #124]	; (8000c48 <__NVIC_SetPriority+0xd4>)
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	b25b      	sxtb	r3, r3
 8000bd0:	089b      	lsrs	r3, r3, #2
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	33c0      	adds	r3, #192	; 0xc0
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bda:	e031      	b.n	8000c40 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bdc:	4a1b      	ldr	r2, [pc, #108]	; (8000c4c <__NVIC_SetPriority+0xd8>)
 8000bde:	1dfb      	adds	r3, r7, #7
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	0019      	movs	r1, r3
 8000be4:	230f      	movs	r3, #15
 8000be6:	400b      	ands	r3, r1
 8000be8:	3b08      	subs	r3, #8
 8000bea:	089b      	lsrs	r3, r3, #2
 8000bec:	3306      	adds	r3, #6
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	18d3      	adds	r3, r2, r3
 8000bf2:	3304      	adds	r3, #4
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	1dfa      	adds	r2, r7, #7
 8000bf8:	7812      	ldrb	r2, [r2, #0]
 8000bfa:	0011      	movs	r1, r2
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	400a      	ands	r2, r1
 8000c00:	00d2      	lsls	r2, r2, #3
 8000c02:	21ff      	movs	r1, #255	; 0xff
 8000c04:	4091      	lsls	r1, r2
 8000c06:	000a      	movs	r2, r1
 8000c08:	43d2      	mvns	r2, r2
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	019b      	lsls	r3, r3, #6
 8000c12:	22ff      	movs	r2, #255	; 0xff
 8000c14:	401a      	ands	r2, r3
 8000c16:	1dfb      	adds	r3, r7, #7
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	4003      	ands	r3, r0
 8000c20:	00db      	lsls	r3, r3, #3
 8000c22:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c24:	4809      	ldr	r0, [pc, #36]	; (8000c4c <__NVIC_SetPriority+0xd8>)
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	001c      	movs	r4, r3
 8000c2c:	230f      	movs	r3, #15
 8000c2e:	4023      	ands	r3, r4
 8000c30:	3b08      	subs	r3, #8
 8000c32:	089b      	lsrs	r3, r3, #2
 8000c34:	430a      	orrs	r2, r1
 8000c36:	3306      	adds	r3, #6
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	18c3      	adds	r3, r0, r3
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	601a      	str	r2, [r3, #0]
}
 8000c40:	46c0      	nop			; (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	b003      	add	sp, #12
 8000c46:	bd90      	pop	{r4, r7, pc}
 8000c48:	e000e100 	.word	0xe000e100
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	1e5a      	subs	r2, r3, #1
 8000c5c:	2380      	movs	r3, #128	; 0x80
 8000c5e:	045b      	lsls	r3, r3, #17
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d301      	bcc.n	8000c68 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c64:	2301      	movs	r3, #1
 8000c66:	e010      	b.n	8000c8a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c68:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <SysTick_Config+0x44>)
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	3a01      	subs	r2, #1
 8000c6e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c70:	2301      	movs	r3, #1
 8000c72:	425b      	negs	r3, r3
 8000c74:	2103      	movs	r1, #3
 8000c76:	0018      	movs	r0, r3
 8000c78:	f7ff ff7c 	bl	8000b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <SysTick_Config+0x44>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c82:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <SysTick_Config+0x44>)
 8000c84:	2207      	movs	r2, #7
 8000c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	b002      	add	sp, #8
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	e000e010 	.word	0xe000e010

08000c98 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60b9      	str	r1, [r7, #8]
 8000ca0:	607a      	str	r2, [r7, #4]
 8000ca2:	210f      	movs	r1, #15
 8000ca4:	187b      	adds	r3, r7, r1
 8000ca6:	1c02      	adds	r2, r0, #0
 8000ca8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	187b      	adds	r3, r7, r1
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	b25b      	sxtb	r3, r3
 8000cb2:	0011      	movs	r1, r2
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f7ff ff5d 	bl	8000b74 <__NVIC_SetPriority>
}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b004      	add	sp, #16
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	0002      	movs	r2, r0
 8000cca:	1dfb      	adds	r3, r7, #7
 8000ccc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cce:	1dfb      	adds	r3, r7, #7
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	b25b      	sxtb	r3, r3
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f7ff ff33 	bl	8000b40 <__NVIC_EnableIRQ>
}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b002      	add	sp, #8
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	0018      	movs	r0, r3
 8000cee:	f7ff ffaf 	bl	8000c50 <SysTick_Config>
 8000cf2:	0003      	movs	r3, r0
}
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	b002      	add	sp, #8
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d0a:	e155      	b.n	8000fb8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2101      	movs	r1, #1
 8000d12:	697a      	ldr	r2, [r7, #20]
 8000d14:	4091      	lsls	r1, r2
 8000d16:	000a      	movs	r2, r1
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d100      	bne.n	8000d24 <HAL_GPIO_Init+0x28>
 8000d22:	e146      	b.n	8000fb2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	2203      	movs	r2, #3
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d005      	beq.n	8000d3c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	2203      	movs	r2, #3
 8000d36:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d130      	bne.n	8000d9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	2203      	movs	r2, #3
 8000d48:	409a      	lsls	r2, r3
 8000d4a:	0013      	movs	r3, r2
 8000d4c:	43da      	mvns	r2, r3
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	4013      	ands	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	68da      	ldr	r2, [r3, #12]
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	409a      	lsls	r2, r3
 8000d5e:	0013      	movs	r3, r2
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d72:	2201      	movs	r2, #1
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	409a      	lsls	r2, r3
 8000d78:	0013      	movs	r3, r2
 8000d7a:	43da      	mvns	r2, r3
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	091b      	lsrs	r3, r3, #4
 8000d88:	2201      	movs	r2, #1
 8000d8a:	401a      	ands	r2, r3
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	409a      	lsls	r2, r3
 8000d90:	0013      	movs	r3, r2
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	2203      	movs	r2, #3
 8000da4:	4013      	ands	r3, r2
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	d017      	beq.n	8000dda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	2203      	movs	r2, #3
 8000db6:	409a      	lsls	r2, r3
 8000db8:	0013      	movs	r3, r2
 8000dba:	43da      	mvns	r2, r3
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	689a      	ldr	r2, [r3, #8]
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	409a      	lsls	r2, r3
 8000dcc:	0013      	movs	r3, r2
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	2203      	movs	r2, #3
 8000de0:	4013      	ands	r3, r2
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d123      	bne.n	8000e2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	08da      	lsrs	r2, r3, #3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	3208      	adds	r2, #8
 8000dee:	0092      	lsls	r2, r2, #2
 8000df0:	58d3      	ldr	r3, [r2, r3]
 8000df2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	2207      	movs	r2, #7
 8000df8:	4013      	ands	r3, r2
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	220f      	movs	r2, #15
 8000dfe:	409a      	lsls	r2, r3
 8000e00:	0013      	movs	r3, r2
 8000e02:	43da      	mvns	r2, r3
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	4013      	ands	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	691a      	ldr	r2, [r3, #16]
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	2107      	movs	r1, #7
 8000e12:	400b      	ands	r3, r1
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	409a      	lsls	r2, r3
 8000e18:	0013      	movs	r3, r2
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	08da      	lsrs	r2, r3, #3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3208      	adds	r2, #8
 8000e28:	0092      	lsls	r2, r2, #2
 8000e2a:	6939      	ldr	r1, [r7, #16]
 8000e2c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	2203      	movs	r2, #3
 8000e3a:	409a      	lsls	r2, r3
 8000e3c:	0013      	movs	r3, r2
 8000e3e:	43da      	mvns	r2, r3
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	4013      	ands	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	401a      	ands	r2, r3
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	409a      	lsls	r2, r3
 8000e54:	0013      	movs	r3, r2
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685a      	ldr	r2, [r3, #4]
 8000e66:	23c0      	movs	r3, #192	; 0xc0
 8000e68:	029b      	lsls	r3, r3, #10
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	d100      	bne.n	8000e70 <HAL_GPIO_Init+0x174>
 8000e6e:	e0a0      	b.n	8000fb2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e70:	4b57      	ldr	r3, [pc, #348]	; (8000fd0 <HAL_GPIO_Init+0x2d4>)
 8000e72:	699a      	ldr	r2, [r3, #24]
 8000e74:	4b56      	ldr	r3, [pc, #344]	; (8000fd0 <HAL_GPIO_Init+0x2d4>)
 8000e76:	2101      	movs	r1, #1
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	619a      	str	r2, [r3, #24]
 8000e7c:	4b54      	ldr	r3, [pc, #336]	; (8000fd0 <HAL_GPIO_Init+0x2d4>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	2201      	movs	r2, #1
 8000e82:	4013      	ands	r3, r2
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e88:	4a52      	ldr	r2, [pc, #328]	; (8000fd4 <HAL_GPIO_Init+0x2d8>)
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	089b      	lsrs	r3, r3, #2
 8000e8e:	3302      	adds	r3, #2
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	589b      	ldr	r3, [r3, r2]
 8000e94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	2203      	movs	r2, #3
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	220f      	movs	r2, #15
 8000ea0:	409a      	lsls	r2, r3
 8000ea2:	0013      	movs	r3, r2
 8000ea4:	43da      	mvns	r2, r3
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	2390      	movs	r3, #144	; 0x90
 8000eb0:	05db      	lsls	r3, r3, #23
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d019      	beq.n	8000eea <HAL_GPIO_Init+0x1ee>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a47      	ldr	r2, [pc, #284]	; (8000fd8 <HAL_GPIO_Init+0x2dc>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d013      	beq.n	8000ee6 <HAL_GPIO_Init+0x1ea>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a46      	ldr	r2, [pc, #280]	; (8000fdc <HAL_GPIO_Init+0x2e0>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d00d      	beq.n	8000ee2 <HAL_GPIO_Init+0x1e6>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a45      	ldr	r2, [pc, #276]	; (8000fe0 <HAL_GPIO_Init+0x2e4>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d007      	beq.n	8000ede <HAL_GPIO_Init+0x1e2>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a44      	ldr	r2, [pc, #272]	; (8000fe4 <HAL_GPIO_Init+0x2e8>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d101      	bne.n	8000eda <HAL_GPIO_Init+0x1de>
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	e008      	b.n	8000eec <HAL_GPIO_Init+0x1f0>
 8000eda:	2305      	movs	r3, #5
 8000edc:	e006      	b.n	8000eec <HAL_GPIO_Init+0x1f0>
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e004      	b.n	8000eec <HAL_GPIO_Init+0x1f0>
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	e002      	b.n	8000eec <HAL_GPIO_Init+0x1f0>
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e000      	b.n	8000eec <HAL_GPIO_Init+0x1f0>
 8000eea:	2300      	movs	r3, #0
 8000eec:	697a      	ldr	r2, [r7, #20]
 8000eee:	2103      	movs	r1, #3
 8000ef0:	400a      	ands	r2, r1
 8000ef2:	0092      	lsls	r2, r2, #2
 8000ef4:	4093      	lsls	r3, r2
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000efc:	4935      	ldr	r1, [pc, #212]	; (8000fd4 <HAL_GPIO_Init+0x2d8>)
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	089b      	lsrs	r3, r3, #2
 8000f02:	3302      	adds	r3, #2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f0a:	4b37      	ldr	r3, [pc, #220]	; (8000fe8 <HAL_GPIO_Init+0x2ec>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	43da      	mvns	r2, r3
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	4013      	ands	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685a      	ldr	r2, [r3, #4]
 8000f1e:	2380      	movs	r3, #128	; 0x80
 8000f20:	025b      	lsls	r3, r3, #9
 8000f22:	4013      	ands	r3, r2
 8000f24:	d003      	beq.n	8000f2e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f2e:	4b2e      	ldr	r3, [pc, #184]	; (8000fe8 <HAL_GPIO_Init+0x2ec>)
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000f34:	4b2c      	ldr	r3, [pc, #176]	; (8000fe8 <HAL_GPIO_Init+0x2ec>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	43da      	mvns	r2, r3
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	4013      	ands	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685a      	ldr	r2, [r3, #4]
 8000f48:	2380      	movs	r3, #128	; 0x80
 8000f4a:	029b      	lsls	r3, r3, #10
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	d003      	beq.n	8000f58 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f58:	4b23      	ldr	r3, [pc, #140]	; (8000fe8 <HAL_GPIO_Init+0x2ec>)
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f5e:	4b22      	ldr	r3, [pc, #136]	; (8000fe8 <HAL_GPIO_Init+0x2ec>)
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	43da      	mvns	r2, r3
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685a      	ldr	r2, [r3, #4]
 8000f72:	2380      	movs	r3, #128	; 0x80
 8000f74:	035b      	lsls	r3, r3, #13
 8000f76:	4013      	ands	r3, r2
 8000f78:	d003      	beq.n	8000f82 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f82:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <HAL_GPIO_Init+0x2ec>)
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f88:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <HAL_GPIO_Init+0x2ec>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	43da      	mvns	r2, r3
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685a      	ldr	r2, [r3, #4]
 8000f9c:	2380      	movs	r3, #128	; 0x80
 8000f9e:	039b      	lsls	r3, r3, #14
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	d003      	beq.n	8000fac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fac:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <HAL_GPIO_Init+0x2ec>)
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	40da      	lsrs	r2, r3
 8000fc0:	1e13      	subs	r3, r2, #0
 8000fc2:	d000      	beq.n	8000fc6 <HAL_GPIO_Init+0x2ca>
 8000fc4:	e6a2      	b.n	8000d0c <HAL_GPIO_Init+0x10>
  } 
}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	46c0      	nop			; (mov r8, r8)
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	b006      	add	sp, #24
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40010000 	.word	0x40010000
 8000fd8:	48000400 	.word	0x48000400
 8000fdc:	48000800 	.word	0x48000800
 8000fe0:	48000c00 	.word	0x48000c00
 8000fe4:	48001000 	.word	0x48001000
 8000fe8:	40010400 	.word	0x40010400

08000fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	0008      	movs	r0, r1
 8000ff6:	0011      	movs	r1, r2
 8000ff8:	1cbb      	adds	r3, r7, #2
 8000ffa:	1c02      	adds	r2, r0, #0
 8000ffc:	801a      	strh	r2, [r3, #0]
 8000ffe:	1c7b      	adds	r3, r7, #1
 8001000:	1c0a      	adds	r2, r1, #0
 8001002:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001004:	1c7b      	adds	r3, r7, #1
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d004      	beq.n	8001016 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800100c:	1cbb      	adds	r3, r7, #2
 800100e:	881a      	ldrh	r2, [r3, #0]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001014:	e003      	b.n	800101e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001016:	1cbb      	adds	r3, r7, #2
 8001018:	881a      	ldrh	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	46bd      	mov	sp, r7
 8001022:	b002      	add	sp, #8
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b084      	sub	sp, #16
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	000a      	movs	r2, r1
 8001030:	1cbb      	adds	r3, r7, #2
 8001032:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	695b      	ldr	r3, [r3, #20]
 8001038:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800103a:	1cbb      	adds	r3, r7, #2
 800103c:	881b      	ldrh	r3, [r3, #0]
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	4013      	ands	r3, r2
 8001042:	041a      	lsls	r2, r3, #16
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	43db      	mvns	r3, r3
 8001048:	1cb9      	adds	r1, r7, #2
 800104a:	8809      	ldrh	r1, [r1, #0]
 800104c:	400b      	ands	r3, r1
 800104e:	431a      	orrs	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	619a      	str	r2, [r3, #24]
}
 8001054:	46c0      	nop			; (mov r8, r8)
 8001056:	46bd      	mov	sp, r7
 8001058:	b004      	add	sp, #16
 800105a:	bd80      	pop	{r7, pc}

0800105c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	0002      	movs	r2, r0
 8001064:	1dbb      	adds	r3, r7, #6
 8001066:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001068:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	1dba      	adds	r2, r7, #6
 800106e:	8812      	ldrh	r2, [r2, #0]
 8001070:	4013      	ands	r3, r2
 8001072:	d008      	beq.n	8001086 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001076:	1dba      	adds	r2, r7, #6
 8001078:	8812      	ldrh	r2, [r2, #0]
 800107a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800107c:	1dbb      	adds	r3, r7, #6
 800107e:	881b      	ldrh	r3, [r3, #0]
 8001080:	0018      	movs	r0, r3
 8001082:	f7ff f8d7 	bl	8000234 <HAL_GPIO_EXTI_Callback>
  }
}
 8001086:	46c0      	nop			; (mov r8, r8)
 8001088:	46bd      	mov	sp, r7
 800108a:	b002      	add	sp, #8
 800108c:	bd80      	pop	{r7, pc}
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	40010400 	.word	0x40010400

08001094 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d102      	bne.n	80010a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	f000 fb76 	bl	8001794 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2201      	movs	r2, #1
 80010ae:	4013      	ands	r3, r2
 80010b0:	d100      	bne.n	80010b4 <HAL_RCC_OscConfig+0x20>
 80010b2:	e08e      	b.n	80011d2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010b4:	4bc5      	ldr	r3, [pc, #788]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	220c      	movs	r2, #12
 80010ba:	4013      	ands	r3, r2
 80010bc:	2b04      	cmp	r3, #4
 80010be:	d00e      	beq.n	80010de <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010c0:	4bc2      	ldr	r3, [pc, #776]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	220c      	movs	r2, #12
 80010c6:	4013      	ands	r3, r2
 80010c8:	2b08      	cmp	r3, #8
 80010ca:	d117      	bne.n	80010fc <HAL_RCC_OscConfig+0x68>
 80010cc:	4bbf      	ldr	r3, [pc, #764]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 80010ce:	685a      	ldr	r2, [r3, #4]
 80010d0:	23c0      	movs	r3, #192	; 0xc0
 80010d2:	025b      	lsls	r3, r3, #9
 80010d4:	401a      	ands	r2, r3
 80010d6:	2380      	movs	r3, #128	; 0x80
 80010d8:	025b      	lsls	r3, r3, #9
 80010da:	429a      	cmp	r2, r3
 80010dc:	d10e      	bne.n	80010fc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010de:	4bbb      	ldr	r3, [pc, #748]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	2380      	movs	r3, #128	; 0x80
 80010e4:	029b      	lsls	r3, r3, #10
 80010e6:	4013      	ands	r3, r2
 80010e8:	d100      	bne.n	80010ec <HAL_RCC_OscConfig+0x58>
 80010ea:	e071      	b.n	80011d0 <HAL_RCC_OscConfig+0x13c>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d000      	beq.n	80010f6 <HAL_RCC_OscConfig+0x62>
 80010f4:	e06c      	b.n	80011d0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	f000 fb4c 	bl	8001794 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d107      	bne.n	8001114 <HAL_RCC_OscConfig+0x80>
 8001104:	4bb1      	ldr	r3, [pc, #708]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4bb0      	ldr	r3, [pc, #704]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 800110a:	2180      	movs	r1, #128	; 0x80
 800110c:	0249      	lsls	r1, r1, #9
 800110e:	430a      	orrs	r2, r1
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	e02f      	b.n	8001174 <HAL_RCC_OscConfig+0xe0>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d10c      	bne.n	8001136 <HAL_RCC_OscConfig+0xa2>
 800111c:	4bab      	ldr	r3, [pc, #684]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4baa      	ldr	r3, [pc, #680]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001122:	49ab      	ldr	r1, [pc, #684]	; (80013d0 <HAL_RCC_OscConfig+0x33c>)
 8001124:	400a      	ands	r2, r1
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	4ba8      	ldr	r3, [pc, #672]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4ba7      	ldr	r3, [pc, #668]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 800112e:	49a9      	ldr	r1, [pc, #676]	; (80013d4 <HAL_RCC_OscConfig+0x340>)
 8001130:	400a      	ands	r2, r1
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	e01e      	b.n	8001174 <HAL_RCC_OscConfig+0xe0>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2b05      	cmp	r3, #5
 800113c:	d10e      	bne.n	800115c <HAL_RCC_OscConfig+0xc8>
 800113e:	4ba3      	ldr	r3, [pc, #652]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	4ba2      	ldr	r3, [pc, #648]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001144:	2180      	movs	r1, #128	; 0x80
 8001146:	02c9      	lsls	r1, r1, #11
 8001148:	430a      	orrs	r2, r1
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	4b9f      	ldr	r3, [pc, #636]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b9e      	ldr	r3, [pc, #632]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001152:	2180      	movs	r1, #128	; 0x80
 8001154:	0249      	lsls	r1, r1, #9
 8001156:	430a      	orrs	r2, r1
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	e00b      	b.n	8001174 <HAL_RCC_OscConfig+0xe0>
 800115c:	4b9b      	ldr	r3, [pc, #620]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b9a      	ldr	r3, [pc, #616]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001162:	499b      	ldr	r1, [pc, #620]	; (80013d0 <HAL_RCC_OscConfig+0x33c>)
 8001164:	400a      	ands	r2, r1
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	4b98      	ldr	r3, [pc, #608]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4b97      	ldr	r3, [pc, #604]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 800116e:	4999      	ldr	r1, [pc, #612]	; (80013d4 <HAL_RCC_OscConfig+0x340>)
 8001170:	400a      	ands	r2, r1
 8001172:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d014      	beq.n	80011a6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117c:	f7ff fcb2 	bl	8000ae4 <HAL_GetTick>
 8001180:	0003      	movs	r3, r0
 8001182:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001184:	e008      	b.n	8001198 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001186:	f7ff fcad 	bl	8000ae4 <HAL_GetTick>
 800118a:	0002      	movs	r2, r0
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b64      	cmp	r3, #100	; 0x64
 8001192:	d901      	bls.n	8001198 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e2fd      	b.n	8001794 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001198:	4b8c      	ldr	r3, [pc, #560]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	2380      	movs	r3, #128	; 0x80
 800119e:	029b      	lsls	r3, r3, #10
 80011a0:	4013      	ands	r3, r2
 80011a2:	d0f0      	beq.n	8001186 <HAL_RCC_OscConfig+0xf2>
 80011a4:	e015      	b.n	80011d2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a6:	f7ff fc9d 	bl	8000ae4 <HAL_GetTick>
 80011aa:	0003      	movs	r3, r0
 80011ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011b0:	f7ff fc98 	bl	8000ae4 <HAL_GetTick>
 80011b4:	0002      	movs	r2, r0
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b64      	cmp	r3, #100	; 0x64
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e2e8      	b.n	8001794 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011c2:	4b82      	ldr	r3, [pc, #520]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	2380      	movs	r3, #128	; 0x80
 80011c8:	029b      	lsls	r3, r3, #10
 80011ca:	4013      	ands	r3, r2
 80011cc:	d1f0      	bne.n	80011b0 <HAL_RCC_OscConfig+0x11c>
 80011ce:	e000      	b.n	80011d2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2202      	movs	r2, #2
 80011d8:	4013      	ands	r3, r2
 80011da:	d100      	bne.n	80011de <HAL_RCC_OscConfig+0x14a>
 80011dc:	e06c      	b.n	80012b8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011de:	4b7b      	ldr	r3, [pc, #492]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	220c      	movs	r2, #12
 80011e4:	4013      	ands	r3, r2
 80011e6:	d00e      	beq.n	8001206 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011e8:	4b78      	ldr	r3, [pc, #480]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	220c      	movs	r2, #12
 80011ee:	4013      	ands	r3, r2
 80011f0:	2b08      	cmp	r3, #8
 80011f2:	d11f      	bne.n	8001234 <HAL_RCC_OscConfig+0x1a0>
 80011f4:	4b75      	ldr	r3, [pc, #468]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	23c0      	movs	r3, #192	; 0xc0
 80011fa:	025b      	lsls	r3, r3, #9
 80011fc:	401a      	ands	r2, r3
 80011fe:	2380      	movs	r3, #128	; 0x80
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	429a      	cmp	r2, r3
 8001204:	d116      	bne.n	8001234 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001206:	4b71      	ldr	r3, [pc, #452]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2202      	movs	r2, #2
 800120c:	4013      	ands	r3, r2
 800120e:	d005      	beq.n	800121c <HAL_RCC_OscConfig+0x188>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d001      	beq.n	800121c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e2bb      	b.n	8001794 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800121c:	4b6b      	ldr	r3, [pc, #428]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	22f8      	movs	r2, #248	; 0xf8
 8001222:	4393      	bics	r3, r2
 8001224:	0019      	movs	r1, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	00da      	lsls	r2, r3, #3
 800122c:	4b67      	ldr	r3, [pc, #412]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 800122e:	430a      	orrs	r2, r1
 8001230:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001232:	e041      	b.n	80012b8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d024      	beq.n	8001286 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800123c:	4b63      	ldr	r3, [pc, #396]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b62      	ldr	r3, [pc, #392]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001242:	2101      	movs	r1, #1
 8001244:	430a      	orrs	r2, r1
 8001246:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001248:	f7ff fc4c 	bl	8000ae4 <HAL_GetTick>
 800124c:	0003      	movs	r3, r0
 800124e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001250:	e008      	b.n	8001264 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001252:	f7ff fc47 	bl	8000ae4 <HAL_GetTick>
 8001256:	0002      	movs	r2, r0
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b02      	cmp	r3, #2
 800125e:	d901      	bls.n	8001264 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e297      	b.n	8001794 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001264:	4b59      	ldr	r3, [pc, #356]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2202      	movs	r2, #2
 800126a:	4013      	ands	r3, r2
 800126c:	d0f1      	beq.n	8001252 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800126e:	4b57      	ldr	r3, [pc, #348]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	22f8      	movs	r2, #248	; 0xf8
 8001274:	4393      	bics	r3, r2
 8001276:	0019      	movs	r1, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	691b      	ldr	r3, [r3, #16]
 800127c:	00da      	lsls	r2, r3, #3
 800127e:	4b53      	ldr	r3, [pc, #332]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001280:	430a      	orrs	r2, r1
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	e018      	b.n	80012b8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001286:	4b51      	ldr	r3, [pc, #324]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	4b50      	ldr	r3, [pc, #320]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 800128c:	2101      	movs	r1, #1
 800128e:	438a      	bics	r2, r1
 8001290:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001292:	f7ff fc27 	bl	8000ae4 <HAL_GetTick>
 8001296:	0003      	movs	r3, r0
 8001298:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800129c:	f7ff fc22 	bl	8000ae4 <HAL_GetTick>
 80012a0:	0002      	movs	r2, r0
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e272      	b.n	8001794 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ae:	4b47      	ldr	r3, [pc, #284]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2202      	movs	r2, #2
 80012b4:	4013      	ands	r3, r2
 80012b6:	d1f1      	bne.n	800129c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2208      	movs	r2, #8
 80012be:	4013      	ands	r3, r2
 80012c0:	d036      	beq.n	8001330 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d019      	beq.n	80012fe <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ca:	4b40      	ldr	r3, [pc, #256]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 80012cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012ce:	4b3f      	ldr	r3, [pc, #252]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 80012d0:	2101      	movs	r1, #1
 80012d2:	430a      	orrs	r2, r1
 80012d4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d6:	f7ff fc05 	bl	8000ae4 <HAL_GetTick>
 80012da:	0003      	movs	r3, r0
 80012dc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012e0:	f7ff fc00 	bl	8000ae4 <HAL_GetTick>
 80012e4:	0002      	movs	r2, r0
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e250      	b.n	8001794 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012f2:	4b36      	ldr	r3, [pc, #216]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 80012f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f6:	2202      	movs	r2, #2
 80012f8:	4013      	ands	r3, r2
 80012fa:	d0f1      	beq.n	80012e0 <HAL_RCC_OscConfig+0x24c>
 80012fc:	e018      	b.n	8001330 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012fe:	4b33      	ldr	r3, [pc, #204]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001300:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001302:	4b32      	ldr	r3, [pc, #200]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001304:	2101      	movs	r1, #1
 8001306:	438a      	bics	r2, r1
 8001308:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800130a:	f7ff fbeb 	bl	8000ae4 <HAL_GetTick>
 800130e:	0003      	movs	r3, r0
 8001310:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001314:	f7ff fbe6 	bl	8000ae4 <HAL_GetTick>
 8001318:	0002      	movs	r2, r0
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e236      	b.n	8001794 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001326:	4b29      	ldr	r3, [pc, #164]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132a:	2202      	movs	r2, #2
 800132c:	4013      	ands	r3, r2
 800132e:	d1f1      	bne.n	8001314 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2204      	movs	r2, #4
 8001336:	4013      	ands	r3, r2
 8001338:	d100      	bne.n	800133c <HAL_RCC_OscConfig+0x2a8>
 800133a:	e0b5      	b.n	80014a8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800133c:	201f      	movs	r0, #31
 800133e:	183b      	adds	r3, r7, r0
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001344:	4b21      	ldr	r3, [pc, #132]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001346:	69da      	ldr	r2, [r3, #28]
 8001348:	2380      	movs	r3, #128	; 0x80
 800134a:	055b      	lsls	r3, r3, #21
 800134c:	4013      	ands	r3, r2
 800134e:	d110      	bne.n	8001372 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001350:	4b1e      	ldr	r3, [pc, #120]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001352:	69da      	ldr	r2, [r3, #28]
 8001354:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001356:	2180      	movs	r1, #128	; 0x80
 8001358:	0549      	lsls	r1, r1, #21
 800135a:	430a      	orrs	r2, r1
 800135c:	61da      	str	r2, [r3, #28]
 800135e:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 8001360:	69da      	ldr	r2, [r3, #28]
 8001362:	2380      	movs	r3, #128	; 0x80
 8001364:	055b      	lsls	r3, r3, #21
 8001366:	4013      	ands	r3, r2
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800136c:	183b      	adds	r3, r7, r0
 800136e:	2201      	movs	r2, #1
 8001370:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001372:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <HAL_RCC_OscConfig+0x344>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	2380      	movs	r3, #128	; 0x80
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	4013      	ands	r3, r2
 800137c:	d11a      	bne.n	80013b4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800137e:	4b16      	ldr	r3, [pc, #88]	; (80013d8 <HAL_RCC_OscConfig+0x344>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <HAL_RCC_OscConfig+0x344>)
 8001384:	2180      	movs	r1, #128	; 0x80
 8001386:	0049      	lsls	r1, r1, #1
 8001388:	430a      	orrs	r2, r1
 800138a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800138c:	f7ff fbaa 	bl	8000ae4 <HAL_GetTick>
 8001390:	0003      	movs	r3, r0
 8001392:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001394:	e008      	b.n	80013a8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001396:	f7ff fba5 	bl	8000ae4 <HAL_GetTick>
 800139a:	0002      	movs	r2, r0
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b64      	cmp	r3, #100	; 0x64
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e1f5      	b.n	8001794 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <HAL_RCC_OscConfig+0x344>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	2380      	movs	r3, #128	; 0x80
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	4013      	ands	r3, r2
 80013b2:	d0f0      	beq.n	8001396 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d10f      	bne.n	80013dc <HAL_RCC_OscConfig+0x348>
 80013bc:	4b03      	ldr	r3, [pc, #12]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 80013be:	6a1a      	ldr	r2, [r3, #32]
 80013c0:	4b02      	ldr	r3, [pc, #8]	; (80013cc <HAL_RCC_OscConfig+0x338>)
 80013c2:	2101      	movs	r1, #1
 80013c4:	430a      	orrs	r2, r1
 80013c6:	621a      	str	r2, [r3, #32]
 80013c8:	e036      	b.n	8001438 <HAL_RCC_OscConfig+0x3a4>
 80013ca:	46c0      	nop			; (mov r8, r8)
 80013cc:	40021000 	.word	0x40021000
 80013d0:	fffeffff 	.word	0xfffeffff
 80013d4:	fffbffff 	.word	0xfffbffff
 80013d8:	40007000 	.word	0x40007000
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d10c      	bne.n	80013fe <HAL_RCC_OscConfig+0x36a>
 80013e4:	4bca      	ldr	r3, [pc, #808]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 80013e6:	6a1a      	ldr	r2, [r3, #32]
 80013e8:	4bc9      	ldr	r3, [pc, #804]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 80013ea:	2101      	movs	r1, #1
 80013ec:	438a      	bics	r2, r1
 80013ee:	621a      	str	r2, [r3, #32]
 80013f0:	4bc7      	ldr	r3, [pc, #796]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 80013f2:	6a1a      	ldr	r2, [r3, #32]
 80013f4:	4bc6      	ldr	r3, [pc, #792]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 80013f6:	2104      	movs	r1, #4
 80013f8:	438a      	bics	r2, r1
 80013fa:	621a      	str	r2, [r3, #32]
 80013fc:	e01c      	b.n	8001438 <HAL_RCC_OscConfig+0x3a4>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	2b05      	cmp	r3, #5
 8001404:	d10c      	bne.n	8001420 <HAL_RCC_OscConfig+0x38c>
 8001406:	4bc2      	ldr	r3, [pc, #776]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 8001408:	6a1a      	ldr	r2, [r3, #32]
 800140a:	4bc1      	ldr	r3, [pc, #772]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 800140c:	2104      	movs	r1, #4
 800140e:	430a      	orrs	r2, r1
 8001410:	621a      	str	r2, [r3, #32]
 8001412:	4bbf      	ldr	r3, [pc, #764]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 8001414:	6a1a      	ldr	r2, [r3, #32]
 8001416:	4bbe      	ldr	r3, [pc, #760]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 8001418:	2101      	movs	r1, #1
 800141a:	430a      	orrs	r2, r1
 800141c:	621a      	str	r2, [r3, #32]
 800141e:	e00b      	b.n	8001438 <HAL_RCC_OscConfig+0x3a4>
 8001420:	4bbb      	ldr	r3, [pc, #748]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 8001422:	6a1a      	ldr	r2, [r3, #32]
 8001424:	4bba      	ldr	r3, [pc, #744]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 8001426:	2101      	movs	r1, #1
 8001428:	438a      	bics	r2, r1
 800142a:	621a      	str	r2, [r3, #32]
 800142c:	4bb8      	ldr	r3, [pc, #736]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 800142e:	6a1a      	ldr	r2, [r3, #32]
 8001430:	4bb7      	ldr	r3, [pc, #732]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 8001432:	2104      	movs	r1, #4
 8001434:	438a      	bics	r2, r1
 8001436:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d014      	beq.n	800146a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001440:	f7ff fb50 	bl	8000ae4 <HAL_GetTick>
 8001444:	0003      	movs	r3, r0
 8001446:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001448:	e009      	b.n	800145e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800144a:	f7ff fb4b 	bl	8000ae4 <HAL_GetTick>
 800144e:	0002      	movs	r2, r0
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	4aaf      	ldr	r2, [pc, #700]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e19a      	b.n	8001794 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800145e:	4bac      	ldr	r3, [pc, #688]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	2202      	movs	r2, #2
 8001464:	4013      	ands	r3, r2
 8001466:	d0f0      	beq.n	800144a <HAL_RCC_OscConfig+0x3b6>
 8001468:	e013      	b.n	8001492 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146a:	f7ff fb3b 	bl	8000ae4 <HAL_GetTick>
 800146e:	0003      	movs	r3, r0
 8001470:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001472:	e009      	b.n	8001488 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001474:	f7ff fb36 	bl	8000ae4 <HAL_GetTick>
 8001478:	0002      	movs	r2, r0
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	4aa5      	ldr	r2, [pc, #660]	; (8001714 <HAL_RCC_OscConfig+0x680>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e185      	b.n	8001794 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001488:	4ba1      	ldr	r3, [pc, #644]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	2202      	movs	r2, #2
 800148e:	4013      	ands	r3, r2
 8001490:	d1f0      	bne.n	8001474 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001492:	231f      	movs	r3, #31
 8001494:	18fb      	adds	r3, r7, r3
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d105      	bne.n	80014a8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800149c:	4b9c      	ldr	r3, [pc, #624]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 800149e:	69da      	ldr	r2, [r3, #28]
 80014a0:	4b9b      	ldr	r3, [pc, #620]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 80014a2:	499d      	ldr	r1, [pc, #628]	; (8001718 <HAL_RCC_OscConfig+0x684>)
 80014a4:	400a      	ands	r2, r1
 80014a6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2210      	movs	r2, #16
 80014ae:	4013      	ands	r3, r2
 80014b0:	d063      	beq.n	800157a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d12a      	bne.n	8001510 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80014ba:	4b95      	ldr	r3, [pc, #596]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 80014bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014be:	4b94      	ldr	r3, [pc, #592]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 80014c0:	2104      	movs	r1, #4
 80014c2:	430a      	orrs	r2, r1
 80014c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80014c6:	4b92      	ldr	r3, [pc, #584]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 80014c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014ca:	4b91      	ldr	r3, [pc, #580]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 80014cc:	2101      	movs	r1, #1
 80014ce:	430a      	orrs	r2, r1
 80014d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d2:	f7ff fb07 	bl	8000ae4 <HAL_GetTick>
 80014d6:	0003      	movs	r3, r0
 80014d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80014dc:	f7ff fb02 	bl	8000ae4 <HAL_GetTick>
 80014e0:	0002      	movs	r2, r0
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e152      	b.n	8001794 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80014ee:	4b88      	ldr	r3, [pc, #544]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 80014f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014f2:	2202      	movs	r2, #2
 80014f4:	4013      	ands	r3, r2
 80014f6:	d0f1      	beq.n	80014dc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80014f8:	4b85      	ldr	r3, [pc, #532]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 80014fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014fc:	22f8      	movs	r2, #248	; 0xf8
 80014fe:	4393      	bics	r3, r2
 8001500:	0019      	movs	r1, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	00da      	lsls	r2, r3, #3
 8001508:	4b81      	ldr	r3, [pc, #516]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 800150a:	430a      	orrs	r2, r1
 800150c:	635a      	str	r2, [r3, #52]	; 0x34
 800150e:	e034      	b.n	800157a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	695b      	ldr	r3, [r3, #20]
 8001514:	3305      	adds	r3, #5
 8001516:	d111      	bne.n	800153c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001518:	4b7d      	ldr	r3, [pc, #500]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 800151a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800151c:	4b7c      	ldr	r3, [pc, #496]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 800151e:	2104      	movs	r1, #4
 8001520:	438a      	bics	r2, r1
 8001522:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001524:	4b7a      	ldr	r3, [pc, #488]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 8001526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001528:	22f8      	movs	r2, #248	; 0xf8
 800152a:	4393      	bics	r3, r2
 800152c:	0019      	movs	r1, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	00da      	lsls	r2, r3, #3
 8001534:	4b76      	ldr	r3, [pc, #472]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 8001536:	430a      	orrs	r2, r1
 8001538:	635a      	str	r2, [r3, #52]	; 0x34
 800153a:	e01e      	b.n	800157a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800153c:	4b74      	ldr	r3, [pc, #464]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 800153e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001540:	4b73      	ldr	r3, [pc, #460]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 8001542:	2104      	movs	r1, #4
 8001544:	430a      	orrs	r2, r1
 8001546:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001548:	4b71      	ldr	r3, [pc, #452]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 800154a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800154c:	4b70      	ldr	r3, [pc, #448]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 800154e:	2101      	movs	r1, #1
 8001550:	438a      	bics	r2, r1
 8001552:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001554:	f7ff fac6 	bl	8000ae4 <HAL_GetTick>
 8001558:	0003      	movs	r3, r0
 800155a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800155e:	f7ff fac1 	bl	8000ae4 <HAL_GetTick>
 8001562:	0002      	movs	r2, r0
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e111      	b.n	8001794 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001570:	4b67      	ldr	r3, [pc, #412]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 8001572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001574:	2202      	movs	r2, #2
 8001576:	4013      	ands	r3, r2
 8001578:	d1f1      	bne.n	800155e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2220      	movs	r2, #32
 8001580:	4013      	ands	r3, r2
 8001582:	d05c      	beq.n	800163e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001584:	4b62      	ldr	r3, [pc, #392]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	220c      	movs	r2, #12
 800158a:	4013      	ands	r3, r2
 800158c:	2b0c      	cmp	r3, #12
 800158e:	d00e      	beq.n	80015ae <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001590:	4b5f      	ldr	r3, [pc, #380]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	220c      	movs	r2, #12
 8001596:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001598:	2b08      	cmp	r3, #8
 800159a:	d114      	bne.n	80015c6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800159c:	4b5c      	ldr	r3, [pc, #368]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	23c0      	movs	r3, #192	; 0xc0
 80015a2:	025b      	lsls	r3, r3, #9
 80015a4:	401a      	ands	r2, r3
 80015a6:	23c0      	movs	r3, #192	; 0xc0
 80015a8:	025b      	lsls	r3, r3, #9
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d10b      	bne.n	80015c6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80015ae:	4b58      	ldr	r3, [pc, #352]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 80015b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015b2:	2380      	movs	r3, #128	; 0x80
 80015b4:	025b      	lsls	r3, r3, #9
 80015b6:	4013      	ands	r3, r2
 80015b8:	d040      	beq.n	800163c <HAL_RCC_OscConfig+0x5a8>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a1b      	ldr	r3, [r3, #32]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d03c      	beq.n	800163c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e0e6      	b.n	8001794 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a1b      	ldr	r3, [r3, #32]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d01b      	beq.n	8001606 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80015ce:	4b50      	ldr	r3, [pc, #320]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 80015d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015d2:	4b4f      	ldr	r3, [pc, #316]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 80015d4:	2180      	movs	r1, #128	; 0x80
 80015d6:	0249      	lsls	r1, r1, #9
 80015d8:	430a      	orrs	r2, r1
 80015da:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015dc:	f7ff fa82 	bl	8000ae4 <HAL_GetTick>
 80015e0:	0003      	movs	r3, r0
 80015e2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015e6:	f7ff fa7d 	bl	8000ae4 <HAL_GetTick>
 80015ea:	0002      	movs	r2, r0
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e0cd      	b.n	8001794 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80015f8:	4b45      	ldr	r3, [pc, #276]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 80015fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015fc:	2380      	movs	r3, #128	; 0x80
 80015fe:	025b      	lsls	r3, r3, #9
 8001600:	4013      	ands	r3, r2
 8001602:	d0f0      	beq.n	80015e6 <HAL_RCC_OscConfig+0x552>
 8001604:	e01b      	b.n	800163e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001606:	4b42      	ldr	r3, [pc, #264]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 8001608:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800160a:	4b41      	ldr	r3, [pc, #260]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 800160c:	4943      	ldr	r1, [pc, #268]	; (800171c <HAL_RCC_OscConfig+0x688>)
 800160e:	400a      	ands	r2, r1
 8001610:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001612:	f7ff fa67 	bl	8000ae4 <HAL_GetTick>
 8001616:	0003      	movs	r3, r0
 8001618:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800161c:	f7ff fa62 	bl	8000ae4 <HAL_GetTick>
 8001620:	0002      	movs	r2, r0
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e0b2      	b.n	8001794 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800162e:	4b38      	ldr	r3, [pc, #224]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 8001630:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001632:	2380      	movs	r3, #128	; 0x80
 8001634:	025b      	lsls	r3, r3, #9
 8001636:	4013      	ands	r3, r2
 8001638:	d1f0      	bne.n	800161c <HAL_RCC_OscConfig+0x588>
 800163a:	e000      	b.n	800163e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800163c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001642:	2b00      	cmp	r3, #0
 8001644:	d100      	bne.n	8001648 <HAL_RCC_OscConfig+0x5b4>
 8001646:	e0a4      	b.n	8001792 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001648:	4b31      	ldr	r3, [pc, #196]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	220c      	movs	r2, #12
 800164e:	4013      	ands	r3, r2
 8001650:	2b08      	cmp	r3, #8
 8001652:	d100      	bne.n	8001656 <HAL_RCC_OscConfig+0x5c2>
 8001654:	e078      	b.n	8001748 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165a:	2b02      	cmp	r3, #2
 800165c:	d14c      	bne.n	80016f8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800165e:	4b2c      	ldr	r3, [pc, #176]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	4b2b      	ldr	r3, [pc, #172]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 8001664:	492e      	ldr	r1, [pc, #184]	; (8001720 <HAL_RCC_OscConfig+0x68c>)
 8001666:	400a      	ands	r2, r1
 8001668:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166a:	f7ff fa3b 	bl	8000ae4 <HAL_GetTick>
 800166e:	0003      	movs	r3, r0
 8001670:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001674:	f7ff fa36 	bl	8000ae4 <HAL_GetTick>
 8001678:	0002      	movs	r2, r0
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e086      	b.n	8001794 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001686:	4b22      	ldr	r3, [pc, #136]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	2380      	movs	r3, #128	; 0x80
 800168c:	049b      	lsls	r3, r3, #18
 800168e:	4013      	ands	r3, r2
 8001690:	d1f0      	bne.n	8001674 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001692:	4b1f      	ldr	r3, [pc, #124]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 8001694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001696:	220f      	movs	r2, #15
 8001698:	4393      	bics	r3, r2
 800169a:	0019      	movs	r1, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016a0:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 80016a2:	430a      	orrs	r2, r1
 80016a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80016a6:	4b1a      	ldr	r3, [pc, #104]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	4a1e      	ldr	r2, [pc, #120]	; (8001724 <HAL_RCC_OscConfig+0x690>)
 80016ac:	4013      	ands	r3, r2
 80016ae:	0019      	movs	r1, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b8:	431a      	orrs	r2, r3
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 80016bc:	430a      	orrs	r2, r1
 80016be:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016c0:	4b13      	ldr	r3, [pc, #76]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 80016c6:	2180      	movs	r1, #128	; 0x80
 80016c8:	0449      	lsls	r1, r1, #17
 80016ca:	430a      	orrs	r2, r1
 80016cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ce:	f7ff fa09 	bl	8000ae4 <HAL_GetTick>
 80016d2:	0003      	movs	r3, r0
 80016d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d8:	f7ff fa04 	bl	8000ae4 <HAL_GetTick>
 80016dc:	0002      	movs	r2, r0
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e054      	b.n	8001794 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	2380      	movs	r3, #128	; 0x80
 80016f0:	049b      	lsls	r3, r3, #18
 80016f2:	4013      	ands	r3, r2
 80016f4:	d0f0      	beq.n	80016d8 <HAL_RCC_OscConfig+0x644>
 80016f6:	e04c      	b.n	8001792 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f8:	4b05      	ldr	r3, [pc, #20]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4b04      	ldr	r3, [pc, #16]	; (8001710 <HAL_RCC_OscConfig+0x67c>)
 80016fe:	4908      	ldr	r1, [pc, #32]	; (8001720 <HAL_RCC_OscConfig+0x68c>)
 8001700:	400a      	ands	r2, r1
 8001702:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001704:	f7ff f9ee 	bl	8000ae4 <HAL_GetTick>
 8001708:	0003      	movs	r3, r0
 800170a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800170c:	e015      	b.n	800173a <HAL_RCC_OscConfig+0x6a6>
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	40021000 	.word	0x40021000
 8001714:	00001388 	.word	0x00001388
 8001718:	efffffff 	.word	0xefffffff
 800171c:	fffeffff 	.word	0xfffeffff
 8001720:	feffffff 	.word	0xfeffffff
 8001724:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001728:	f7ff f9dc 	bl	8000ae4 <HAL_GetTick>
 800172c:	0002      	movs	r2, r0
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e02c      	b.n	8001794 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800173a:	4b18      	ldr	r3, [pc, #96]	; (800179c <HAL_RCC_OscConfig+0x708>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	2380      	movs	r3, #128	; 0x80
 8001740:	049b      	lsls	r3, r3, #18
 8001742:	4013      	ands	r3, r2
 8001744:	d1f0      	bne.n	8001728 <HAL_RCC_OscConfig+0x694>
 8001746:	e024      	b.n	8001792 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174c:	2b01      	cmp	r3, #1
 800174e:	d101      	bne.n	8001754 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e01f      	b.n	8001794 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001754:	4b11      	ldr	r3, [pc, #68]	; (800179c <HAL_RCC_OscConfig+0x708>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800175a:	4b10      	ldr	r3, [pc, #64]	; (800179c <HAL_RCC_OscConfig+0x708>)
 800175c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	23c0      	movs	r3, #192	; 0xc0
 8001764:	025b      	lsls	r3, r3, #9
 8001766:	401a      	ands	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176c:	429a      	cmp	r2, r3
 800176e:	d10e      	bne.n	800178e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	220f      	movs	r2, #15
 8001774:	401a      	ands	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800177a:	429a      	cmp	r2, r3
 800177c:	d107      	bne.n	800178e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	23f0      	movs	r3, #240	; 0xf0
 8001782:	039b      	lsls	r3, r3, #14
 8001784:	401a      	ands	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800178a:	429a      	cmp	r2, r3
 800178c:	d001      	beq.n	8001792 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e000      	b.n	8001794 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001792:	2300      	movs	r3, #0
}
 8001794:	0018      	movs	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	b008      	add	sp, #32
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40021000 	.word	0x40021000

080017a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d101      	bne.n	80017b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e0bf      	b.n	8001934 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017b4:	4b61      	ldr	r3, [pc, #388]	; (800193c <HAL_RCC_ClockConfig+0x19c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2201      	movs	r2, #1
 80017ba:	4013      	ands	r3, r2
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d911      	bls.n	80017e6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c2:	4b5e      	ldr	r3, [pc, #376]	; (800193c <HAL_RCC_ClockConfig+0x19c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2201      	movs	r2, #1
 80017c8:	4393      	bics	r3, r2
 80017ca:	0019      	movs	r1, r3
 80017cc:	4b5b      	ldr	r3, [pc, #364]	; (800193c <HAL_RCC_ClockConfig+0x19c>)
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d4:	4b59      	ldr	r3, [pc, #356]	; (800193c <HAL_RCC_ClockConfig+0x19c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2201      	movs	r2, #1
 80017da:	4013      	ands	r3, r2
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d001      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e0a6      	b.n	8001934 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2202      	movs	r2, #2
 80017ec:	4013      	ands	r3, r2
 80017ee:	d015      	beq.n	800181c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2204      	movs	r2, #4
 80017f6:	4013      	ands	r3, r2
 80017f8:	d006      	beq.n	8001808 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80017fa:	4b51      	ldr	r3, [pc, #324]	; (8001940 <HAL_RCC_ClockConfig+0x1a0>)
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	4b50      	ldr	r3, [pc, #320]	; (8001940 <HAL_RCC_ClockConfig+0x1a0>)
 8001800:	21e0      	movs	r1, #224	; 0xe0
 8001802:	00c9      	lsls	r1, r1, #3
 8001804:	430a      	orrs	r2, r1
 8001806:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001808:	4b4d      	ldr	r3, [pc, #308]	; (8001940 <HAL_RCC_ClockConfig+0x1a0>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	22f0      	movs	r2, #240	; 0xf0
 800180e:	4393      	bics	r3, r2
 8001810:	0019      	movs	r1, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689a      	ldr	r2, [r3, #8]
 8001816:	4b4a      	ldr	r3, [pc, #296]	; (8001940 <HAL_RCC_ClockConfig+0x1a0>)
 8001818:	430a      	orrs	r2, r1
 800181a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2201      	movs	r2, #1
 8001822:	4013      	ands	r3, r2
 8001824:	d04c      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d107      	bne.n	800183e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182e:	4b44      	ldr	r3, [pc, #272]	; (8001940 <HAL_RCC_ClockConfig+0x1a0>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	2380      	movs	r3, #128	; 0x80
 8001834:	029b      	lsls	r3, r3, #10
 8001836:	4013      	ands	r3, r2
 8001838:	d120      	bne.n	800187c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e07a      	b.n	8001934 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b02      	cmp	r3, #2
 8001844:	d107      	bne.n	8001856 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001846:	4b3e      	ldr	r3, [pc, #248]	; (8001940 <HAL_RCC_ClockConfig+0x1a0>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	2380      	movs	r3, #128	; 0x80
 800184c:	049b      	lsls	r3, r3, #18
 800184e:	4013      	ands	r3, r2
 8001850:	d114      	bne.n	800187c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e06e      	b.n	8001934 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b03      	cmp	r3, #3
 800185c:	d107      	bne.n	800186e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800185e:	4b38      	ldr	r3, [pc, #224]	; (8001940 <HAL_RCC_ClockConfig+0x1a0>)
 8001860:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001862:	2380      	movs	r3, #128	; 0x80
 8001864:	025b      	lsls	r3, r3, #9
 8001866:	4013      	ands	r3, r2
 8001868:	d108      	bne.n	800187c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e062      	b.n	8001934 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800186e:	4b34      	ldr	r3, [pc, #208]	; (8001940 <HAL_RCC_ClockConfig+0x1a0>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2202      	movs	r2, #2
 8001874:	4013      	ands	r3, r2
 8001876:	d101      	bne.n	800187c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e05b      	b.n	8001934 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800187c:	4b30      	ldr	r3, [pc, #192]	; (8001940 <HAL_RCC_ClockConfig+0x1a0>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2203      	movs	r2, #3
 8001882:	4393      	bics	r3, r2
 8001884:	0019      	movs	r1, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	4b2d      	ldr	r3, [pc, #180]	; (8001940 <HAL_RCC_ClockConfig+0x1a0>)
 800188c:	430a      	orrs	r2, r1
 800188e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001890:	f7ff f928 	bl	8000ae4 <HAL_GetTick>
 8001894:	0003      	movs	r3, r0
 8001896:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001898:	e009      	b.n	80018ae <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800189a:	f7ff f923 	bl	8000ae4 <HAL_GetTick>
 800189e:	0002      	movs	r2, r0
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	4a27      	ldr	r2, [pc, #156]	; (8001944 <HAL_RCC_ClockConfig+0x1a4>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e042      	b.n	8001934 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ae:	4b24      	ldr	r3, [pc, #144]	; (8001940 <HAL_RCC_ClockConfig+0x1a0>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	220c      	movs	r2, #12
 80018b4:	401a      	ands	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	429a      	cmp	r2, r3
 80018be:	d1ec      	bne.n	800189a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018c0:	4b1e      	ldr	r3, [pc, #120]	; (800193c <HAL_RCC_ClockConfig+0x19c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2201      	movs	r2, #1
 80018c6:	4013      	ands	r3, r2
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d211      	bcs.n	80018f2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ce:	4b1b      	ldr	r3, [pc, #108]	; (800193c <HAL_RCC_ClockConfig+0x19c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2201      	movs	r2, #1
 80018d4:	4393      	bics	r3, r2
 80018d6:	0019      	movs	r1, r3
 80018d8:	4b18      	ldr	r3, [pc, #96]	; (800193c <HAL_RCC_ClockConfig+0x19c>)
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e0:	4b16      	ldr	r3, [pc, #88]	; (800193c <HAL_RCC_ClockConfig+0x19c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2201      	movs	r2, #1
 80018e6:	4013      	ands	r3, r2
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d001      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e020      	b.n	8001934 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2204      	movs	r2, #4
 80018f8:	4013      	ands	r3, r2
 80018fa:	d009      	beq.n	8001910 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018fc:	4b10      	ldr	r3, [pc, #64]	; (8001940 <HAL_RCC_ClockConfig+0x1a0>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	4a11      	ldr	r2, [pc, #68]	; (8001948 <HAL_RCC_ClockConfig+0x1a8>)
 8001902:	4013      	ands	r3, r2
 8001904:	0019      	movs	r1, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68da      	ldr	r2, [r3, #12]
 800190a:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <HAL_RCC_ClockConfig+0x1a0>)
 800190c:	430a      	orrs	r2, r1
 800190e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001910:	f000 f820 	bl	8001954 <HAL_RCC_GetSysClockFreq>
 8001914:	0001      	movs	r1, r0
 8001916:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <HAL_RCC_ClockConfig+0x1a0>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	091b      	lsrs	r3, r3, #4
 800191c:	220f      	movs	r2, #15
 800191e:	4013      	ands	r3, r2
 8001920:	4a0a      	ldr	r2, [pc, #40]	; (800194c <HAL_RCC_ClockConfig+0x1ac>)
 8001922:	5cd3      	ldrb	r3, [r2, r3]
 8001924:	000a      	movs	r2, r1
 8001926:	40da      	lsrs	r2, r3
 8001928:	4b09      	ldr	r3, [pc, #36]	; (8001950 <HAL_RCC_ClockConfig+0x1b0>)
 800192a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800192c:	2003      	movs	r0, #3
 800192e:	f7ff f893 	bl	8000a58 <HAL_InitTick>
  
  return HAL_OK;
 8001932:	2300      	movs	r3, #0
}
 8001934:	0018      	movs	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	b004      	add	sp, #16
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40022000 	.word	0x40022000
 8001940:	40021000 	.word	0x40021000
 8001944:	00001388 	.word	0x00001388
 8001948:	fffff8ff 	.word	0xfffff8ff
 800194c:	08004090 	.word	0x08004090
 8001950:	20000068 	.word	0x20000068

08001954 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001954:	b590      	push	{r4, r7, lr}
 8001956:	b08f      	sub	sp, #60	; 0x3c
 8001958:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800195a:	2314      	movs	r3, #20
 800195c:	18fb      	adds	r3, r7, r3
 800195e:	4a38      	ldr	r2, [pc, #224]	; (8001a40 <HAL_RCC_GetSysClockFreq+0xec>)
 8001960:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001962:	c313      	stmia	r3!, {r0, r1, r4}
 8001964:	6812      	ldr	r2, [r2, #0]
 8001966:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	4a36      	ldr	r2, [pc, #216]	; (8001a44 <HAL_RCC_GetSysClockFreq+0xf0>)
 800196c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800196e:	c313      	stmia	r3!, {r0, r1, r4}
 8001970:	6812      	ldr	r2, [r2, #0]
 8001972:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001974:	2300      	movs	r3, #0
 8001976:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001978:	2300      	movs	r3, #0
 800197a:	62bb      	str	r3, [r7, #40]	; 0x28
 800197c:	2300      	movs	r3, #0
 800197e:	637b      	str	r3, [r7, #52]	; 0x34
 8001980:	2300      	movs	r3, #0
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001988:	4b2f      	ldr	r3, [pc, #188]	; (8001a48 <HAL_RCC_GetSysClockFreq+0xf4>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800198e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001990:	220c      	movs	r2, #12
 8001992:	4013      	ands	r3, r2
 8001994:	2b0c      	cmp	r3, #12
 8001996:	d047      	beq.n	8001a28 <HAL_RCC_GetSysClockFreq+0xd4>
 8001998:	d849      	bhi.n	8001a2e <HAL_RCC_GetSysClockFreq+0xda>
 800199a:	2b04      	cmp	r3, #4
 800199c:	d002      	beq.n	80019a4 <HAL_RCC_GetSysClockFreq+0x50>
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d003      	beq.n	80019aa <HAL_RCC_GetSysClockFreq+0x56>
 80019a2:	e044      	b.n	8001a2e <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019a4:	4b29      	ldr	r3, [pc, #164]	; (8001a4c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019a6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019a8:	e044      	b.n	8001a34 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80019aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ac:	0c9b      	lsrs	r3, r3, #18
 80019ae:	220f      	movs	r2, #15
 80019b0:	4013      	ands	r3, r2
 80019b2:	2214      	movs	r2, #20
 80019b4:	18ba      	adds	r2, r7, r2
 80019b6:	5cd3      	ldrb	r3, [r2, r3]
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80019ba:	4b23      	ldr	r3, [pc, #140]	; (8001a48 <HAL_RCC_GetSysClockFreq+0xf4>)
 80019bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019be:	220f      	movs	r2, #15
 80019c0:	4013      	ands	r3, r2
 80019c2:	1d3a      	adds	r2, r7, #4
 80019c4:	5cd3      	ldrb	r3, [r2, r3]
 80019c6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80019c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019ca:	23c0      	movs	r3, #192	; 0xc0
 80019cc:	025b      	lsls	r3, r3, #9
 80019ce:	401a      	ands	r2, r3
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	025b      	lsls	r3, r3, #9
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d109      	bne.n	80019ec <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80019d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019da:	481c      	ldr	r0, [pc, #112]	; (8001a4c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019dc:	f7fe fb9e 	bl	800011c <__udivsi3>
 80019e0:	0003      	movs	r3, r0
 80019e2:	001a      	movs	r2, r3
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	4353      	muls	r3, r2
 80019e8:	637b      	str	r3, [r7, #52]	; 0x34
 80019ea:	e01a      	b.n	8001a22 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80019ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019ee:	23c0      	movs	r3, #192	; 0xc0
 80019f0:	025b      	lsls	r3, r3, #9
 80019f2:	401a      	ands	r2, r3
 80019f4:	23c0      	movs	r3, #192	; 0xc0
 80019f6:	025b      	lsls	r3, r3, #9
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d109      	bne.n	8001a10 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80019fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019fe:	4814      	ldr	r0, [pc, #80]	; (8001a50 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a00:	f7fe fb8c 	bl	800011c <__udivsi3>
 8001a04:	0003      	movs	r3, r0
 8001a06:	001a      	movs	r2, r3
 8001a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0a:	4353      	muls	r3, r2
 8001a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a12:	480e      	ldr	r0, [pc, #56]	; (8001a4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a14:	f7fe fb82 	bl	800011c <__udivsi3>
 8001a18:	0003      	movs	r3, r0
 8001a1a:	001a      	movs	r2, r3
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	4353      	muls	r3, r2
 8001a20:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a24:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a26:	e005      	b.n	8001a34 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001a28:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a2a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a2c:	e002      	b.n	8001a34 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a2e:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a30:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a32:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001a36:	0018      	movs	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	b00f      	add	sp, #60	; 0x3c
 8001a3c:	bd90      	pop	{r4, r7, pc}
 8001a3e:	46c0      	nop			; (mov r8, r8)
 8001a40:	08004070 	.word	0x08004070
 8001a44:	08004080 	.word	0x08004080
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	007a1200 	.word	0x007a1200
 8001a50:	02dc6c00 	.word	0x02dc6c00

08001a54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a58:	4b02      	ldr	r3, [pc, #8]	; (8001a64 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
}
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	20000068 	.word	0x20000068

08001a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001a6c:	f7ff fff2 	bl	8001a54 <HAL_RCC_GetHCLKFreq>
 8001a70:	0001      	movs	r1, r0
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	0a1b      	lsrs	r3, r3, #8
 8001a78:	2207      	movs	r2, #7
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	4a04      	ldr	r2, [pc, #16]	; (8001a90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a7e:	5cd3      	ldrb	r3, [r2, r3]
 8001a80:	40d9      	lsrs	r1, r3
 8001a82:	000b      	movs	r3, r1
}    
 8001a84:	0018      	movs	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	080040a0 	.word	0x080040a0

08001a94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	2380      	movs	r3, #128	; 0x80
 8001aaa:	025b      	lsls	r3, r3, #9
 8001aac:	4013      	ands	r3, r2
 8001aae:	d100      	bne.n	8001ab2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001ab0:	e08e      	b.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001ab2:	2017      	movs	r0, #23
 8001ab4:	183b      	adds	r3, r7, r0
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aba:	4b6e      	ldr	r3, [pc, #440]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001abc:	69da      	ldr	r2, [r3, #28]
 8001abe:	2380      	movs	r3, #128	; 0x80
 8001ac0:	055b      	lsls	r3, r3, #21
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	d110      	bne.n	8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ac6:	4b6b      	ldr	r3, [pc, #428]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ac8:	69da      	ldr	r2, [r3, #28]
 8001aca:	4b6a      	ldr	r3, [pc, #424]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001acc:	2180      	movs	r1, #128	; 0x80
 8001ace:	0549      	lsls	r1, r1, #21
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	61da      	str	r2, [r3, #28]
 8001ad4:	4b67      	ldr	r3, [pc, #412]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ad6:	69da      	ldr	r2, [r3, #28]
 8001ad8:	2380      	movs	r3, #128	; 0x80
 8001ada:	055b      	lsls	r3, r3, #21
 8001adc:	4013      	ands	r3, r2
 8001ade:	60bb      	str	r3, [r7, #8]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ae2:	183b      	adds	r3, r7, r0
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae8:	4b63      	ldr	r3, [pc, #396]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	2380      	movs	r3, #128	; 0x80
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	4013      	ands	r3, r2
 8001af2:	d11a      	bne.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001af4:	4b60      	ldr	r3, [pc, #384]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4b5f      	ldr	r3, [pc, #380]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001afa:	2180      	movs	r1, #128	; 0x80
 8001afc:	0049      	lsls	r1, r1, #1
 8001afe:	430a      	orrs	r2, r1
 8001b00:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b02:	f7fe ffef 	bl	8000ae4 <HAL_GetTick>
 8001b06:	0003      	movs	r3, r0
 8001b08:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b0a:	e008      	b.n	8001b1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b0c:	f7fe ffea 	bl	8000ae4 <HAL_GetTick>
 8001b10:	0002      	movs	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b64      	cmp	r3, #100	; 0x64
 8001b18:	d901      	bls.n	8001b1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e0a6      	b.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1e:	4b56      	ldr	r3, [pc, #344]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	2380      	movs	r3, #128	; 0x80
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	4013      	ands	r3, r2
 8001b28:	d0f0      	beq.n	8001b0c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b2a:	4b52      	ldr	r3, [pc, #328]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b2c:	6a1a      	ldr	r2, [r3, #32]
 8001b2e:	23c0      	movs	r3, #192	; 0xc0
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4013      	ands	r3, r2
 8001b34:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d034      	beq.n	8001ba6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	23c0      	movs	r3, #192	; 0xc0
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4013      	ands	r3, r2
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d02c      	beq.n	8001ba6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b4c:	4b49      	ldr	r3, [pc, #292]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	4a4a      	ldr	r2, [pc, #296]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001b52:	4013      	ands	r3, r2
 8001b54:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b56:	4b47      	ldr	r3, [pc, #284]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b58:	6a1a      	ldr	r2, [r3, #32]
 8001b5a:	4b46      	ldr	r3, [pc, #280]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b5c:	2180      	movs	r1, #128	; 0x80
 8001b5e:	0249      	lsls	r1, r1, #9
 8001b60:	430a      	orrs	r2, r1
 8001b62:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b64:	4b43      	ldr	r3, [pc, #268]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b66:	6a1a      	ldr	r2, [r3, #32]
 8001b68:	4b42      	ldr	r3, [pc, #264]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b6a:	4945      	ldr	r1, [pc, #276]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001b6c:	400a      	ands	r2, r1
 8001b6e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001b70:	4b40      	ldr	r3, [pc, #256]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d013      	beq.n	8001ba6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7e:	f7fe ffb1 	bl	8000ae4 <HAL_GetTick>
 8001b82:	0003      	movs	r3, r0
 8001b84:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b86:	e009      	b.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b88:	f7fe ffac 	bl	8000ae4 <HAL_GetTick>
 8001b8c:	0002      	movs	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	4a3c      	ldr	r2, [pc, #240]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e067      	b.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b9c:	4b35      	ldr	r3, [pc, #212]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d0f0      	beq.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ba6:	4b33      	ldr	r3, [pc, #204]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
 8001baa:	4a34      	ldr	r2, [pc, #208]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001bac:	4013      	ands	r3, r2
 8001bae:	0019      	movs	r1, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	4b2f      	ldr	r3, [pc, #188]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bba:	2317      	movs	r3, #23
 8001bbc:	18fb      	adds	r3, r7, r3
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d105      	bne.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc4:	4b2b      	ldr	r3, [pc, #172]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bc6:	69da      	ldr	r2, [r3, #28]
 8001bc8:	4b2a      	ldr	r3, [pc, #168]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bca:	492f      	ldr	r1, [pc, #188]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001bcc:	400a      	ands	r2, r1
 8001bce:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	d009      	beq.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001bda:	4b26      	ldr	r3, [pc, #152]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	2203      	movs	r2, #3
 8001be0:	4393      	bics	r3, r2
 8001be2:	0019      	movs	r1, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bea:	430a      	orrs	r2, r1
 8001bec:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d009      	beq.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001bf8:	4b1e      	ldr	r3, [pc, #120]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfc:	4a23      	ldr	r2, [pc, #140]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bfe:	4013      	ands	r3, r2
 8001c00:	0019      	movs	r1, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68da      	ldr	r2, [r3, #12]
 8001c06:	4b1b      	ldr	r3, [pc, #108]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2220      	movs	r2, #32
 8001c12:	4013      	ands	r3, r2
 8001c14:	d009      	beq.n	8001c2a <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c16:	4b17      	ldr	r3, [pc, #92]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	2210      	movs	r2, #16
 8001c1c:	4393      	bics	r3, r2
 8001c1e:	0019      	movs	r1, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	691a      	ldr	r2, [r3, #16]
 8001c24:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c26:	430a      	orrs	r2, r1
 8001c28:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	2380      	movs	r3, #128	; 0x80
 8001c30:	029b      	lsls	r3, r3, #10
 8001c32:	4013      	ands	r3, r2
 8001c34:	d009      	beq.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c36:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	2280      	movs	r2, #128	; 0x80
 8001c3c:	4393      	bics	r3, r2
 8001c3e:	0019      	movs	r1, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	699a      	ldr	r2, [r3, #24]
 8001c44:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c46:	430a      	orrs	r2, r1
 8001c48:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	2380      	movs	r3, #128	; 0x80
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	4013      	ands	r3, r2
 8001c54:	d009      	beq.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001c56:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	2240      	movs	r2, #64	; 0x40
 8001c5c:	4393      	bics	r3, r2
 8001c5e:	0019      	movs	r1, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	695a      	ldr	r2, [r3, #20]
 8001c64:	4b03      	ldr	r3, [pc, #12]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c66:	430a      	orrs	r2, r1
 8001c68:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	b006      	add	sp, #24
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40021000 	.word	0x40021000
 8001c78:	40007000 	.word	0x40007000
 8001c7c:	fffffcff 	.word	0xfffffcff
 8001c80:	fffeffff 	.word	0xfffeffff
 8001c84:	00001388 	.word	0x00001388
 8001c88:	efffffff 	.word	0xefffffff
 8001c8c:	fffcffff 	.word	0xfffcffff

08001c90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e042      	b.n	8001d28 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	223d      	movs	r2, #61	; 0x3d
 8001ca6:	5c9b      	ldrb	r3, [r3, r2]
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d107      	bne.n	8001cbe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	223c      	movs	r2, #60	; 0x3c
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	0018      	movs	r0, r3
 8001cba:	f7fe fd89 	bl	80007d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	223d      	movs	r2, #61	; 0x3d
 8001cc2:	2102      	movs	r1, #2
 8001cc4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	3304      	adds	r3, #4
 8001cce:	0019      	movs	r1, r3
 8001cd0:	0010      	movs	r0, r2
 8001cd2:	f000 fd37 	bl	8002744 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2246      	movs	r2, #70	; 0x46
 8001cda:	2101      	movs	r1, #1
 8001cdc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	223e      	movs	r2, #62	; 0x3e
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	5499      	strb	r1, [r3, r2]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	223f      	movs	r2, #63	; 0x3f
 8001cea:	2101      	movs	r1, #1
 8001cec:	5499      	strb	r1, [r3, r2]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2240      	movs	r2, #64	; 0x40
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	5499      	strb	r1, [r3, r2]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2241      	movs	r2, #65	; 0x41
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2242      	movs	r2, #66	; 0x42
 8001d02:	2101      	movs	r1, #1
 8001d04:	5499      	strb	r1, [r3, r2]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2243      	movs	r2, #67	; 0x43
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	5499      	strb	r1, [r3, r2]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2244      	movs	r2, #68	; 0x44
 8001d12:	2101      	movs	r1, #1
 8001d14:	5499      	strb	r1, [r3, r2]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2245      	movs	r2, #69	; 0x45
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	223d      	movs	r2, #61	; 0x3d
 8001d22:	2101      	movs	r1, #1
 8001d24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	0018      	movs	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	b002      	add	sp, #8
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e042      	b.n	8001dc8 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	223d      	movs	r2, #61	; 0x3d
 8001d46:	5c9b      	ldrb	r3, [r3, r2]
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d107      	bne.n	8001d5e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	223c      	movs	r2, #60	; 0x3c
 8001d52:	2100      	movs	r1, #0
 8001d54:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	0018      	movs	r0, r3
 8001d5a:	f000 f839 	bl	8001dd0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	223d      	movs	r2, #61	; 0x3d
 8001d62:	2102      	movs	r1, #2
 8001d64:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	3304      	adds	r3, #4
 8001d6e:	0019      	movs	r1, r3
 8001d70:	0010      	movs	r0, r2
 8001d72:	f000 fce7 	bl	8002744 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2246      	movs	r2, #70	; 0x46
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	223e      	movs	r2, #62	; 0x3e
 8001d82:	2101      	movs	r1, #1
 8001d84:	5499      	strb	r1, [r3, r2]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	223f      	movs	r2, #63	; 0x3f
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	5499      	strb	r1, [r3, r2]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2240      	movs	r2, #64	; 0x40
 8001d92:	2101      	movs	r1, #1
 8001d94:	5499      	strb	r1, [r3, r2]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2241      	movs	r2, #65	; 0x41
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2242      	movs	r2, #66	; 0x42
 8001da2:	2101      	movs	r1, #1
 8001da4:	5499      	strb	r1, [r3, r2]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2243      	movs	r2, #67	; 0x43
 8001daa:	2101      	movs	r1, #1
 8001dac:	5499      	strb	r1, [r3, r2]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2244      	movs	r2, #68	; 0x44
 8001db2:	2101      	movs	r1, #1
 8001db4:	5499      	strb	r1, [r3, r2]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2245      	movs	r2, #69	; 0x45
 8001dba:	2101      	movs	r1, #1
 8001dbc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	223d      	movs	r2, #61	; 0x3d
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	0018      	movs	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	b002      	add	sp, #8
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001dd8:	46c0      	nop			; (mov r8, r8)
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	b002      	add	sp, #8
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d108      	bne.n	8001e02 <HAL_TIM_PWM_Start+0x22>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	223e      	movs	r2, #62	; 0x3e
 8001df4:	5c9b      	ldrb	r3, [r3, r2]
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	1e5a      	subs	r2, r3, #1
 8001dfc:	4193      	sbcs	r3, r2
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	e01f      	b.n	8001e42 <HAL_TIM_PWM_Start+0x62>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	2b04      	cmp	r3, #4
 8001e06:	d108      	bne.n	8001e1a <HAL_TIM_PWM_Start+0x3a>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	223f      	movs	r2, #63	; 0x3f
 8001e0c:	5c9b      	ldrb	r3, [r3, r2]
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	3b01      	subs	r3, #1
 8001e12:	1e5a      	subs	r2, r3, #1
 8001e14:	4193      	sbcs	r3, r2
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	e013      	b.n	8001e42 <HAL_TIM_PWM_Start+0x62>
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	2b08      	cmp	r3, #8
 8001e1e:	d108      	bne.n	8001e32 <HAL_TIM_PWM_Start+0x52>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2240      	movs	r2, #64	; 0x40
 8001e24:	5c9b      	ldrb	r3, [r3, r2]
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	1e5a      	subs	r2, r3, #1
 8001e2c:	4193      	sbcs	r3, r2
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	e007      	b.n	8001e42 <HAL_TIM_PWM_Start+0x62>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2241      	movs	r2, #65	; 0x41
 8001e36:	5c9b      	ldrb	r3, [r3, r2]
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	1e5a      	subs	r2, r3, #1
 8001e3e:	4193      	sbcs	r3, r2
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e074      	b.n	8001f34 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d104      	bne.n	8001e5a <HAL_TIM_PWM_Start+0x7a>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	223e      	movs	r2, #62	; 0x3e
 8001e54:	2102      	movs	r1, #2
 8001e56:	5499      	strb	r1, [r3, r2]
 8001e58:	e013      	b.n	8001e82 <HAL_TIM_PWM_Start+0xa2>
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	2b04      	cmp	r3, #4
 8001e5e:	d104      	bne.n	8001e6a <HAL_TIM_PWM_Start+0x8a>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	223f      	movs	r2, #63	; 0x3f
 8001e64:	2102      	movs	r1, #2
 8001e66:	5499      	strb	r1, [r3, r2]
 8001e68:	e00b      	b.n	8001e82 <HAL_TIM_PWM_Start+0xa2>
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d104      	bne.n	8001e7a <HAL_TIM_PWM_Start+0x9a>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2240      	movs	r2, #64	; 0x40
 8001e74:	2102      	movs	r1, #2
 8001e76:	5499      	strb	r1, [r3, r2]
 8001e78:	e003      	b.n	8001e82 <HAL_TIM_PWM_Start+0xa2>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2241      	movs	r2, #65	; 0x41
 8001e7e:	2102      	movs	r1, #2
 8001e80:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6839      	ldr	r1, [r7, #0]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	f000 ff70 	bl	8002d70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a29      	ldr	r2, [pc, #164]	; (8001f3c <HAL_TIM_PWM_Start+0x15c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d00e      	beq.n	8001eb8 <HAL_TIM_PWM_Start+0xd8>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a28      	ldr	r2, [pc, #160]	; (8001f40 <HAL_TIM_PWM_Start+0x160>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d009      	beq.n	8001eb8 <HAL_TIM_PWM_Start+0xd8>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a26      	ldr	r2, [pc, #152]	; (8001f44 <HAL_TIM_PWM_Start+0x164>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d004      	beq.n	8001eb8 <HAL_TIM_PWM_Start+0xd8>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a25      	ldr	r2, [pc, #148]	; (8001f48 <HAL_TIM_PWM_Start+0x168>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d101      	bne.n	8001ebc <HAL_TIM_PWM_Start+0xdc>
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e000      	b.n	8001ebe <HAL_TIM_PWM_Start+0xde>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d008      	beq.n	8001ed4 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2180      	movs	r1, #128	; 0x80
 8001ece:	0209      	lsls	r1, r1, #8
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a18      	ldr	r2, [pc, #96]	; (8001f3c <HAL_TIM_PWM_Start+0x15c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d00f      	beq.n	8001efe <HAL_TIM_PWM_Start+0x11e>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	2380      	movs	r3, #128	; 0x80
 8001ee4:	05db      	lsls	r3, r3, #23
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d009      	beq.n	8001efe <HAL_TIM_PWM_Start+0x11e>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a17      	ldr	r2, [pc, #92]	; (8001f4c <HAL_TIM_PWM_Start+0x16c>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d004      	beq.n	8001efe <HAL_TIM_PWM_Start+0x11e>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a11      	ldr	r2, [pc, #68]	; (8001f40 <HAL_TIM_PWM_Start+0x160>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d111      	bne.n	8001f22 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	2207      	movs	r2, #7
 8001f06:	4013      	ands	r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2b06      	cmp	r3, #6
 8001f0e:	d010      	beq.n	8001f32 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f20:	e007      	b.n	8001f32 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	0018      	movs	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	b004      	add	sp, #16
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40012c00 	.word	0x40012c00
 8001f40:	40014000 	.word	0x40014000
 8001f44:	40014400 	.word	0x40014400
 8001f48:	40014800 	.word	0x40014800
 8001f4c:	40000400 	.word	0x40000400

08001f50 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6839      	ldr	r1, [r7, #0]
 8001f60:	2200      	movs	r2, #0
 8001f62:	0018      	movs	r0, r3
 8001f64:	f000 ff04 	bl	8002d70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a2f      	ldr	r2, [pc, #188]	; (800202c <HAL_TIM_PWM_Stop+0xdc>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d00e      	beq.n	8001f90 <HAL_TIM_PWM_Stop+0x40>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a2e      	ldr	r2, [pc, #184]	; (8002030 <HAL_TIM_PWM_Stop+0xe0>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d009      	beq.n	8001f90 <HAL_TIM_PWM_Stop+0x40>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a2c      	ldr	r2, [pc, #176]	; (8002034 <HAL_TIM_PWM_Stop+0xe4>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d004      	beq.n	8001f90 <HAL_TIM_PWM_Stop+0x40>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a2b      	ldr	r2, [pc, #172]	; (8002038 <HAL_TIM_PWM_Stop+0xe8>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d101      	bne.n	8001f94 <HAL_TIM_PWM_Stop+0x44>
 8001f90:	2301      	movs	r3, #1
 8001f92:	e000      	b.n	8001f96 <HAL_TIM_PWM_Stop+0x46>
 8001f94:	2300      	movs	r3, #0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d013      	beq.n	8001fc2 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	4a26      	ldr	r2, [pc, #152]	; (800203c <HAL_TIM_PWM_Stop+0xec>)
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d10d      	bne.n	8001fc2 <HAL_TIM_PWM_Stop+0x72>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	4a24      	ldr	r2, [pc, #144]	; (8002040 <HAL_TIM_PWM_Stop+0xf0>)
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d107      	bne.n	8001fc2 <HAL_TIM_PWM_Stop+0x72>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4921      	ldr	r1, [pc, #132]	; (8002044 <HAL_TIM_PWM_Stop+0xf4>)
 8001fbe:	400a      	ands	r2, r1
 8001fc0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	4a1c      	ldr	r2, [pc, #112]	; (800203c <HAL_TIM_PWM_Stop+0xec>)
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d10d      	bne.n	8001fea <HAL_TIM_PWM_Stop+0x9a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	4a1a      	ldr	r2, [pc, #104]	; (8002040 <HAL_TIM_PWM_Stop+0xf0>)
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d107      	bne.n	8001fea <HAL_TIM_PWM_Stop+0x9a>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	438a      	bics	r2, r1
 8001fe8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d104      	bne.n	8001ffa <HAL_TIM_PWM_Stop+0xaa>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	223e      	movs	r2, #62	; 0x3e
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	5499      	strb	r1, [r3, r2]
 8001ff8:	e013      	b.n	8002022 <HAL_TIM_PWM_Stop+0xd2>
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	2b04      	cmp	r3, #4
 8001ffe:	d104      	bne.n	800200a <HAL_TIM_PWM_Stop+0xba>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	223f      	movs	r2, #63	; 0x3f
 8002004:	2101      	movs	r1, #1
 8002006:	5499      	strb	r1, [r3, r2]
 8002008:	e00b      	b.n	8002022 <HAL_TIM_PWM_Stop+0xd2>
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	2b08      	cmp	r3, #8
 800200e:	d104      	bne.n	800201a <HAL_TIM_PWM_Stop+0xca>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2240      	movs	r2, #64	; 0x40
 8002014:	2101      	movs	r1, #1
 8002016:	5499      	strb	r1, [r3, r2]
 8002018:	e003      	b.n	8002022 <HAL_TIM_PWM_Stop+0xd2>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2241      	movs	r2, #65	; 0x41
 800201e:	2101      	movs	r1, #1
 8002020:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	0018      	movs	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	b002      	add	sp, #8
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40012c00 	.word	0x40012c00
 8002030:	40014000 	.word	0x40014000
 8002034:	40014400 	.word	0x40014400
 8002038:	40014800 	.word	0x40014800
 800203c:	00001111 	.word	0x00001111
 8002040:	00000444 	.word	0x00000444
 8002044:	ffff7fff 	.word	0xffff7fff

08002048 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e090      	b.n	800217e <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	223d      	movs	r2, #61	; 0x3d
 8002060:	5c9b      	ldrb	r3, [r3, r2]
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b00      	cmp	r3, #0
 8002066:	d107      	bne.n	8002078 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	223c      	movs	r2, #60	; 0x3c
 800206c:	2100      	movs	r1, #0
 800206e:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	0018      	movs	r0, r3
 8002074:	f7fe fb62 	bl	800073c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	223d      	movs	r2, #61	; 0x3d
 800207c:	2102      	movs	r1, #2
 800207e:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	493f      	ldr	r1, [pc, #252]	; (8002188 <HAL_TIM_Encoder_Init+0x140>)
 800208c:	400a      	ands	r2, r1
 800208e:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3304      	adds	r3, #4
 8002098:	0019      	movs	r1, r3
 800209a:	0010      	movs	r0, r2
 800209c:	f000 fb52 	bl	8002744 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	4313      	orrs	r3, r2
 80020c0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4a31      	ldr	r2, [pc, #196]	; (800218c <HAL_TIM_Encoder_Init+0x144>)
 80020c6:	4013      	ands	r3, r2
 80020c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	689a      	ldr	r2, [r3, #8]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	021b      	lsls	r3, r3, #8
 80020d4:	4313      	orrs	r3, r2
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4a2c      	ldr	r2, [pc, #176]	; (8002190 <HAL_TIM_Encoder_Init+0x148>)
 80020e0:	4013      	ands	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	4a2b      	ldr	r2, [pc, #172]	; (8002194 <HAL_TIM_Encoder_Init+0x14c>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	68da      	ldr	r2, [r3, #12]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	69db      	ldr	r3, [r3, #28]
 80020f4:	021b      	lsls	r3, r3, #8
 80020f6:	4313      	orrs	r3, r2
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	011a      	lsls	r2, r3, #4
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	031b      	lsls	r3, r3, #12
 800210a:	4313      	orrs	r3, r2
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	4313      	orrs	r3, r2
 8002110:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2222      	movs	r2, #34	; 0x22
 8002116:	4393      	bics	r3, r2
 8002118:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2288      	movs	r2, #136	; 0x88
 800211e:	4393      	bics	r3, r2
 8002120:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	011b      	lsls	r3, r3, #4
 800212c:	4313      	orrs	r3, r2
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	4313      	orrs	r3, r2
 8002132:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2246      	movs	r2, #70	; 0x46
 8002150:	2101      	movs	r1, #1
 8002152:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	223e      	movs	r2, #62	; 0x3e
 8002158:	2101      	movs	r1, #1
 800215a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	223f      	movs	r2, #63	; 0x3f
 8002160:	2101      	movs	r1, #1
 8002162:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2242      	movs	r2, #66	; 0x42
 8002168:	2101      	movs	r1, #1
 800216a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2243      	movs	r2, #67	; 0x43
 8002170:	2101      	movs	r1, #1
 8002172:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	223d      	movs	r2, #61	; 0x3d
 8002178:	2101      	movs	r1, #1
 800217a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	0018      	movs	r0, r3
 8002180:	46bd      	mov	sp, r7
 8002182:	b006      	add	sp, #24
 8002184:	bd80      	pop	{r7, pc}
 8002186:	46c0      	nop			; (mov r8, r8)
 8002188:	ffffbff8 	.word	0xffffbff8
 800218c:	fffffcfc 	.word	0xfffffcfc
 8002190:	fffff3f3 	.word	0xfffff3f3
 8002194:	ffff0f0f 	.word	0xffff0f0f

08002198 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002198:	b590      	push	{r4, r7, lr}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80021a2:	200f      	movs	r0, #15
 80021a4:	183b      	adds	r3, r7, r0
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	213e      	movs	r1, #62	; 0x3e
 80021aa:	5c52      	ldrb	r2, [r2, r1]
 80021ac:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80021ae:	230e      	movs	r3, #14
 80021b0:	18fb      	adds	r3, r7, r3
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	213f      	movs	r1, #63	; 0x3f
 80021b6:	5c52      	ldrb	r2, [r2, r1]
 80021b8:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80021ba:	240d      	movs	r4, #13
 80021bc:	193b      	adds	r3, r7, r4
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	2142      	movs	r1, #66	; 0x42
 80021c2:	5c52      	ldrb	r2, [r2, r1]
 80021c4:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80021c6:	230c      	movs	r3, #12
 80021c8:	18fb      	adds	r3, r7, r3
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	2143      	movs	r1, #67	; 0x43
 80021ce:	5c52      	ldrb	r2, [r2, r1]
 80021d0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d112      	bne.n	80021fe <HAL_TIM_Encoder_Start+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80021d8:	183b      	adds	r3, r7, r0
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d103      	bne.n	80021e8 <HAL_TIM_Encoder_Start+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80021e0:	193b      	adds	r3, r7, r4
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d001      	beq.n	80021ec <HAL_TIM_Encoder_Start+0x54>
    {
      return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e075      	b.n	80022d8 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	223e      	movs	r2, #62	; 0x3e
 80021f0:	2102      	movs	r1, #2
 80021f2:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2242      	movs	r2, #66	; 0x42
 80021f8:	2102      	movs	r1, #2
 80021fa:	5499      	strb	r1, [r3, r2]
 80021fc:	e03d      	b.n	800227a <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	2b04      	cmp	r3, #4
 8002202:	d114      	bne.n	800222e <HAL_TIM_Encoder_Start+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002204:	230e      	movs	r3, #14
 8002206:	18fb      	adds	r3, r7, r3
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d104      	bne.n	8002218 <HAL_TIM_Encoder_Start+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800220e:	230c      	movs	r3, #12
 8002210:	18fb      	adds	r3, r7, r3
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d001      	beq.n	800221c <HAL_TIM_Encoder_Start+0x84>
    {
      return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e05d      	b.n	80022d8 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	223f      	movs	r2, #63	; 0x3f
 8002220:	2102      	movs	r1, #2
 8002222:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2243      	movs	r2, #67	; 0x43
 8002228:	2102      	movs	r1, #2
 800222a:	5499      	strb	r1, [r3, r2]
 800222c:	e025      	b.n	800227a <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800222e:	230f      	movs	r3, #15
 8002230:	18fb      	adds	r3, r7, r3
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d10e      	bne.n	8002256 <HAL_TIM_Encoder_Start+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002238:	230e      	movs	r3, #14
 800223a:	18fb      	adds	r3, r7, r3
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d109      	bne.n	8002256 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002242:	230d      	movs	r3, #13
 8002244:	18fb      	adds	r3, r7, r3
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d104      	bne.n	8002256 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800224c:	230c      	movs	r3, #12
 800224e:	18fb      	adds	r3, r7, r3
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d001      	beq.n	800225a <HAL_TIM_Encoder_Start+0xc2>
    {
      return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e03e      	b.n	80022d8 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	223e      	movs	r2, #62	; 0x3e
 800225e:	2102      	movs	r1, #2
 8002260:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	223f      	movs	r2, #63	; 0x3f
 8002266:	2102      	movs	r1, #2
 8002268:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2242      	movs	r2, #66	; 0x42
 800226e:	2102      	movs	r1, #2
 8002270:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2243      	movs	r2, #67	; 0x43
 8002276:	2102      	movs	r1, #2
 8002278:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_TIM_Encoder_Start+0xf0>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	2b04      	cmp	r3, #4
 8002284:	d008      	beq.n	8002298 <HAL_TIM_Encoder_Start+0x100>
 8002286:	e00f      	b.n	80022a8 <HAL_TIM_Encoder_Start+0x110>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2201      	movs	r2, #1
 800228e:	2100      	movs	r1, #0
 8002290:	0018      	movs	r0, r3
 8002292:	f000 fd6d 	bl	8002d70 <TIM_CCxChannelCmd>
      break;
 8002296:	e016      	b.n	80022c6 <HAL_TIM_Encoder_Start+0x12e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2201      	movs	r2, #1
 800229e:	2104      	movs	r1, #4
 80022a0:	0018      	movs	r0, r3
 80022a2:	f000 fd65 	bl	8002d70 <TIM_CCxChannelCmd>
      break;
 80022a6:	e00e      	b.n	80022c6 <HAL_TIM_Encoder_Start+0x12e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2201      	movs	r2, #1
 80022ae:	2100      	movs	r1, #0
 80022b0:	0018      	movs	r0, r3
 80022b2:	f000 fd5d 	bl	8002d70 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2201      	movs	r2, #1
 80022bc:	2104      	movs	r1, #4
 80022be:	0018      	movs	r0, r3
 80022c0:	f000 fd56 	bl	8002d70 <TIM_CCxChannelCmd>
      break;
 80022c4:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2101      	movs	r1, #1
 80022d2:	430a      	orrs	r2, r1
 80022d4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	0018      	movs	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	b005      	add	sp, #20
 80022de:	bd90      	pop	{r4, r7, pc}

080022e0 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <HAL_TIM_Encoder_Stop+0x18>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d008      	beq.n	8002308 <HAL_TIM_Encoder_Stop+0x28>
 80022f6:	e00f      	b.n	8002318 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2200      	movs	r2, #0
 80022fe:	2100      	movs	r1, #0
 8002300:	0018      	movs	r0, r3
 8002302:	f000 fd35 	bl	8002d70 <TIM_CCxChannelCmd>
      break;
 8002306:	e016      	b.n	8002336 <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2200      	movs	r2, #0
 800230e:	2104      	movs	r1, #4
 8002310:	0018      	movs	r0, r3
 8002312:	f000 fd2d 	bl	8002d70 <TIM_CCxChannelCmd>
      break;
 8002316:	e00e      	b.n	8002336 <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2200      	movs	r2, #0
 800231e:	2100      	movs	r1, #0
 8002320:	0018      	movs	r0, r3
 8002322:	f000 fd25 	bl	8002d70 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2200      	movs	r2, #0
 800232c:	2104      	movs	r1, #4
 800232e:	0018      	movs	r0, r3
 8002330:	f000 fd1e 	bl	8002d70 <TIM_CCxChannelCmd>
      break;
 8002334:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	4a32      	ldr	r2, [pc, #200]	; (8002408 <HAL_TIM_Encoder_Stop+0x128>)
 800233e:	4013      	ands	r3, r2
 8002340:	d10d      	bne.n	800235e <HAL_TIM_Encoder_Stop+0x7e>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	4a30      	ldr	r2, [pc, #192]	; (800240c <HAL_TIM_Encoder_Stop+0x12c>)
 800234a:	4013      	ands	r3, r2
 800234c:	d107      	bne.n	800235e <HAL_TIM_Encoder_Stop+0x7e>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2101      	movs	r1, #1
 800235a:	438a      	bics	r2, r1
 800235c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <HAL_TIM_Encoder_Stop+0x8a>
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	2b04      	cmp	r3, #4
 8002368:	d138      	bne.n	80023dc <HAL_TIM_Encoder_Stop+0xfc>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d104      	bne.n	800237a <HAL_TIM_Encoder_Stop+0x9a>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	223e      	movs	r2, #62	; 0x3e
 8002374:	2101      	movs	r1, #1
 8002376:	5499      	strb	r1, [r3, r2]
 8002378:	e013      	b.n	80023a2 <HAL_TIM_Encoder_Stop+0xc2>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	2b04      	cmp	r3, #4
 800237e:	d104      	bne.n	800238a <HAL_TIM_Encoder_Stop+0xaa>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	223f      	movs	r2, #63	; 0x3f
 8002384:	2101      	movs	r1, #1
 8002386:	5499      	strb	r1, [r3, r2]
 8002388:	e00b      	b.n	80023a2 <HAL_TIM_Encoder_Stop+0xc2>
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	2b08      	cmp	r3, #8
 800238e:	d104      	bne.n	800239a <HAL_TIM_Encoder_Stop+0xba>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2240      	movs	r2, #64	; 0x40
 8002394:	2101      	movs	r1, #1
 8002396:	5499      	strb	r1, [r3, r2]
 8002398:	e003      	b.n	80023a2 <HAL_TIM_Encoder_Stop+0xc2>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2241      	movs	r2, #65	; 0x41
 800239e:	2101      	movs	r1, #1
 80023a0:	5499      	strb	r1, [r3, r2]
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d104      	bne.n	80023b2 <HAL_TIM_Encoder_Stop+0xd2>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2242      	movs	r2, #66	; 0x42
 80023ac:	2101      	movs	r1, #1
 80023ae:	5499      	strb	r1, [r3, r2]
 80023b0:	e024      	b.n	80023fc <HAL_TIM_Encoder_Stop+0x11c>
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	2b04      	cmp	r3, #4
 80023b6:	d104      	bne.n	80023c2 <HAL_TIM_Encoder_Stop+0xe2>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2243      	movs	r2, #67	; 0x43
 80023bc:	2101      	movs	r1, #1
 80023be:	5499      	strb	r1, [r3, r2]
 80023c0:	e01c      	b.n	80023fc <HAL_TIM_Encoder_Stop+0x11c>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d104      	bne.n	80023d2 <HAL_TIM_Encoder_Stop+0xf2>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2244      	movs	r2, #68	; 0x44
 80023cc:	2101      	movs	r1, #1
 80023ce:	5499      	strb	r1, [r3, r2]
 80023d0:	e014      	b.n	80023fc <HAL_TIM_Encoder_Stop+0x11c>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2245      	movs	r2, #69	; 0x45
 80023d6:	2101      	movs	r1, #1
 80023d8:	5499      	strb	r1, [r3, r2]
 80023da:	e00f      	b.n	80023fc <HAL_TIM_Encoder_Stop+0x11c>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	223e      	movs	r2, #62	; 0x3e
 80023e0:	2101      	movs	r1, #1
 80023e2:	5499      	strb	r1, [r3, r2]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	223f      	movs	r2, #63	; 0x3f
 80023e8:	2101      	movs	r1, #1
 80023ea:	5499      	strb	r1, [r3, r2]
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2242      	movs	r2, #66	; 0x42
 80023f0:	2101      	movs	r1, #1
 80023f2:	5499      	strb	r1, [r3, r2]
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2243      	movs	r2, #67	; 0x43
 80023f8:	2101      	movs	r1, #1
 80023fa:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	0018      	movs	r0, r3
 8002400:	46bd      	mov	sp, r7
 8002402:	b002      	add	sp, #8
 8002404:	bd80      	pop	{r7, pc}
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	00001111 	.word	0x00001111
 800240c:	00000444 	.word	0x00000444

08002410 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800241c:	2317      	movs	r3, #23
 800241e:	18fb      	adds	r3, r7, r3
 8002420:	2200      	movs	r2, #0
 8002422:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	223c      	movs	r2, #60	; 0x3c
 8002428:	5c9b      	ldrb	r3, [r3, r2]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d101      	bne.n	8002432 <HAL_TIM_PWM_ConfigChannel+0x22>
 800242e:	2302      	movs	r3, #2
 8002430:	e0ad      	b.n	800258e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	223c      	movs	r2, #60	; 0x3c
 8002436:	2101      	movs	r1, #1
 8002438:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b0c      	cmp	r3, #12
 800243e:	d100      	bne.n	8002442 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002440:	e076      	b.n	8002530 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b0c      	cmp	r3, #12
 8002446:	d900      	bls.n	800244a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002448:	e095      	b.n	8002576 <HAL_TIM_PWM_ConfigChannel+0x166>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b08      	cmp	r3, #8
 800244e:	d04e      	beq.n	80024ee <HAL_TIM_PWM_ConfigChannel+0xde>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b08      	cmp	r3, #8
 8002454:	d900      	bls.n	8002458 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002456:	e08e      	b.n	8002576 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_TIM_PWM_ConfigChannel+0x56>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b04      	cmp	r3, #4
 8002462:	d021      	beq.n	80024a8 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002464:	e087      	b.n	8002576 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	0011      	movs	r1, r2
 800246e:	0018      	movs	r0, r3
 8002470:	f000 f9e8 	bl	8002844 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	699a      	ldr	r2, [r3, #24]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2108      	movs	r1, #8
 8002480:	430a      	orrs	r2, r1
 8002482:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	699a      	ldr	r2, [r3, #24]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2104      	movs	r1, #4
 8002490:	438a      	bics	r2, r1
 8002492:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6999      	ldr	r1, [r3, #24]
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	691a      	ldr	r2, [r3, #16]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	619a      	str	r2, [r3, #24]
      break;
 80024a6:	e06b      	b.n	8002580 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68ba      	ldr	r2, [r7, #8]
 80024ae:	0011      	movs	r1, r2
 80024b0:	0018      	movs	r0, r3
 80024b2:	f000 fa4f 	bl	8002954 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	699a      	ldr	r2, [r3, #24]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2180      	movs	r1, #128	; 0x80
 80024c2:	0109      	lsls	r1, r1, #4
 80024c4:	430a      	orrs	r2, r1
 80024c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	699a      	ldr	r2, [r3, #24]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4931      	ldr	r1, [pc, #196]	; (8002598 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80024d4:	400a      	ands	r2, r1
 80024d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6999      	ldr	r1, [r3, #24]
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	021a      	lsls	r2, r3, #8
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	619a      	str	r2, [r3, #24]
      break;
 80024ec:	e048      	b.n	8002580 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	0011      	movs	r1, r2
 80024f6:	0018      	movs	r0, r3
 80024f8:	f000 fab0 	bl	8002a5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	69da      	ldr	r2, [r3, #28]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2108      	movs	r1, #8
 8002508:	430a      	orrs	r2, r1
 800250a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	69da      	ldr	r2, [r3, #28]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2104      	movs	r1, #4
 8002518:	438a      	bics	r2, r1
 800251a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	69d9      	ldr	r1, [r3, #28]
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	691a      	ldr	r2, [r3, #16]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	61da      	str	r2, [r3, #28]
      break;
 800252e:	e027      	b.n	8002580 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	0011      	movs	r1, r2
 8002538:	0018      	movs	r0, r3
 800253a:	f000 fb15 	bl	8002b68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	69da      	ldr	r2, [r3, #28]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2180      	movs	r1, #128	; 0x80
 800254a:	0109      	lsls	r1, r1, #4
 800254c:	430a      	orrs	r2, r1
 800254e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	69da      	ldr	r2, [r3, #28]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	490f      	ldr	r1, [pc, #60]	; (8002598 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800255c:	400a      	ands	r2, r1
 800255e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	69d9      	ldr	r1, [r3, #28]
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	021a      	lsls	r2, r3, #8
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	61da      	str	r2, [r3, #28]
      break;
 8002574:	e004      	b.n	8002580 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002576:	2317      	movs	r3, #23
 8002578:	18fb      	adds	r3, r7, r3
 800257a:	2201      	movs	r2, #1
 800257c:	701a      	strb	r2, [r3, #0]
      break;
 800257e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	223c      	movs	r2, #60	; 0x3c
 8002584:	2100      	movs	r1, #0
 8002586:	5499      	strb	r1, [r3, r2]

  return status;
 8002588:	2317      	movs	r3, #23
 800258a:	18fb      	adds	r3, r7, r3
 800258c:	781b      	ldrb	r3, [r3, #0]
}
 800258e:	0018      	movs	r0, r3
 8002590:	46bd      	mov	sp, r7
 8002592:	b006      	add	sp, #24
 8002594:	bd80      	pop	{r7, pc}
 8002596:	46c0      	nop			; (mov r8, r8)
 8002598:	fffffbff 	.word	0xfffffbff

0800259c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025a6:	230f      	movs	r3, #15
 80025a8:	18fb      	adds	r3, r7, r3
 80025aa:	2200      	movs	r2, #0
 80025ac:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	223c      	movs	r2, #60	; 0x3c
 80025b2:	5c9b      	ldrb	r3, [r3, r2]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d101      	bne.n	80025bc <HAL_TIM_ConfigClockSource+0x20>
 80025b8:	2302      	movs	r3, #2
 80025ba:	e0bc      	b.n	8002736 <HAL_TIM_ConfigClockSource+0x19a>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	223c      	movs	r2, #60	; 0x3c
 80025c0:	2101      	movs	r1, #1
 80025c2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	223d      	movs	r2, #61	; 0x3d
 80025c8:	2102      	movs	r1, #2
 80025ca:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	2277      	movs	r2, #119	; 0x77
 80025d8:	4393      	bics	r3, r2
 80025da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	4a58      	ldr	r2, [pc, #352]	; (8002740 <HAL_TIM_ConfigClockSource+0x1a4>)
 80025e0:	4013      	ands	r3, r2
 80025e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2280      	movs	r2, #128	; 0x80
 80025f2:	0192      	lsls	r2, r2, #6
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d040      	beq.n	800267a <HAL_TIM_ConfigClockSource+0xde>
 80025f8:	2280      	movs	r2, #128	; 0x80
 80025fa:	0192      	lsls	r2, r2, #6
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d900      	bls.n	8002602 <HAL_TIM_ConfigClockSource+0x66>
 8002600:	e088      	b.n	8002714 <HAL_TIM_ConfigClockSource+0x178>
 8002602:	2280      	movs	r2, #128	; 0x80
 8002604:	0152      	lsls	r2, r2, #5
 8002606:	4293      	cmp	r3, r2
 8002608:	d100      	bne.n	800260c <HAL_TIM_ConfigClockSource+0x70>
 800260a:	e088      	b.n	800271e <HAL_TIM_ConfigClockSource+0x182>
 800260c:	2280      	movs	r2, #128	; 0x80
 800260e:	0152      	lsls	r2, r2, #5
 8002610:	4293      	cmp	r3, r2
 8002612:	d900      	bls.n	8002616 <HAL_TIM_ConfigClockSource+0x7a>
 8002614:	e07e      	b.n	8002714 <HAL_TIM_ConfigClockSource+0x178>
 8002616:	2b70      	cmp	r3, #112	; 0x70
 8002618:	d018      	beq.n	800264c <HAL_TIM_ConfigClockSource+0xb0>
 800261a:	d900      	bls.n	800261e <HAL_TIM_ConfigClockSource+0x82>
 800261c:	e07a      	b.n	8002714 <HAL_TIM_ConfigClockSource+0x178>
 800261e:	2b60      	cmp	r3, #96	; 0x60
 8002620:	d04f      	beq.n	80026c2 <HAL_TIM_ConfigClockSource+0x126>
 8002622:	d900      	bls.n	8002626 <HAL_TIM_ConfigClockSource+0x8a>
 8002624:	e076      	b.n	8002714 <HAL_TIM_ConfigClockSource+0x178>
 8002626:	2b50      	cmp	r3, #80	; 0x50
 8002628:	d03b      	beq.n	80026a2 <HAL_TIM_ConfigClockSource+0x106>
 800262a:	d900      	bls.n	800262e <HAL_TIM_ConfigClockSource+0x92>
 800262c:	e072      	b.n	8002714 <HAL_TIM_ConfigClockSource+0x178>
 800262e:	2b40      	cmp	r3, #64	; 0x40
 8002630:	d057      	beq.n	80026e2 <HAL_TIM_ConfigClockSource+0x146>
 8002632:	d900      	bls.n	8002636 <HAL_TIM_ConfigClockSource+0x9a>
 8002634:	e06e      	b.n	8002714 <HAL_TIM_ConfigClockSource+0x178>
 8002636:	2b30      	cmp	r3, #48	; 0x30
 8002638:	d063      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x166>
 800263a:	d86b      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x178>
 800263c:	2b20      	cmp	r3, #32
 800263e:	d060      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x166>
 8002640:	d868      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x178>
 8002642:	2b00      	cmp	r3, #0
 8002644:	d05d      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x166>
 8002646:	2b10      	cmp	r3, #16
 8002648:	d05b      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x166>
 800264a:	e063      	b.n	8002714 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6818      	ldr	r0, [r3, #0]
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	6899      	ldr	r1, [r3, #8]
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	f000 fb68 	bl	8002d30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2277      	movs	r2, #119	; 0x77
 800266c:	4313      	orrs	r3, r2
 800266e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	609a      	str	r2, [r3, #8]
      break;
 8002678:	e052      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6818      	ldr	r0, [r3, #0]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	6899      	ldr	r1, [r3, #8]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	f000 fb51 	bl	8002d30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2180      	movs	r1, #128	; 0x80
 800269a:	01c9      	lsls	r1, r1, #7
 800269c:	430a      	orrs	r2, r1
 800269e:	609a      	str	r2, [r3, #8]
      break;
 80026a0:	e03e      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6818      	ldr	r0, [r3, #0]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	6859      	ldr	r1, [r3, #4]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	001a      	movs	r2, r3
 80026b0:	f000 fac4 	bl	8002c3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2150      	movs	r1, #80	; 0x50
 80026ba:	0018      	movs	r0, r3
 80026bc:	f000 fb1e 	bl	8002cfc <TIM_ITRx_SetConfig>
      break;
 80026c0:	e02e      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6818      	ldr	r0, [r3, #0]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	6859      	ldr	r1, [r3, #4]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	001a      	movs	r2, r3
 80026d0:	f000 fae2 	bl	8002c98 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2160      	movs	r1, #96	; 0x60
 80026da:	0018      	movs	r0, r3
 80026dc:	f000 fb0e 	bl	8002cfc <TIM_ITRx_SetConfig>
      break;
 80026e0:	e01e      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6818      	ldr	r0, [r3, #0]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	6859      	ldr	r1, [r3, #4]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	001a      	movs	r2, r3
 80026f0:	f000 faa4 	bl	8002c3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2140      	movs	r1, #64	; 0x40
 80026fa:	0018      	movs	r0, r3
 80026fc:	f000 fafe 	bl	8002cfc <TIM_ITRx_SetConfig>
      break;
 8002700:	e00e      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	0019      	movs	r1, r3
 800270c:	0010      	movs	r0, r2
 800270e:	f000 faf5 	bl	8002cfc <TIM_ITRx_SetConfig>
      break;
 8002712:	e005      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002714:	230f      	movs	r3, #15
 8002716:	18fb      	adds	r3, r7, r3
 8002718:	2201      	movs	r2, #1
 800271a:	701a      	strb	r2, [r3, #0]
      break;
 800271c:	e000      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800271e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	223d      	movs	r2, #61	; 0x3d
 8002724:	2101      	movs	r1, #1
 8002726:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	223c      	movs	r2, #60	; 0x3c
 800272c:	2100      	movs	r1, #0
 800272e:	5499      	strb	r1, [r3, r2]

  return status;
 8002730:	230f      	movs	r3, #15
 8002732:	18fb      	adds	r3, r7, r3
 8002734:	781b      	ldrb	r3, [r3, #0]
}
 8002736:	0018      	movs	r0, r3
 8002738:	46bd      	mov	sp, r7
 800273a:	b004      	add	sp, #16
 800273c:	bd80      	pop	{r7, pc}
 800273e:	46c0      	nop			; (mov r8, r8)
 8002740:	ffff00ff 	.word	0xffff00ff

08002744 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a34      	ldr	r2, [pc, #208]	; (8002828 <TIM_Base_SetConfig+0xe4>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d008      	beq.n	800276e <TIM_Base_SetConfig+0x2a>
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	2380      	movs	r3, #128	; 0x80
 8002760:	05db      	lsls	r3, r3, #23
 8002762:	429a      	cmp	r2, r3
 8002764:	d003      	beq.n	800276e <TIM_Base_SetConfig+0x2a>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a30      	ldr	r2, [pc, #192]	; (800282c <TIM_Base_SetConfig+0xe8>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d108      	bne.n	8002780 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2270      	movs	r2, #112	; 0x70
 8002772:	4393      	bics	r3, r2
 8002774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	4313      	orrs	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a29      	ldr	r2, [pc, #164]	; (8002828 <TIM_Base_SetConfig+0xe4>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d018      	beq.n	80027ba <TIM_Base_SetConfig+0x76>
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	2380      	movs	r3, #128	; 0x80
 800278c:	05db      	lsls	r3, r3, #23
 800278e:	429a      	cmp	r2, r3
 8002790:	d013      	beq.n	80027ba <TIM_Base_SetConfig+0x76>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a25      	ldr	r2, [pc, #148]	; (800282c <TIM_Base_SetConfig+0xe8>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d00f      	beq.n	80027ba <TIM_Base_SetConfig+0x76>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a24      	ldr	r2, [pc, #144]	; (8002830 <TIM_Base_SetConfig+0xec>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d00b      	beq.n	80027ba <TIM_Base_SetConfig+0x76>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a23      	ldr	r2, [pc, #140]	; (8002834 <TIM_Base_SetConfig+0xf0>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d007      	beq.n	80027ba <TIM_Base_SetConfig+0x76>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a22      	ldr	r2, [pc, #136]	; (8002838 <TIM_Base_SetConfig+0xf4>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d003      	beq.n	80027ba <TIM_Base_SetConfig+0x76>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a21      	ldr	r2, [pc, #132]	; (800283c <TIM_Base_SetConfig+0xf8>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d108      	bne.n	80027cc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	4a20      	ldr	r2, [pc, #128]	; (8002840 <TIM_Base_SetConfig+0xfc>)
 80027be:	4013      	ands	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2280      	movs	r2, #128	; 0x80
 80027d0:	4393      	bics	r3, r2
 80027d2:	001a      	movs	r2, r3
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	4313      	orrs	r3, r2
 80027da:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a0c      	ldr	r2, [pc, #48]	; (8002828 <TIM_Base_SetConfig+0xe4>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d00b      	beq.n	8002812 <TIM_Base_SetConfig+0xce>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a0d      	ldr	r2, [pc, #52]	; (8002834 <TIM_Base_SetConfig+0xf0>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d007      	beq.n	8002812 <TIM_Base_SetConfig+0xce>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a0c      	ldr	r2, [pc, #48]	; (8002838 <TIM_Base_SetConfig+0xf4>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d003      	beq.n	8002812 <TIM_Base_SetConfig+0xce>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a0b      	ldr	r2, [pc, #44]	; (800283c <TIM_Base_SetConfig+0xf8>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d103      	bne.n	800281a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	691a      	ldr	r2, [r3, #16]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	615a      	str	r2, [r3, #20]
}
 8002820:	46c0      	nop			; (mov r8, r8)
 8002822:	46bd      	mov	sp, r7
 8002824:	b004      	add	sp, #16
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40012c00 	.word	0x40012c00
 800282c:	40000400 	.word	0x40000400
 8002830:	40002000 	.word	0x40002000
 8002834:	40014000 	.word	0x40014000
 8002838:	40014400 	.word	0x40014400
 800283c:	40014800 	.word	0x40014800
 8002840:	fffffcff 	.word	0xfffffcff

08002844 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	2201      	movs	r2, #1
 8002854:	4393      	bics	r3, r2
 8002856:	001a      	movs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2270      	movs	r2, #112	; 0x70
 8002872:	4393      	bics	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2203      	movs	r2, #3
 800287a:	4393      	bics	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	4313      	orrs	r3, r2
 8002886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	2202      	movs	r2, #2
 800288c:	4393      	bics	r3, r2
 800288e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	4313      	orrs	r3, r2
 8002898:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a27      	ldr	r2, [pc, #156]	; (800293c <TIM_OC1_SetConfig+0xf8>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d00b      	beq.n	80028ba <TIM_OC1_SetConfig+0x76>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a26      	ldr	r2, [pc, #152]	; (8002940 <TIM_OC1_SetConfig+0xfc>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d007      	beq.n	80028ba <TIM_OC1_SetConfig+0x76>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a25      	ldr	r2, [pc, #148]	; (8002944 <TIM_OC1_SetConfig+0x100>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d003      	beq.n	80028ba <TIM_OC1_SetConfig+0x76>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a24      	ldr	r2, [pc, #144]	; (8002948 <TIM_OC1_SetConfig+0x104>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d10c      	bne.n	80028d4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	2208      	movs	r2, #8
 80028be:	4393      	bics	r3, r2
 80028c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	2204      	movs	r2, #4
 80028d0:	4393      	bics	r3, r2
 80028d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a19      	ldr	r2, [pc, #100]	; (800293c <TIM_OC1_SetConfig+0xf8>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d00b      	beq.n	80028f4 <TIM_OC1_SetConfig+0xb0>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a18      	ldr	r2, [pc, #96]	; (8002940 <TIM_OC1_SetConfig+0xfc>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d007      	beq.n	80028f4 <TIM_OC1_SetConfig+0xb0>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a17      	ldr	r2, [pc, #92]	; (8002944 <TIM_OC1_SetConfig+0x100>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d003      	beq.n	80028f4 <TIM_OC1_SetConfig+0xb0>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a16      	ldr	r2, [pc, #88]	; (8002948 <TIM_OC1_SetConfig+0x104>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d111      	bne.n	8002918 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	4a15      	ldr	r2, [pc, #84]	; (800294c <TIM_OC1_SetConfig+0x108>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4a14      	ldr	r2, [pc, #80]	; (8002950 <TIM_OC1_SetConfig+0x10c>)
 8002900:	4013      	ands	r3, r2
 8002902:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	4313      	orrs	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	4313      	orrs	r3, r2
 8002916:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	621a      	str	r2, [r3, #32]
}
 8002932:	46c0      	nop			; (mov r8, r8)
 8002934:	46bd      	mov	sp, r7
 8002936:	b006      	add	sp, #24
 8002938:	bd80      	pop	{r7, pc}
 800293a:	46c0      	nop			; (mov r8, r8)
 800293c:	40012c00 	.word	0x40012c00
 8002940:	40014000 	.word	0x40014000
 8002944:	40014400 	.word	0x40014400
 8002948:	40014800 	.word	0x40014800
 800294c:	fffffeff 	.word	0xfffffeff
 8002950:	fffffdff 	.word	0xfffffdff

08002954 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	2210      	movs	r2, #16
 8002964:	4393      	bics	r3, r2
 8002966:	001a      	movs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	4a2e      	ldr	r2, [pc, #184]	; (8002a3c <TIM_OC2_SetConfig+0xe8>)
 8002982:	4013      	ands	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	4a2d      	ldr	r2, [pc, #180]	; (8002a40 <TIM_OC2_SetConfig+0xec>)
 800298a:	4013      	ands	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	021b      	lsls	r3, r3, #8
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	4313      	orrs	r3, r2
 8002998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	2220      	movs	r2, #32
 800299e:	4393      	bics	r3, r2
 80029a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a24      	ldr	r2, [pc, #144]	; (8002a44 <TIM_OC2_SetConfig+0xf0>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d10d      	bne.n	80029d2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2280      	movs	r2, #128	; 0x80
 80029ba:	4393      	bics	r3, r2
 80029bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	2240      	movs	r2, #64	; 0x40
 80029ce:	4393      	bics	r3, r2
 80029d0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a1b      	ldr	r2, [pc, #108]	; (8002a44 <TIM_OC2_SetConfig+0xf0>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d00b      	beq.n	80029f2 <TIM_OC2_SetConfig+0x9e>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a1a      	ldr	r2, [pc, #104]	; (8002a48 <TIM_OC2_SetConfig+0xf4>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d007      	beq.n	80029f2 <TIM_OC2_SetConfig+0x9e>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a19      	ldr	r2, [pc, #100]	; (8002a4c <TIM_OC2_SetConfig+0xf8>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d003      	beq.n	80029f2 <TIM_OC2_SetConfig+0x9e>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a18      	ldr	r2, [pc, #96]	; (8002a50 <TIM_OC2_SetConfig+0xfc>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d113      	bne.n	8002a1a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	4a17      	ldr	r2, [pc, #92]	; (8002a54 <TIM_OC2_SetConfig+0x100>)
 80029f6:	4013      	ands	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	4a16      	ldr	r2, [pc, #88]	; (8002a58 <TIM_OC2_SetConfig+0x104>)
 80029fe:	4013      	ands	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	621a      	str	r2, [r3, #32]
}
 8002a34:	46c0      	nop			; (mov r8, r8)
 8002a36:	46bd      	mov	sp, r7
 8002a38:	b006      	add	sp, #24
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	ffff8fff 	.word	0xffff8fff
 8002a40:	fffffcff 	.word	0xfffffcff
 8002a44:	40012c00 	.word	0x40012c00
 8002a48:	40014000 	.word	0x40014000
 8002a4c:	40014400 	.word	0x40014400
 8002a50:	40014800 	.word	0x40014800
 8002a54:	fffffbff 	.word	0xfffffbff
 8002a58:	fffff7ff 	.word	0xfffff7ff

08002a5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	4a35      	ldr	r2, [pc, #212]	; (8002b40 <TIM_OC3_SetConfig+0xe4>)
 8002a6c:	401a      	ands	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2270      	movs	r2, #112	; 0x70
 8002a88:	4393      	bics	r3, r2
 8002a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2203      	movs	r2, #3
 8002a90:	4393      	bics	r3, r2
 8002a92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	4a28      	ldr	r2, [pc, #160]	; (8002b44 <TIM_OC3_SetConfig+0xe8>)
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	021b      	lsls	r3, r3, #8
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a24      	ldr	r2, [pc, #144]	; (8002b48 <TIM_OC3_SetConfig+0xec>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d10d      	bne.n	8002ad6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	4a23      	ldr	r2, [pc, #140]	; (8002b4c <TIM_OC3_SetConfig+0xf0>)
 8002abe:	4013      	ands	r3, r2
 8002ac0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	021b      	lsls	r3, r3, #8
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	4a1f      	ldr	r2, [pc, #124]	; (8002b50 <TIM_OC3_SetConfig+0xf4>)
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a1b      	ldr	r2, [pc, #108]	; (8002b48 <TIM_OC3_SetConfig+0xec>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d00b      	beq.n	8002af6 <TIM_OC3_SetConfig+0x9a>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a1c      	ldr	r2, [pc, #112]	; (8002b54 <TIM_OC3_SetConfig+0xf8>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d007      	beq.n	8002af6 <TIM_OC3_SetConfig+0x9a>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a1b      	ldr	r2, [pc, #108]	; (8002b58 <TIM_OC3_SetConfig+0xfc>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d003      	beq.n	8002af6 <TIM_OC3_SetConfig+0x9a>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a1a      	ldr	r2, [pc, #104]	; (8002b5c <TIM_OC3_SetConfig+0x100>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d113      	bne.n	8002b1e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4a19      	ldr	r2, [pc, #100]	; (8002b60 <TIM_OC3_SetConfig+0x104>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	4a18      	ldr	r2, [pc, #96]	; (8002b64 <TIM_OC3_SetConfig+0x108>)
 8002b02:	4013      	ands	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	011b      	lsls	r3, r3, #4
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	011b      	lsls	r3, r3, #4
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	621a      	str	r2, [r3, #32]
}
 8002b38:	46c0      	nop			; (mov r8, r8)
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	b006      	add	sp, #24
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	fffffeff 	.word	0xfffffeff
 8002b44:	fffffdff 	.word	0xfffffdff
 8002b48:	40012c00 	.word	0x40012c00
 8002b4c:	fffff7ff 	.word	0xfffff7ff
 8002b50:	fffffbff 	.word	0xfffffbff
 8002b54:	40014000 	.word	0x40014000
 8002b58:	40014400 	.word	0x40014400
 8002b5c:	40014800 	.word	0x40014800
 8002b60:	ffffefff 	.word	0xffffefff
 8002b64:	ffffdfff 	.word	0xffffdfff

08002b68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	4a28      	ldr	r2, [pc, #160]	; (8002c18 <TIM_OC4_SetConfig+0xb0>)
 8002b78:	401a      	ands	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4a22      	ldr	r2, [pc, #136]	; (8002c1c <TIM_OC4_SetConfig+0xb4>)
 8002b94:	4013      	ands	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4a21      	ldr	r2, [pc, #132]	; (8002c20 <TIM_OC4_SetConfig+0xb8>)
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	021b      	lsls	r3, r3, #8
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4a1d      	ldr	r2, [pc, #116]	; (8002c24 <TIM_OC4_SetConfig+0xbc>)
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	031b      	lsls	r3, r3, #12
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a19      	ldr	r2, [pc, #100]	; (8002c28 <TIM_OC4_SetConfig+0xc0>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d00b      	beq.n	8002be0 <TIM_OC4_SetConfig+0x78>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a18      	ldr	r2, [pc, #96]	; (8002c2c <TIM_OC4_SetConfig+0xc4>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d007      	beq.n	8002be0 <TIM_OC4_SetConfig+0x78>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a17      	ldr	r2, [pc, #92]	; (8002c30 <TIM_OC4_SetConfig+0xc8>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d003      	beq.n	8002be0 <TIM_OC4_SetConfig+0x78>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a16      	ldr	r2, [pc, #88]	; (8002c34 <TIM_OC4_SetConfig+0xcc>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d109      	bne.n	8002bf4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	4a15      	ldr	r2, [pc, #84]	; (8002c38 <TIM_OC4_SetConfig+0xd0>)
 8002be4:	4013      	ands	r3, r2
 8002be6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	019b      	lsls	r3, r3, #6
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	621a      	str	r2, [r3, #32]
}
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	46bd      	mov	sp, r7
 8002c12:	b006      	add	sp, #24
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	ffffefff 	.word	0xffffefff
 8002c1c:	ffff8fff 	.word	0xffff8fff
 8002c20:	fffffcff 	.word	0xfffffcff
 8002c24:	ffffdfff 	.word	0xffffdfff
 8002c28:	40012c00 	.word	0x40012c00
 8002c2c:	40014000 	.word	0x40014000
 8002c30:	40014400 	.word	0x40014400
 8002c34:	40014800 	.word	0x40014800
 8002c38:	ffffbfff 	.word	0xffffbfff

08002c3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	2201      	movs	r2, #1
 8002c54:	4393      	bics	r3, r2
 8002c56:	001a      	movs	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	22f0      	movs	r2, #240	; 0xf0
 8002c66:	4393      	bics	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	011b      	lsls	r3, r3, #4
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	220a      	movs	r2, #10
 8002c78:	4393      	bics	r3, r2
 8002c7a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	621a      	str	r2, [r3, #32]
}
 8002c90:	46c0      	nop			; (mov r8, r8)
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b006      	add	sp, #24
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	2210      	movs	r2, #16
 8002caa:	4393      	bics	r3, r2
 8002cac:	001a      	movs	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	4a0d      	ldr	r2, [pc, #52]	; (8002cf8 <TIM_TI2_ConfigInputStage+0x60>)
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	031b      	lsls	r3, r3, #12
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	22a0      	movs	r2, #160	; 0xa0
 8002cd4:	4393      	bics	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	011b      	lsls	r3, r3, #4
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	621a      	str	r2, [r3, #32]
}
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	b006      	add	sp, #24
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	ffff0fff 	.word	0xffff0fff

08002cfc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2270      	movs	r2, #112	; 0x70
 8002d10:	4393      	bics	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	2207      	movs	r2, #7
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	609a      	str	r2, [r3, #8]
}
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	b004      	add	sp, #16
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
 8002d3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	4a09      	ldr	r2, [pc, #36]	; (8002d6c <TIM_ETR_SetConfig+0x3c>)
 8002d48:	4013      	ands	r3, r2
 8002d4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	021a      	lsls	r2, r3, #8
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	431a      	orrs	r2, r3
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	609a      	str	r2, [r3, #8]
}
 8002d64:	46c0      	nop			; (mov r8, r8)
 8002d66:	46bd      	mov	sp, r7
 8002d68:	b006      	add	sp, #24
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	ffff00ff 	.word	0xffff00ff

08002d70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	221f      	movs	r2, #31
 8002d80:	4013      	ands	r3, r2
 8002d82:	2201      	movs	r2, #1
 8002d84:	409a      	lsls	r2, r3
 8002d86:	0013      	movs	r3, r2
 8002d88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	43d2      	mvns	r2, r2
 8002d92:	401a      	ands	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6a1a      	ldr	r2, [r3, #32]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	211f      	movs	r1, #31
 8002da0:	400b      	ands	r3, r1
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	4099      	lsls	r1, r3
 8002da6:	000b      	movs	r3, r1
 8002da8:	431a      	orrs	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	621a      	str	r2, [r3, #32]
}
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	46bd      	mov	sp, r7
 8002db2:	b006      	add	sp, #24
 8002db4:	bd80      	pop	{r7, pc}
	...

08002db8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	223c      	movs	r2, #60	; 0x3c
 8002dc6:	5c9b      	ldrb	r3, [r3, r2]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d101      	bne.n	8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e047      	b.n	8002e60 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	223c      	movs	r2, #60	; 0x3c
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	223d      	movs	r2, #61	; 0x3d
 8002ddc:	2102      	movs	r1, #2
 8002dde:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2270      	movs	r2, #112	; 0x70
 8002df4:	4393      	bics	r3, r2
 8002df6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a16      	ldr	r2, [pc, #88]	; (8002e68 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d00f      	beq.n	8002e34 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	2380      	movs	r3, #128	; 0x80
 8002e1a:	05db      	lsls	r3, r3, #23
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d009      	beq.n	8002e34 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a11      	ldr	r2, [pc, #68]	; (8002e6c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d004      	beq.n	8002e34 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a10      	ldr	r2, [pc, #64]	; (8002e70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d10c      	bne.n	8002e4e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2280      	movs	r2, #128	; 0x80
 8002e38:	4393      	bics	r3, r2
 8002e3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	223d      	movs	r2, #61	; 0x3d
 8002e52:	2101      	movs	r1, #1
 8002e54:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	223c      	movs	r2, #60	; 0x3c
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	0018      	movs	r0, r3
 8002e62:	46bd      	mov	sp, r7
 8002e64:	b004      	add	sp, #16
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40012c00 	.word	0x40012c00
 8002e6c:	40000400 	.word	0x40000400
 8002e70:	40014000 	.word	0x40014000

08002e74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e044      	b.n	8002f10 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d107      	bne.n	8002e9e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2274      	movs	r2, #116	; 0x74
 8002e92:	2100      	movs	r1, #0
 8002e94:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f7fd fcf5 	bl	8000888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2224      	movs	r2, #36	; 0x24
 8002ea2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2101      	movs	r1, #1
 8002eb0:	438a      	bics	r2, r1
 8002eb2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	f000 f8da 	bl	8003070 <UART_SetConfig>
 8002ebc:	0003      	movs	r3, r0
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d101      	bne.n	8002ec6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e024      	b.n	8002f10 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	f000 fa55 	bl	8003380 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	490d      	ldr	r1, [pc, #52]	; (8002f18 <HAL_UART_Init+0xa4>)
 8002ee2:	400a      	ands	r2, r1
 8002ee4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	212a      	movs	r1, #42	; 0x2a
 8002ef2:	438a      	bics	r2, r1
 8002ef4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2101      	movs	r1, #1
 8002f02:	430a      	orrs	r2, r1
 8002f04:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f000 faed 	bl	80034e8 <UART_CheckIdleState>
 8002f0e:	0003      	movs	r3, r0
}
 8002f10:	0018      	movs	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	b002      	add	sp, #8
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	ffffb7ff 	.word	0xffffb7ff

08002f1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b08a      	sub	sp, #40	; 0x28
 8002f20:	af02      	add	r7, sp, #8
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	603b      	str	r3, [r7, #0]
 8002f28:	1dbb      	adds	r3, r7, #6
 8002f2a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f30:	2b20      	cmp	r3, #32
 8002f32:	d000      	beq.n	8002f36 <HAL_UART_Transmit+0x1a>
 8002f34:	e096      	b.n	8003064 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d003      	beq.n	8002f44 <HAL_UART_Transmit+0x28>
 8002f3c:	1dbb      	adds	r3, r7, #6
 8002f3e:	881b      	ldrh	r3, [r3, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e08e      	b.n	8003066 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	2380      	movs	r3, #128	; 0x80
 8002f4e:	015b      	lsls	r3, r3, #5
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d109      	bne.n	8002f68 <HAL_UART_Transmit+0x4c>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d105      	bne.n	8002f68 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	4013      	ands	r3, r2
 8002f62:	d001      	beq.n	8002f68 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e07e      	b.n	8003066 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2274      	movs	r2, #116	; 0x74
 8002f6c:	5c9b      	ldrb	r3, [r3, r2]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d101      	bne.n	8002f76 <HAL_UART_Transmit+0x5a>
 8002f72:	2302      	movs	r3, #2
 8002f74:	e077      	b.n	8003066 <HAL_UART_Transmit+0x14a>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2274      	movs	r2, #116	; 0x74
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2280      	movs	r2, #128	; 0x80
 8002f82:	2100      	movs	r1, #0
 8002f84:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2221      	movs	r2, #33	; 0x21
 8002f8a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f8c:	f7fd fdaa 	bl	8000ae4 <HAL_GetTick>
 8002f90:	0003      	movs	r3, r0
 8002f92:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	1dba      	adds	r2, r7, #6
 8002f98:	2150      	movs	r1, #80	; 0x50
 8002f9a:	8812      	ldrh	r2, [r2, #0]
 8002f9c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	1dba      	adds	r2, r7, #6
 8002fa2:	2152      	movs	r1, #82	; 0x52
 8002fa4:	8812      	ldrh	r2, [r2, #0]
 8002fa6:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	2380      	movs	r3, #128	; 0x80
 8002fae:	015b      	lsls	r3, r3, #5
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d108      	bne.n	8002fc6 <HAL_UART_Transmit+0xaa>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d104      	bne.n	8002fc6 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	61bb      	str	r3, [r7, #24]
 8002fc4:	e003      	b.n	8002fce <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2274      	movs	r2, #116	; 0x74
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002fd6:	e02d      	b.n	8003034 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	0013      	movs	r3, r2
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	2180      	movs	r1, #128	; 0x80
 8002fe6:	f000 fac7 	bl	8003578 <UART_WaitOnFlagUntilTimeout>
 8002fea:	1e03      	subs	r3, r0, #0
 8002fec:	d001      	beq.n	8002ff2 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e039      	b.n	8003066 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10b      	bne.n	8003010 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	881a      	ldrh	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	05d2      	lsls	r2, r2, #23
 8003002:	0dd2      	lsrs	r2, r2, #23
 8003004:	b292      	uxth	r2, r2
 8003006:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	3302      	adds	r3, #2
 800300c:	61bb      	str	r3, [r7, #24]
 800300e:	e008      	b.n	8003022 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	781a      	ldrb	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	b292      	uxth	r2, r2
 800301a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	3301      	adds	r3, #1
 8003020:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2252      	movs	r2, #82	; 0x52
 8003026:	5a9b      	ldrh	r3, [r3, r2]
 8003028:	b29b      	uxth	r3, r3
 800302a:	3b01      	subs	r3, #1
 800302c:	b299      	uxth	r1, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2252      	movs	r2, #82	; 0x52
 8003032:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2252      	movs	r2, #82	; 0x52
 8003038:	5a9b      	ldrh	r3, [r3, r2]
 800303a:	b29b      	uxth	r3, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1cb      	bne.n	8002fd8 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	0013      	movs	r3, r2
 800304a:	2200      	movs	r2, #0
 800304c:	2140      	movs	r1, #64	; 0x40
 800304e:	f000 fa93 	bl	8003578 <UART_WaitOnFlagUntilTimeout>
 8003052:	1e03      	subs	r3, r0, #0
 8003054:	d001      	beq.n	800305a <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e005      	b.n	8003066 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2220      	movs	r2, #32
 800305e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	e000      	b.n	8003066 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003064:	2302      	movs	r3, #2
  }
}
 8003066:	0018      	movs	r0, r3
 8003068:	46bd      	mov	sp, r7
 800306a:	b008      	add	sp, #32
 800306c:	bd80      	pop	{r7, pc}
	...

08003070 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b088      	sub	sp, #32
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003078:	231e      	movs	r3, #30
 800307a:	18fb      	adds	r3, r7, r3
 800307c:	2200      	movs	r2, #0
 800307e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	431a      	orrs	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	69db      	ldr	r3, [r3, #28]
 8003094:	4313      	orrs	r3, r2
 8003096:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4aaf      	ldr	r2, [pc, #700]	; (800335c <UART_SetConfig+0x2ec>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	0019      	movs	r1, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	4aaa      	ldr	r2, [pc, #680]	; (8003360 <UART_SetConfig+0x2f0>)
 80030b6:	4013      	ands	r3, r2
 80030b8:	0019      	movs	r1, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	4aa1      	ldr	r2, [pc, #644]	; (8003364 <UART_SetConfig+0x2f4>)
 80030de:	4013      	ands	r3, r2
 80030e0:	0019      	movs	r1, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a9d      	ldr	r2, [pc, #628]	; (8003368 <UART_SetConfig+0x2f8>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d127      	bne.n	8003146 <UART_SetConfig+0xd6>
 80030f6:	4b9d      	ldr	r3, [pc, #628]	; (800336c <UART_SetConfig+0x2fc>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fa:	2203      	movs	r2, #3
 80030fc:	4013      	ands	r3, r2
 80030fe:	2b03      	cmp	r3, #3
 8003100:	d00d      	beq.n	800311e <UART_SetConfig+0xae>
 8003102:	d81b      	bhi.n	800313c <UART_SetConfig+0xcc>
 8003104:	2b02      	cmp	r3, #2
 8003106:	d014      	beq.n	8003132 <UART_SetConfig+0xc2>
 8003108:	d818      	bhi.n	800313c <UART_SetConfig+0xcc>
 800310a:	2b00      	cmp	r3, #0
 800310c:	d002      	beq.n	8003114 <UART_SetConfig+0xa4>
 800310e:	2b01      	cmp	r3, #1
 8003110:	d00a      	beq.n	8003128 <UART_SetConfig+0xb8>
 8003112:	e013      	b.n	800313c <UART_SetConfig+0xcc>
 8003114:	231f      	movs	r3, #31
 8003116:	18fb      	adds	r3, r7, r3
 8003118:	2200      	movs	r2, #0
 800311a:	701a      	strb	r2, [r3, #0]
 800311c:	e065      	b.n	80031ea <UART_SetConfig+0x17a>
 800311e:	231f      	movs	r3, #31
 8003120:	18fb      	adds	r3, r7, r3
 8003122:	2202      	movs	r2, #2
 8003124:	701a      	strb	r2, [r3, #0]
 8003126:	e060      	b.n	80031ea <UART_SetConfig+0x17a>
 8003128:	231f      	movs	r3, #31
 800312a:	18fb      	adds	r3, r7, r3
 800312c:	2204      	movs	r2, #4
 800312e:	701a      	strb	r2, [r3, #0]
 8003130:	e05b      	b.n	80031ea <UART_SetConfig+0x17a>
 8003132:	231f      	movs	r3, #31
 8003134:	18fb      	adds	r3, r7, r3
 8003136:	2208      	movs	r2, #8
 8003138:	701a      	strb	r2, [r3, #0]
 800313a:	e056      	b.n	80031ea <UART_SetConfig+0x17a>
 800313c:	231f      	movs	r3, #31
 800313e:	18fb      	adds	r3, r7, r3
 8003140:	2210      	movs	r2, #16
 8003142:	701a      	strb	r2, [r3, #0]
 8003144:	e051      	b.n	80031ea <UART_SetConfig+0x17a>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a89      	ldr	r2, [pc, #548]	; (8003370 <UART_SetConfig+0x300>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d134      	bne.n	80031ba <UART_SetConfig+0x14a>
 8003150:	4b86      	ldr	r3, [pc, #536]	; (800336c <UART_SetConfig+0x2fc>)
 8003152:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003154:	23c0      	movs	r3, #192	; 0xc0
 8003156:	029b      	lsls	r3, r3, #10
 8003158:	4013      	ands	r3, r2
 800315a:	22c0      	movs	r2, #192	; 0xc0
 800315c:	0292      	lsls	r2, r2, #10
 800315e:	4293      	cmp	r3, r2
 8003160:	d017      	beq.n	8003192 <UART_SetConfig+0x122>
 8003162:	22c0      	movs	r2, #192	; 0xc0
 8003164:	0292      	lsls	r2, r2, #10
 8003166:	4293      	cmp	r3, r2
 8003168:	d822      	bhi.n	80031b0 <UART_SetConfig+0x140>
 800316a:	2280      	movs	r2, #128	; 0x80
 800316c:	0292      	lsls	r2, r2, #10
 800316e:	4293      	cmp	r3, r2
 8003170:	d019      	beq.n	80031a6 <UART_SetConfig+0x136>
 8003172:	2280      	movs	r2, #128	; 0x80
 8003174:	0292      	lsls	r2, r2, #10
 8003176:	4293      	cmp	r3, r2
 8003178:	d81a      	bhi.n	80031b0 <UART_SetConfig+0x140>
 800317a:	2b00      	cmp	r3, #0
 800317c:	d004      	beq.n	8003188 <UART_SetConfig+0x118>
 800317e:	2280      	movs	r2, #128	; 0x80
 8003180:	0252      	lsls	r2, r2, #9
 8003182:	4293      	cmp	r3, r2
 8003184:	d00a      	beq.n	800319c <UART_SetConfig+0x12c>
 8003186:	e013      	b.n	80031b0 <UART_SetConfig+0x140>
 8003188:	231f      	movs	r3, #31
 800318a:	18fb      	adds	r3, r7, r3
 800318c:	2200      	movs	r2, #0
 800318e:	701a      	strb	r2, [r3, #0]
 8003190:	e02b      	b.n	80031ea <UART_SetConfig+0x17a>
 8003192:	231f      	movs	r3, #31
 8003194:	18fb      	adds	r3, r7, r3
 8003196:	2202      	movs	r2, #2
 8003198:	701a      	strb	r2, [r3, #0]
 800319a:	e026      	b.n	80031ea <UART_SetConfig+0x17a>
 800319c:	231f      	movs	r3, #31
 800319e:	18fb      	adds	r3, r7, r3
 80031a0:	2204      	movs	r2, #4
 80031a2:	701a      	strb	r2, [r3, #0]
 80031a4:	e021      	b.n	80031ea <UART_SetConfig+0x17a>
 80031a6:	231f      	movs	r3, #31
 80031a8:	18fb      	adds	r3, r7, r3
 80031aa:	2208      	movs	r2, #8
 80031ac:	701a      	strb	r2, [r3, #0]
 80031ae:	e01c      	b.n	80031ea <UART_SetConfig+0x17a>
 80031b0:	231f      	movs	r3, #31
 80031b2:	18fb      	adds	r3, r7, r3
 80031b4:	2210      	movs	r2, #16
 80031b6:	701a      	strb	r2, [r3, #0]
 80031b8:	e017      	b.n	80031ea <UART_SetConfig+0x17a>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a6d      	ldr	r2, [pc, #436]	; (8003374 <UART_SetConfig+0x304>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d104      	bne.n	80031ce <UART_SetConfig+0x15e>
 80031c4:	231f      	movs	r3, #31
 80031c6:	18fb      	adds	r3, r7, r3
 80031c8:	2200      	movs	r2, #0
 80031ca:	701a      	strb	r2, [r3, #0]
 80031cc:	e00d      	b.n	80031ea <UART_SetConfig+0x17a>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a69      	ldr	r2, [pc, #420]	; (8003378 <UART_SetConfig+0x308>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d104      	bne.n	80031e2 <UART_SetConfig+0x172>
 80031d8:	231f      	movs	r3, #31
 80031da:	18fb      	adds	r3, r7, r3
 80031dc:	2200      	movs	r2, #0
 80031de:	701a      	strb	r2, [r3, #0]
 80031e0:	e003      	b.n	80031ea <UART_SetConfig+0x17a>
 80031e2:	231f      	movs	r3, #31
 80031e4:	18fb      	adds	r3, r7, r3
 80031e6:	2210      	movs	r2, #16
 80031e8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69da      	ldr	r2, [r3, #28]
 80031ee:	2380      	movs	r3, #128	; 0x80
 80031f0:	021b      	lsls	r3, r3, #8
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d15d      	bne.n	80032b2 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 80031f6:	231f      	movs	r3, #31
 80031f8:	18fb      	adds	r3, r7, r3
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b08      	cmp	r3, #8
 80031fe:	d015      	beq.n	800322c <UART_SetConfig+0x1bc>
 8003200:	dc18      	bgt.n	8003234 <UART_SetConfig+0x1c4>
 8003202:	2b04      	cmp	r3, #4
 8003204:	d00d      	beq.n	8003222 <UART_SetConfig+0x1b2>
 8003206:	dc15      	bgt.n	8003234 <UART_SetConfig+0x1c4>
 8003208:	2b00      	cmp	r3, #0
 800320a:	d002      	beq.n	8003212 <UART_SetConfig+0x1a2>
 800320c:	2b02      	cmp	r3, #2
 800320e:	d005      	beq.n	800321c <UART_SetConfig+0x1ac>
 8003210:	e010      	b.n	8003234 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003212:	f7fe fc29 	bl	8001a68 <HAL_RCC_GetPCLK1Freq>
 8003216:	0003      	movs	r3, r0
 8003218:	61bb      	str	r3, [r7, #24]
        break;
 800321a:	e012      	b.n	8003242 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800321c:	4b57      	ldr	r3, [pc, #348]	; (800337c <UART_SetConfig+0x30c>)
 800321e:	61bb      	str	r3, [r7, #24]
        break;
 8003220:	e00f      	b.n	8003242 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003222:	f7fe fb97 	bl	8001954 <HAL_RCC_GetSysClockFreq>
 8003226:	0003      	movs	r3, r0
 8003228:	61bb      	str	r3, [r7, #24]
        break;
 800322a:	e00a      	b.n	8003242 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800322c:	2380      	movs	r3, #128	; 0x80
 800322e:	021b      	lsls	r3, r3, #8
 8003230:	61bb      	str	r3, [r7, #24]
        break;
 8003232:	e006      	b.n	8003242 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003238:	231e      	movs	r3, #30
 800323a:	18fb      	adds	r3, r7, r3
 800323c:	2201      	movs	r2, #1
 800323e:	701a      	strb	r2, [r3, #0]
        break;
 8003240:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d100      	bne.n	800324a <UART_SetConfig+0x1da>
 8003248:	e07b      	b.n	8003342 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	005a      	lsls	r2, r3, #1
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	085b      	lsrs	r3, r3, #1
 8003254:	18d2      	adds	r2, r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	0019      	movs	r1, r3
 800325c:	0010      	movs	r0, r2
 800325e:	f7fc ff5d 	bl	800011c <__udivsi3>
 8003262:	0003      	movs	r3, r0
 8003264:	b29b      	uxth	r3, r3
 8003266:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	2b0f      	cmp	r3, #15
 800326c:	d91c      	bls.n	80032a8 <UART_SetConfig+0x238>
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	2380      	movs	r3, #128	; 0x80
 8003272:	025b      	lsls	r3, r3, #9
 8003274:	429a      	cmp	r2, r3
 8003276:	d217      	bcs.n	80032a8 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	b29a      	uxth	r2, r3
 800327c:	200e      	movs	r0, #14
 800327e:	183b      	adds	r3, r7, r0
 8003280:	210f      	movs	r1, #15
 8003282:	438a      	bics	r2, r1
 8003284:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	085b      	lsrs	r3, r3, #1
 800328a:	b29b      	uxth	r3, r3
 800328c:	2207      	movs	r2, #7
 800328e:	4013      	ands	r3, r2
 8003290:	b299      	uxth	r1, r3
 8003292:	183b      	adds	r3, r7, r0
 8003294:	183a      	adds	r2, r7, r0
 8003296:	8812      	ldrh	r2, [r2, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	183a      	adds	r2, r7, r0
 80032a2:	8812      	ldrh	r2, [r2, #0]
 80032a4:	60da      	str	r2, [r3, #12]
 80032a6:	e04c      	b.n	8003342 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 80032a8:	231e      	movs	r3, #30
 80032aa:	18fb      	adds	r3, r7, r3
 80032ac:	2201      	movs	r2, #1
 80032ae:	701a      	strb	r2, [r3, #0]
 80032b0:	e047      	b.n	8003342 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032b2:	231f      	movs	r3, #31
 80032b4:	18fb      	adds	r3, r7, r3
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	2b08      	cmp	r3, #8
 80032ba:	d015      	beq.n	80032e8 <UART_SetConfig+0x278>
 80032bc:	dc18      	bgt.n	80032f0 <UART_SetConfig+0x280>
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d00d      	beq.n	80032de <UART_SetConfig+0x26e>
 80032c2:	dc15      	bgt.n	80032f0 <UART_SetConfig+0x280>
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d002      	beq.n	80032ce <UART_SetConfig+0x25e>
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d005      	beq.n	80032d8 <UART_SetConfig+0x268>
 80032cc:	e010      	b.n	80032f0 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032ce:	f7fe fbcb 	bl	8001a68 <HAL_RCC_GetPCLK1Freq>
 80032d2:	0003      	movs	r3, r0
 80032d4:	61bb      	str	r3, [r7, #24]
        break;
 80032d6:	e012      	b.n	80032fe <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032d8:	4b28      	ldr	r3, [pc, #160]	; (800337c <UART_SetConfig+0x30c>)
 80032da:	61bb      	str	r3, [r7, #24]
        break;
 80032dc:	e00f      	b.n	80032fe <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032de:	f7fe fb39 	bl	8001954 <HAL_RCC_GetSysClockFreq>
 80032e2:	0003      	movs	r3, r0
 80032e4:	61bb      	str	r3, [r7, #24]
        break;
 80032e6:	e00a      	b.n	80032fe <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032e8:	2380      	movs	r3, #128	; 0x80
 80032ea:	021b      	lsls	r3, r3, #8
 80032ec:	61bb      	str	r3, [r7, #24]
        break;
 80032ee:	e006      	b.n	80032fe <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032f4:	231e      	movs	r3, #30
 80032f6:	18fb      	adds	r3, r7, r3
 80032f8:	2201      	movs	r2, #1
 80032fa:	701a      	strb	r2, [r3, #0]
        break;
 80032fc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d01e      	beq.n	8003342 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	085a      	lsrs	r2, r3, #1
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	18d2      	adds	r2, r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	0019      	movs	r1, r3
 8003314:	0010      	movs	r0, r2
 8003316:	f7fc ff01 	bl	800011c <__udivsi3>
 800331a:	0003      	movs	r3, r0
 800331c:	b29b      	uxth	r3, r3
 800331e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	2b0f      	cmp	r3, #15
 8003324:	d909      	bls.n	800333a <UART_SetConfig+0x2ca>
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	2380      	movs	r3, #128	; 0x80
 800332a:	025b      	lsls	r3, r3, #9
 800332c:	429a      	cmp	r2, r3
 800332e:	d204      	bcs.n	800333a <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	60da      	str	r2, [r3, #12]
 8003338:	e003      	b.n	8003342 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 800333a:	231e      	movs	r3, #30
 800333c:	18fb      	adds	r3, r7, r3
 800333e:	2201      	movs	r2, #1
 8003340:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800334e:	231e      	movs	r3, #30
 8003350:	18fb      	adds	r3, r7, r3
 8003352:	781b      	ldrb	r3, [r3, #0]
}
 8003354:	0018      	movs	r0, r3
 8003356:	46bd      	mov	sp, r7
 8003358:	b008      	add	sp, #32
 800335a:	bd80      	pop	{r7, pc}
 800335c:	efff69f3 	.word	0xefff69f3
 8003360:	ffffcfff 	.word	0xffffcfff
 8003364:	fffff4ff 	.word	0xfffff4ff
 8003368:	40013800 	.word	0x40013800
 800336c:	40021000 	.word	0x40021000
 8003370:	40004400 	.word	0x40004400
 8003374:	40004800 	.word	0x40004800
 8003378:	40004c00 	.word	0x40004c00
 800337c:	007a1200 	.word	0x007a1200

08003380 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	2201      	movs	r2, #1
 800338e:	4013      	ands	r3, r2
 8003390:	d00b      	beq.n	80033aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	4a4a      	ldr	r2, [pc, #296]	; (80034c4 <UART_AdvFeatureConfig+0x144>)
 800339a:	4013      	ands	r3, r2
 800339c:	0019      	movs	r1, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ae:	2202      	movs	r2, #2
 80033b0:	4013      	ands	r3, r2
 80033b2:	d00b      	beq.n	80033cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	4a43      	ldr	r2, [pc, #268]	; (80034c8 <UART_AdvFeatureConfig+0x148>)
 80033bc:	4013      	ands	r3, r2
 80033be:	0019      	movs	r1, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	2204      	movs	r2, #4
 80033d2:	4013      	ands	r3, r2
 80033d4:	d00b      	beq.n	80033ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	4a3b      	ldr	r2, [pc, #236]	; (80034cc <UART_AdvFeatureConfig+0x14c>)
 80033de:	4013      	ands	r3, r2
 80033e0:	0019      	movs	r1, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	2208      	movs	r2, #8
 80033f4:	4013      	ands	r3, r2
 80033f6:	d00b      	beq.n	8003410 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	4a34      	ldr	r2, [pc, #208]	; (80034d0 <UART_AdvFeatureConfig+0x150>)
 8003400:	4013      	ands	r3, r2
 8003402:	0019      	movs	r1, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	430a      	orrs	r2, r1
 800340e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	2210      	movs	r2, #16
 8003416:	4013      	ands	r3, r2
 8003418:	d00b      	beq.n	8003432 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	4a2c      	ldr	r2, [pc, #176]	; (80034d4 <UART_AdvFeatureConfig+0x154>)
 8003422:	4013      	ands	r3, r2
 8003424:	0019      	movs	r1, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	430a      	orrs	r2, r1
 8003430:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	2220      	movs	r2, #32
 8003438:	4013      	ands	r3, r2
 800343a:	d00b      	beq.n	8003454 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	4a25      	ldr	r2, [pc, #148]	; (80034d8 <UART_AdvFeatureConfig+0x158>)
 8003444:	4013      	ands	r3, r2
 8003446:	0019      	movs	r1, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	2240      	movs	r2, #64	; 0x40
 800345a:	4013      	ands	r3, r2
 800345c:	d01d      	beq.n	800349a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	4a1d      	ldr	r2, [pc, #116]	; (80034dc <UART_AdvFeatureConfig+0x15c>)
 8003466:	4013      	ands	r3, r2
 8003468:	0019      	movs	r1, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800347a:	2380      	movs	r3, #128	; 0x80
 800347c:	035b      	lsls	r3, r3, #13
 800347e:	429a      	cmp	r2, r3
 8003480:	d10b      	bne.n	800349a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	4a15      	ldr	r2, [pc, #84]	; (80034e0 <UART_AdvFeatureConfig+0x160>)
 800348a:	4013      	ands	r3, r2
 800348c:	0019      	movs	r1, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	2280      	movs	r2, #128	; 0x80
 80034a0:	4013      	ands	r3, r2
 80034a2:	d00b      	beq.n	80034bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	4a0e      	ldr	r2, [pc, #56]	; (80034e4 <UART_AdvFeatureConfig+0x164>)
 80034ac:	4013      	ands	r3, r2
 80034ae:	0019      	movs	r1, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	605a      	str	r2, [r3, #4]
  }
}
 80034bc:	46c0      	nop			; (mov r8, r8)
 80034be:	46bd      	mov	sp, r7
 80034c0:	b002      	add	sp, #8
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	fffdffff 	.word	0xfffdffff
 80034c8:	fffeffff 	.word	0xfffeffff
 80034cc:	fffbffff 	.word	0xfffbffff
 80034d0:	ffff7fff 	.word	0xffff7fff
 80034d4:	ffffefff 	.word	0xffffefff
 80034d8:	ffffdfff 	.word	0xffffdfff
 80034dc:	ffefffff 	.word	0xffefffff
 80034e0:	ff9fffff 	.word	0xff9fffff
 80034e4:	fff7ffff 	.word	0xfff7ffff

080034e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af02      	add	r7, sp, #8
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2280      	movs	r2, #128	; 0x80
 80034f4:	2100      	movs	r1, #0
 80034f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034f8:	f7fd faf4 	bl	8000ae4 <HAL_GetTick>
 80034fc:	0003      	movs	r3, r0
 80034fe:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2208      	movs	r2, #8
 8003508:	4013      	ands	r3, r2
 800350a:	2b08      	cmp	r3, #8
 800350c:	d10c      	bne.n	8003528 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2280      	movs	r2, #128	; 0x80
 8003512:	0391      	lsls	r1, r2, #14
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	4a17      	ldr	r2, [pc, #92]	; (8003574 <UART_CheckIdleState+0x8c>)
 8003518:	9200      	str	r2, [sp, #0]
 800351a:	2200      	movs	r2, #0
 800351c:	f000 f82c 	bl	8003578 <UART_WaitOnFlagUntilTimeout>
 8003520:	1e03      	subs	r3, r0, #0
 8003522:	d001      	beq.n	8003528 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e021      	b.n	800356c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2204      	movs	r2, #4
 8003530:	4013      	ands	r3, r2
 8003532:	2b04      	cmp	r3, #4
 8003534:	d10c      	bne.n	8003550 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2280      	movs	r2, #128	; 0x80
 800353a:	03d1      	lsls	r1, r2, #15
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	4a0d      	ldr	r2, [pc, #52]	; (8003574 <UART_CheckIdleState+0x8c>)
 8003540:	9200      	str	r2, [sp, #0]
 8003542:	2200      	movs	r2, #0
 8003544:	f000 f818 	bl	8003578 <UART_WaitOnFlagUntilTimeout>
 8003548:	1e03      	subs	r3, r0, #0
 800354a:	d001      	beq.n	8003550 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e00d      	b.n	800356c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2220      	movs	r2, #32
 8003554:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2220      	movs	r2, #32
 800355a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2274      	movs	r2, #116	; 0x74
 8003566:	2100      	movs	r1, #0
 8003568:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	0018      	movs	r0, r3
 800356e:	46bd      	mov	sp, r7
 8003570:	b004      	add	sp, #16
 8003572:	bd80      	pop	{r7, pc}
 8003574:	01ffffff 	.word	0x01ffffff

08003578 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b094      	sub	sp, #80	; 0x50
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	603b      	str	r3, [r7, #0]
 8003584:	1dfb      	adds	r3, r7, #7
 8003586:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003588:	e0a3      	b.n	80036d2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800358a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800358c:	3301      	adds	r3, #1
 800358e:	d100      	bne.n	8003592 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003590:	e09f      	b.n	80036d2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003592:	f7fd faa7 	bl	8000ae4 <HAL_GetTick>
 8003596:	0002      	movs	r2, r0
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800359e:	429a      	cmp	r2, r3
 80035a0:	d302      	bcc.n	80035a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80035a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d13d      	bne.n	8003624 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035a8:	f3ef 8310 	mrs	r3, PRIMASK
 80035ac:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80035ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035b0:	647b      	str	r3, [r7, #68]	; 0x44
 80035b2:	2301      	movs	r3, #1
 80035b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b8:	f383 8810 	msr	PRIMASK, r3
}
 80035bc:	46c0      	nop			; (mov r8, r8)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	494c      	ldr	r1, [pc, #304]	; (80036fc <UART_WaitOnFlagUntilTimeout+0x184>)
 80035ca:	400a      	ands	r2, r1
 80035cc:	601a      	str	r2, [r3, #0]
 80035ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035d0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d4:	f383 8810 	msr	PRIMASK, r3
}
 80035d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035da:	f3ef 8310 	mrs	r3, PRIMASK
 80035de:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80035e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035e2:	643b      	str	r3, [r7, #64]	; 0x40
 80035e4:	2301      	movs	r3, #1
 80035e6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ea:	f383 8810 	msr	PRIMASK, r3
}
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2101      	movs	r1, #1
 80035fc:	438a      	bics	r2, r1
 80035fe:	609a      	str	r2, [r3, #8]
 8003600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003602:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003606:	f383 8810 	msr	PRIMASK, r3
}
 800360a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2220      	movs	r2, #32
 8003610:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2220      	movs	r2, #32
 8003616:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2274      	movs	r2, #116	; 0x74
 800361c:	2100      	movs	r1, #0
 800361e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e067      	b.n	80036f4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2204      	movs	r2, #4
 800362c:	4013      	ands	r3, r2
 800362e:	d050      	beq.n	80036d2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	69da      	ldr	r2, [r3, #28]
 8003636:	2380      	movs	r3, #128	; 0x80
 8003638:	011b      	lsls	r3, r3, #4
 800363a:	401a      	ands	r2, r3
 800363c:	2380      	movs	r3, #128	; 0x80
 800363e:	011b      	lsls	r3, r3, #4
 8003640:	429a      	cmp	r2, r3
 8003642:	d146      	bne.n	80036d2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2280      	movs	r2, #128	; 0x80
 800364a:	0112      	lsls	r2, r2, #4
 800364c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800364e:	f3ef 8310 	mrs	r3, PRIMASK
 8003652:	613b      	str	r3, [r7, #16]
  return(result);
 8003654:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003656:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003658:	2301      	movs	r3, #1
 800365a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f383 8810 	msr	PRIMASK, r3
}
 8003662:	46c0      	nop			; (mov r8, r8)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4923      	ldr	r1, [pc, #140]	; (80036fc <UART_WaitOnFlagUntilTimeout+0x184>)
 8003670:	400a      	ands	r2, r1
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003676:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	f383 8810 	msr	PRIMASK, r3
}
 800367e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003680:	f3ef 8310 	mrs	r3, PRIMASK
 8003684:	61fb      	str	r3, [r7, #28]
  return(result);
 8003686:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003688:	64bb      	str	r3, [r7, #72]	; 0x48
 800368a:	2301      	movs	r3, #1
 800368c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	f383 8810 	msr	PRIMASK, r3
}
 8003694:	46c0      	nop			; (mov r8, r8)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689a      	ldr	r2, [r3, #8]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2101      	movs	r1, #1
 80036a2:	438a      	bics	r2, r1
 80036a4:	609a      	str	r2, [r3, #8]
 80036a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036a8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	f383 8810 	msr	PRIMASK, r3
}
 80036b0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2220      	movs	r2, #32
 80036b6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2220      	movs	r2, #32
 80036bc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2280      	movs	r2, #128	; 0x80
 80036c2:	2120      	movs	r1, #32
 80036c4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2274      	movs	r2, #116	; 0x74
 80036ca:	2100      	movs	r1, #0
 80036cc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e010      	b.n	80036f4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	69db      	ldr	r3, [r3, #28]
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	4013      	ands	r3, r2
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	425a      	negs	r2, r3
 80036e2:	4153      	adcs	r3, r2
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	001a      	movs	r2, r3
 80036e8:	1dfb      	adds	r3, r7, #7
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d100      	bne.n	80036f2 <UART_WaitOnFlagUntilTimeout+0x17a>
 80036f0:	e74b      	b.n	800358a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	0018      	movs	r0, r3
 80036f6:	46bd      	mov	sp, r7
 80036f8:	b014      	add	sp, #80	; 0x50
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	fffffe5f 	.word	0xfffffe5f

08003700 <__errno>:
 8003700:	4b01      	ldr	r3, [pc, #4]	; (8003708 <__errno+0x8>)
 8003702:	6818      	ldr	r0, [r3, #0]
 8003704:	4770      	bx	lr
 8003706:	46c0      	nop			; (mov r8, r8)
 8003708:	20000074 	.word	0x20000074

0800370c <__libc_init_array>:
 800370c:	b570      	push	{r4, r5, r6, lr}
 800370e:	2600      	movs	r6, #0
 8003710:	4d0c      	ldr	r5, [pc, #48]	; (8003744 <__libc_init_array+0x38>)
 8003712:	4c0d      	ldr	r4, [pc, #52]	; (8003748 <__libc_init_array+0x3c>)
 8003714:	1b64      	subs	r4, r4, r5
 8003716:	10a4      	asrs	r4, r4, #2
 8003718:	42a6      	cmp	r6, r4
 800371a:	d109      	bne.n	8003730 <__libc_init_array+0x24>
 800371c:	2600      	movs	r6, #0
 800371e:	f000 fc8b 	bl	8004038 <_init>
 8003722:	4d0a      	ldr	r5, [pc, #40]	; (800374c <__libc_init_array+0x40>)
 8003724:	4c0a      	ldr	r4, [pc, #40]	; (8003750 <__libc_init_array+0x44>)
 8003726:	1b64      	subs	r4, r4, r5
 8003728:	10a4      	asrs	r4, r4, #2
 800372a:	42a6      	cmp	r6, r4
 800372c:	d105      	bne.n	800373a <__libc_init_array+0x2e>
 800372e:	bd70      	pop	{r4, r5, r6, pc}
 8003730:	00b3      	lsls	r3, r6, #2
 8003732:	58eb      	ldr	r3, [r5, r3]
 8003734:	4798      	blx	r3
 8003736:	3601      	adds	r6, #1
 8003738:	e7ee      	b.n	8003718 <__libc_init_array+0xc>
 800373a:	00b3      	lsls	r3, r6, #2
 800373c:	58eb      	ldr	r3, [r5, r3]
 800373e:	4798      	blx	r3
 8003740:	3601      	adds	r6, #1
 8003742:	e7f2      	b.n	800372a <__libc_init_array+0x1e>
 8003744:	080040dc 	.word	0x080040dc
 8003748:	080040dc 	.word	0x080040dc
 800374c:	080040dc 	.word	0x080040dc
 8003750:	080040e0 	.word	0x080040e0

08003754 <memset>:
 8003754:	0003      	movs	r3, r0
 8003756:	1882      	adds	r2, r0, r2
 8003758:	4293      	cmp	r3, r2
 800375a:	d100      	bne.n	800375e <memset+0xa>
 800375c:	4770      	bx	lr
 800375e:	7019      	strb	r1, [r3, #0]
 8003760:	3301      	adds	r3, #1
 8003762:	e7f9      	b.n	8003758 <memset+0x4>

08003764 <siprintf>:
 8003764:	b40e      	push	{r1, r2, r3}
 8003766:	b500      	push	{lr}
 8003768:	490b      	ldr	r1, [pc, #44]	; (8003798 <siprintf+0x34>)
 800376a:	b09c      	sub	sp, #112	; 0x70
 800376c:	ab1d      	add	r3, sp, #116	; 0x74
 800376e:	9002      	str	r0, [sp, #8]
 8003770:	9006      	str	r0, [sp, #24]
 8003772:	9107      	str	r1, [sp, #28]
 8003774:	9104      	str	r1, [sp, #16]
 8003776:	4809      	ldr	r0, [pc, #36]	; (800379c <siprintf+0x38>)
 8003778:	4909      	ldr	r1, [pc, #36]	; (80037a0 <siprintf+0x3c>)
 800377a:	cb04      	ldmia	r3!, {r2}
 800377c:	9105      	str	r1, [sp, #20]
 800377e:	6800      	ldr	r0, [r0, #0]
 8003780:	a902      	add	r1, sp, #8
 8003782:	9301      	str	r3, [sp, #4]
 8003784:	f000 f870 	bl	8003868 <_svfiprintf_r>
 8003788:	2300      	movs	r3, #0
 800378a:	9a02      	ldr	r2, [sp, #8]
 800378c:	7013      	strb	r3, [r2, #0]
 800378e:	b01c      	add	sp, #112	; 0x70
 8003790:	bc08      	pop	{r3}
 8003792:	b003      	add	sp, #12
 8003794:	4718      	bx	r3
 8003796:	46c0      	nop			; (mov r8, r8)
 8003798:	7fffffff 	.word	0x7fffffff
 800379c:	20000074 	.word	0x20000074
 80037a0:	ffff0208 	.word	0xffff0208

080037a4 <__ssputs_r>:
 80037a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037a6:	688e      	ldr	r6, [r1, #8]
 80037a8:	b085      	sub	sp, #20
 80037aa:	0007      	movs	r7, r0
 80037ac:	000c      	movs	r4, r1
 80037ae:	9203      	str	r2, [sp, #12]
 80037b0:	9301      	str	r3, [sp, #4]
 80037b2:	429e      	cmp	r6, r3
 80037b4:	d83c      	bhi.n	8003830 <__ssputs_r+0x8c>
 80037b6:	2390      	movs	r3, #144	; 0x90
 80037b8:	898a      	ldrh	r2, [r1, #12]
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	421a      	tst	r2, r3
 80037be:	d034      	beq.n	800382a <__ssputs_r+0x86>
 80037c0:	6909      	ldr	r1, [r1, #16]
 80037c2:	6823      	ldr	r3, [r4, #0]
 80037c4:	6960      	ldr	r0, [r4, #20]
 80037c6:	1a5b      	subs	r3, r3, r1
 80037c8:	9302      	str	r3, [sp, #8]
 80037ca:	2303      	movs	r3, #3
 80037cc:	4343      	muls	r3, r0
 80037ce:	0fdd      	lsrs	r5, r3, #31
 80037d0:	18ed      	adds	r5, r5, r3
 80037d2:	9b01      	ldr	r3, [sp, #4]
 80037d4:	9802      	ldr	r0, [sp, #8]
 80037d6:	3301      	adds	r3, #1
 80037d8:	181b      	adds	r3, r3, r0
 80037da:	106d      	asrs	r5, r5, #1
 80037dc:	42ab      	cmp	r3, r5
 80037de:	d900      	bls.n	80037e2 <__ssputs_r+0x3e>
 80037e0:	001d      	movs	r5, r3
 80037e2:	0553      	lsls	r3, r2, #21
 80037e4:	d532      	bpl.n	800384c <__ssputs_r+0xa8>
 80037e6:	0029      	movs	r1, r5
 80037e8:	0038      	movs	r0, r7
 80037ea:	f000 fb53 	bl	8003e94 <_malloc_r>
 80037ee:	1e06      	subs	r6, r0, #0
 80037f0:	d109      	bne.n	8003806 <__ssputs_r+0x62>
 80037f2:	230c      	movs	r3, #12
 80037f4:	603b      	str	r3, [r7, #0]
 80037f6:	2340      	movs	r3, #64	; 0x40
 80037f8:	2001      	movs	r0, #1
 80037fa:	89a2      	ldrh	r2, [r4, #12]
 80037fc:	4240      	negs	r0, r0
 80037fe:	4313      	orrs	r3, r2
 8003800:	81a3      	strh	r3, [r4, #12]
 8003802:	b005      	add	sp, #20
 8003804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003806:	9a02      	ldr	r2, [sp, #8]
 8003808:	6921      	ldr	r1, [r4, #16]
 800380a:	f000 faba 	bl	8003d82 <memcpy>
 800380e:	89a3      	ldrh	r3, [r4, #12]
 8003810:	4a14      	ldr	r2, [pc, #80]	; (8003864 <__ssputs_r+0xc0>)
 8003812:	401a      	ands	r2, r3
 8003814:	2380      	movs	r3, #128	; 0x80
 8003816:	4313      	orrs	r3, r2
 8003818:	81a3      	strh	r3, [r4, #12]
 800381a:	9b02      	ldr	r3, [sp, #8]
 800381c:	6126      	str	r6, [r4, #16]
 800381e:	18f6      	adds	r6, r6, r3
 8003820:	6026      	str	r6, [r4, #0]
 8003822:	6165      	str	r5, [r4, #20]
 8003824:	9e01      	ldr	r6, [sp, #4]
 8003826:	1aed      	subs	r5, r5, r3
 8003828:	60a5      	str	r5, [r4, #8]
 800382a:	9b01      	ldr	r3, [sp, #4]
 800382c:	429e      	cmp	r6, r3
 800382e:	d900      	bls.n	8003832 <__ssputs_r+0x8e>
 8003830:	9e01      	ldr	r6, [sp, #4]
 8003832:	0032      	movs	r2, r6
 8003834:	9903      	ldr	r1, [sp, #12]
 8003836:	6820      	ldr	r0, [r4, #0]
 8003838:	f000 faac 	bl	8003d94 <memmove>
 800383c:	68a3      	ldr	r3, [r4, #8]
 800383e:	2000      	movs	r0, #0
 8003840:	1b9b      	subs	r3, r3, r6
 8003842:	60a3      	str	r3, [r4, #8]
 8003844:	6823      	ldr	r3, [r4, #0]
 8003846:	199e      	adds	r6, r3, r6
 8003848:	6026      	str	r6, [r4, #0]
 800384a:	e7da      	b.n	8003802 <__ssputs_r+0x5e>
 800384c:	002a      	movs	r2, r5
 800384e:	0038      	movs	r0, r7
 8003850:	f000 fb96 	bl	8003f80 <_realloc_r>
 8003854:	1e06      	subs	r6, r0, #0
 8003856:	d1e0      	bne.n	800381a <__ssputs_r+0x76>
 8003858:	0038      	movs	r0, r7
 800385a:	6921      	ldr	r1, [r4, #16]
 800385c:	f000 faae 	bl	8003dbc <_free_r>
 8003860:	e7c7      	b.n	80037f2 <__ssputs_r+0x4e>
 8003862:	46c0      	nop			; (mov r8, r8)
 8003864:	fffffb7f 	.word	0xfffffb7f

08003868 <_svfiprintf_r>:
 8003868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800386a:	b0a1      	sub	sp, #132	; 0x84
 800386c:	9003      	str	r0, [sp, #12]
 800386e:	001d      	movs	r5, r3
 8003870:	898b      	ldrh	r3, [r1, #12]
 8003872:	000f      	movs	r7, r1
 8003874:	0016      	movs	r6, r2
 8003876:	061b      	lsls	r3, r3, #24
 8003878:	d511      	bpl.n	800389e <_svfiprintf_r+0x36>
 800387a:	690b      	ldr	r3, [r1, #16]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10e      	bne.n	800389e <_svfiprintf_r+0x36>
 8003880:	2140      	movs	r1, #64	; 0x40
 8003882:	f000 fb07 	bl	8003e94 <_malloc_r>
 8003886:	6038      	str	r0, [r7, #0]
 8003888:	6138      	str	r0, [r7, #16]
 800388a:	2800      	cmp	r0, #0
 800388c:	d105      	bne.n	800389a <_svfiprintf_r+0x32>
 800388e:	230c      	movs	r3, #12
 8003890:	9a03      	ldr	r2, [sp, #12]
 8003892:	3801      	subs	r0, #1
 8003894:	6013      	str	r3, [r2, #0]
 8003896:	b021      	add	sp, #132	; 0x84
 8003898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800389a:	2340      	movs	r3, #64	; 0x40
 800389c:	617b      	str	r3, [r7, #20]
 800389e:	2300      	movs	r3, #0
 80038a0:	ac08      	add	r4, sp, #32
 80038a2:	6163      	str	r3, [r4, #20]
 80038a4:	3320      	adds	r3, #32
 80038a6:	7663      	strb	r3, [r4, #25]
 80038a8:	3310      	adds	r3, #16
 80038aa:	76a3      	strb	r3, [r4, #26]
 80038ac:	9507      	str	r5, [sp, #28]
 80038ae:	0035      	movs	r5, r6
 80038b0:	782b      	ldrb	r3, [r5, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <_svfiprintf_r+0x52>
 80038b6:	2b25      	cmp	r3, #37	; 0x25
 80038b8:	d147      	bne.n	800394a <_svfiprintf_r+0xe2>
 80038ba:	1bab      	subs	r3, r5, r6
 80038bc:	9305      	str	r3, [sp, #20]
 80038be:	42b5      	cmp	r5, r6
 80038c0:	d00c      	beq.n	80038dc <_svfiprintf_r+0x74>
 80038c2:	0032      	movs	r2, r6
 80038c4:	0039      	movs	r1, r7
 80038c6:	9803      	ldr	r0, [sp, #12]
 80038c8:	f7ff ff6c 	bl	80037a4 <__ssputs_r>
 80038cc:	1c43      	adds	r3, r0, #1
 80038ce:	d100      	bne.n	80038d2 <_svfiprintf_r+0x6a>
 80038d0:	e0ae      	b.n	8003a30 <_svfiprintf_r+0x1c8>
 80038d2:	6962      	ldr	r2, [r4, #20]
 80038d4:	9b05      	ldr	r3, [sp, #20]
 80038d6:	4694      	mov	ip, r2
 80038d8:	4463      	add	r3, ip
 80038da:	6163      	str	r3, [r4, #20]
 80038dc:	782b      	ldrb	r3, [r5, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d100      	bne.n	80038e4 <_svfiprintf_r+0x7c>
 80038e2:	e0a5      	b.n	8003a30 <_svfiprintf_r+0x1c8>
 80038e4:	2201      	movs	r2, #1
 80038e6:	2300      	movs	r3, #0
 80038e8:	4252      	negs	r2, r2
 80038ea:	6062      	str	r2, [r4, #4]
 80038ec:	a904      	add	r1, sp, #16
 80038ee:	3254      	adds	r2, #84	; 0x54
 80038f0:	1852      	adds	r2, r2, r1
 80038f2:	1c6e      	adds	r6, r5, #1
 80038f4:	6023      	str	r3, [r4, #0]
 80038f6:	60e3      	str	r3, [r4, #12]
 80038f8:	60a3      	str	r3, [r4, #8]
 80038fa:	7013      	strb	r3, [r2, #0]
 80038fc:	65a3      	str	r3, [r4, #88]	; 0x58
 80038fe:	2205      	movs	r2, #5
 8003900:	7831      	ldrb	r1, [r6, #0]
 8003902:	4854      	ldr	r0, [pc, #336]	; (8003a54 <_svfiprintf_r+0x1ec>)
 8003904:	f000 fa32 	bl	8003d6c <memchr>
 8003908:	1c75      	adds	r5, r6, #1
 800390a:	2800      	cmp	r0, #0
 800390c:	d11f      	bne.n	800394e <_svfiprintf_r+0xe6>
 800390e:	6822      	ldr	r2, [r4, #0]
 8003910:	06d3      	lsls	r3, r2, #27
 8003912:	d504      	bpl.n	800391e <_svfiprintf_r+0xb6>
 8003914:	2353      	movs	r3, #83	; 0x53
 8003916:	a904      	add	r1, sp, #16
 8003918:	185b      	adds	r3, r3, r1
 800391a:	2120      	movs	r1, #32
 800391c:	7019      	strb	r1, [r3, #0]
 800391e:	0713      	lsls	r3, r2, #28
 8003920:	d504      	bpl.n	800392c <_svfiprintf_r+0xc4>
 8003922:	2353      	movs	r3, #83	; 0x53
 8003924:	a904      	add	r1, sp, #16
 8003926:	185b      	adds	r3, r3, r1
 8003928:	212b      	movs	r1, #43	; 0x2b
 800392a:	7019      	strb	r1, [r3, #0]
 800392c:	7833      	ldrb	r3, [r6, #0]
 800392e:	2b2a      	cmp	r3, #42	; 0x2a
 8003930:	d016      	beq.n	8003960 <_svfiprintf_r+0xf8>
 8003932:	0035      	movs	r5, r6
 8003934:	2100      	movs	r1, #0
 8003936:	200a      	movs	r0, #10
 8003938:	68e3      	ldr	r3, [r4, #12]
 800393a:	782a      	ldrb	r2, [r5, #0]
 800393c:	1c6e      	adds	r6, r5, #1
 800393e:	3a30      	subs	r2, #48	; 0x30
 8003940:	2a09      	cmp	r2, #9
 8003942:	d94e      	bls.n	80039e2 <_svfiprintf_r+0x17a>
 8003944:	2900      	cmp	r1, #0
 8003946:	d111      	bne.n	800396c <_svfiprintf_r+0x104>
 8003948:	e017      	b.n	800397a <_svfiprintf_r+0x112>
 800394a:	3501      	adds	r5, #1
 800394c:	e7b0      	b.n	80038b0 <_svfiprintf_r+0x48>
 800394e:	4b41      	ldr	r3, [pc, #260]	; (8003a54 <_svfiprintf_r+0x1ec>)
 8003950:	6822      	ldr	r2, [r4, #0]
 8003952:	1ac0      	subs	r0, r0, r3
 8003954:	2301      	movs	r3, #1
 8003956:	4083      	lsls	r3, r0
 8003958:	4313      	orrs	r3, r2
 800395a:	002e      	movs	r6, r5
 800395c:	6023      	str	r3, [r4, #0]
 800395e:	e7ce      	b.n	80038fe <_svfiprintf_r+0x96>
 8003960:	9b07      	ldr	r3, [sp, #28]
 8003962:	1d19      	adds	r1, r3, #4
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	9107      	str	r1, [sp, #28]
 8003968:	2b00      	cmp	r3, #0
 800396a:	db01      	blt.n	8003970 <_svfiprintf_r+0x108>
 800396c:	930b      	str	r3, [sp, #44]	; 0x2c
 800396e:	e004      	b.n	800397a <_svfiprintf_r+0x112>
 8003970:	425b      	negs	r3, r3
 8003972:	60e3      	str	r3, [r4, #12]
 8003974:	2302      	movs	r3, #2
 8003976:	4313      	orrs	r3, r2
 8003978:	6023      	str	r3, [r4, #0]
 800397a:	782b      	ldrb	r3, [r5, #0]
 800397c:	2b2e      	cmp	r3, #46	; 0x2e
 800397e:	d10a      	bne.n	8003996 <_svfiprintf_r+0x12e>
 8003980:	786b      	ldrb	r3, [r5, #1]
 8003982:	2b2a      	cmp	r3, #42	; 0x2a
 8003984:	d135      	bne.n	80039f2 <_svfiprintf_r+0x18a>
 8003986:	9b07      	ldr	r3, [sp, #28]
 8003988:	3502      	adds	r5, #2
 800398a:	1d1a      	adds	r2, r3, #4
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	9207      	str	r2, [sp, #28]
 8003990:	2b00      	cmp	r3, #0
 8003992:	db2b      	blt.n	80039ec <_svfiprintf_r+0x184>
 8003994:	9309      	str	r3, [sp, #36]	; 0x24
 8003996:	4e30      	ldr	r6, [pc, #192]	; (8003a58 <_svfiprintf_r+0x1f0>)
 8003998:	2203      	movs	r2, #3
 800399a:	0030      	movs	r0, r6
 800399c:	7829      	ldrb	r1, [r5, #0]
 800399e:	f000 f9e5 	bl	8003d6c <memchr>
 80039a2:	2800      	cmp	r0, #0
 80039a4:	d006      	beq.n	80039b4 <_svfiprintf_r+0x14c>
 80039a6:	2340      	movs	r3, #64	; 0x40
 80039a8:	1b80      	subs	r0, r0, r6
 80039aa:	4083      	lsls	r3, r0
 80039ac:	6822      	ldr	r2, [r4, #0]
 80039ae:	3501      	adds	r5, #1
 80039b0:	4313      	orrs	r3, r2
 80039b2:	6023      	str	r3, [r4, #0]
 80039b4:	7829      	ldrb	r1, [r5, #0]
 80039b6:	2206      	movs	r2, #6
 80039b8:	4828      	ldr	r0, [pc, #160]	; (8003a5c <_svfiprintf_r+0x1f4>)
 80039ba:	1c6e      	adds	r6, r5, #1
 80039bc:	7621      	strb	r1, [r4, #24]
 80039be:	f000 f9d5 	bl	8003d6c <memchr>
 80039c2:	2800      	cmp	r0, #0
 80039c4:	d03c      	beq.n	8003a40 <_svfiprintf_r+0x1d8>
 80039c6:	4b26      	ldr	r3, [pc, #152]	; (8003a60 <_svfiprintf_r+0x1f8>)
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d125      	bne.n	8003a18 <_svfiprintf_r+0x1b0>
 80039cc:	2207      	movs	r2, #7
 80039ce:	9b07      	ldr	r3, [sp, #28]
 80039d0:	3307      	adds	r3, #7
 80039d2:	4393      	bics	r3, r2
 80039d4:	3308      	adds	r3, #8
 80039d6:	9307      	str	r3, [sp, #28]
 80039d8:	6963      	ldr	r3, [r4, #20]
 80039da:	9a04      	ldr	r2, [sp, #16]
 80039dc:	189b      	adds	r3, r3, r2
 80039de:	6163      	str	r3, [r4, #20]
 80039e0:	e765      	b.n	80038ae <_svfiprintf_r+0x46>
 80039e2:	4343      	muls	r3, r0
 80039e4:	0035      	movs	r5, r6
 80039e6:	2101      	movs	r1, #1
 80039e8:	189b      	adds	r3, r3, r2
 80039ea:	e7a6      	b.n	800393a <_svfiprintf_r+0xd2>
 80039ec:	2301      	movs	r3, #1
 80039ee:	425b      	negs	r3, r3
 80039f0:	e7d0      	b.n	8003994 <_svfiprintf_r+0x12c>
 80039f2:	2300      	movs	r3, #0
 80039f4:	200a      	movs	r0, #10
 80039f6:	001a      	movs	r2, r3
 80039f8:	3501      	adds	r5, #1
 80039fa:	6063      	str	r3, [r4, #4]
 80039fc:	7829      	ldrb	r1, [r5, #0]
 80039fe:	1c6e      	adds	r6, r5, #1
 8003a00:	3930      	subs	r1, #48	; 0x30
 8003a02:	2909      	cmp	r1, #9
 8003a04:	d903      	bls.n	8003a0e <_svfiprintf_r+0x1a6>
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0c5      	beq.n	8003996 <_svfiprintf_r+0x12e>
 8003a0a:	9209      	str	r2, [sp, #36]	; 0x24
 8003a0c:	e7c3      	b.n	8003996 <_svfiprintf_r+0x12e>
 8003a0e:	4342      	muls	r2, r0
 8003a10:	0035      	movs	r5, r6
 8003a12:	2301      	movs	r3, #1
 8003a14:	1852      	adds	r2, r2, r1
 8003a16:	e7f1      	b.n	80039fc <_svfiprintf_r+0x194>
 8003a18:	ab07      	add	r3, sp, #28
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	003a      	movs	r2, r7
 8003a1e:	0021      	movs	r1, r4
 8003a20:	4b10      	ldr	r3, [pc, #64]	; (8003a64 <_svfiprintf_r+0x1fc>)
 8003a22:	9803      	ldr	r0, [sp, #12]
 8003a24:	e000      	b.n	8003a28 <_svfiprintf_r+0x1c0>
 8003a26:	bf00      	nop
 8003a28:	9004      	str	r0, [sp, #16]
 8003a2a:	9b04      	ldr	r3, [sp, #16]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	d1d3      	bne.n	80039d8 <_svfiprintf_r+0x170>
 8003a30:	89bb      	ldrh	r3, [r7, #12]
 8003a32:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003a34:	065b      	lsls	r3, r3, #25
 8003a36:	d400      	bmi.n	8003a3a <_svfiprintf_r+0x1d2>
 8003a38:	e72d      	b.n	8003896 <_svfiprintf_r+0x2e>
 8003a3a:	2001      	movs	r0, #1
 8003a3c:	4240      	negs	r0, r0
 8003a3e:	e72a      	b.n	8003896 <_svfiprintf_r+0x2e>
 8003a40:	ab07      	add	r3, sp, #28
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	003a      	movs	r2, r7
 8003a46:	0021      	movs	r1, r4
 8003a48:	4b06      	ldr	r3, [pc, #24]	; (8003a64 <_svfiprintf_r+0x1fc>)
 8003a4a:	9803      	ldr	r0, [sp, #12]
 8003a4c:	f000 f87c 	bl	8003b48 <_printf_i>
 8003a50:	e7ea      	b.n	8003a28 <_svfiprintf_r+0x1c0>
 8003a52:	46c0      	nop			; (mov r8, r8)
 8003a54:	080040a8 	.word	0x080040a8
 8003a58:	080040ae 	.word	0x080040ae
 8003a5c:	080040b2 	.word	0x080040b2
 8003a60:	00000000 	.word	0x00000000
 8003a64:	080037a5 	.word	0x080037a5

08003a68 <_printf_common>:
 8003a68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a6a:	0015      	movs	r5, r2
 8003a6c:	9301      	str	r3, [sp, #4]
 8003a6e:	688a      	ldr	r2, [r1, #8]
 8003a70:	690b      	ldr	r3, [r1, #16]
 8003a72:	000c      	movs	r4, r1
 8003a74:	9000      	str	r0, [sp, #0]
 8003a76:	4293      	cmp	r3, r2
 8003a78:	da00      	bge.n	8003a7c <_printf_common+0x14>
 8003a7a:	0013      	movs	r3, r2
 8003a7c:	0022      	movs	r2, r4
 8003a7e:	602b      	str	r3, [r5, #0]
 8003a80:	3243      	adds	r2, #67	; 0x43
 8003a82:	7812      	ldrb	r2, [r2, #0]
 8003a84:	2a00      	cmp	r2, #0
 8003a86:	d001      	beq.n	8003a8c <_printf_common+0x24>
 8003a88:	3301      	adds	r3, #1
 8003a8a:	602b      	str	r3, [r5, #0]
 8003a8c:	6823      	ldr	r3, [r4, #0]
 8003a8e:	069b      	lsls	r3, r3, #26
 8003a90:	d502      	bpl.n	8003a98 <_printf_common+0x30>
 8003a92:	682b      	ldr	r3, [r5, #0]
 8003a94:	3302      	adds	r3, #2
 8003a96:	602b      	str	r3, [r5, #0]
 8003a98:	6822      	ldr	r2, [r4, #0]
 8003a9a:	2306      	movs	r3, #6
 8003a9c:	0017      	movs	r7, r2
 8003a9e:	401f      	ands	r7, r3
 8003aa0:	421a      	tst	r2, r3
 8003aa2:	d027      	beq.n	8003af4 <_printf_common+0x8c>
 8003aa4:	0023      	movs	r3, r4
 8003aa6:	3343      	adds	r3, #67	; 0x43
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	1e5a      	subs	r2, r3, #1
 8003aac:	4193      	sbcs	r3, r2
 8003aae:	6822      	ldr	r2, [r4, #0]
 8003ab0:	0692      	lsls	r2, r2, #26
 8003ab2:	d430      	bmi.n	8003b16 <_printf_common+0xae>
 8003ab4:	0022      	movs	r2, r4
 8003ab6:	9901      	ldr	r1, [sp, #4]
 8003ab8:	9800      	ldr	r0, [sp, #0]
 8003aba:	9e08      	ldr	r6, [sp, #32]
 8003abc:	3243      	adds	r2, #67	; 0x43
 8003abe:	47b0      	blx	r6
 8003ac0:	1c43      	adds	r3, r0, #1
 8003ac2:	d025      	beq.n	8003b10 <_printf_common+0xa8>
 8003ac4:	2306      	movs	r3, #6
 8003ac6:	6820      	ldr	r0, [r4, #0]
 8003ac8:	682a      	ldr	r2, [r5, #0]
 8003aca:	68e1      	ldr	r1, [r4, #12]
 8003acc:	2500      	movs	r5, #0
 8003ace:	4003      	ands	r3, r0
 8003ad0:	2b04      	cmp	r3, #4
 8003ad2:	d103      	bne.n	8003adc <_printf_common+0x74>
 8003ad4:	1a8d      	subs	r5, r1, r2
 8003ad6:	43eb      	mvns	r3, r5
 8003ad8:	17db      	asrs	r3, r3, #31
 8003ada:	401d      	ands	r5, r3
 8003adc:	68a3      	ldr	r3, [r4, #8]
 8003ade:	6922      	ldr	r2, [r4, #16]
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	dd01      	ble.n	8003ae8 <_printf_common+0x80>
 8003ae4:	1a9b      	subs	r3, r3, r2
 8003ae6:	18ed      	adds	r5, r5, r3
 8003ae8:	2700      	movs	r7, #0
 8003aea:	42bd      	cmp	r5, r7
 8003aec:	d120      	bne.n	8003b30 <_printf_common+0xc8>
 8003aee:	2000      	movs	r0, #0
 8003af0:	e010      	b.n	8003b14 <_printf_common+0xac>
 8003af2:	3701      	adds	r7, #1
 8003af4:	68e3      	ldr	r3, [r4, #12]
 8003af6:	682a      	ldr	r2, [r5, #0]
 8003af8:	1a9b      	subs	r3, r3, r2
 8003afa:	42bb      	cmp	r3, r7
 8003afc:	ddd2      	ble.n	8003aa4 <_printf_common+0x3c>
 8003afe:	0022      	movs	r2, r4
 8003b00:	2301      	movs	r3, #1
 8003b02:	9901      	ldr	r1, [sp, #4]
 8003b04:	9800      	ldr	r0, [sp, #0]
 8003b06:	9e08      	ldr	r6, [sp, #32]
 8003b08:	3219      	adds	r2, #25
 8003b0a:	47b0      	blx	r6
 8003b0c:	1c43      	adds	r3, r0, #1
 8003b0e:	d1f0      	bne.n	8003af2 <_printf_common+0x8a>
 8003b10:	2001      	movs	r0, #1
 8003b12:	4240      	negs	r0, r0
 8003b14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003b16:	2030      	movs	r0, #48	; 0x30
 8003b18:	18e1      	adds	r1, r4, r3
 8003b1a:	3143      	adds	r1, #67	; 0x43
 8003b1c:	7008      	strb	r0, [r1, #0]
 8003b1e:	0021      	movs	r1, r4
 8003b20:	1c5a      	adds	r2, r3, #1
 8003b22:	3145      	adds	r1, #69	; 0x45
 8003b24:	7809      	ldrb	r1, [r1, #0]
 8003b26:	18a2      	adds	r2, r4, r2
 8003b28:	3243      	adds	r2, #67	; 0x43
 8003b2a:	3302      	adds	r3, #2
 8003b2c:	7011      	strb	r1, [r2, #0]
 8003b2e:	e7c1      	b.n	8003ab4 <_printf_common+0x4c>
 8003b30:	0022      	movs	r2, r4
 8003b32:	2301      	movs	r3, #1
 8003b34:	9901      	ldr	r1, [sp, #4]
 8003b36:	9800      	ldr	r0, [sp, #0]
 8003b38:	9e08      	ldr	r6, [sp, #32]
 8003b3a:	321a      	adds	r2, #26
 8003b3c:	47b0      	blx	r6
 8003b3e:	1c43      	adds	r3, r0, #1
 8003b40:	d0e6      	beq.n	8003b10 <_printf_common+0xa8>
 8003b42:	3701      	adds	r7, #1
 8003b44:	e7d1      	b.n	8003aea <_printf_common+0x82>
	...

08003b48 <_printf_i>:
 8003b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b4a:	b08b      	sub	sp, #44	; 0x2c
 8003b4c:	9206      	str	r2, [sp, #24]
 8003b4e:	000a      	movs	r2, r1
 8003b50:	3243      	adds	r2, #67	; 0x43
 8003b52:	9307      	str	r3, [sp, #28]
 8003b54:	9005      	str	r0, [sp, #20]
 8003b56:	9204      	str	r2, [sp, #16]
 8003b58:	7e0a      	ldrb	r2, [r1, #24]
 8003b5a:	000c      	movs	r4, r1
 8003b5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003b5e:	2a78      	cmp	r2, #120	; 0x78
 8003b60:	d807      	bhi.n	8003b72 <_printf_i+0x2a>
 8003b62:	2a62      	cmp	r2, #98	; 0x62
 8003b64:	d809      	bhi.n	8003b7a <_printf_i+0x32>
 8003b66:	2a00      	cmp	r2, #0
 8003b68:	d100      	bne.n	8003b6c <_printf_i+0x24>
 8003b6a:	e0c1      	b.n	8003cf0 <_printf_i+0x1a8>
 8003b6c:	2a58      	cmp	r2, #88	; 0x58
 8003b6e:	d100      	bne.n	8003b72 <_printf_i+0x2a>
 8003b70:	e08c      	b.n	8003c8c <_printf_i+0x144>
 8003b72:	0026      	movs	r6, r4
 8003b74:	3642      	adds	r6, #66	; 0x42
 8003b76:	7032      	strb	r2, [r6, #0]
 8003b78:	e022      	b.n	8003bc0 <_printf_i+0x78>
 8003b7a:	0010      	movs	r0, r2
 8003b7c:	3863      	subs	r0, #99	; 0x63
 8003b7e:	2815      	cmp	r0, #21
 8003b80:	d8f7      	bhi.n	8003b72 <_printf_i+0x2a>
 8003b82:	f7fc fac1 	bl	8000108 <__gnu_thumb1_case_shi>
 8003b86:	0016      	.short	0x0016
 8003b88:	fff6001f 	.word	0xfff6001f
 8003b8c:	fff6fff6 	.word	0xfff6fff6
 8003b90:	001ffff6 	.word	0x001ffff6
 8003b94:	fff6fff6 	.word	0xfff6fff6
 8003b98:	fff6fff6 	.word	0xfff6fff6
 8003b9c:	003600a8 	.word	0x003600a8
 8003ba0:	fff6009a 	.word	0xfff6009a
 8003ba4:	00b9fff6 	.word	0x00b9fff6
 8003ba8:	0036fff6 	.word	0x0036fff6
 8003bac:	fff6fff6 	.word	0xfff6fff6
 8003bb0:	009e      	.short	0x009e
 8003bb2:	0026      	movs	r6, r4
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	3642      	adds	r6, #66	; 0x42
 8003bb8:	1d11      	adds	r1, r2, #4
 8003bba:	6019      	str	r1, [r3, #0]
 8003bbc:	6813      	ldr	r3, [r2, #0]
 8003bbe:	7033      	strb	r3, [r6, #0]
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e0a7      	b.n	8003d14 <_printf_i+0x1cc>
 8003bc4:	6808      	ldr	r0, [r1, #0]
 8003bc6:	6819      	ldr	r1, [r3, #0]
 8003bc8:	1d0a      	adds	r2, r1, #4
 8003bca:	0605      	lsls	r5, r0, #24
 8003bcc:	d50b      	bpl.n	8003be6 <_printf_i+0x9e>
 8003bce:	680d      	ldr	r5, [r1, #0]
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	2d00      	cmp	r5, #0
 8003bd4:	da03      	bge.n	8003bde <_printf_i+0x96>
 8003bd6:	232d      	movs	r3, #45	; 0x2d
 8003bd8:	9a04      	ldr	r2, [sp, #16]
 8003bda:	426d      	negs	r5, r5
 8003bdc:	7013      	strb	r3, [r2, #0]
 8003bde:	4b61      	ldr	r3, [pc, #388]	; (8003d64 <_printf_i+0x21c>)
 8003be0:	270a      	movs	r7, #10
 8003be2:	9303      	str	r3, [sp, #12]
 8003be4:	e01b      	b.n	8003c1e <_printf_i+0xd6>
 8003be6:	680d      	ldr	r5, [r1, #0]
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	0641      	lsls	r1, r0, #25
 8003bec:	d5f1      	bpl.n	8003bd2 <_printf_i+0x8a>
 8003bee:	b22d      	sxth	r5, r5
 8003bf0:	e7ef      	b.n	8003bd2 <_printf_i+0x8a>
 8003bf2:	680d      	ldr	r5, [r1, #0]
 8003bf4:	6819      	ldr	r1, [r3, #0]
 8003bf6:	1d08      	adds	r0, r1, #4
 8003bf8:	6018      	str	r0, [r3, #0]
 8003bfa:	062e      	lsls	r6, r5, #24
 8003bfc:	d501      	bpl.n	8003c02 <_printf_i+0xba>
 8003bfe:	680d      	ldr	r5, [r1, #0]
 8003c00:	e003      	b.n	8003c0a <_printf_i+0xc2>
 8003c02:	066d      	lsls	r5, r5, #25
 8003c04:	d5fb      	bpl.n	8003bfe <_printf_i+0xb6>
 8003c06:	680d      	ldr	r5, [r1, #0]
 8003c08:	b2ad      	uxth	r5, r5
 8003c0a:	4b56      	ldr	r3, [pc, #344]	; (8003d64 <_printf_i+0x21c>)
 8003c0c:	2708      	movs	r7, #8
 8003c0e:	9303      	str	r3, [sp, #12]
 8003c10:	2a6f      	cmp	r2, #111	; 0x6f
 8003c12:	d000      	beq.n	8003c16 <_printf_i+0xce>
 8003c14:	3702      	adds	r7, #2
 8003c16:	0023      	movs	r3, r4
 8003c18:	2200      	movs	r2, #0
 8003c1a:	3343      	adds	r3, #67	; 0x43
 8003c1c:	701a      	strb	r2, [r3, #0]
 8003c1e:	6863      	ldr	r3, [r4, #4]
 8003c20:	60a3      	str	r3, [r4, #8]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	db03      	blt.n	8003c2e <_printf_i+0xe6>
 8003c26:	2204      	movs	r2, #4
 8003c28:	6821      	ldr	r1, [r4, #0]
 8003c2a:	4391      	bics	r1, r2
 8003c2c:	6021      	str	r1, [r4, #0]
 8003c2e:	2d00      	cmp	r5, #0
 8003c30:	d102      	bne.n	8003c38 <_printf_i+0xf0>
 8003c32:	9e04      	ldr	r6, [sp, #16]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00c      	beq.n	8003c52 <_printf_i+0x10a>
 8003c38:	9e04      	ldr	r6, [sp, #16]
 8003c3a:	0028      	movs	r0, r5
 8003c3c:	0039      	movs	r1, r7
 8003c3e:	f7fc faf3 	bl	8000228 <__aeabi_uidivmod>
 8003c42:	9b03      	ldr	r3, [sp, #12]
 8003c44:	3e01      	subs	r6, #1
 8003c46:	5c5b      	ldrb	r3, [r3, r1]
 8003c48:	7033      	strb	r3, [r6, #0]
 8003c4a:	002b      	movs	r3, r5
 8003c4c:	0005      	movs	r5, r0
 8003c4e:	429f      	cmp	r7, r3
 8003c50:	d9f3      	bls.n	8003c3a <_printf_i+0xf2>
 8003c52:	2f08      	cmp	r7, #8
 8003c54:	d109      	bne.n	8003c6a <_printf_i+0x122>
 8003c56:	6823      	ldr	r3, [r4, #0]
 8003c58:	07db      	lsls	r3, r3, #31
 8003c5a:	d506      	bpl.n	8003c6a <_printf_i+0x122>
 8003c5c:	6863      	ldr	r3, [r4, #4]
 8003c5e:	6922      	ldr	r2, [r4, #16]
 8003c60:	4293      	cmp	r3, r2
 8003c62:	dc02      	bgt.n	8003c6a <_printf_i+0x122>
 8003c64:	2330      	movs	r3, #48	; 0x30
 8003c66:	3e01      	subs	r6, #1
 8003c68:	7033      	strb	r3, [r6, #0]
 8003c6a:	9b04      	ldr	r3, [sp, #16]
 8003c6c:	1b9b      	subs	r3, r3, r6
 8003c6e:	6123      	str	r3, [r4, #16]
 8003c70:	9b07      	ldr	r3, [sp, #28]
 8003c72:	0021      	movs	r1, r4
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	9805      	ldr	r0, [sp, #20]
 8003c78:	9b06      	ldr	r3, [sp, #24]
 8003c7a:	aa09      	add	r2, sp, #36	; 0x24
 8003c7c:	f7ff fef4 	bl	8003a68 <_printf_common>
 8003c80:	1c43      	adds	r3, r0, #1
 8003c82:	d14c      	bne.n	8003d1e <_printf_i+0x1d6>
 8003c84:	2001      	movs	r0, #1
 8003c86:	4240      	negs	r0, r0
 8003c88:	b00b      	add	sp, #44	; 0x2c
 8003c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c8c:	3145      	adds	r1, #69	; 0x45
 8003c8e:	700a      	strb	r2, [r1, #0]
 8003c90:	4a34      	ldr	r2, [pc, #208]	; (8003d64 <_printf_i+0x21c>)
 8003c92:	9203      	str	r2, [sp, #12]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	6821      	ldr	r1, [r4, #0]
 8003c98:	ca20      	ldmia	r2!, {r5}
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	0608      	lsls	r0, r1, #24
 8003c9e:	d516      	bpl.n	8003cce <_printf_i+0x186>
 8003ca0:	07cb      	lsls	r3, r1, #31
 8003ca2:	d502      	bpl.n	8003caa <_printf_i+0x162>
 8003ca4:	2320      	movs	r3, #32
 8003ca6:	4319      	orrs	r1, r3
 8003ca8:	6021      	str	r1, [r4, #0]
 8003caa:	2710      	movs	r7, #16
 8003cac:	2d00      	cmp	r5, #0
 8003cae:	d1b2      	bne.n	8003c16 <_printf_i+0xce>
 8003cb0:	2320      	movs	r3, #32
 8003cb2:	6822      	ldr	r2, [r4, #0]
 8003cb4:	439a      	bics	r2, r3
 8003cb6:	6022      	str	r2, [r4, #0]
 8003cb8:	e7ad      	b.n	8003c16 <_printf_i+0xce>
 8003cba:	2220      	movs	r2, #32
 8003cbc:	6809      	ldr	r1, [r1, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	6022      	str	r2, [r4, #0]
 8003cc2:	0022      	movs	r2, r4
 8003cc4:	2178      	movs	r1, #120	; 0x78
 8003cc6:	3245      	adds	r2, #69	; 0x45
 8003cc8:	7011      	strb	r1, [r2, #0]
 8003cca:	4a27      	ldr	r2, [pc, #156]	; (8003d68 <_printf_i+0x220>)
 8003ccc:	e7e1      	b.n	8003c92 <_printf_i+0x14a>
 8003cce:	0648      	lsls	r0, r1, #25
 8003cd0:	d5e6      	bpl.n	8003ca0 <_printf_i+0x158>
 8003cd2:	b2ad      	uxth	r5, r5
 8003cd4:	e7e4      	b.n	8003ca0 <_printf_i+0x158>
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	680d      	ldr	r5, [r1, #0]
 8003cda:	1d10      	adds	r0, r2, #4
 8003cdc:	6949      	ldr	r1, [r1, #20]
 8003cde:	6018      	str	r0, [r3, #0]
 8003ce0:	6813      	ldr	r3, [r2, #0]
 8003ce2:	062e      	lsls	r6, r5, #24
 8003ce4:	d501      	bpl.n	8003cea <_printf_i+0x1a2>
 8003ce6:	6019      	str	r1, [r3, #0]
 8003ce8:	e002      	b.n	8003cf0 <_printf_i+0x1a8>
 8003cea:	066d      	lsls	r5, r5, #25
 8003cec:	d5fb      	bpl.n	8003ce6 <_printf_i+0x19e>
 8003cee:	8019      	strh	r1, [r3, #0]
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	9e04      	ldr	r6, [sp, #16]
 8003cf4:	6123      	str	r3, [r4, #16]
 8003cf6:	e7bb      	b.n	8003c70 <_printf_i+0x128>
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	1d11      	adds	r1, r2, #4
 8003cfc:	6019      	str	r1, [r3, #0]
 8003cfe:	6816      	ldr	r6, [r2, #0]
 8003d00:	2100      	movs	r1, #0
 8003d02:	0030      	movs	r0, r6
 8003d04:	6862      	ldr	r2, [r4, #4]
 8003d06:	f000 f831 	bl	8003d6c <memchr>
 8003d0a:	2800      	cmp	r0, #0
 8003d0c:	d001      	beq.n	8003d12 <_printf_i+0x1ca>
 8003d0e:	1b80      	subs	r0, r0, r6
 8003d10:	6060      	str	r0, [r4, #4]
 8003d12:	6863      	ldr	r3, [r4, #4]
 8003d14:	6123      	str	r3, [r4, #16]
 8003d16:	2300      	movs	r3, #0
 8003d18:	9a04      	ldr	r2, [sp, #16]
 8003d1a:	7013      	strb	r3, [r2, #0]
 8003d1c:	e7a8      	b.n	8003c70 <_printf_i+0x128>
 8003d1e:	6923      	ldr	r3, [r4, #16]
 8003d20:	0032      	movs	r2, r6
 8003d22:	9906      	ldr	r1, [sp, #24]
 8003d24:	9805      	ldr	r0, [sp, #20]
 8003d26:	9d07      	ldr	r5, [sp, #28]
 8003d28:	47a8      	blx	r5
 8003d2a:	1c43      	adds	r3, r0, #1
 8003d2c:	d0aa      	beq.n	8003c84 <_printf_i+0x13c>
 8003d2e:	6823      	ldr	r3, [r4, #0]
 8003d30:	079b      	lsls	r3, r3, #30
 8003d32:	d415      	bmi.n	8003d60 <_printf_i+0x218>
 8003d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d36:	68e0      	ldr	r0, [r4, #12]
 8003d38:	4298      	cmp	r0, r3
 8003d3a:	daa5      	bge.n	8003c88 <_printf_i+0x140>
 8003d3c:	0018      	movs	r0, r3
 8003d3e:	e7a3      	b.n	8003c88 <_printf_i+0x140>
 8003d40:	0022      	movs	r2, r4
 8003d42:	2301      	movs	r3, #1
 8003d44:	9906      	ldr	r1, [sp, #24]
 8003d46:	9805      	ldr	r0, [sp, #20]
 8003d48:	9e07      	ldr	r6, [sp, #28]
 8003d4a:	3219      	adds	r2, #25
 8003d4c:	47b0      	blx	r6
 8003d4e:	1c43      	adds	r3, r0, #1
 8003d50:	d098      	beq.n	8003c84 <_printf_i+0x13c>
 8003d52:	3501      	adds	r5, #1
 8003d54:	68e3      	ldr	r3, [r4, #12]
 8003d56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d58:	1a9b      	subs	r3, r3, r2
 8003d5a:	42ab      	cmp	r3, r5
 8003d5c:	dcf0      	bgt.n	8003d40 <_printf_i+0x1f8>
 8003d5e:	e7e9      	b.n	8003d34 <_printf_i+0x1ec>
 8003d60:	2500      	movs	r5, #0
 8003d62:	e7f7      	b.n	8003d54 <_printf_i+0x20c>
 8003d64:	080040b9 	.word	0x080040b9
 8003d68:	080040ca 	.word	0x080040ca

08003d6c <memchr>:
 8003d6c:	b2c9      	uxtb	r1, r1
 8003d6e:	1882      	adds	r2, r0, r2
 8003d70:	4290      	cmp	r0, r2
 8003d72:	d101      	bne.n	8003d78 <memchr+0xc>
 8003d74:	2000      	movs	r0, #0
 8003d76:	4770      	bx	lr
 8003d78:	7803      	ldrb	r3, [r0, #0]
 8003d7a:	428b      	cmp	r3, r1
 8003d7c:	d0fb      	beq.n	8003d76 <memchr+0xa>
 8003d7e:	3001      	adds	r0, #1
 8003d80:	e7f6      	b.n	8003d70 <memchr+0x4>

08003d82 <memcpy>:
 8003d82:	2300      	movs	r3, #0
 8003d84:	b510      	push	{r4, lr}
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d100      	bne.n	8003d8c <memcpy+0xa>
 8003d8a:	bd10      	pop	{r4, pc}
 8003d8c:	5ccc      	ldrb	r4, [r1, r3]
 8003d8e:	54c4      	strb	r4, [r0, r3]
 8003d90:	3301      	adds	r3, #1
 8003d92:	e7f8      	b.n	8003d86 <memcpy+0x4>

08003d94 <memmove>:
 8003d94:	b510      	push	{r4, lr}
 8003d96:	4288      	cmp	r0, r1
 8003d98:	d902      	bls.n	8003da0 <memmove+0xc>
 8003d9a:	188b      	adds	r3, r1, r2
 8003d9c:	4298      	cmp	r0, r3
 8003d9e:	d303      	bcc.n	8003da8 <memmove+0x14>
 8003da0:	2300      	movs	r3, #0
 8003da2:	e007      	b.n	8003db4 <memmove+0x20>
 8003da4:	5c8b      	ldrb	r3, [r1, r2]
 8003da6:	5483      	strb	r3, [r0, r2]
 8003da8:	3a01      	subs	r2, #1
 8003daa:	d2fb      	bcs.n	8003da4 <memmove+0x10>
 8003dac:	bd10      	pop	{r4, pc}
 8003dae:	5ccc      	ldrb	r4, [r1, r3]
 8003db0:	54c4      	strb	r4, [r0, r3]
 8003db2:	3301      	adds	r3, #1
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d1fa      	bne.n	8003dae <memmove+0x1a>
 8003db8:	e7f8      	b.n	8003dac <memmove+0x18>
	...

08003dbc <_free_r>:
 8003dbc:	b570      	push	{r4, r5, r6, lr}
 8003dbe:	0005      	movs	r5, r0
 8003dc0:	2900      	cmp	r1, #0
 8003dc2:	d010      	beq.n	8003de6 <_free_r+0x2a>
 8003dc4:	1f0c      	subs	r4, r1, #4
 8003dc6:	6823      	ldr	r3, [r4, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	da00      	bge.n	8003dce <_free_r+0x12>
 8003dcc:	18e4      	adds	r4, r4, r3
 8003dce:	0028      	movs	r0, r5
 8003dd0:	f000 f918 	bl	8004004 <__malloc_lock>
 8003dd4:	4a1d      	ldr	r2, [pc, #116]	; (8003e4c <_free_r+0x90>)
 8003dd6:	6813      	ldr	r3, [r2, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d105      	bne.n	8003de8 <_free_r+0x2c>
 8003ddc:	6063      	str	r3, [r4, #4]
 8003dde:	6014      	str	r4, [r2, #0]
 8003de0:	0028      	movs	r0, r5
 8003de2:	f000 f917 	bl	8004014 <__malloc_unlock>
 8003de6:	bd70      	pop	{r4, r5, r6, pc}
 8003de8:	42a3      	cmp	r3, r4
 8003dea:	d908      	bls.n	8003dfe <_free_r+0x42>
 8003dec:	6821      	ldr	r1, [r4, #0]
 8003dee:	1860      	adds	r0, r4, r1
 8003df0:	4283      	cmp	r3, r0
 8003df2:	d1f3      	bne.n	8003ddc <_free_r+0x20>
 8003df4:	6818      	ldr	r0, [r3, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	1841      	adds	r1, r0, r1
 8003dfa:	6021      	str	r1, [r4, #0]
 8003dfc:	e7ee      	b.n	8003ddc <_free_r+0x20>
 8003dfe:	001a      	movs	r2, r3
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <_free_r+0x4e>
 8003e06:	42a3      	cmp	r3, r4
 8003e08:	d9f9      	bls.n	8003dfe <_free_r+0x42>
 8003e0a:	6811      	ldr	r1, [r2, #0]
 8003e0c:	1850      	adds	r0, r2, r1
 8003e0e:	42a0      	cmp	r0, r4
 8003e10:	d10b      	bne.n	8003e2a <_free_r+0x6e>
 8003e12:	6820      	ldr	r0, [r4, #0]
 8003e14:	1809      	adds	r1, r1, r0
 8003e16:	1850      	adds	r0, r2, r1
 8003e18:	6011      	str	r1, [r2, #0]
 8003e1a:	4283      	cmp	r3, r0
 8003e1c:	d1e0      	bne.n	8003de0 <_free_r+0x24>
 8003e1e:	6818      	ldr	r0, [r3, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	1841      	adds	r1, r0, r1
 8003e24:	6011      	str	r1, [r2, #0]
 8003e26:	6053      	str	r3, [r2, #4]
 8003e28:	e7da      	b.n	8003de0 <_free_r+0x24>
 8003e2a:	42a0      	cmp	r0, r4
 8003e2c:	d902      	bls.n	8003e34 <_free_r+0x78>
 8003e2e:	230c      	movs	r3, #12
 8003e30:	602b      	str	r3, [r5, #0]
 8003e32:	e7d5      	b.n	8003de0 <_free_r+0x24>
 8003e34:	6821      	ldr	r1, [r4, #0]
 8003e36:	1860      	adds	r0, r4, r1
 8003e38:	4283      	cmp	r3, r0
 8003e3a:	d103      	bne.n	8003e44 <_free_r+0x88>
 8003e3c:	6818      	ldr	r0, [r3, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	1841      	adds	r1, r0, r1
 8003e42:	6021      	str	r1, [r4, #0]
 8003e44:	6063      	str	r3, [r4, #4]
 8003e46:	6054      	str	r4, [r2, #4]
 8003e48:	e7ca      	b.n	8003de0 <_free_r+0x24>
 8003e4a:	46c0      	nop			; (mov r8, r8)
 8003e4c:	20000214 	.word	0x20000214

08003e50 <sbrk_aligned>:
 8003e50:	b570      	push	{r4, r5, r6, lr}
 8003e52:	4e0f      	ldr	r6, [pc, #60]	; (8003e90 <sbrk_aligned+0x40>)
 8003e54:	000d      	movs	r5, r1
 8003e56:	6831      	ldr	r1, [r6, #0]
 8003e58:	0004      	movs	r4, r0
 8003e5a:	2900      	cmp	r1, #0
 8003e5c:	d102      	bne.n	8003e64 <sbrk_aligned+0x14>
 8003e5e:	f000 f8bf 	bl	8003fe0 <_sbrk_r>
 8003e62:	6030      	str	r0, [r6, #0]
 8003e64:	0029      	movs	r1, r5
 8003e66:	0020      	movs	r0, r4
 8003e68:	f000 f8ba 	bl	8003fe0 <_sbrk_r>
 8003e6c:	1c43      	adds	r3, r0, #1
 8003e6e:	d00a      	beq.n	8003e86 <sbrk_aligned+0x36>
 8003e70:	2303      	movs	r3, #3
 8003e72:	1cc5      	adds	r5, r0, #3
 8003e74:	439d      	bics	r5, r3
 8003e76:	42a8      	cmp	r0, r5
 8003e78:	d007      	beq.n	8003e8a <sbrk_aligned+0x3a>
 8003e7a:	1a29      	subs	r1, r5, r0
 8003e7c:	0020      	movs	r0, r4
 8003e7e:	f000 f8af 	bl	8003fe0 <_sbrk_r>
 8003e82:	1c43      	adds	r3, r0, #1
 8003e84:	d101      	bne.n	8003e8a <sbrk_aligned+0x3a>
 8003e86:	2501      	movs	r5, #1
 8003e88:	426d      	negs	r5, r5
 8003e8a:	0028      	movs	r0, r5
 8003e8c:	bd70      	pop	{r4, r5, r6, pc}
 8003e8e:	46c0      	nop			; (mov r8, r8)
 8003e90:	20000218 	.word	0x20000218

08003e94 <_malloc_r>:
 8003e94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e96:	2203      	movs	r2, #3
 8003e98:	1ccb      	adds	r3, r1, #3
 8003e9a:	4393      	bics	r3, r2
 8003e9c:	3308      	adds	r3, #8
 8003e9e:	0006      	movs	r6, r0
 8003ea0:	001f      	movs	r7, r3
 8003ea2:	2b0c      	cmp	r3, #12
 8003ea4:	d232      	bcs.n	8003f0c <_malloc_r+0x78>
 8003ea6:	270c      	movs	r7, #12
 8003ea8:	42b9      	cmp	r1, r7
 8003eaa:	d831      	bhi.n	8003f10 <_malloc_r+0x7c>
 8003eac:	0030      	movs	r0, r6
 8003eae:	f000 f8a9 	bl	8004004 <__malloc_lock>
 8003eb2:	4d32      	ldr	r5, [pc, #200]	; (8003f7c <_malloc_r+0xe8>)
 8003eb4:	682b      	ldr	r3, [r5, #0]
 8003eb6:	001c      	movs	r4, r3
 8003eb8:	2c00      	cmp	r4, #0
 8003eba:	d12e      	bne.n	8003f1a <_malloc_r+0x86>
 8003ebc:	0039      	movs	r1, r7
 8003ebe:	0030      	movs	r0, r6
 8003ec0:	f7ff ffc6 	bl	8003e50 <sbrk_aligned>
 8003ec4:	0004      	movs	r4, r0
 8003ec6:	1c43      	adds	r3, r0, #1
 8003ec8:	d11e      	bne.n	8003f08 <_malloc_r+0x74>
 8003eca:	682c      	ldr	r4, [r5, #0]
 8003ecc:	0025      	movs	r5, r4
 8003ece:	2d00      	cmp	r5, #0
 8003ed0:	d14a      	bne.n	8003f68 <_malloc_r+0xd4>
 8003ed2:	6823      	ldr	r3, [r4, #0]
 8003ed4:	0029      	movs	r1, r5
 8003ed6:	18e3      	adds	r3, r4, r3
 8003ed8:	0030      	movs	r0, r6
 8003eda:	9301      	str	r3, [sp, #4]
 8003edc:	f000 f880 	bl	8003fe0 <_sbrk_r>
 8003ee0:	9b01      	ldr	r3, [sp, #4]
 8003ee2:	4283      	cmp	r3, r0
 8003ee4:	d143      	bne.n	8003f6e <_malloc_r+0xda>
 8003ee6:	6823      	ldr	r3, [r4, #0]
 8003ee8:	3703      	adds	r7, #3
 8003eea:	1aff      	subs	r7, r7, r3
 8003eec:	2303      	movs	r3, #3
 8003eee:	439f      	bics	r7, r3
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	2f0c      	cmp	r7, #12
 8003ef4:	d200      	bcs.n	8003ef8 <_malloc_r+0x64>
 8003ef6:	270c      	movs	r7, #12
 8003ef8:	0039      	movs	r1, r7
 8003efa:	0030      	movs	r0, r6
 8003efc:	f7ff ffa8 	bl	8003e50 <sbrk_aligned>
 8003f00:	1c43      	adds	r3, r0, #1
 8003f02:	d034      	beq.n	8003f6e <_malloc_r+0xda>
 8003f04:	6823      	ldr	r3, [r4, #0]
 8003f06:	19df      	adds	r7, r3, r7
 8003f08:	6027      	str	r7, [r4, #0]
 8003f0a:	e013      	b.n	8003f34 <_malloc_r+0xa0>
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	dacb      	bge.n	8003ea8 <_malloc_r+0x14>
 8003f10:	230c      	movs	r3, #12
 8003f12:	2500      	movs	r5, #0
 8003f14:	6033      	str	r3, [r6, #0]
 8003f16:	0028      	movs	r0, r5
 8003f18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f1a:	6822      	ldr	r2, [r4, #0]
 8003f1c:	1bd1      	subs	r1, r2, r7
 8003f1e:	d420      	bmi.n	8003f62 <_malloc_r+0xce>
 8003f20:	290b      	cmp	r1, #11
 8003f22:	d917      	bls.n	8003f54 <_malloc_r+0xc0>
 8003f24:	19e2      	adds	r2, r4, r7
 8003f26:	6027      	str	r7, [r4, #0]
 8003f28:	42a3      	cmp	r3, r4
 8003f2a:	d111      	bne.n	8003f50 <_malloc_r+0xbc>
 8003f2c:	602a      	str	r2, [r5, #0]
 8003f2e:	6863      	ldr	r3, [r4, #4]
 8003f30:	6011      	str	r1, [r2, #0]
 8003f32:	6053      	str	r3, [r2, #4]
 8003f34:	0030      	movs	r0, r6
 8003f36:	0025      	movs	r5, r4
 8003f38:	f000 f86c 	bl	8004014 <__malloc_unlock>
 8003f3c:	2207      	movs	r2, #7
 8003f3e:	350b      	adds	r5, #11
 8003f40:	1d23      	adds	r3, r4, #4
 8003f42:	4395      	bics	r5, r2
 8003f44:	1aea      	subs	r2, r5, r3
 8003f46:	429d      	cmp	r5, r3
 8003f48:	d0e5      	beq.n	8003f16 <_malloc_r+0x82>
 8003f4a:	1b5b      	subs	r3, r3, r5
 8003f4c:	50a3      	str	r3, [r4, r2]
 8003f4e:	e7e2      	b.n	8003f16 <_malloc_r+0x82>
 8003f50:	605a      	str	r2, [r3, #4]
 8003f52:	e7ec      	b.n	8003f2e <_malloc_r+0x9a>
 8003f54:	6862      	ldr	r2, [r4, #4]
 8003f56:	42a3      	cmp	r3, r4
 8003f58:	d101      	bne.n	8003f5e <_malloc_r+0xca>
 8003f5a:	602a      	str	r2, [r5, #0]
 8003f5c:	e7ea      	b.n	8003f34 <_malloc_r+0xa0>
 8003f5e:	605a      	str	r2, [r3, #4]
 8003f60:	e7e8      	b.n	8003f34 <_malloc_r+0xa0>
 8003f62:	0023      	movs	r3, r4
 8003f64:	6864      	ldr	r4, [r4, #4]
 8003f66:	e7a7      	b.n	8003eb8 <_malloc_r+0x24>
 8003f68:	002c      	movs	r4, r5
 8003f6a:	686d      	ldr	r5, [r5, #4]
 8003f6c:	e7af      	b.n	8003ece <_malloc_r+0x3a>
 8003f6e:	230c      	movs	r3, #12
 8003f70:	0030      	movs	r0, r6
 8003f72:	6033      	str	r3, [r6, #0]
 8003f74:	f000 f84e 	bl	8004014 <__malloc_unlock>
 8003f78:	e7cd      	b.n	8003f16 <_malloc_r+0x82>
 8003f7a:	46c0      	nop			; (mov r8, r8)
 8003f7c:	20000214 	.word	0x20000214

08003f80 <_realloc_r>:
 8003f80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f82:	0007      	movs	r7, r0
 8003f84:	000e      	movs	r6, r1
 8003f86:	0014      	movs	r4, r2
 8003f88:	2900      	cmp	r1, #0
 8003f8a:	d105      	bne.n	8003f98 <_realloc_r+0x18>
 8003f8c:	0011      	movs	r1, r2
 8003f8e:	f7ff ff81 	bl	8003e94 <_malloc_r>
 8003f92:	0005      	movs	r5, r0
 8003f94:	0028      	movs	r0, r5
 8003f96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f98:	2a00      	cmp	r2, #0
 8003f9a:	d103      	bne.n	8003fa4 <_realloc_r+0x24>
 8003f9c:	f7ff ff0e 	bl	8003dbc <_free_r>
 8003fa0:	0025      	movs	r5, r4
 8003fa2:	e7f7      	b.n	8003f94 <_realloc_r+0x14>
 8003fa4:	f000 f83e 	bl	8004024 <_malloc_usable_size_r>
 8003fa8:	9001      	str	r0, [sp, #4]
 8003faa:	4284      	cmp	r4, r0
 8003fac:	d803      	bhi.n	8003fb6 <_realloc_r+0x36>
 8003fae:	0035      	movs	r5, r6
 8003fb0:	0843      	lsrs	r3, r0, #1
 8003fb2:	42a3      	cmp	r3, r4
 8003fb4:	d3ee      	bcc.n	8003f94 <_realloc_r+0x14>
 8003fb6:	0021      	movs	r1, r4
 8003fb8:	0038      	movs	r0, r7
 8003fba:	f7ff ff6b 	bl	8003e94 <_malloc_r>
 8003fbe:	1e05      	subs	r5, r0, #0
 8003fc0:	d0e8      	beq.n	8003f94 <_realloc_r+0x14>
 8003fc2:	9b01      	ldr	r3, [sp, #4]
 8003fc4:	0022      	movs	r2, r4
 8003fc6:	429c      	cmp	r4, r3
 8003fc8:	d900      	bls.n	8003fcc <_realloc_r+0x4c>
 8003fca:	001a      	movs	r2, r3
 8003fcc:	0031      	movs	r1, r6
 8003fce:	0028      	movs	r0, r5
 8003fd0:	f7ff fed7 	bl	8003d82 <memcpy>
 8003fd4:	0031      	movs	r1, r6
 8003fd6:	0038      	movs	r0, r7
 8003fd8:	f7ff fef0 	bl	8003dbc <_free_r>
 8003fdc:	e7da      	b.n	8003f94 <_realloc_r+0x14>
	...

08003fe0 <_sbrk_r>:
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	b570      	push	{r4, r5, r6, lr}
 8003fe4:	4d06      	ldr	r5, [pc, #24]	; (8004000 <_sbrk_r+0x20>)
 8003fe6:	0004      	movs	r4, r0
 8003fe8:	0008      	movs	r0, r1
 8003fea:	602b      	str	r3, [r5, #0]
 8003fec:	f7fc fcba 	bl	8000964 <_sbrk>
 8003ff0:	1c43      	adds	r3, r0, #1
 8003ff2:	d103      	bne.n	8003ffc <_sbrk_r+0x1c>
 8003ff4:	682b      	ldr	r3, [r5, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d000      	beq.n	8003ffc <_sbrk_r+0x1c>
 8003ffa:	6023      	str	r3, [r4, #0]
 8003ffc:	bd70      	pop	{r4, r5, r6, pc}
 8003ffe:	46c0      	nop			; (mov r8, r8)
 8004000:	2000021c 	.word	0x2000021c

08004004 <__malloc_lock>:
 8004004:	b510      	push	{r4, lr}
 8004006:	4802      	ldr	r0, [pc, #8]	; (8004010 <__malloc_lock+0xc>)
 8004008:	f000 f814 	bl	8004034 <__retarget_lock_acquire_recursive>
 800400c:	bd10      	pop	{r4, pc}
 800400e:	46c0      	nop			; (mov r8, r8)
 8004010:	20000220 	.word	0x20000220

08004014 <__malloc_unlock>:
 8004014:	b510      	push	{r4, lr}
 8004016:	4802      	ldr	r0, [pc, #8]	; (8004020 <__malloc_unlock+0xc>)
 8004018:	f000 f80d 	bl	8004036 <__retarget_lock_release_recursive>
 800401c:	bd10      	pop	{r4, pc}
 800401e:	46c0      	nop			; (mov r8, r8)
 8004020:	20000220 	.word	0x20000220

08004024 <_malloc_usable_size_r>:
 8004024:	1f0b      	subs	r3, r1, #4
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	1f18      	subs	r0, r3, #4
 800402a:	2b00      	cmp	r3, #0
 800402c:	da01      	bge.n	8004032 <_malloc_usable_size_r+0xe>
 800402e:	580b      	ldr	r3, [r1, r0]
 8004030:	18c0      	adds	r0, r0, r3
 8004032:	4770      	bx	lr

08004034 <__retarget_lock_acquire_recursive>:
 8004034:	4770      	bx	lr

08004036 <__retarget_lock_release_recursive>:
 8004036:	4770      	bx	lr

08004038 <_init>:
 8004038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800403e:	bc08      	pop	{r3}
 8004040:	469e      	mov	lr, r3
 8004042:	4770      	bx	lr

08004044 <_fini>:
 8004044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004046:	46c0      	nop			; (mov r8, r8)
 8004048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800404a:	bc08      	pop	{r3}
 800404c:	469e      	mov	lr, r3
 800404e:	4770      	bx	lr
