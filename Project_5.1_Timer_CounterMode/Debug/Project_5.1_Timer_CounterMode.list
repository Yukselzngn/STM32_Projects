
Project_5.1_Timer_CounterMode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032c4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003384  08003384  00013384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003408  08003408  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08003408  08003408  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003408  08003408  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003408  08003408  00013408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800340c  0800340c  0001340c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08003410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  200000a4  080034b4  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  080034b4  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c93b  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019e2  00000000  00000000  0002ca07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  0002e3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae0  00000000  00000000  0002ef78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001917b  00000000  00000000  0002fa58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d871  00000000  00000000  00048bd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000965d5  00000000  00000000  00056444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eca19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d28  00000000  00000000  000eca6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000a4 	.word	0x200000a4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800336c 	.word	0x0800336c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000a8 	.word	0x200000a8
 8000104:	0800336c 	.word	0x0800336c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b088      	sub	sp, #32
 8000238:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023a:	f000 faa5 	bl	8000788 <HAL_Init>

  /* USER CODE BEGIN Init */
  uint8_t msg[25] = {'\0'};
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]
 8000244:	3304      	adds	r3, #4
 8000246:	2215      	movs	r2, #21
 8000248:	2100      	movs	r1, #0
 800024a:	0018      	movs	r0, r3
 800024c:	f002 fc1c 	bl	8002a88 <memset>
  uint16_t CounterTicks = 0;
 8000250:	231e      	movs	r3, #30
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	2200      	movs	r2, #0
 8000256:	801a      	strh	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000258:	f000 f83a 	bl	80002d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025c:	f000 f91c 	bl	8000498 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000260:	f000 f88e 	bl	8000380 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000264:	f000 f8e8 	bl	8000438 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000268:	4b0d      	ldr	r3, [pc, #52]	; (80002a0 <main+0x6c>)
 800026a:	0018      	movs	r0, r3
 800026c:	f001 fbb8 	bl	80019e0 <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


      CounterTicks = TIM2->CNT;						 				// counter value is kept in CNT register of Timer 2.
 8000270:	2380      	movs	r3, #128	; 0x80
 8000272:	05db      	lsls	r3, r3, #23
 8000274:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000276:	211e      	movs	r1, #30
 8000278:	187b      	adds	r3, r7, r1
 800027a:	801a      	strh	r2, [r3, #0]
      	  	  	  	  	  	  	  	  	  	  	  	   	   	   	   //This is why we read the TIM2->CNT register.

      sprintf(msg, "Value of counter = %d\n\r", CounterTicks);	 // Print The  Counter valur Via UART2
 800027c:	187b      	adds	r3, r7, r1
 800027e:	881a      	ldrh	r2, [r3, #0]
 8000280:	4908      	ldr	r1, [pc, #32]	; (80002a4 <main+0x70>)
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	0018      	movs	r0, r3
 8000286:	f002 fc07 	bl	8002a98 <siprintf>
      HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 800028a:	1d39      	adds	r1, r7, #4
 800028c:	4806      	ldr	r0, [pc, #24]	; (80002a8 <main+0x74>)
 800028e:	2364      	movs	r3, #100	; 0x64
 8000290:	2219      	movs	r2, #25
 8000292:	f001 ffdd 	bl	8002250 <HAL_UART_Transmit>
      HAL_Delay(100);
 8000296:	2064      	movs	r0, #100	; 0x64
 8000298:	f000 fada 	bl	8000850 <HAL_Delay>
  {
 800029c:	e7e8      	b.n	8000270 <main+0x3c>
 800029e:	46c0      	nop			; (mov r8, r8)
 80002a0:	200000c0 	.word	0x200000c0
 80002a4:	08003384 	.word	0x08003384
 80002a8:	20000108 	.word	0x20000108

080002ac <HAL_TIM_PeriodElapsedCallback>:
  }
  /* USER CODE END 3 */
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, overflow_msg, sizeof(overflow_msg), 100);
 80002b4:	4904      	ldr	r1, [pc, #16]	; (80002c8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80002b6:	4805      	ldr	r0, [pc, #20]	; (80002cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80002b8:	2364      	movs	r3, #100	; 0x64
 80002ba:	2232      	movs	r2, #50	; 0x32
 80002bc:	f001 ffc8 	bl	8002250 <HAL_UART_Transmit>

}
 80002c0:	46c0      	nop			; (mov r8, r8)
 80002c2:	46bd      	mov	sp, r7
 80002c4:	b002      	add	sp, #8
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	20000000 	.word	0x20000000
 80002cc:	20000108 	.word	0x20000108

080002d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d0:	b590      	push	{r4, r7, lr}
 80002d2:	b099      	sub	sp, #100	; 0x64
 80002d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d6:	242c      	movs	r4, #44	; 0x2c
 80002d8:	193b      	adds	r3, r7, r4
 80002da:	0018      	movs	r0, r3
 80002dc:	2334      	movs	r3, #52	; 0x34
 80002de:	001a      	movs	r2, r3
 80002e0:	2100      	movs	r1, #0
 80002e2:	f002 fbd1 	bl	8002a88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e6:	231c      	movs	r3, #28
 80002e8:	18fb      	adds	r3, r7, r3
 80002ea:	0018      	movs	r0, r3
 80002ec:	2310      	movs	r3, #16
 80002ee:	001a      	movs	r2, r3
 80002f0:	2100      	movs	r1, #0
 80002f2:	f002 fbc9 	bl	8002a88 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002f6:	003b      	movs	r3, r7
 80002f8:	0018      	movs	r0, r3
 80002fa:	231c      	movs	r3, #28
 80002fc:	001a      	movs	r2, r3
 80002fe:	2100      	movs	r1, #0
 8000300:	f002 fbc2 	bl	8002a88 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000304:	0021      	movs	r1, r4
 8000306:	187b      	adds	r3, r7, r1
 8000308:	2202      	movs	r2, #2
 800030a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030c:	187b      	adds	r3, r7, r1
 800030e:	2201      	movs	r2, #1
 8000310:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000312:	187b      	adds	r3, r7, r1
 8000314:	2210      	movs	r2, #16
 8000316:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000318:	187b      	adds	r3, r7, r1
 800031a:	2200      	movs	r2, #0
 800031c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031e:	187b      	adds	r3, r7, r1
 8000320:	0018      	movs	r0, r3
 8000322:	f000 fd0f 	bl	8000d44 <HAL_RCC_OscConfig>
 8000326:	1e03      	subs	r3, r0, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800032a:	f000 f8db 	bl	80004e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032e:	211c      	movs	r1, #28
 8000330:	187b      	adds	r3, r7, r1
 8000332:	2207      	movs	r2, #7
 8000334:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000336:	187b      	adds	r3, r7, r1
 8000338:	2200      	movs	r2, #0
 800033a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033c:	187b      	adds	r3, r7, r1
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000342:	187b      	adds	r3, r7, r1
 8000344:	2200      	movs	r2, #0
 8000346:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000348:	187b      	adds	r3, r7, r1
 800034a:	2100      	movs	r1, #0
 800034c:	0018      	movs	r0, r3
 800034e:	f001 f87f 	bl	8001450 <HAL_RCC_ClockConfig>
 8000352:	1e03      	subs	r3, r0, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000356:	f000 f8c5 	bl	80004e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800035a:	003b      	movs	r3, r7
 800035c:	2202      	movs	r2, #2
 800035e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000360:	003b      	movs	r3, r7
 8000362:	2200      	movs	r2, #0
 8000364:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000366:	003b      	movs	r3, r7
 8000368:	0018      	movs	r0, r3
 800036a:	f001 f9eb 	bl	8001744 <HAL_RCCEx_PeriphCLKConfig>
 800036e:	1e03      	subs	r3, r0, #0
 8000370:	d001      	beq.n	8000376 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000372:	f000 f8b7 	bl	80004e4 <Error_Handler>
  }
}
 8000376:	46c0      	nop			; (mov r8, r8)
 8000378:	46bd      	mov	sp, r7
 800037a:	b019      	add	sp, #100	; 0x64
 800037c:	bd90      	pop	{r4, r7, pc}
	...

08000380 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b086      	sub	sp, #24
 8000384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000386:	2308      	movs	r3, #8
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	0018      	movs	r0, r3
 800038c:	2310      	movs	r3, #16
 800038e:	001a      	movs	r2, r3
 8000390:	2100      	movs	r1, #0
 8000392:	f002 fb79 	bl	8002a88 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000396:	003b      	movs	r3, r7
 8000398:	0018      	movs	r0, r3
 800039a:	2308      	movs	r3, #8
 800039c:	001a      	movs	r2, r3
 800039e:	2100      	movs	r1, #0
 80003a0:	f002 fb72 	bl	8002a88 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003a4:	4b23      	ldr	r3, [pc, #140]	; (8000434 <MX_TIM2_Init+0xb4>)
 80003a6:	2280      	movs	r2, #128	; 0x80
 80003a8:	05d2      	lsls	r2, r2, #23
 80003aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80003ac:	4b21      	ldr	r3, [pc, #132]	; (8000434 <MX_TIM2_Init+0xb4>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003b2:	4b20      	ldr	r3, [pc, #128]	; (8000434 <MX_TIM2_Init+0xb4>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 15;
 80003b8:	4b1e      	ldr	r3, [pc, #120]	; (8000434 <MX_TIM2_Init+0xb4>)
 80003ba:	220f      	movs	r2, #15
 80003bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003be:	4b1d      	ldr	r3, [pc, #116]	; (8000434 <MX_TIM2_Init+0xb4>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003c4:	4b1b      	ldr	r3, [pc, #108]	; (8000434 <MX_TIM2_Init+0xb4>)
 80003c6:	2280      	movs	r2, #128	; 0x80
 80003c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003ca:	4b1a      	ldr	r3, [pc, #104]	; (8000434 <MX_TIM2_Init+0xb4>)
 80003cc:	0018      	movs	r0, r3
 80003ce:	f001 fab7 	bl	8001940 <HAL_TIM_Base_Init>
 80003d2:	1e03      	subs	r3, r0, #0
 80003d4:	d001      	beq.n	80003da <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80003d6:	f000 f885 	bl	80004e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80003da:	2108      	movs	r1, #8
 80003dc:	187b      	adds	r3, r7, r1
 80003de:	2280      	movs	r2, #128	; 0x80
 80003e0:	0192      	lsls	r2, r2, #6
 80003e2:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80003e4:	187b      	adds	r3, r7, r1
 80003e6:	2200      	movs	r2, #0
 80003e8:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80003ea:	187b      	adds	r3, r7, r1
 80003ec:	2200      	movs	r2, #0
 80003ee:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 15;
 80003f0:	187b      	adds	r3, r7, r1
 80003f2:	220f      	movs	r2, #15
 80003f4:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003f6:	187a      	adds	r2, r7, r1
 80003f8:	4b0e      	ldr	r3, [pc, #56]	; (8000434 <MX_TIM2_Init+0xb4>)
 80003fa:	0011      	movs	r1, r2
 80003fc:	0018      	movs	r0, r3
 80003fe:	f001 fc57 	bl	8001cb0 <HAL_TIM_ConfigClockSource>
 8000402:	1e03      	subs	r3, r0, #0
 8000404:	d001      	beq.n	800040a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000406:	f000 f86d 	bl	80004e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800040a:	003b      	movs	r3, r7
 800040c:	2200      	movs	r2, #0
 800040e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000410:	003b      	movs	r3, r7
 8000412:	2200      	movs	r2, #0
 8000414:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000416:	003a      	movs	r2, r7
 8000418:	4b06      	ldr	r3, [pc, #24]	; (8000434 <MX_TIM2_Init+0xb4>)
 800041a:	0011      	movs	r1, r2
 800041c:	0018      	movs	r0, r3
 800041e:	f001 fe55 	bl	80020cc <HAL_TIMEx_MasterConfigSynchronization>
 8000422:	1e03      	subs	r3, r0, #0
 8000424:	d001      	beq.n	800042a <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8000426:	f000 f85d 	bl	80004e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	46bd      	mov	sp, r7
 800042e:	b006      	add	sp, #24
 8000430:	bd80      	pop	{r7, pc}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	200000c0 	.word	0x200000c0

08000438 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800043c:	4b14      	ldr	r3, [pc, #80]	; (8000490 <MX_USART2_UART_Init+0x58>)
 800043e:	4a15      	ldr	r2, [pc, #84]	; (8000494 <MX_USART2_UART_Init+0x5c>)
 8000440:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000442:	4b13      	ldr	r3, [pc, #76]	; (8000490 <MX_USART2_UART_Init+0x58>)
 8000444:	2296      	movs	r2, #150	; 0x96
 8000446:	0192      	lsls	r2, r2, #6
 8000448:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800044a:	4b11      	ldr	r3, [pc, #68]	; (8000490 <MX_USART2_UART_Init+0x58>)
 800044c:	2200      	movs	r2, #0
 800044e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000450:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <MX_USART2_UART_Init+0x58>)
 8000452:	2200      	movs	r2, #0
 8000454:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000456:	4b0e      	ldr	r3, [pc, #56]	; (8000490 <MX_USART2_UART_Init+0x58>)
 8000458:	2200      	movs	r2, #0
 800045a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800045c:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <MX_USART2_UART_Init+0x58>)
 800045e:	220c      	movs	r2, #12
 8000460:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000462:	4b0b      	ldr	r3, [pc, #44]	; (8000490 <MX_USART2_UART_Init+0x58>)
 8000464:	2200      	movs	r2, #0
 8000466:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000468:	4b09      	ldr	r3, [pc, #36]	; (8000490 <MX_USART2_UART_Init+0x58>)
 800046a:	2200      	movs	r2, #0
 800046c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800046e:	4b08      	ldr	r3, [pc, #32]	; (8000490 <MX_USART2_UART_Init+0x58>)
 8000470:	2200      	movs	r2, #0
 8000472:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000474:	4b06      	ldr	r3, [pc, #24]	; (8000490 <MX_USART2_UART_Init+0x58>)
 8000476:	2200      	movs	r2, #0
 8000478:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800047a:	4b05      	ldr	r3, [pc, #20]	; (8000490 <MX_USART2_UART_Init+0x58>)
 800047c:	0018      	movs	r0, r3
 800047e:	f001 fe93 	bl	80021a8 <HAL_UART_Init>
 8000482:	1e03      	subs	r3, r0, #0
 8000484:	d001      	beq.n	800048a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000486:	f000 f82d 	bl	80004e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	20000108 	.word	0x20000108
 8000494:	40004400 	.word	0x40004400

08000498 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800049e:	4b10      	ldr	r3, [pc, #64]	; (80004e0 <MX_GPIO_Init+0x48>)
 80004a0:	695a      	ldr	r2, [r3, #20]
 80004a2:	4b0f      	ldr	r3, [pc, #60]	; (80004e0 <MX_GPIO_Init+0x48>)
 80004a4:	2180      	movs	r1, #128	; 0x80
 80004a6:	03c9      	lsls	r1, r1, #15
 80004a8:	430a      	orrs	r2, r1
 80004aa:	615a      	str	r2, [r3, #20]
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <MX_GPIO_Init+0x48>)
 80004ae:	695a      	ldr	r2, [r3, #20]
 80004b0:	2380      	movs	r3, #128	; 0x80
 80004b2:	03db      	lsls	r3, r3, #15
 80004b4:	4013      	ands	r3, r2
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ba:	4b09      	ldr	r3, [pc, #36]	; (80004e0 <MX_GPIO_Init+0x48>)
 80004bc:	695a      	ldr	r2, [r3, #20]
 80004be:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <MX_GPIO_Init+0x48>)
 80004c0:	2180      	movs	r1, #128	; 0x80
 80004c2:	0289      	lsls	r1, r1, #10
 80004c4:	430a      	orrs	r2, r1
 80004c6:	615a      	str	r2, [r3, #20]
 80004c8:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <MX_GPIO_Init+0x48>)
 80004ca:	695a      	ldr	r2, [r3, #20]
 80004cc:	2380      	movs	r3, #128	; 0x80
 80004ce:	029b      	lsls	r3, r3, #10
 80004d0:	4013      	ands	r3, r2
 80004d2:	603b      	str	r3, [r7, #0]
 80004d4:	683b      	ldr	r3, [r7, #0]

}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	46bd      	mov	sp, r7
 80004da:	b002      	add	sp, #8
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	40021000 	.word	0x40021000

080004e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e8:	b672      	cpsid	i
}
 80004ea:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004ec:	e7fe      	b.n	80004ec <Error_Handler+0x8>
	...

080004f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004f6:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <HAL_MspInit+0x44>)
 80004f8:	699a      	ldr	r2, [r3, #24]
 80004fa:	4b0e      	ldr	r3, [pc, #56]	; (8000534 <HAL_MspInit+0x44>)
 80004fc:	2101      	movs	r1, #1
 80004fe:	430a      	orrs	r2, r1
 8000500:	619a      	str	r2, [r3, #24]
 8000502:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <HAL_MspInit+0x44>)
 8000504:	699b      	ldr	r3, [r3, #24]
 8000506:	2201      	movs	r2, #1
 8000508:	4013      	ands	r3, r2
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800050e:	4b09      	ldr	r3, [pc, #36]	; (8000534 <HAL_MspInit+0x44>)
 8000510:	69da      	ldr	r2, [r3, #28]
 8000512:	4b08      	ldr	r3, [pc, #32]	; (8000534 <HAL_MspInit+0x44>)
 8000514:	2180      	movs	r1, #128	; 0x80
 8000516:	0549      	lsls	r1, r1, #21
 8000518:	430a      	orrs	r2, r1
 800051a:	61da      	str	r2, [r3, #28]
 800051c:	4b05      	ldr	r3, [pc, #20]	; (8000534 <HAL_MspInit+0x44>)
 800051e:	69da      	ldr	r2, [r3, #28]
 8000520:	2380      	movs	r3, #128	; 0x80
 8000522:	055b      	lsls	r3, r3, #21
 8000524:	4013      	ands	r3, r2
 8000526:	603b      	str	r3, [r7, #0]
 8000528:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	46bd      	mov	sp, r7
 800052e:	b002      	add	sp, #8
 8000530:	bd80      	pop	{r7, pc}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	40021000 	.word	0x40021000

08000538 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000538:	b590      	push	{r4, r7, lr}
 800053a:	b08b      	sub	sp, #44	; 0x2c
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000540:	2414      	movs	r4, #20
 8000542:	193b      	adds	r3, r7, r4
 8000544:	0018      	movs	r0, r3
 8000546:	2314      	movs	r3, #20
 8000548:	001a      	movs	r2, r3
 800054a:	2100      	movs	r1, #0
 800054c:	f002 fa9c 	bl	8002a88 <memset>
  if(htim_base->Instance==TIM2)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	2380      	movs	r3, #128	; 0x80
 8000556:	05db      	lsls	r3, r3, #23
 8000558:	429a      	cmp	r2, r3
 800055a:	d138      	bne.n	80005ce <HAL_TIM_Base_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800055c:	4b1e      	ldr	r3, [pc, #120]	; (80005d8 <HAL_TIM_Base_MspInit+0xa0>)
 800055e:	69da      	ldr	r2, [r3, #28]
 8000560:	4b1d      	ldr	r3, [pc, #116]	; (80005d8 <HAL_TIM_Base_MspInit+0xa0>)
 8000562:	2101      	movs	r1, #1
 8000564:	430a      	orrs	r2, r1
 8000566:	61da      	str	r2, [r3, #28]
 8000568:	4b1b      	ldr	r3, [pc, #108]	; (80005d8 <HAL_TIM_Base_MspInit+0xa0>)
 800056a:	69db      	ldr	r3, [r3, #28]
 800056c:	2201      	movs	r2, #1
 800056e:	4013      	ands	r3, r2
 8000570:	613b      	str	r3, [r7, #16]
 8000572:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000574:	4b18      	ldr	r3, [pc, #96]	; (80005d8 <HAL_TIM_Base_MspInit+0xa0>)
 8000576:	695a      	ldr	r2, [r3, #20]
 8000578:	4b17      	ldr	r3, [pc, #92]	; (80005d8 <HAL_TIM_Base_MspInit+0xa0>)
 800057a:	2180      	movs	r1, #128	; 0x80
 800057c:	0289      	lsls	r1, r1, #10
 800057e:	430a      	orrs	r2, r1
 8000580:	615a      	str	r2, [r3, #20]
 8000582:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <HAL_TIM_Base_MspInit+0xa0>)
 8000584:	695a      	ldr	r2, [r3, #20]
 8000586:	2380      	movs	r3, #128	; 0x80
 8000588:	029b      	lsls	r3, r3, #10
 800058a:	4013      	ands	r3, r2
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000590:	0021      	movs	r1, r4
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2201      	movs	r2, #1
 8000596:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2202      	movs	r2, #2
 800059c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2200      	movs	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2200      	movs	r2, #0
 80005a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	2202      	movs	r2, #2
 80005ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b0:	187a      	adds	r2, r7, r1
 80005b2:	2390      	movs	r3, #144	; 0x90
 80005b4:	05db      	lsls	r3, r3, #23
 80005b6:	0011      	movs	r1, r2
 80005b8:	0018      	movs	r0, r3
 80005ba:	f000 fa4b 	bl	8000a54 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	2100      	movs	r1, #0
 80005c2:	200f      	movs	r0, #15
 80005c4:	f000 fa14 	bl	80009f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80005c8:	200f      	movs	r0, #15
 80005ca:	f000 fa26 	bl	8000a1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	46bd      	mov	sp, r7
 80005d2:	b00b      	add	sp, #44	; 0x2c
 80005d4:	bd90      	pop	{r4, r7, pc}
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	40021000 	.word	0x40021000

080005dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005dc:	b590      	push	{r4, r7, lr}
 80005de:	b08b      	sub	sp, #44	; 0x2c
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e4:	2414      	movs	r4, #20
 80005e6:	193b      	adds	r3, r7, r4
 80005e8:	0018      	movs	r0, r3
 80005ea:	2314      	movs	r3, #20
 80005ec:	001a      	movs	r2, r3
 80005ee:	2100      	movs	r1, #0
 80005f0:	f002 fa4a 	bl	8002a88 <memset>
  if(huart->Instance==USART2)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a1c      	ldr	r2, [pc, #112]	; (800066c <HAL_UART_MspInit+0x90>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d132      	bne.n	8000664 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005fe:	4b1c      	ldr	r3, [pc, #112]	; (8000670 <HAL_UART_MspInit+0x94>)
 8000600:	69da      	ldr	r2, [r3, #28]
 8000602:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <HAL_UART_MspInit+0x94>)
 8000604:	2180      	movs	r1, #128	; 0x80
 8000606:	0289      	lsls	r1, r1, #10
 8000608:	430a      	orrs	r2, r1
 800060a:	61da      	str	r2, [r3, #28]
 800060c:	4b18      	ldr	r3, [pc, #96]	; (8000670 <HAL_UART_MspInit+0x94>)
 800060e:	69da      	ldr	r2, [r3, #28]
 8000610:	2380      	movs	r3, #128	; 0x80
 8000612:	029b      	lsls	r3, r3, #10
 8000614:	4013      	ands	r3, r2
 8000616:	613b      	str	r3, [r7, #16]
 8000618:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <HAL_UART_MspInit+0x94>)
 800061c:	695a      	ldr	r2, [r3, #20]
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <HAL_UART_MspInit+0x94>)
 8000620:	2180      	movs	r1, #128	; 0x80
 8000622:	0289      	lsls	r1, r1, #10
 8000624:	430a      	orrs	r2, r1
 8000626:	615a      	str	r2, [r3, #20]
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <HAL_UART_MspInit+0x94>)
 800062a:	695a      	ldr	r2, [r3, #20]
 800062c:	2380      	movs	r3, #128	; 0x80
 800062e:	029b      	lsls	r3, r3, #10
 8000630:	4013      	ands	r3, r2
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000636:	0021      	movs	r1, r4
 8000638:	187b      	adds	r3, r7, r1
 800063a:	220c      	movs	r2, #12
 800063c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2202      	movs	r2, #2
 8000642:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2203      	movs	r2, #3
 800064e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2201      	movs	r2, #1
 8000654:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000656:	187a      	adds	r2, r7, r1
 8000658:	2390      	movs	r3, #144	; 0x90
 800065a:	05db      	lsls	r3, r3, #23
 800065c:	0011      	movs	r1, r2
 800065e:	0018      	movs	r0, r3
 8000660:	f000 f9f8 	bl	8000a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000664:	46c0      	nop			; (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	b00b      	add	sp, #44	; 0x2c
 800066a:	bd90      	pop	{r4, r7, pc}
 800066c:	40004400 	.word	0x40004400
 8000670:	40021000 	.word	0x40021000

08000674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000678:	e7fe      	b.n	8000678 <NMI_Handler+0x4>

0800067a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800067a:	b580      	push	{r7, lr}
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800067e:	e7fe      	b.n	800067e <HardFault_Handler+0x4>

08000680 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000684:	46c0      	nop			; (mov r8, r8)
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000698:	f000 f8be 	bl	8000818 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800069c:	46c0      	nop			; (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
	...

080006a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80006a8:	4b03      	ldr	r3, [pc, #12]	; (80006b8 <TIM2_IRQHandler+0x14>)
 80006aa:	0018      	movs	r0, r3
 80006ac:	f001 f9ea 	bl	8001a84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80006b0:	46c0      	nop			; (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	200000c0 	.word	0x200000c0

080006bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006c4:	4a14      	ldr	r2, [pc, #80]	; (8000718 <_sbrk+0x5c>)
 80006c6:	4b15      	ldr	r3, [pc, #84]	; (800071c <_sbrk+0x60>)
 80006c8:	1ad3      	subs	r3, r2, r3
 80006ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006d0:	4b13      	ldr	r3, [pc, #76]	; (8000720 <_sbrk+0x64>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d102      	bne.n	80006de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006d8:	4b11      	ldr	r3, [pc, #68]	; (8000720 <_sbrk+0x64>)
 80006da:	4a12      	ldr	r2, [pc, #72]	; (8000724 <_sbrk+0x68>)
 80006dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006de:	4b10      	ldr	r3, [pc, #64]	; (8000720 <_sbrk+0x64>)
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	18d3      	adds	r3, r2, r3
 80006e6:	693a      	ldr	r2, [r7, #16]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d207      	bcs.n	80006fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006ec:	f002 f9a2 	bl	8002a34 <__errno>
 80006f0:	0003      	movs	r3, r0
 80006f2:	220c      	movs	r2, #12
 80006f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006f6:	2301      	movs	r3, #1
 80006f8:	425b      	negs	r3, r3
 80006fa:	e009      	b.n	8000710 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006fc:	4b08      	ldr	r3, [pc, #32]	; (8000720 <_sbrk+0x64>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000702:	4b07      	ldr	r3, [pc, #28]	; (8000720 <_sbrk+0x64>)
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	18d2      	adds	r2, r2, r3
 800070a:	4b05      	ldr	r3, [pc, #20]	; (8000720 <_sbrk+0x64>)
 800070c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800070e:	68fb      	ldr	r3, [r7, #12]
}
 8000710:	0018      	movs	r0, r3
 8000712:	46bd      	mov	sp, r7
 8000714:	b006      	add	sp, #24
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20004000 	.word	0x20004000
 800071c:	00000400 	.word	0x00000400
 8000720:	2000018c 	.word	0x2000018c
 8000724:	200001a8 	.word	0x200001a8

08000728 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800072c:	46c0      	nop			; (mov r8, r8)
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
	...

08000734 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000734:	480d      	ldr	r0, [pc, #52]	; (800076c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000736:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000738:	480d      	ldr	r0, [pc, #52]	; (8000770 <LoopForever+0x6>)
  ldr r1, =_edata
 800073a:	490e      	ldr	r1, [pc, #56]	; (8000774 <LoopForever+0xa>)
  ldr r2, =_sidata
 800073c:	4a0e      	ldr	r2, [pc, #56]	; (8000778 <LoopForever+0xe>)
  movs r3, #0
 800073e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000740:	e002      	b.n	8000748 <LoopCopyDataInit>

08000742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000746:	3304      	adds	r3, #4

08000748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800074a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800074c:	d3f9      	bcc.n	8000742 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800074e:	4a0b      	ldr	r2, [pc, #44]	; (800077c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000750:	4c0b      	ldr	r4, [pc, #44]	; (8000780 <LoopForever+0x16>)
  movs r3, #0
 8000752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000754:	e001      	b.n	800075a <LoopFillZerobss>

08000756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000758:	3204      	adds	r2, #4

0800075a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800075a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800075c:	d3fb      	bcc.n	8000756 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800075e:	f7ff ffe3 	bl	8000728 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000762:	f002 f96d 	bl	8002a40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000766:	f7ff fd65 	bl	8000234 <main>

0800076a <LoopForever>:

LoopForever:
    b LoopForever
 800076a:	e7fe      	b.n	800076a <LoopForever>
  ldr   r0, =_estack
 800076c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000770:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000774:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8000778:	08003410 	.word	0x08003410
  ldr r2, =_sbss
 800077c:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8000780:	200001a4 	.word	0x200001a4

08000784 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000784:	e7fe      	b.n	8000784 <ADC1_COMP_IRQHandler>
	...

08000788 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800078c:	4b07      	ldr	r3, [pc, #28]	; (80007ac <HAL_Init+0x24>)
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <HAL_Init+0x24>)
 8000792:	2110      	movs	r1, #16
 8000794:	430a      	orrs	r2, r1
 8000796:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000798:	2003      	movs	r0, #3
 800079a:	f000 f809 	bl	80007b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800079e:	f7ff fea7 	bl	80004f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007a2:	2300      	movs	r3, #0
}
 80007a4:	0018      	movs	r0, r3
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	40022000 	.word	0x40022000

080007b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b0:	b590      	push	{r4, r7, lr}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007b8:	4b14      	ldr	r3, [pc, #80]	; (800080c <HAL_InitTick+0x5c>)
 80007ba:	681c      	ldr	r4, [r3, #0]
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <HAL_InitTick+0x60>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	0019      	movs	r1, r3
 80007c2:	23fa      	movs	r3, #250	; 0xfa
 80007c4:	0098      	lsls	r0, r3, #2
 80007c6:	f7ff fca9 	bl	800011c <__udivsi3>
 80007ca:	0003      	movs	r3, r0
 80007cc:	0019      	movs	r1, r3
 80007ce:	0020      	movs	r0, r4
 80007d0:	f7ff fca4 	bl	800011c <__udivsi3>
 80007d4:	0003      	movs	r3, r0
 80007d6:	0018      	movs	r0, r3
 80007d8:	f000 f92f 	bl	8000a3a <HAL_SYSTICK_Config>
 80007dc:	1e03      	subs	r3, r0, #0
 80007de:	d001      	beq.n	80007e4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80007e0:	2301      	movs	r3, #1
 80007e2:	e00f      	b.n	8000804 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b03      	cmp	r3, #3
 80007e8:	d80b      	bhi.n	8000802 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007ea:	6879      	ldr	r1, [r7, #4]
 80007ec:	2301      	movs	r3, #1
 80007ee:	425b      	negs	r3, r3
 80007f0:	2200      	movs	r2, #0
 80007f2:	0018      	movs	r0, r3
 80007f4:	f000 f8fc 	bl	80009f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <HAL_InitTick+0x64>)
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80007fe:	2300      	movs	r3, #0
 8000800:	e000      	b.n	8000804 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000802:	2301      	movs	r3, #1
}
 8000804:	0018      	movs	r0, r3
 8000806:	46bd      	mov	sp, r7
 8000808:	b003      	add	sp, #12
 800080a:	bd90      	pop	{r4, r7, pc}
 800080c:	20000034 	.word	0x20000034
 8000810:	2000003c 	.word	0x2000003c
 8000814:	20000038 	.word	0x20000038

08000818 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <HAL_IncTick+0x1c>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	001a      	movs	r2, r3
 8000822:	4b05      	ldr	r3, [pc, #20]	; (8000838 <HAL_IncTick+0x20>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	18d2      	adds	r2, r2, r3
 8000828:	4b03      	ldr	r3, [pc, #12]	; (8000838 <HAL_IncTick+0x20>)
 800082a:	601a      	str	r2, [r3, #0]
}
 800082c:	46c0      	nop			; (mov r8, r8)
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	2000003c 	.word	0x2000003c
 8000838:	20000190 	.word	0x20000190

0800083c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  return uwTick;
 8000840:	4b02      	ldr	r3, [pc, #8]	; (800084c <HAL_GetTick+0x10>)
 8000842:	681b      	ldr	r3, [r3, #0]
}
 8000844:	0018      	movs	r0, r3
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	20000190 	.word	0x20000190

08000850 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000858:	f7ff fff0 	bl	800083c <HAL_GetTick>
 800085c:	0003      	movs	r3, r0
 800085e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	3301      	adds	r3, #1
 8000868:	d005      	beq.n	8000876 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800086a:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <HAL_Delay+0x44>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	001a      	movs	r2, r3
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	189b      	adds	r3, r3, r2
 8000874:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	f7ff ffe0 	bl	800083c <HAL_GetTick>
 800087c:	0002      	movs	r2, r0
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	68fa      	ldr	r2, [r7, #12]
 8000884:	429a      	cmp	r2, r3
 8000886:	d8f7      	bhi.n	8000878 <HAL_Delay+0x28>
  {
  }
}
 8000888:	46c0      	nop			; (mov r8, r8)
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	b004      	add	sp, #16
 8000890:	bd80      	pop	{r7, pc}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	2000003c 	.word	0x2000003c

08000898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	0002      	movs	r2, r0
 80008a0:	1dfb      	adds	r3, r7, #7
 80008a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008a4:	1dfb      	adds	r3, r7, #7
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b7f      	cmp	r3, #127	; 0x7f
 80008aa:	d809      	bhi.n	80008c0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ac:	1dfb      	adds	r3, r7, #7
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	001a      	movs	r2, r3
 80008b2:	231f      	movs	r3, #31
 80008b4:	401a      	ands	r2, r3
 80008b6:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <__NVIC_EnableIRQ+0x30>)
 80008b8:	2101      	movs	r1, #1
 80008ba:	4091      	lsls	r1, r2
 80008bc:	000a      	movs	r2, r1
 80008be:	601a      	str	r2, [r3, #0]
  }
}
 80008c0:	46c0      	nop			; (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b002      	add	sp, #8
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	e000e100 	.word	0xe000e100

080008cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008cc:	b590      	push	{r4, r7, lr}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	0002      	movs	r2, r0
 80008d4:	6039      	str	r1, [r7, #0]
 80008d6:	1dfb      	adds	r3, r7, #7
 80008d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008da:	1dfb      	adds	r3, r7, #7
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2b7f      	cmp	r3, #127	; 0x7f
 80008e0:	d828      	bhi.n	8000934 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008e2:	4a2f      	ldr	r2, [pc, #188]	; (80009a0 <__NVIC_SetPriority+0xd4>)
 80008e4:	1dfb      	adds	r3, r7, #7
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	b25b      	sxtb	r3, r3
 80008ea:	089b      	lsrs	r3, r3, #2
 80008ec:	33c0      	adds	r3, #192	; 0xc0
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	589b      	ldr	r3, [r3, r2]
 80008f2:	1dfa      	adds	r2, r7, #7
 80008f4:	7812      	ldrb	r2, [r2, #0]
 80008f6:	0011      	movs	r1, r2
 80008f8:	2203      	movs	r2, #3
 80008fa:	400a      	ands	r2, r1
 80008fc:	00d2      	lsls	r2, r2, #3
 80008fe:	21ff      	movs	r1, #255	; 0xff
 8000900:	4091      	lsls	r1, r2
 8000902:	000a      	movs	r2, r1
 8000904:	43d2      	mvns	r2, r2
 8000906:	401a      	ands	r2, r3
 8000908:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	019b      	lsls	r3, r3, #6
 800090e:	22ff      	movs	r2, #255	; 0xff
 8000910:	401a      	ands	r2, r3
 8000912:	1dfb      	adds	r3, r7, #7
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	0018      	movs	r0, r3
 8000918:	2303      	movs	r3, #3
 800091a:	4003      	ands	r3, r0
 800091c:	00db      	lsls	r3, r3, #3
 800091e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000920:	481f      	ldr	r0, [pc, #124]	; (80009a0 <__NVIC_SetPriority+0xd4>)
 8000922:	1dfb      	adds	r3, r7, #7
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	b25b      	sxtb	r3, r3
 8000928:	089b      	lsrs	r3, r3, #2
 800092a:	430a      	orrs	r2, r1
 800092c:	33c0      	adds	r3, #192	; 0xc0
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000932:	e031      	b.n	8000998 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000934:	4a1b      	ldr	r2, [pc, #108]	; (80009a4 <__NVIC_SetPriority+0xd8>)
 8000936:	1dfb      	adds	r3, r7, #7
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	0019      	movs	r1, r3
 800093c:	230f      	movs	r3, #15
 800093e:	400b      	ands	r3, r1
 8000940:	3b08      	subs	r3, #8
 8000942:	089b      	lsrs	r3, r3, #2
 8000944:	3306      	adds	r3, #6
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	18d3      	adds	r3, r2, r3
 800094a:	3304      	adds	r3, #4
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	1dfa      	adds	r2, r7, #7
 8000950:	7812      	ldrb	r2, [r2, #0]
 8000952:	0011      	movs	r1, r2
 8000954:	2203      	movs	r2, #3
 8000956:	400a      	ands	r2, r1
 8000958:	00d2      	lsls	r2, r2, #3
 800095a:	21ff      	movs	r1, #255	; 0xff
 800095c:	4091      	lsls	r1, r2
 800095e:	000a      	movs	r2, r1
 8000960:	43d2      	mvns	r2, r2
 8000962:	401a      	ands	r2, r3
 8000964:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	019b      	lsls	r3, r3, #6
 800096a:	22ff      	movs	r2, #255	; 0xff
 800096c:	401a      	ands	r2, r3
 800096e:	1dfb      	adds	r3, r7, #7
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	0018      	movs	r0, r3
 8000974:	2303      	movs	r3, #3
 8000976:	4003      	ands	r3, r0
 8000978:	00db      	lsls	r3, r3, #3
 800097a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800097c:	4809      	ldr	r0, [pc, #36]	; (80009a4 <__NVIC_SetPriority+0xd8>)
 800097e:	1dfb      	adds	r3, r7, #7
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	001c      	movs	r4, r3
 8000984:	230f      	movs	r3, #15
 8000986:	4023      	ands	r3, r4
 8000988:	3b08      	subs	r3, #8
 800098a:	089b      	lsrs	r3, r3, #2
 800098c:	430a      	orrs	r2, r1
 800098e:	3306      	adds	r3, #6
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	18c3      	adds	r3, r0, r3
 8000994:	3304      	adds	r3, #4
 8000996:	601a      	str	r2, [r3, #0]
}
 8000998:	46c0      	nop			; (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	b003      	add	sp, #12
 800099e:	bd90      	pop	{r4, r7, pc}
 80009a0:	e000e100 	.word	0xe000e100
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	1e5a      	subs	r2, r3, #1
 80009b4:	2380      	movs	r3, #128	; 0x80
 80009b6:	045b      	lsls	r3, r3, #17
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d301      	bcc.n	80009c0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009bc:	2301      	movs	r3, #1
 80009be:	e010      	b.n	80009e2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009c0:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <SysTick_Config+0x44>)
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	3a01      	subs	r2, #1
 80009c6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009c8:	2301      	movs	r3, #1
 80009ca:	425b      	negs	r3, r3
 80009cc:	2103      	movs	r1, #3
 80009ce:	0018      	movs	r0, r3
 80009d0:	f7ff ff7c 	bl	80008cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009d4:	4b05      	ldr	r3, [pc, #20]	; (80009ec <SysTick_Config+0x44>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009da:	4b04      	ldr	r3, [pc, #16]	; (80009ec <SysTick_Config+0x44>)
 80009dc:	2207      	movs	r2, #7
 80009de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009e0:	2300      	movs	r3, #0
}
 80009e2:	0018      	movs	r0, r3
 80009e4:	46bd      	mov	sp, r7
 80009e6:	b002      	add	sp, #8
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	e000e010 	.word	0xe000e010

080009f0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60b9      	str	r1, [r7, #8]
 80009f8:	607a      	str	r2, [r7, #4]
 80009fa:	210f      	movs	r1, #15
 80009fc:	187b      	adds	r3, r7, r1
 80009fe:	1c02      	adds	r2, r0, #0
 8000a00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a02:	68ba      	ldr	r2, [r7, #8]
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	b25b      	sxtb	r3, r3
 8000a0a:	0011      	movs	r1, r2
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f7ff ff5d 	bl	80008cc <__NVIC_SetPriority>
}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	46bd      	mov	sp, r7
 8000a16:	b004      	add	sp, #16
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b082      	sub	sp, #8
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	0002      	movs	r2, r0
 8000a22:	1dfb      	adds	r3, r7, #7
 8000a24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a26:	1dfb      	adds	r3, r7, #7
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	b25b      	sxtb	r3, r3
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f7ff ff33 	bl	8000898 <__NVIC_EnableIRQ>
}
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	46bd      	mov	sp, r7
 8000a36:	b002      	add	sp, #8
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b082      	sub	sp, #8
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	0018      	movs	r0, r3
 8000a46:	f7ff ffaf 	bl	80009a8 <SysTick_Config>
 8000a4a:	0003      	movs	r3, r0
}
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b002      	add	sp, #8
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a62:	e155      	b.n	8000d10 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2101      	movs	r1, #1
 8000a6a:	697a      	ldr	r2, [r7, #20]
 8000a6c:	4091      	lsls	r1, r2
 8000a6e:	000a      	movs	r2, r1
 8000a70:	4013      	ands	r3, r2
 8000a72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d100      	bne.n	8000a7c <HAL_GPIO_Init+0x28>
 8000a7a:	e146      	b.n	8000d0a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	2203      	movs	r2, #3
 8000a82:	4013      	ands	r3, r2
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d005      	beq.n	8000a94 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	2203      	movs	r2, #3
 8000a8e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a90:	2b02      	cmp	r3, #2
 8000a92:	d130      	bne.n	8000af6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	2203      	movs	r2, #3
 8000aa0:	409a      	lsls	r2, r3
 8000aa2:	0013      	movs	r3, r2
 8000aa4:	43da      	mvns	r2, r3
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	68da      	ldr	r2, [r3, #12]
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	409a      	lsls	r2, r3
 8000ab6:	0013      	movs	r3, r2
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000aca:	2201      	movs	r2, #1
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	409a      	lsls	r2, r3
 8000ad0:	0013      	movs	r3, r2
 8000ad2:	43da      	mvns	r2, r3
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	091b      	lsrs	r3, r3, #4
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	401a      	ands	r2, r3
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	409a      	lsls	r2, r3
 8000ae8:	0013      	movs	r3, r2
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	2203      	movs	r2, #3
 8000afc:	4013      	ands	r3, r2
 8000afe:	2b03      	cmp	r3, #3
 8000b00:	d017      	beq.n	8000b32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	68db      	ldr	r3, [r3, #12]
 8000b06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	2203      	movs	r2, #3
 8000b0e:	409a      	lsls	r2, r3
 8000b10:	0013      	movs	r3, r2
 8000b12:	43da      	mvns	r2, r3
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	4013      	ands	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	689a      	ldr	r2, [r3, #8]
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	409a      	lsls	r2, r3
 8000b24:	0013      	movs	r3, r2
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	2203      	movs	r2, #3
 8000b38:	4013      	ands	r3, r2
 8000b3a:	2b02      	cmp	r3, #2
 8000b3c:	d123      	bne.n	8000b86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	08da      	lsrs	r2, r3, #3
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	3208      	adds	r2, #8
 8000b46:	0092      	lsls	r2, r2, #2
 8000b48:	58d3      	ldr	r3, [r2, r3]
 8000b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	2207      	movs	r2, #7
 8000b50:	4013      	ands	r3, r2
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	220f      	movs	r2, #15
 8000b56:	409a      	lsls	r2, r3
 8000b58:	0013      	movs	r3, r2
 8000b5a:	43da      	mvns	r2, r3
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	4013      	ands	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	691a      	ldr	r2, [r3, #16]
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	2107      	movs	r1, #7
 8000b6a:	400b      	ands	r3, r1
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	409a      	lsls	r2, r3
 8000b70:	0013      	movs	r3, r2
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	08da      	lsrs	r2, r3, #3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	3208      	adds	r2, #8
 8000b80:	0092      	lsls	r2, r2, #2
 8000b82:	6939      	ldr	r1, [r7, #16]
 8000b84:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	2203      	movs	r2, #3
 8000b92:	409a      	lsls	r2, r3
 8000b94:	0013      	movs	r3, r2
 8000b96:	43da      	mvns	r2, r3
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	2203      	movs	r2, #3
 8000ba4:	401a      	ands	r2, r3
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	409a      	lsls	r2, r3
 8000bac:	0013      	movs	r3, r2
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685a      	ldr	r2, [r3, #4]
 8000bbe:	23c0      	movs	r3, #192	; 0xc0
 8000bc0:	029b      	lsls	r3, r3, #10
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	d100      	bne.n	8000bc8 <HAL_GPIO_Init+0x174>
 8000bc6:	e0a0      	b.n	8000d0a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc8:	4b57      	ldr	r3, [pc, #348]	; (8000d28 <HAL_GPIO_Init+0x2d4>)
 8000bca:	699a      	ldr	r2, [r3, #24]
 8000bcc:	4b56      	ldr	r3, [pc, #344]	; (8000d28 <HAL_GPIO_Init+0x2d4>)
 8000bce:	2101      	movs	r1, #1
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	619a      	str	r2, [r3, #24]
 8000bd4:	4b54      	ldr	r3, [pc, #336]	; (8000d28 <HAL_GPIO_Init+0x2d4>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	2201      	movs	r2, #1
 8000bda:	4013      	ands	r3, r2
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000be0:	4a52      	ldr	r2, [pc, #328]	; (8000d2c <HAL_GPIO_Init+0x2d8>)
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	089b      	lsrs	r3, r3, #2
 8000be6:	3302      	adds	r3, #2
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	589b      	ldr	r3, [r3, r2]
 8000bec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	2203      	movs	r2, #3
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	220f      	movs	r2, #15
 8000bf8:	409a      	lsls	r2, r3
 8000bfa:	0013      	movs	r3, r2
 8000bfc:	43da      	mvns	r2, r3
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	4013      	ands	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	2390      	movs	r3, #144	; 0x90
 8000c08:	05db      	lsls	r3, r3, #23
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d019      	beq.n	8000c42 <HAL_GPIO_Init+0x1ee>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a47      	ldr	r2, [pc, #284]	; (8000d30 <HAL_GPIO_Init+0x2dc>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d013      	beq.n	8000c3e <HAL_GPIO_Init+0x1ea>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a46      	ldr	r2, [pc, #280]	; (8000d34 <HAL_GPIO_Init+0x2e0>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d00d      	beq.n	8000c3a <HAL_GPIO_Init+0x1e6>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a45      	ldr	r2, [pc, #276]	; (8000d38 <HAL_GPIO_Init+0x2e4>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d007      	beq.n	8000c36 <HAL_GPIO_Init+0x1e2>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4a44      	ldr	r2, [pc, #272]	; (8000d3c <HAL_GPIO_Init+0x2e8>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d101      	bne.n	8000c32 <HAL_GPIO_Init+0x1de>
 8000c2e:	2304      	movs	r3, #4
 8000c30:	e008      	b.n	8000c44 <HAL_GPIO_Init+0x1f0>
 8000c32:	2305      	movs	r3, #5
 8000c34:	e006      	b.n	8000c44 <HAL_GPIO_Init+0x1f0>
 8000c36:	2303      	movs	r3, #3
 8000c38:	e004      	b.n	8000c44 <HAL_GPIO_Init+0x1f0>
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	e002      	b.n	8000c44 <HAL_GPIO_Init+0x1f0>
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e000      	b.n	8000c44 <HAL_GPIO_Init+0x1f0>
 8000c42:	2300      	movs	r3, #0
 8000c44:	697a      	ldr	r2, [r7, #20]
 8000c46:	2103      	movs	r1, #3
 8000c48:	400a      	ands	r2, r1
 8000c4a:	0092      	lsls	r2, r2, #2
 8000c4c:	4093      	lsls	r3, r2
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c54:	4935      	ldr	r1, [pc, #212]	; (8000d2c <HAL_GPIO_Init+0x2d8>)
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	089b      	lsrs	r3, r3, #2
 8000c5a:	3302      	adds	r3, #2
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c62:	4b37      	ldr	r3, [pc, #220]	; (8000d40 <HAL_GPIO_Init+0x2ec>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	43da      	mvns	r2, r3
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685a      	ldr	r2, [r3, #4]
 8000c76:	2380      	movs	r3, #128	; 0x80
 8000c78:	025b      	lsls	r3, r3, #9
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	d003      	beq.n	8000c86 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c86:	4b2e      	ldr	r3, [pc, #184]	; (8000d40 <HAL_GPIO_Init+0x2ec>)
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000c8c:	4b2c      	ldr	r3, [pc, #176]	; (8000d40 <HAL_GPIO_Init+0x2ec>)
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	43da      	mvns	r2, r3
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685a      	ldr	r2, [r3, #4]
 8000ca0:	2380      	movs	r3, #128	; 0x80
 8000ca2:	029b      	lsls	r3, r3, #10
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	d003      	beq.n	8000cb0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cb0:	4b23      	ldr	r3, [pc, #140]	; (8000d40 <HAL_GPIO_Init+0x2ec>)
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cb6:	4b22      	ldr	r3, [pc, #136]	; (8000d40 <HAL_GPIO_Init+0x2ec>)
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	43da      	mvns	r2, r3
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685a      	ldr	r2, [r3, #4]
 8000cca:	2380      	movs	r3, #128	; 0x80
 8000ccc:	035b      	lsls	r3, r3, #13
 8000cce:	4013      	ands	r3, r2
 8000cd0:	d003      	beq.n	8000cda <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000cda:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <HAL_GPIO_Init+0x2ec>)
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000ce0:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <HAL_GPIO_Init+0x2ec>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	43da      	mvns	r2, r3
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	4013      	ands	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685a      	ldr	r2, [r3, #4]
 8000cf4:	2380      	movs	r3, #128	; 0x80
 8000cf6:	039b      	lsls	r3, r3, #14
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	d003      	beq.n	8000d04 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d04:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <HAL_GPIO_Init+0x2ec>)
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	40da      	lsrs	r2, r3
 8000d18:	1e13      	subs	r3, r2, #0
 8000d1a:	d000      	beq.n	8000d1e <HAL_GPIO_Init+0x2ca>
 8000d1c:	e6a2      	b.n	8000a64 <HAL_GPIO_Init+0x10>
  } 
}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	46c0      	nop			; (mov r8, r8)
 8000d22:	46bd      	mov	sp, r7
 8000d24:	b006      	add	sp, #24
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	40010000 	.word	0x40010000
 8000d30:	48000400 	.word	0x48000400
 8000d34:	48000800 	.word	0x48000800
 8000d38:	48000c00 	.word	0x48000c00
 8000d3c:	48001000 	.word	0x48001000
 8000d40:	40010400 	.word	0x40010400

08000d44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d102      	bne.n	8000d58 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	f000 fb76 	bl	8001444 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	4013      	ands	r3, r2
 8000d60:	d100      	bne.n	8000d64 <HAL_RCC_OscConfig+0x20>
 8000d62:	e08e      	b.n	8000e82 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d64:	4bc5      	ldr	r3, [pc, #788]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	220c      	movs	r2, #12
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	2b04      	cmp	r3, #4
 8000d6e:	d00e      	beq.n	8000d8e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d70:	4bc2      	ldr	r3, [pc, #776]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	220c      	movs	r2, #12
 8000d76:	4013      	ands	r3, r2
 8000d78:	2b08      	cmp	r3, #8
 8000d7a:	d117      	bne.n	8000dac <HAL_RCC_OscConfig+0x68>
 8000d7c:	4bbf      	ldr	r3, [pc, #764]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8000d7e:	685a      	ldr	r2, [r3, #4]
 8000d80:	23c0      	movs	r3, #192	; 0xc0
 8000d82:	025b      	lsls	r3, r3, #9
 8000d84:	401a      	ands	r2, r3
 8000d86:	2380      	movs	r3, #128	; 0x80
 8000d88:	025b      	lsls	r3, r3, #9
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d10e      	bne.n	8000dac <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d8e:	4bbb      	ldr	r3, [pc, #748]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	2380      	movs	r3, #128	; 0x80
 8000d94:	029b      	lsls	r3, r3, #10
 8000d96:	4013      	ands	r3, r2
 8000d98:	d100      	bne.n	8000d9c <HAL_RCC_OscConfig+0x58>
 8000d9a:	e071      	b.n	8000e80 <HAL_RCC_OscConfig+0x13c>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d000      	beq.n	8000da6 <HAL_RCC_OscConfig+0x62>
 8000da4:	e06c      	b.n	8000e80 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	f000 fb4c 	bl	8001444 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d107      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x80>
 8000db4:	4bb1      	ldr	r3, [pc, #708]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	4bb0      	ldr	r3, [pc, #704]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8000dba:	2180      	movs	r1, #128	; 0x80
 8000dbc:	0249      	lsls	r1, r1, #9
 8000dbe:	430a      	orrs	r2, r1
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	e02f      	b.n	8000e24 <HAL_RCC_OscConfig+0xe0>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d10c      	bne.n	8000de6 <HAL_RCC_OscConfig+0xa2>
 8000dcc:	4bab      	ldr	r3, [pc, #684]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	4baa      	ldr	r3, [pc, #680]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8000dd2:	49ab      	ldr	r1, [pc, #684]	; (8001080 <HAL_RCC_OscConfig+0x33c>)
 8000dd4:	400a      	ands	r2, r1
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	4ba8      	ldr	r3, [pc, #672]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4ba7      	ldr	r3, [pc, #668]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8000dde:	49a9      	ldr	r1, [pc, #676]	; (8001084 <HAL_RCC_OscConfig+0x340>)
 8000de0:	400a      	ands	r2, r1
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	e01e      	b.n	8000e24 <HAL_RCC_OscConfig+0xe0>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	2b05      	cmp	r3, #5
 8000dec:	d10e      	bne.n	8000e0c <HAL_RCC_OscConfig+0xc8>
 8000dee:	4ba3      	ldr	r3, [pc, #652]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	4ba2      	ldr	r3, [pc, #648]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8000df4:	2180      	movs	r1, #128	; 0x80
 8000df6:	02c9      	lsls	r1, r1, #11
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	4b9f      	ldr	r3, [pc, #636]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4b9e      	ldr	r3, [pc, #632]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8000e02:	2180      	movs	r1, #128	; 0x80
 8000e04:	0249      	lsls	r1, r1, #9
 8000e06:	430a      	orrs	r2, r1
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	e00b      	b.n	8000e24 <HAL_RCC_OscConfig+0xe0>
 8000e0c:	4b9b      	ldr	r3, [pc, #620]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	4b9a      	ldr	r3, [pc, #616]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8000e12:	499b      	ldr	r1, [pc, #620]	; (8001080 <HAL_RCC_OscConfig+0x33c>)
 8000e14:	400a      	ands	r2, r1
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	4b98      	ldr	r3, [pc, #608]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4b97      	ldr	r3, [pc, #604]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8000e1e:	4999      	ldr	r1, [pc, #612]	; (8001084 <HAL_RCC_OscConfig+0x340>)
 8000e20:	400a      	ands	r2, r1
 8000e22:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d014      	beq.n	8000e56 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e2c:	f7ff fd06 	bl	800083c <HAL_GetTick>
 8000e30:	0003      	movs	r3, r0
 8000e32:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e34:	e008      	b.n	8000e48 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e36:	f7ff fd01 	bl	800083c <HAL_GetTick>
 8000e3a:	0002      	movs	r2, r0
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	2b64      	cmp	r3, #100	; 0x64
 8000e42:	d901      	bls.n	8000e48 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000e44:	2303      	movs	r3, #3
 8000e46:	e2fd      	b.n	8001444 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e48:	4b8c      	ldr	r3, [pc, #560]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	2380      	movs	r3, #128	; 0x80
 8000e4e:	029b      	lsls	r3, r3, #10
 8000e50:	4013      	ands	r3, r2
 8000e52:	d0f0      	beq.n	8000e36 <HAL_RCC_OscConfig+0xf2>
 8000e54:	e015      	b.n	8000e82 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e56:	f7ff fcf1 	bl	800083c <HAL_GetTick>
 8000e5a:	0003      	movs	r3, r0
 8000e5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e5e:	e008      	b.n	8000e72 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e60:	f7ff fcec 	bl	800083c <HAL_GetTick>
 8000e64:	0002      	movs	r2, r0
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	2b64      	cmp	r3, #100	; 0x64
 8000e6c:	d901      	bls.n	8000e72 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e2e8      	b.n	8001444 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e72:	4b82      	ldr	r3, [pc, #520]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	2380      	movs	r3, #128	; 0x80
 8000e78:	029b      	lsls	r3, r3, #10
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	d1f0      	bne.n	8000e60 <HAL_RCC_OscConfig+0x11c>
 8000e7e:	e000      	b.n	8000e82 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e80:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2202      	movs	r2, #2
 8000e88:	4013      	ands	r3, r2
 8000e8a:	d100      	bne.n	8000e8e <HAL_RCC_OscConfig+0x14a>
 8000e8c:	e06c      	b.n	8000f68 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e8e:	4b7b      	ldr	r3, [pc, #492]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	220c      	movs	r2, #12
 8000e94:	4013      	ands	r3, r2
 8000e96:	d00e      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e98:	4b78      	ldr	r3, [pc, #480]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	220c      	movs	r2, #12
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	2b08      	cmp	r3, #8
 8000ea2:	d11f      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x1a0>
 8000ea4:	4b75      	ldr	r3, [pc, #468]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8000ea6:	685a      	ldr	r2, [r3, #4]
 8000ea8:	23c0      	movs	r3, #192	; 0xc0
 8000eaa:	025b      	lsls	r3, r3, #9
 8000eac:	401a      	ands	r2, r3
 8000eae:	2380      	movs	r3, #128	; 0x80
 8000eb0:	021b      	lsls	r3, r3, #8
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d116      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eb6:	4b71      	ldr	r3, [pc, #452]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2202      	movs	r2, #2
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	d005      	beq.n	8000ecc <HAL_RCC_OscConfig+0x188>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d001      	beq.n	8000ecc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e2bb      	b.n	8001444 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ecc:	4b6b      	ldr	r3, [pc, #428]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	22f8      	movs	r2, #248	; 0xf8
 8000ed2:	4393      	bics	r3, r2
 8000ed4:	0019      	movs	r1, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	691b      	ldr	r3, [r3, #16]
 8000eda:	00da      	lsls	r2, r3, #3
 8000edc:	4b67      	ldr	r3, [pc, #412]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ee2:	e041      	b.n	8000f68 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d024      	beq.n	8000f36 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000eec:	4b63      	ldr	r3, [pc, #396]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4b62      	ldr	r3, [pc, #392]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	430a      	orrs	r2, r1
 8000ef6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef8:	f7ff fca0 	bl	800083c <HAL_GetTick>
 8000efc:	0003      	movs	r3, r0
 8000efe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f00:	e008      	b.n	8000f14 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f02:	f7ff fc9b 	bl	800083c <HAL_GetTick>
 8000f06:	0002      	movs	r2, r0
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d901      	bls.n	8000f14 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000f10:	2303      	movs	r3, #3
 8000f12:	e297      	b.n	8001444 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f14:	4b59      	ldr	r3, [pc, #356]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2202      	movs	r2, #2
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	d0f1      	beq.n	8000f02 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f1e:	4b57      	ldr	r3, [pc, #348]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	22f8      	movs	r2, #248	; 0xf8
 8000f24:	4393      	bics	r3, r2
 8000f26:	0019      	movs	r1, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	691b      	ldr	r3, [r3, #16]
 8000f2c:	00da      	lsls	r2, r3, #3
 8000f2e:	4b53      	ldr	r3, [pc, #332]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8000f30:	430a      	orrs	r2, r1
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	e018      	b.n	8000f68 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f36:	4b51      	ldr	r3, [pc, #324]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	4b50      	ldr	r3, [pc, #320]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	438a      	bics	r2, r1
 8000f40:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f42:	f7ff fc7b 	bl	800083c <HAL_GetTick>
 8000f46:	0003      	movs	r3, r0
 8000f48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f4a:	e008      	b.n	8000f5e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f4c:	f7ff fc76 	bl	800083c <HAL_GetTick>
 8000f50:	0002      	movs	r2, r0
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d901      	bls.n	8000f5e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	e272      	b.n	8001444 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f5e:	4b47      	ldr	r3, [pc, #284]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2202      	movs	r2, #2
 8000f64:	4013      	ands	r3, r2
 8000f66:	d1f1      	bne.n	8000f4c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2208      	movs	r2, #8
 8000f6e:	4013      	ands	r3, r2
 8000f70:	d036      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d019      	beq.n	8000fae <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f7a:	4b40      	ldr	r3, [pc, #256]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8000f7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f7e:	4b3f      	ldr	r3, [pc, #252]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8000f80:	2101      	movs	r1, #1
 8000f82:	430a      	orrs	r2, r1
 8000f84:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f86:	f7ff fc59 	bl	800083c <HAL_GetTick>
 8000f8a:	0003      	movs	r3, r0
 8000f8c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f8e:	e008      	b.n	8000fa2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f90:	f7ff fc54 	bl	800083c <HAL_GetTick>
 8000f94:	0002      	movs	r2, r0
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d901      	bls.n	8000fa2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	e250      	b.n	8001444 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fa2:	4b36      	ldr	r3, [pc, #216]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8000fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	4013      	ands	r3, r2
 8000faa:	d0f1      	beq.n	8000f90 <HAL_RCC_OscConfig+0x24c>
 8000fac:	e018      	b.n	8000fe0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fae:	4b33      	ldr	r3, [pc, #204]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8000fb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fb2:	4b32      	ldr	r3, [pc, #200]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	438a      	bics	r2, r1
 8000fb8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fba:	f7ff fc3f 	bl	800083c <HAL_GetTick>
 8000fbe:	0003      	movs	r3, r0
 8000fc0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fc2:	e008      	b.n	8000fd6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fc4:	f7ff fc3a 	bl	800083c <HAL_GetTick>
 8000fc8:	0002      	movs	r2, r0
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d901      	bls.n	8000fd6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e236      	b.n	8001444 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fd6:	4b29      	ldr	r3, [pc, #164]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8000fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fda:	2202      	movs	r2, #2
 8000fdc:	4013      	ands	r3, r2
 8000fde:	d1f1      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2204      	movs	r2, #4
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	d100      	bne.n	8000fec <HAL_RCC_OscConfig+0x2a8>
 8000fea:	e0b5      	b.n	8001158 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fec:	201f      	movs	r0, #31
 8000fee:	183b      	adds	r3, r7, r0
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ff4:	4b21      	ldr	r3, [pc, #132]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8000ff6:	69da      	ldr	r2, [r3, #28]
 8000ff8:	2380      	movs	r3, #128	; 0x80
 8000ffa:	055b      	lsls	r3, r3, #21
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	d110      	bne.n	8001022 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001000:	4b1e      	ldr	r3, [pc, #120]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8001002:	69da      	ldr	r2, [r3, #28]
 8001004:	4b1d      	ldr	r3, [pc, #116]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8001006:	2180      	movs	r1, #128	; 0x80
 8001008:	0549      	lsls	r1, r1, #21
 800100a:	430a      	orrs	r2, r1
 800100c:	61da      	str	r2, [r3, #28]
 800100e:	4b1b      	ldr	r3, [pc, #108]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8001010:	69da      	ldr	r2, [r3, #28]
 8001012:	2380      	movs	r3, #128	; 0x80
 8001014:	055b      	lsls	r3, r3, #21
 8001016:	4013      	ands	r3, r2
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800101c:	183b      	adds	r3, r7, r0
 800101e:	2201      	movs	r2, #1
 8001020:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001022:	4b19      	ldr	r3, [pc, #100]	; (8001088 <HAL_RCC_OscConfig+0x344>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	2380      	movs	r3, #128	; 0x80
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	4013      	ands	r3, r2
 800102c:	d11a      	bne.n	8001064 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800102e:	4b16      	ldr	r3, [pc, #88]	; (8001088 <HAL_RCC_OscConfig+0x344>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	4b15      	ldr	r3, [pc, #84]	; (8001088 <HAL_RCC_OscConfig+0x344>)
 8001034:	2180      	movs	r1, #128	; 0x80
 8001036:	0049      	lsls	r1, r1, #1
 8001038:	430a      	orrs	r2, r1
 800103a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800103c:	f7ff fbfe 	bl	800083c <HAL_GetTick>
 8001040:	0003      	movs	r3, r0
 8001042:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001044:	e008      	b.n	8001058 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001046:	f7ff fbf9 	bl	800083c <HAL_GetTick>
 800104a:	0002      	movs	r2, r0
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	2b64      	cmp	r3, #100	; 0x64
 8001052:	d901      	bls.n	8001058 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	e1f5      	b.n	8001444 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001058:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <HAL_RCC_OscConfig+0x344>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	2380      	movs	r3, #128	; 0x80
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	4013      	ands	r3, r2
 8001062:	d0f0      	beq.n	8001046 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d10f      	bne.n	800108c <HAL_RCC_OscConfig+0x348>
 800106c:	4b03      	ldr	r3, [pc, #12]	; (800107c <HAL_RCC_OscConfig+0x338>)
 800106e:	6a1a      	ldr	r2, [r3, #32]
 8001070:	4b02      	ldr	r3, [pc, #8]	; (800107c <HAL_RCC_OscConfig+0x338>)
 8001072:	2101      	movs	r1, #1
 8001074:	430a      	orrs	r2, r1
 8001076:	621a      	str	r2, [r3, #32]
 8001078:	e036      	b.n	80010e8 <HAL_RCC_OscConfig+0x3a4>
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	40021000 	.word	0x40021000
 8001080:	fffeffff 	.word	0xfffeffff
 8001084:	fffbffff 	.word	0xfffbffff
 8001088:	40007000 	.word	0x40007000
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d10c      	bne.n	80010ae <HAL_RCC_OscConfig+0x36a>
 8001094:	4bca      	ldr	r3, [pc, #808]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 8001096:	6a1a      	ldr	r2, [r3, #32]
 8001098:	4bc9      	ldr	r3, [pc, #804]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 800109a:	2101      	movs	r1, #1
 800109c:	438a      	bics	r2, r1
 800109e:	621a      	str	r2, [r3, #32]
 80010a0:	4bc7      	ldr	r3, [pc, #796]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 80010a2:	6a1a      	ldr	r2, [r3, #32]
 80010a4:	4bc6      	ldr	r3, [pc, #792]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 80010a6:	2104      	movs	r1, #4
 80010a8:	438a      	bics	r2, r1
 80010aa:	621a      	str	r2, [r3, #32]
 80010ac:	e01c      	b.n	80010e8 <HAL_RCC_OscConfig+0x3a4>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	2b05      	cmp	r3, #5
 80010b4:	d10c      	bne.n	80010d0 <HAL_RCC_OscConfig+0x38c>
 80010b6:	4bc2      	ldr	r3, [pc, #776]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 80010b8:	6a1a      	ldr	r2, [r3, #32]
 80010ba:	4bc1      	ldr	r3, [pc, #772]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 80010bc:	2104      	movs	r1, #4
 80010be:	430a      	orrs	r2, r1
 80010c0:	621a      	str	r2, [r3, #32]
 80010c2:	4bbf      	ldr	r3, [pc, #764]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 80010c4:	6a1a      	ldr	r2, [r3, #32]
 80010c6:	4bbe      	ldr	r3, [pc, #760]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 80010c8:	2101      	movs	r1, #1
 80010ca:	430a      	orrs	r2, r1
 80010cc:	621a      	str	r2, [r3, #32]
 80010ce:	e00b      	b.n	80010e8 <HAL_RCC_OscConfig+0x3a4>
 80010d0:	4bbb      	ldr	r3, [pc, #748]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 80010d2:	6a1a      	ldr	r2, [r3, #32]
 80010d4:	4bba      	ldr	r3, [pc, #744]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 80010d6:	2101      	movs	r1, #1
 80010d8:	438a      	bics	r2, r1
 80010da:	621a      	str	r2, [r3, #32]
 80010dc:	4bb8      	ldr	r3, [pc, #736]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 80010de:	6a1a      	ldr	r2, [r3, #32]
 80010e0:	4bb7      	ldr	r3, [pc, #732]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 80010e2:	2104      	movs	r1, #4
 80010e4:	438a      	bics	r2, r1
 80010e6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d014      	beq.n	800111a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010f0:	f7ff fba4 	bl	800083c <HAL_GetTick>
 80010f4:	0003      	movs	r3, r0
 80010f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010f8:	e009      	b.n	800110e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010fa:	f7ff fb9f 	bl	800083c <HAL_GetTick>
 80010fe:	0002      	movs	r2, r0
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	4aaf      	ldr	r2, [pc, #700]	; (80013c4 <HAL_RCC_OscConfig+0x680>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d901      	bls.n	800110e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e19a      	b.n	8001444 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800110e:	4bac      	ldr	r3, [pc, #688]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 8001110:	6a1b      	ldr	r3, [r3, #32]
 8001112:	2202      	movs	r2, #2
 8001114:	4013      	ands	r3, r2
 8001116:	d0f0      	beq.n	80010fa <HAL_RCC_OscConfig+0x3b6>
 8001118:	e013      	b.n	8001142 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800111a:	f7ff fb8f 	bl	800083c <HAL_GetTick>
 800111e:	0003      	movs	r3, r0
 8001120:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001122:	e009      	b.n	8001138 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001124:	f7ff fb8a 	bl	800083c <HAL_GetTick>
 8001128:	0002      	movs	r2, r0
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	4aa5      	ldr	r2, [pc, #660]	; (80013c4 <HAL_RCC_OscConfig+0x680>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d901      	bls.n	8001138 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001134:	2303      	movs	r3, #3
 8001136:	e185      	b.n	8001444 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001138:	4ba1      	ldr	r3, [pc, #644]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 800113a:	6a1b      	ldr	r3, [r3, #32]
 800113c:	2202      	movs	r2, #2
 800113e:	4013      	ands	r3, r2
 8001140:	d1f0      	bne.n	8001124 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001142:	231f      	movs	r3, #31
 8001144:	18fb      	adds	r3, r7, r3
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d105      	bne.n	8001158 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800114c:	4b9c      	ldr	r3, [pc, #624]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 800114e:	69da      	ldr	r2, [r3, #28]
 8001150:	4b9b      	ldr	r3, [pc, #620]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 8001152:	499d      	ldr	r1, [pc, #628]	; (80013c8 <HAL_RCC_OscConfig+0x684>)
 8001154:	400a      	ands	r2, r1
 8001156:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2210      	movs	r2, #16
 800115e:	4013      	ands	r3, r2
 8001160:	d063      	beq.n	800122a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d12a      	bne.n	80011c0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800116a:	4b95      	ldr	r3, [pc, #596]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 800116c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800116e:	4b94      	ldr	r3, [pc, #592]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 8001170:	2104      	movs	r1, #4
 8001172:	430a      	orrs	r2, r1
 8001174:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001176:	4b92      	ldr	r3, [pc, #584]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 8001178:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800117a:	4b91      	ldr	r3, [pc, #580]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 800117c:	2101      	movs	r1, #1
 800117e:	430a      	orrs	r2, r1
 8001180:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001182:	f7ff fb5b 	bl	800083c <HAL_GetTick>
 8001186:	0003      	movs	r3, r0
 8001188:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800118a:	e008      	b.n	800119e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800118c:	f7ff fb56 	bl	800083c <HAL_GetTick>
 8001190:	0002      	movs	r2, r0
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b02      	cmp	r3, #2
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e152      	b.n	8001444 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800119e:	4b88      	ldr	r3, [pc, #544]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 80011a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011a2:	2202      	movs	r2, #2
 80011a4:	4013      	ands	r3, r2
 80011a6:	d0f1      	beq.n	800118c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80011a8:	4b85      	ldr	r3, [pc, #532]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 80011aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ac:	22f8      	movs	r2, #248	; 0xf8
 80011ae:	4393      	bics	r3, r2
 80011b0:	0019      	movs	r1, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	00da      	lsls	r2, r3, #3
 80011b8:	4b81      	ldr	r3, [pc, #516]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 80011ba:	430a      	orrs	r2, r1
 80011bc:	635a      	str	r2, [r3, #52]	; 0x34
 80011be:	e034      	b.n	800122a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	695b      	ldr	r3, [r3, #20]
 80011c4:	3305      	adds	r3, #5
 80011c6:	d111      	bne.n	80011ec <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80011c8:	4b7d      	ldr	r3, [pc, #500]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 80011ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011cc:	4b7c      	ldr	r3, [pc, #496]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 80011ce:	2104      	movs	r1, #4
 80011d0:	438a      	bics	r2, r1
 80011d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80011d4:	4b7a      	ldr	r3, [pc, #488]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 80011d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011d8:	22f8      	movs	r2, #248	; 0xf8
 80011da:	4393      	bics	r3, r2
 80011dc:	0019      	movs	r1, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	00da      	lsls	r2, r3, #3
 80011e4:	4b76      	ldr	r3, [pc, #472]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 80011e6:	430a      	orrs	r2, r1
 80011e8:	635a      	str	r2, [r3, #52]	; 0x34
 80011ea:	e01e      	b.n	800122a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80011ec:	4b74      	ldr	r3, [pc, #464]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 80011ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011f0:	4b73      	ldr	r3, [pc, #460]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 80011f2:	2104      	movs	r1, #4
 80011f4:	430a      	orrs	r2, r1
 80011f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80011f8:	4b71      	ldr	r3, [pc, #452]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 80011fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011fc:	4b70      	ldr	r3, [pc, #448]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 80011fe:	2101      	movs	r1, #1
 8001200:	438a      	bics	r2, r1
 8001202:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001204:	f7ff fb1a 	bl	800083c <HAL_GetTick>
 8001208:	0003      	movs	r3, r0
 800120a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800120c:	e008      	b.n	8001220 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800120e:	f7ff fb15 	bl	800083c <HAL_GetTick>
 8001212:	0002      	movs	r2, r0
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	2b02      	cmp	r3, #2
 800121a:	d901      	bls.n	8001220 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800121c:	2303      	movs	r3, #3
 800121e:	e111      	b.n	8001444 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001220:	4b67      	ldr	r3, [pc, #412]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 8001222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001224:	2202      	movs	r2, #2
 8001226:	4013      	ands	r3, r2
 8001228:	d1f1      	bne.n	800120e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2220      	movs	r2, #32
 8001230:	4013      	ands	r3, r2
 8001232:	d05c      	beq.n	80012ee <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001234:	4b62      	ldr	r3, [pc, #392]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	220c      	movs	r2, #12
 800123a:	4013      	ands	r3, r2
 800123c:	2b0c      	cmp	r3, #12
 800123e:	d00e      	beq.n	800125e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001240:	4b5f      	ldr	r3, [pc, #380]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	220c      	movs	r2, #12
 8001246:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001248:	2b08      	cmp	r3, #8
 800124a:	d114      	bne.n	8001276 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800124c:	4b5c      	ldr	r3, [pc, #368]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 800124e:	685a      	ldr	r2, [r3, #4]
 8001250:	23c0      	movs	r3, #192	; 0xc0
 8001252:	025b      	lsls	r3, r3, #9
 8001254:	401a      	ands	r2, r3
 8001256:	23c0      	movs	r3, #192	; 0xc0
 8001258:	025b      	lsls	r3, r3, #9
 800125a:	429a      	cmp	r2, r3
 800125c:	d10b      	bne.n	8001276 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800125e:	4b58      	ldr	r3, [pc, #352]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 8001260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001262:	2380      	movs	r3, #128	; 0x80
 8001264:	025b      	lsls	r3, r3, #9
 8001266:	4013      	ands	r3, r2
 8001268:	d040      	beq.n	80012ec <HAL_RCC_OscConfig+0x5a8>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a1b      	ldr	r3, [r3, #32]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d03c      	beq.n	80012ec <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e0e6      	b.n	8001444 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a1b      	ldr	r3, [r3, #32]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d01b      	beq.n	80012b6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800127e:	4b50      	ldr	r3, [pc, #320]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 8001280:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001282:	4b4f      	ldr	r3, [pc, #316]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 8001284:	2180      	movs	r1, #128	; 0x80
 8001286:	0249      	lsls	r1, r1, #9
 8001288:	430a      	orrs	r2, r1
 800128a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128c:	f7ff fad6 	bl	800083c <HAL_GetTick>
 8001290:	0003      	movs	r3, r0
 8001292:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001294:	e008      	b.n	80012a8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001296:	f7ff fad1 	bl	800083c <HAL_GetTick>
 800129a:	0002      	movs	r2, r0
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e0cd      	b.n	8001444 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80012a8:	4b45      	ldr	r3, [pc, #276]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 80012aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012ac:	2380      	movs	r3, #128	; 0x80
 80012ae:	025b      	lsls	r3, r3, #9
 80012b0:	4013      	ands	r3, r2
 80012b2:	d0f0      	beq.n	8001296 <HAL_RCC_OscConfig+0x552>
 80012b4:	e01b      	b.n	80012ee <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80012b6:	4b42      	ldr	r3, [pc, #264]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 80012b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012ba:	4b41      	ldr	r3, [pc, #260]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 80012bc:	4943      	ldr	r1, [pc, #268]	; (80013cc <HAL_RCC_OscConfig+0x688>)
 80012be:	400a      	ands	r2, r1
 80012c0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c2:	f7ff fabb 	bl	800083c <HAL_GetTick>
 80012c6:	0003      	movs	r3, r0
 80012c8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012cc:	f7ff fab6 	bl	800083c <HAL_GetTick>
 80012d0:	0002      	movs	r2, r0
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e0b2      	b.n	8001444 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80012de:	4b38      	ldr	r3, [pc, #224]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 80012e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012e2:	2380      	movs	r3, #128	; 0x80
 80012e4:	025b      	lsls	r3, r3, #9
 80012e6:	4013      	ands	r3, r2
 80012e8:	d1f0      	bne.n	80012cc <HAL_RCC_OscConfig+0x588>
 80012ea:	e000      	b.n	80012ee <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80012ec:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d100      	bne.n	80012f8 <HAL_RCC_OscConfig+0x5b4>
 80012f6:	e0a4      	b.n	8001442 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012f8:	4b31      	ldr	r3, [pc, #196]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	220c      	movs	r2, #12
 80012fe:	4013      	ands	r3, r2
 8001300:	2b08      	cmp	r3, #8
 8001302:	d100      	bne.n	8001306 <HAL_RCC_OscConfig+0x5c2>
 8001304:	e078      	b.n	80013f8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130a:	2b02      	cmp	r3, #2
 800130c:	d14c      	bne.n	80013a8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800130e:	4b2c      	ldr	r3, [pc, #176]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	4b2b      	ldr	r3, [pc, #172]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 8001314:	492e      	ldr	r1, [pc, #184]	; (80013d0 <HAL_RCC_OscConfig+0x68c>)
 8001316:	400a      	ands	r2, r1
 8001318:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131a:	f7ff fa8f 	bl	800083c <HAL_GetTick>
 800131e:	0003      	movs	r3, r0
 8001320:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001324:	f7ff fa8a 	bl	800083c <HAL_GetTick>
 8001328:	0002      	movs	r2, r0
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e086      	b.n	8001444 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001336:	4b22      	ldr	r3, [pc, #136]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	2380      	movs	r3, #128	; 0x80
 800133c:	049b      	lsls	r3, r3, #18
 800133e:	4013      	ands	r3, r2
 8001340:	d1f0      	bne.n	8001324 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001342:	4b1f      	ldr	r3, [pc, #124]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 8001344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001346:	220f      	movs	r2, #15
 8001348:	4393      	bics	r3, r2
 800134a:	0019      	movs	r1, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001350:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 8001352:	430a      	orrs	r2, r1
 8001354:	62da      	str	r2, [r3, #44]	; 0x2c
 8001356:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	4a1e      	ldr	r2, [pc, #120]	; (80013d4 <HAL_RCC_OscConfig+0x690>)
 800135c:	4013      	ands	r3, r2
 800135e:	0019      	movs	r1, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001368:	431a      	orrs	r2, r3
 800136a:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 800136c:	430a      	orrs	r2, r1
 800136e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001370:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 8001376:	2180      	movs	r1, #128	; 0x80
 8001378:	0449      	lsls	r1, r1, #17
 800137a:	430a      	orrs	r2, r1
 800137c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137e:	f7ff fa5d 	bl	800083c <HAL_GetTick>
 8001382:	0003      	movs	r3, r0
 8001384:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001388:	f7ff fa58 	bl	800083c <HAL_GetTick>
 800138c:	0002      	movs	r2, r0
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e054      	b.n	8001444 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	2380      	movs	r3, #128	; 0x80
 80013a0:	049b      	lsls	r3, r3, #18
 80013a2:	4013      	ands	r3, r2
 80013a4:	d0f0      	beq.n	8001388 <HAL_RCC_OscConfig+0x644>
 80013a6:	e04c      	b.n	8001442 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013a8:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <HAL_RCC_OscConfig+0x67c>)
 80013ae:	4908      	ldr	r1, [pc, #32]	; (80013d0 <HAL_RCC_OscConfig+0x68c>)
 80013b0:	400a      	ands	r2, r1
 80013b2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b4:	f7ff fa42 	bl	800083c <HAL_GetTick>
 80013b8:	0003      	movs	r3, r0
 80013ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013bc:	e015      	b.n	80013ea <HAL_RCC_OscConfig+0x6a6>
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	40021000 	.word	0x40021000
 80013c4:	00001388 	.word	0x00001388
 80013c8:	efffffff 	.word	0xefffffff
 80013cc:	fffeffff 	.word	0xfffeffff
 80013d0:	feffffff 	.word	0xfeffffff
 80013d4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013d8:	f7ff fa30 	bl	800083c <HAL_GetTick>
 80013dc:	0002      	movs	r2, r0
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e02c      	b.n	8001444 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ea:	4b18      	ldr	r3, [pc, #96]	; (800144c <HAL_RCC_OscConfig+0x708>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	2380      	movs	r3, #128	; 0x80
 80013f0:	049b      	lsls	r3, r3, #18
 80013f2:	4013      	ands	r3, r2
 80013f4:	d1f0      	bne.n	80013d8 <HAL_RCC_OscConfig+0x694>
 80013f6:	e024      	b.n	8001442 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d101      	bne.n	8001404 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e01f      	b.n	8001444 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001404:	4b11      	ldr	r3, [pc, #68]	; (800144c <HAL_RCC_OscConfig+0x708>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800140a:	4b10      	ldr	r3, [pc, #64]	; (800144c <HAL_RCC_OscConfig+0x708>)
 800140c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001410:	697a      	ldr	r2, [r7, #20]
 8001412:	23c0      	movs	r3, #192	; 0xc0
 8001414:	025b      	lsls	r3, r3, #9
 8001416:	401a      	ands	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800141c:	429a      	cmp	r2, r3
 800141e:	d10e      	bne.n	800143e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	220f      	movs	r2, #15
 8001424:	401a      	ands	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800142a:	429a      	cmp	r2, r3
 800142c:	d107      	bne.n	800143e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800142e:	697a      	ldr	r2, [r7, #20]
 8001430:	23f0      	movs	r3, #240	; 0xf0
 8001432:	039b      	lsls	r3, r3, #14
 8001434:	401a      	ands	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800143a:	429a      	cmp	r2, r3
 800143c:	d001      	beq.n	8001442 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e000      	b.n	8001444 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001442:	2300      	movs	r3, #0
}
 8001444:	0018      	movs	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	b008      	add	sp, #32
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40021000 	.word	0x40021000

08001450 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d101      	bne.n	8001464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e0bf      	b.n	80015e4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001464:	4b61      	ldr	r3, [pc, #388]	; (80015ec <HAL_RCC_ClockConfig+0x19c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2201      	movs	r2, #1
 800146a:	4013      	ands	r3, r2
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	429a      	cmp	r2, r3
 8001470:	d911      	bls.n	8001496 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001472:	4b5e      	ldr	r3, [pc, #376]	; (80015ec <HAL_RCC_ClockConfig+0x19c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2201      	movs	r2, #1
 8001478:	4393      	bics	r3, r2
 800147a:	0019      	movs	r1, r3
 800147c:	4b5b      	ldr	r3, [pc, #364]	; (80015ec <HAL_RCC_ClockConfig+0x19c>)
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	430a      	orrs	r2, r1
 8001482:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001484:	4b59      	ldr	r3, [pc, #356]	; (80015ec <HAL_RCC_ClockConfig+0x19c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2201      	movs	r2, #1
 800148a:	4013      	ands	r3, r2
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	429a      	cmp	r2, r3
 8001490:	d001      	beq.n	8001496 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e0a6      	b.n	80015e4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2202      	movs	r2, #2
 800149c:	4013      	ands	r3, r2
 800149e:	d015      	beq.n	80014cc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2204      	movs	r2, #4
 80014a6:	4013      	ands	r3, r2
 80014a8:	d006      	beq.n	80014b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80014aa:	4b51      	ldr	r3, [pc, #324]	; (80015f0 <HAL_RCC_ClockConfig+0x1a0>)
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	4b50      	ldr	r3, [pc, #320]	; (80015f0 <HAL_RCC_ClockConfig+0x1a0>)
 80014b0:	21e0      	movs	r1, #224	; 0xe0
 80014b2:	00c9      	lsls	r1, r1, #3
 80014b4:	430a      	orrs	r2, r1
 80014b6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014b8:	4b4d      	ldr	r3, [pc, #308]	; (80015f0 <HAL_RCC_ClockConfig+0x1a0>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	22f0      	movs	r2, #240	; 0xf0
 80014be:	4393      	bics	r3, r2
 80014c0:	0019      	movs	r1, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	4b4a      	ldr	r3, [pc, #296]	; (80015f0 <HAL_RCC_ClockConfig+0x1a0>)
 80014c8:	430a      	orrs	r2, r1
 80014ca:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2201      	movs	r2, #1
 80014d2:	4013      	ands	r3, r2
 80014d4:	d04c      	beq.n	8001570 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d107      	bne.n	80014ee <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014de:	4b44      	ldr	r3, [pc, #272]	; (80015f0 <HAL_RCC_ClockConfig+0x1a0>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	2380      	movs	r3, #128	; 0x80
 80014e4:	029b      	lsls	r3, r3, #10
 80014e6:	4013      	ands	r3, r2
 80014e8:	d120      	bne.n	800152c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e07a      	b.n	80015e4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d107      	bne.n	8001506 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014f6:	4b3e      	ldr	r3, [pc, #248]	; (80015f0 <HAL_RCC_ClockConfig+0x1a0>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	2380      	movs	r3, #128	; 0x80
 80014fc:	049b      	lsls	r3, r3, #18
 80014fe:	4013      	ands	r3, r2
 8001500:	d114      	bne.n	800152c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e06e      	b.n	80015e4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	2b03      	cmp	r3, #3
 800150c:	d107      	bne.n	800151e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800150e:	4b38      	ldr	r3, [pc, #224]	; (80015f0 <HAL_RCC_ClockConfig+0x1a0>)
 8001510:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001512:	2380      	movs	r3, #128	; 0x80
 8001514:	025b      	lsls	r3, r3, #9
 8001516:	4013      	ands	r3, r2
 8001518:	d108      	bne.n	800152c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e062      	b.n	80015e4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800151e:	4b34      	ldr	r3, [pc, #208]	; (80015f0 <HAL_RCC_ClockConfig+0x1a0>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2202      	movs	r2, #2
 8001524:	4013      	ands	r3, r2
 8001526:	d101      	bne.n	800152c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e05b      	b.n	80015e4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800152c:	4b30      	ldr	r3, [pc, #192]	; (80015f0 <HAL_RCC_ClockConfig+0x1a0>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	2203      	movs	r2, #3
 8001532:	4393      	bics	r3, r2
 8001534:	0019      	movs	r1, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685a      	ldr	r2, [r3, #4]
 800153a:	4b2d      	ldr	r3, [pc, #180]	; (80015f0 <HAL_RCC_ClockConfig+0x1a0>)
 800153c:	430a      	orrs	r2, r1
 800153e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001540:	f7ff f97c 	bl	800083c <HAL_GetTick>
 8001544:	0003      	movs	r3, r0
 8001546:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001548:	e009      	b.n	800155e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800154a:	f7ff f977 	bl	800083c <HAL_GetTick>
 800154e:	0002      	movs	r2, r0
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	4a27      	ldr	r2, [pc, #156]	; (80015f4 <HAL_RCC_ClockConfig+0x1a4>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d901      	bls.n	800155e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e042      	b.n	80015e4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800155e:	4b24      	ldr	r3, [pc, #144]	; (80015f0 <HAL_RCC_ClockConfig+0x1a0>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	220c      	movs	r2, #12
 8001564:	401a      	ands	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	429a      	cmp	r2, r3
 800156e:	d1ec      	bne.n	800154a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001570:	4b1e      	ldr	r3, [pc, #120]	; (80015ec <HAL_RCC_ClockConfig+0x19c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2201      	movs	r2, #1
 8001576:	4013      	ands	r3, r2
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	429a      	cmp	r2, r3
 800157c:	d211      	bcs.n	80015a2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157e:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <HAL_RCC_ClockConfig+0x19c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2201      	movs	r2, #1
 8001584:	4393      	bics	r3, r2
 8001586:	0019      	movs	r1, r3
 8001588:	4b18      	ldr	r3, [pc, #96]	; (80015ec <HAL_RCC_ClockConfig+0x19c>)
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	430a      	orrs	r2, r1
 800158e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001590:	4b16      	ldr	r3, [pc, #88]	; (80015ec <HAL_RCC_ClockConfig+0x19c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2201      	movs	r2, #1
 8001596:	4013      	ands	r3, r2
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	429a      	cmp	r2, r3
 800159c:	d001      	beq.n	80015a2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e020      	b.n	80015e4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2204      	movs	r2, #4
 80015a8:	4013      	ands	r3, r2
 80015aa:	d009      	beq.n	80015c0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80015ac:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <HAL_RCC_ClockConfig+0x1a0>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	4a11      	ldr	r2, [pc, #68]	; (80015f8 <HAL_RCC_ClockConfig+0x1a8>)
 80015b2:	4013      	ands	r3, r2
 80015b4:	0019      	movs	r1, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	68da      	ldr	r2, [r3, #12]
 80015ba:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <HAL_RCC_ClockConfig+0x1a0>)
 80015bc:	430a      	orrs	r2, r1
 80015be:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80015c0:	f000 f820 	bl	8001604 <HAL_RCC_GetSysClockFreq>
 80015c4:	0001      	movs	r1, r0
 80015c6:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <HAL_RCC_ClockConfig+0x1a0>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	091b      	lsrs	r3, r3, #4
 80015cc:	220f      	movs	r2, #15
 80015ce:	4013      	ands	r3, r2
 80015d0:	4a0a      	ldr	r2, [pc, #40]	; (80015fc <HAL_RCC_ClockConfig+0x1ac>)
 80015d2:	5cd3      	ldrb	r3, [r2, r3]
 80015d4:	000a      	movs	r2, r1
 80015d6:	40da      	lsrs	r2, r3
 80015d8:	4b09      	ldr	r3, [pc, #36]	; (8001600 <HAL_RCC_ClockConfig+0x1b0>)
 80015da:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80015dc:	2003      	movs	r0, #3
 80015de:	f7ff f8e7 	bl	80007b0 <HAL_InitTick>
  
  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	0018      	movs	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	b004      	add	sp, #16
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40022000 	.word	0x40022000
 80015f0:	40021000 	.word	0x40021000
 80015f4:	00001388 	.word	0x00001388
 80015f8:	fffff8ff 	.word	0xfffff8ff
 80015fc:	080033bc 	.word	0x080033bc
 8001600:	20000034 	.word	0x20000034

08001604 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b08f      	sub	sp, #60	; 0x3c
 8001608:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800160a:	2314      	movs	r3, #20
 800160c:	18fb      	adds	r3, r7, r3
 800160e:	4a38      	ldr	r2, [pc, #224]	; (80016f0 <HAL_RCC_GetSysClockFreq+0xec>)
 8001610:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001612:	c313      	stmia	r3!, {r0, r1, r4}
 8001614:	6812      	ldr	r2, [r2, #0]
 8001616:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	4a36      	ldr	r2, [pc, #216]	; (80016f4 <HAL_RCC_GetSysClockFreq+0xf0>)
 800161c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800161e:	c313      	stmia	r3!, {r0, r1, r4}
 8001620:	6812      	ldr	r2, [r2, #0]
 8001622:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001624:	2300      	movs	r3, #0
 8001626:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001628:	2300      	movs	r3, #0
 800162a:	62bb      	str	r3, [r7, #40]	; 0x28
 800162c:	2300      	movs	r3, #0
 800162e:	637b      	str	r3, [r7, #52]	; 0x34
 8001630:	2300      	movs	r3, #0
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001634:	2300      	movs	r3, #0
 8001636:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001638:	4b2f      	ldr	r3, [pc, #188]	; (80016f8 <HAL_RCC_GetSysClockFreq+0xf4>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800163e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001640:	220c      	movs	r2, #12
 8001642:	4013      	ands	r3, r2
 8001644:	2b0c      	cmp	r3, #12
 8001646:	d047      	beq.n	80016d8 <HAL_RCC_GetSysClockFreq+0xd4>
 8001648:	d849      	bhi.n	80016de <HAL_RCC_GetSysClockFreq+0xda>
 800164a:	2b04      	cmp	r3, #4
 800164c:	d002      	beq.n	8001654 <HAL_RCC_GetSysClockFreq+0x50>
 800164e:	2b08      	cmp	r3, #8
 8001650:	d003      	beq.n	800165a <HAL_RCC_GetSysClockFreq+0x56>
 8001652:	e044      	b.n	80016de <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001654:	4b29      	ldr	r3, [pc, #164]	; (80016fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001656:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001658:	e044      	b.n	80016e4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800165a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800165c:	0c9b      	lsrs	r3, r3, #18
 800165e:	220f      	movs	r2, #15
 8001660:	4013      	ands	r3, r2
 8001662:	2214      	movs	r2, #20
 8001664:	18ba      	adds	r2, r7, r2
 8001666:	5cd3      	ldrb	r3, [r2, r3]
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800166a:	4b23      	ldr	r3, [pc, #140]	; (80016f8 <HAL_RCC_GetSysClockFreq+0xf4>)
 800166c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166e:	220f      	movs	r2, #15
 8001670:	4013      	ands	r3, r2
 8001672:	1d3a      	adds	r2, r7, #4
 8001674:	5cd3      	ldrb	r3, [r2, r3]
 8001676:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001678:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800167a:	23c0      	movs	r3, #192	; 0xc0
 800167c:	025b      	lsls	r3, r3, #9
 800167e:	401a      	ands	r2, r3
 8001680:	2380      	movs	r3, #128	; 0x80
 8001682:	025b      	lsls	r3, r3, #9
 8001684:	429a      	cmp	r2, r3
 8001686:	d109      	bne.n	800169c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001688:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800168a:	481c      	ldr	r0, [pc, #112]	; (80016fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800168c:	f7fe fd46 	bl	800011c <__udivsi3>
 8001690:	0003      	movs	r3, r0
 8001692:	001a      	movs	r2, r3
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	4353      	muls	r3, r2
 8001698:	637b      	str	r3, [r7, #52]	; 0x34
 800169a:	e01a      	b.n	80016d2 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800169c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800169e:	23c0      	movs	r3, #192	; 0xc0
 80016a0:	025b      	lsls	r3, r3, #9
 80016a2:	401a      	ands	r2, r3
 80016a4:	23c0      	movs	r3, #192	; 0xc0
 80016a6:	025b      	lsls	r3, r3, #9
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d109      	bne.n	80016c0 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80016ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016ae:	4814      	ldr	r0, [pc, #80]	; (8001700 <HAL_RCC_GetSysClockFreq+0xfc>)
 80016b0:	f7fe fd34 	bl	800011c <__udivsi3>
 80016b4:	0003      	movs	r3, r0
 80016b6:	001a      	movs	r2, r3
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	4353      	muls	r3, r2
 80016bc:	637b      	str	r3, [r7, #52]	; 0x34
 80016be:	e008      	b.n	80016d2 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80016c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016c2:	480e      	ldr	r0, [pc, #56]	; (80016fc <HAL_RCC_GetSysClockFreq+0xf8>)
 80016c4:	f7fe fd2a 	bl	800011c <__udivsi3>
 80016c8:	0003      	movs	r3, r0
 80016ca:	001a      	movs	r2, r3
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	4353      	muls	r3, r2
 80016d0:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80016d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016d4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80016d6:	e005      	b.n	80016e4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80016d8:	4b09      	ldr	r3, [pc, #36]	; (8001700 <HAL_RCC_GetSysClockFreq+0xfc>)
 80016da:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80016dc:	e002      	b.n	80016e4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016de:	4b07      	ldr	r3, [pc, #28]	; (80016fc <HAL_RCC_GetSysClockFreq+0xf8>)
 80016e0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80016e2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80016e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80016e6:	0018      	movs	r0, r3
 80016e8:	46bd      	mov	sp, r7
 80016ea:	b00f      	add	sp, #60	; 0x3c
 80016ec:	bd90      	pop	{r4, r7, pc}
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	0800339c 	.word	0x0800339c
 80016f4:	080033ac 	.word	0x080033ac
 80016f8:	40021000 	.word	0x40021000
 80016fc:	007a1200 	.word	0x007a1200
 8001700:	02dc6c00 	.word	0x02dc6c00

08001704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001708:	4b02      	ldr	r3, [pc, #8]	; (8001714 <HAL_RCC_GetHCLKFreq+0x10>)
 800170a:	681b      	ldr	r3, [r3, #0]
}
 800170c:	0018      	movs	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	20000034 	.word	0x20000034

08001718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800171c:	f7ff fff2 	bl	8001704 <HAL_RCC_GetHCLKFreq>
 8001720:	0001      	movs	r1, r0
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	0a1b      	lsrs	r3, r3, #8
 8001728:	2207      	movs	r2, #7
 800172a:	4013      	ands	r3, r2
 800172c:	4a04      	ldr	r2, [pc, #16]	; (8001740 <HAL_RCC_GetPCLK1Freq+0x28>)
 800172e:	5cd3      	ldrb	r3, [r2, r3]
 8001730:	40d9      	lsrs	r1, r3
 8001732:	000b      	movs	r3, r1
}    
 8001734:	0018      	movs	r0, r3
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	40021000 	.word	0x40021000
 8001740:	080033cc 	.word	0x080033cc

08001744 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800174c:	2300      	movs	r3, #0
 800174e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001750:	2300      	movs	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	2380      	movs	r3, #128	; 0x80
 800175a:	025b      	lsls	r3, r3, #9
 800175c:	4013      	ands	r3, r2
 800175e:	d100      	bne.n	8001762 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001760:	e08e      	b.n	8001880 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001762:	2017      	movs	r0, #23
 8001764:	183b      	adds	r3, r7, r0
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800176a:	4b6e      	ldr	r3, [pc, #440]	; (8001924 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800176c:	69da      	ldr	r2, [r3, #28]
 800176e:	2380      	movs	r3, #128	; 0x80
 8001770:	055b      	lsls	r3, r3, #21
 8001772:	4013      	ands	r3, r2
 8001774:	d110      	bne.n	8001798 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001776:	4b6b      	ldr	r3, [pc, #428]	; (8001924 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001778:	69da      	ldr	r2, [r3, #28]
 800177a:	4b6a      	ldr	r3, [pc, #424]	; (8001924 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800177c:	2180      	movs	r1, #128	; 0x80
 800177e:	0549      	lsls	r1, r1, #21
 8001780:	430a      	orrs	r2, r1
 8001782:	61da      	str	r2, [r3, #28]
 8001784:	4b67      	ldr	r3, [pc, #412]	; (8001924 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001786:	69da      	ldr	r2, [r3, #28]
 8001788:	2380      	movs	r3, #128	; 0x80
 800178a:	055b      	lsls	r3, r3, #21
 800178c:	4013      	ands	r3, r2
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001792:	183b      	adds	r3, r7, r0
 8001794:	2201      	movs	r2, #1
 8001796:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001798:	4b63      	ldr	r3, [pc, #396]	; (8001928 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	2380      	movs	r3, #128	; 0x80
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	4013      	ands	r3, r2
 80017a2:	d11a      	bne.n	80017da <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017a4:	4b60      	ldr	r3, [pc, #384]	; (8001928 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	4b5f      	ldr	r3, [pc, #380]	; (8001928 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80017aa:	2180      	movs	r1, #128	; 0x80
 80017ac:	0049      	lsls	r1, r1, #1
 80017ae:	430a      	orrs	r2, r1
 80017b0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017b2:	f7ff f843 	bl	800083c <HAL_GetTick>
 80017b6:	0003      	movs	r3, r0
 80017b8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ba:	e008      	b.n	80017ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017bc:	f7ff f83e 	bl	800083c <HAL_GetTick>
 80017c0:	0002      	movs	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b64      	cmp	r3, #100	; 0x64
 80017c8:	d901      	bls.n	80017ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e0a6      	b.n	800191c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ce:	4b56      	ldr	r3, [pc, #344]	; (8001928 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	2380      	movs	r3, #128	; 0x80
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	4013      	ands	r3, r2
 80017d8:	d0f0      	beq.n	80017bc <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80017da:	4b52      	ldr	r3, [pc, #328]	; (8001924 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017dc:	6a1a      	ldr	r2, [r3, #32]
 80017de:	23c0      	movs	r3, #192	; 0xc0
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4013      	ands	r3, r2
 80017e4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d034      	beq.n	8001856 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685a      	ldr	r2, [r3, #4]
 80017f0:	23c0      	movs	r3, #192	; 0xc0
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4013      	ands	r3, r2
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d02c      	beq.n	8001856 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80017fc:	4b49      	ldr	r3, [pc, #292]	; (8001924 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	4a4a      	ldr	r2, [pc, #296]	; (800192c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001802:	4013      	ands	r3, r2
 8001804:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001806:	4b47      	ldr	r3, [pc, #284]	; (8001924 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001808:	6a1a      	ldr	r2, [r3, #32]
 800180a:	4b46      	ldr	r3, [pc, #280]	; (8001924 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800180c:	2180      	movs	r1, #128	; 0x80
 800180e:	0249      	lsls	r1, r1, #9
 8001810:	430a      	orrs	r2, r1
 8001812:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001814:	4b43      	ldr	r3, [pc, #268]	; (8001924 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001816:	6a1a      	ldr	r2, [r3, #32]
 8001818:	4b42      	ldr	r3, [pc, #264]	; (8001924 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800181a:	4945      	ldr	r1, [pc, #276]	; (8001930 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800181c:	400a      	ands	r2, r1
 800181e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001820:	4b40      	ldr	r3, [pc, #256]	; (8001924 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2201      	movs	r2, #1
 800182a:	4013      	ands	r3, r2
 800182c:	d013      	beq.n	8001856 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182e:	f7ff f805 	bl	800083c <HAL_GetTick>
 8001832:	0003      	movs	r3, r0
 8001834:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001836:	e009      	b.n	800184c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001838:	f7ff f800 	bl	800083c <HAL_GetTick>
 800183c:	0002      	movs	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	4a3c      	ldr	r2, [pc, #240]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d901      	bls.n	800184c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e067      	b.n	800191c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800184c:	4b35      	ldr	r3, [pc, #212]	; (8001924 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800184e:	6a1b      	ldr	r3, [r3, #32]
 8001850:	2202      	movs	r2, #2
 8001852:	4013      	ands	r3, r2
 8001854:	d0f0      	beq.n	8001838 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001856:	4b33      	ldr	r3, [pc, #204]	; (8001924 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	4a34      	ldr	r2, [pc, #208]	; (800192c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800185c:	4013      	ands	r3, r2
 800185e:	0019      	movs	r1, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	4b2f      	ldr	r3, [pc, #188]	; (8001924 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001866:	430a      	orrs	r2, r1
 8001868:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800186a:	2317      	movs	r3, #23
 800186c:	18fb      	adds	r3, r7, r3
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d105      	bne.n	8001880 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001874:	4b2b      	ldr	r3, [pc, #172]	; (8001924 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001876:	69da      	ldr	r2, [r3, #28]
 8001878:	4b2a      	ldr	r3, [pc, #168]	; (8001924 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800187a:	492f      	ldr	r1, [pc, #188]	; (8001938 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800187c:	400a      	ands	r2, r1
 800187e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2201      	movs	r2, #1
 8001886:	4013      	ands	r3, r2
 8001888:	d009      	beq.n	800189e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800188a:	4b26      	ldr	r3, [pc, #152]	; (8001924 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	2203      	movs	r2, #3
 8001890:	4393      	bics	r3, r2
 8001892:	0019      	movs	r1, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	4b22      	ldr	r3, [pc, #136]	; (8001924 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800189a:	430a      	orrs	r2, r1
 800189c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2202      	movs	r2, #2
 80018a4:	4013      	ands	r3, r2
 80018a6:	d009      	beq.n	80018bc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80018a8:	4b1e      	ldr	r3, [pc, #120]	; (8001924 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80018aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ac:	4a23      	ldr	r2, [pc, #140]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018ae:	4013      	ands	r3, r2
 80018b0:	0019      	movs	r1, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	68da      	ldr	r2, [r3, #12]
 80018b6:	4b1b      	ldr	r3, [pc, #108]	; (8001924 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80018b8:	430a      	orrs	r2, r1
 80018ba:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2220      	movs	r2, #32
 80018c2:	4013      	ands	r3, r2
 80018c4:	d009      	beq.n	80018da <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80018c6:	4b17      	ldr	r3, [pc, #92]	; (8001924 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	2210      	movs	r2, #16
 80018cc:	4393      	bics	r3, r2
 80018ce:	0019      	movs	r1, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691a      	ldr	r2, [r3, #16]
 80018d4:	4b13      	ldr	r3, [pc, #76]	; (8001924 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80018d6:	430a      	orrs	r2, r1
 80018d8:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	2380      	movs	r3, #128	; 0x80
 80018e0:	029b      	lsls	r3, r3, #10
 80018e2:	4013      	ands	r3, r2
 80018e4:	d009      	beq.n	80018fa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80018e6:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	2280      	movs	r2, #128	; 0x80
 80018ec:	4393      	bics	r3, r2
 80018ee:	0019      	movs	r1, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	699a      	ldr	r2, [r3, #24]
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80018f6:	430a      	orrs	r2, r1
 80018f8:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	2380      	movs	r3, #128	; 0x80
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	4013      	ands	r3, r2
 8001904:	d009      	beq.n	800191a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001906:	4b07      	ldr	r3, [pc, #28]	; (8001924 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	2240      	movs	r2, #64	; 0x40
 800190c:	4393      	bics	r3, r2
 800190e:	0019      	movs	r1, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	695a      	ldr	r2, [r3, #20]
 8001914:	4b03      	ldr	r3, [pc, #12]	; (8001924 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001916:	430a      	orrs	r2, r1
 8001918:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	0018      	movs	r0, r3
 800191e:	46bd      	mov	sp, r7
 8001920:	b006      	add	sp, #24
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40021000 	.word	0x40021000
 8001928:	40007000 	.word	0x40007000
 800192c:	fffffcff 	.word	0xfffffcff
 8001930:	fffeffff 	.word	0xfffeffff
 8001934:	00001388 	.word	0x00001388
 8001938:	efffffff 	.word	0xefffffff
 800193c:	fffcffff 	.word	0xfffcffff

08001940 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e042      	b.n	80019d8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	223d      	movs	r2, #61	; 0x3d
 8001956:	5c9b      	ldrb	r3, [r3, r2]
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d107      	bne.n	800196e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	223c      	movs	r2, #60	; 0x3c
 8001962:	2100      	movs	r1, #0
 8001964:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	0018      	movs	r0, r3
 800196a:	f7fe fde5 	bl	8000538 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	223d      	movs	r2, #61	; 0x3d
 8001972:	2102      	movs	r1, #2
 8001974:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	3304      	adds	r3, #4
 800197e:	0019      	movs	r1, r3
 8001980:	0010      	movs	r0, r2
 8001982:	f000 fa89 	bl	8001e98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2246      	movs	r2, #70	; 0x46
 800198a:	2101      	movs	r1, #1
 800198c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	223e      	movs	r2, #62	; 0x3e
 8001992:	2101      	movs	r1, #1
 8001994:	5499      	strb	r1, [r3, r2]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	223f      	movs	r2, #63	; 0x3f
 800199a:	2101      	movs	r1, #1
 800199c:	5499      	strb	r1, [r3, r2]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2240      	movs	r2, #64	; 0x40
 80019a2:	2101      	movs	r1, #1
 80019a4:	5499      	strb	r1, [r3, r2]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2241      	movs	r2, #65	; 0x41
 80019aa:	2101      	movs	r1, #1
 80019ac:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2242      	movs	r2, #66	; 0x42
 80019b2:	2101      	movs	r1, #1
 80019b4:	5499      	strb	r1, [r3, r2]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2243      	movs	r2, #67	; 0x43
 80019ba:	2101      	movs	r1, #1
 80019bc:	5499      	strb	r1, [r3, r2]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2244      	movs	r2, #68	; 0x44
 80019c2:	2101      	movs	r1, #1
 80019c4:	5499      	strb	r1, [r3, r2]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2245      	movs	r2, #69	; 0x45
 80019ca:	2101      	movs	r1, #1
 80019cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	223d      	movs	r2, #61	; 0x3d
 80019d2:	2101      	movs	r1, #1
 80019d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	0018      	movs	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	b002      	add	sp, #8
 80019de:	bd80      	pop	{r7, pc}

080019e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	223d      	movs	r2, #61	; 0x3d
 80019ec:	5c9b      	ldrb	r3, [r3, r2]
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d001      	beq.n	80019f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e03b      	b.n	8001a70 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	223d      	movs	r2, #61	; 0x3d
 80019fc:	2102      	movs	r1, #2
 80019fe:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68da      	ldr	r2, [r3, #12]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a18      	ldr	r2, [pc, #96]	; (8001a78 <HAL_TIM_Base_Start_IT+0x98>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d00f      	beq.n	8001a3a <HAL_TIM_Base_Start_IT+0x5a>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	2380      	movs	r3, #128	; 0x80
 8001a20:	05db      	lsls	r3, r3, #23
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d009      	beq.n	8001a3a <HAL_TIM_Base_Start_IT+0x5a>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a14      	ldr	r2, [pc, #80]	; (8001a7c <HAL_TIM_Base_Start_IT+0x9c>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d004      	beq.n	8001a3a <HAL_TIM_Base_Start_IT+0x5a>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a12      	ldr	r2, [pc, #72]	; (8001a80 <HAL_TIM_Base_Start_IT+0xa0>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d111      	bne.n	8001a5e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	2207      	movs	r2, #7
 8001a42:	4013      	ands	r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2b06      	cmp	r3, #6
 8001a4a:	d010      	beq.n	8001a6e <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2101      	movs	r1, #1
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a5c:	e007      	b.n	8001a6e <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2101      	movs	r1, #1
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	0018      	movs	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	b004      	add	sp, #16
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40012c00 	.word	0x40012c00
 8001a7c:	40000400 	.word	0x40000400
 8001a80:	40014000 	.word	0x40014000

08001a84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	2202      	movs	r2, #2
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d124      	bne.n	8001ae4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d11d      	bne.n	8001ae4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2203      	movs	r2, #3
 8001aae:	4252      	negs	r2, r2
 8001ab0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	2203      	movs	r2, #3
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d004      	beq.n	8001ace <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	f000 f9ce 	bl	8001e68 <HAL_TIM_IC_CaptureCallback>
 8001acc:	e007      	b.n	8001ade <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f000 f9c1 	bl	8001e58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	0018      	movs	r0, r3
 8001ada:	f000 f9cd 	bl	8001e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	2204      	movs	r2, #4
 8001aec:	4013      	ands	r3, r2
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	d125      	bne.n	8001b3e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	2204      	movs	r2, #4
 8001afa:	4013      	ands	r3, r2
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d11e      	bne.n	8001b3e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2205      	movs	r2, #5
 8001b06:	4252      	negs	r2, r2
 8001b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	699a      	ldr	r2, [r3, #24]
 8001b16:	23c0      	movs	r3, #192	; 0xc0
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d004      	beq.n	8001b28 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	0018      	movs	r0, r3
 8001b22:	f000 f9a1 	bl	8001e68 <HAL_TIM_IC_CaptureCallback>
 8001b26:	e007      	b.n	8001b38 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	f000 f994 	bl	8001e58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	0018      	movs	r0, r3
 8001b34:	f000 f9a0 	bl	8001e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	2208      	movs	r2, #8
 8001b46:	4013      	ands	r3, r2
 8001b48:	2b08      	cmp	r3, #8
 8001b4a:	d124      	bne.n	8001b96 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	2208      	movs	r2, #8
 8001b54:	4013      	ands	r3, r2
 8001b56:	2b08      	cmp	r3, #8
 8001b58:	d11d      	bne.n	8001b96 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2209      	movs	r2, #9
 8001b60:	4252      	negs	r2, r2
 8001b62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2204      	movs	r2, #4
 8001b68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	69db      	ldr	r3, [r3, #28]
 8001b70:	2203      	movs	r2, #3
 8001b72:	4013      	ands	r3, r2
 8001b74:	d004      	beq.n	8001b80 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	0018      	movs	r0, r3
 8001b7a:	f000 f975 	bl	8001e68 <HAL_TIM_IC_CaptureCallback>
 8001b7e:	e007      	b.n	8001b90 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	0018      	movs	r0, r3
 8001b84:	f000 f968 	bl	8001e58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	f000 f974 	bl	8001e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	2210      	movs	r2, #16
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	2b10      	cmp	r3, #16
 8001ba2:	d125      	bne.n	8001bf0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	2210      	movs	r2, #16
 8001bac:	4013      	ands	r3, r2
 8001bae:	2b10      	cmp	r3, #16
 8001bb0:	d11e      	bne.n	8001bf0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2211      	movs	r2, #17
 8001bb8:	4252      	negs	r2, r2
 8001bba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2208      	movs	r2, #8
 8001bc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	69da      	ldr	r2, [r3, #28]
 8001bc8:	23c0      	movs	r3, #192	; 0xc0
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d004      	beq.n	8001bda <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	f000 f948 	bl	8001e68 <HAL_TIM_IC_CaptureCallback>
 8001bd8:	e007      	b.n	8001bea <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	0018      	movs	r0, r3
 8001bde:	f000 f93b 	bl	8001e58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	0018      	movs	r0, r3
 8001be6:	f000 f947 	bl	8001e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d10f      	bne.n	8001c1e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	2201      	movs	r2, #1
 8001c06:	4013      	ands	r3, r2
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d108      	bne.n	8001c1e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2202      	movs	r2, #2
 8001c12:	4252      	negs	r2, r2
 8001c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	0018      	movs	r0, r3
 8001c1a:	f7fe fb47 	bl	80002ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	2280      	movs	r2, #128	; 0x80
 8001c26:	4013      	ands	r3, r2
 8001c28:	2b80      	cmp	r3, #128	; 0x80
 8001c2a:	d10f      	bne.n	8001c4c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	2280      	movs	r2, #128	; 0x80
 8001c34:	4013      	ands	r3, r2
 8001c36:	2b80      	cmp	r3, #128	; 0x80
 8001c38:	d108      	bne.n	8001c4c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2281      	movs	r2, #129	; 0x81
 8001c40:	4252      	negs	r2, r2
 8001c42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	0018      	movs	r0, r3
 8001c48:	f000 faa6 	bl	8002198 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	2240      	movs	r2, #64	; 0x40
 8001c54:	4013      	ands	r3, r2
 8001c56:	2b40      	cmp	r3, #64	; 0x40
 8001c58:	d10f      	bne.n	8001c7a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	2240      	movs	r2, #64	; 0x40
 8001c62:	4013      	ands	r3, r2
 8001c64:	2b40      	cmp	r3, #64	; 0x40
 8001c66:	d108      	bne.n	8001c7a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2241      	movs	r2, #65	; 0x41
 8001c6e:	4252      	negs	r2, r2
 8001c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	0018      	movs	r0, r3
 8001c76:	f000 f907 	bl	8001e88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	2220      	movs	r2, #32
 8001c82:	4013      	ands	r3, r2
 8001c84:	2b20      	cmp	r3, #32
 8001c86:	d10f      	bne.n	8001ca8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	2220      	movs	r2, #32
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b20      	cmp	r3, #32
 8001c94:	d108      	bne.n	8001ca8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2221      	movs	r2, #33	; 0x21
 8001c9c:	4252      	negs	r2, r2
 8001c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f000 fa70 	bl	8002188 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ca8:	46c0      	nop			; (mov r8, r8)
 8001caa:	46bd      	mov	sp, r7
 8001cac:	b002      	add	sp, #8
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cba:	230f      	movs	r3, #15
 8001cbc:	18fb      	adds	r3, r7, r3
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	223c      	movs	r2, #60	; 0x3c
 8001cc6:	5c9b      	ldrb	r3, [r3, r2]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d101      	bne.n	8001cd0 <HAL_TIM_ConfigClockSource+0x20>
 8001ccc:	2302      	movs	r3, #2
 8001cce:	e0bc      	b.n	8001e4a <HAL_TIM_ConfigClockSource+0x19a>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	223c      	movs	r2, #60	; 0x3c
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	223d      	movs	r2, #61	; 0x3d
 8001cdc:	2102      	movs	r1, #2
 8001cde:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	2277      	movs	r2, #119	; 0x77
 8001cec:	4393      	bics	r3, r2
 8001cee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	4a58      	ldr	r2, [pc, #352]	; (8001e54 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68ba      	ldr	r2, [r7, #8]
 8001cfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2280      	movs	r2, #128	; 0x80
 8001d06:	0192      	lsls	r2, r2, #6
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d040      	beq.n	8001d8e <HAL_TIM_ConfigClockSource+0xde>
 8001d0c:	2280      	movs	r2, #128	; 0x80
 8001d0e:	0192      	lsls	r2, r2, #6
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d900      	bls.n	8001d16 <HAL_TIM_ConfigClockSource+0x66>
 8001d14:	e088      	b.n	8001e28 <HAL_TIM_ConfigClockSource+0x178>
 8001d16:	2280      	movs	r2, #128	; 0x80
 8001d18:	0152      	lsls	r2, r2, #5
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d100      	bne.n	8001d20 <HAL_TIM_ConfigClockSource+0x70>
 8001d1e:	e088      	b.n	8001e32 <HAL_TIM_ConfigClockSource+0x182>
 8001d20:	2280      	movs	r2, #128	; 0x80
 8001d22:	0152      	lsls	r2, r2, #5
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d900      	bls.n	8001d2a <HAL_TIM_ConfigClockSource+0x7a>
 8001d28:	e07e      	b.n	8001e28 <HAL_TIM_ConfigClockSource+0x178>
 8001d2a:	2b70      	cmp	r3, #112	; 0x70
 8001d2c:	d018      	beq.n	8001d60 <HAL_TIM_ConfigClockSource+0xb0>
 8001d2e:	d900      	bls.n	8001d32 <HAL_TIM_ConfigClockSource+0x82>
 8001d30:	e07a      	b.n	8001e28 <HAL_TIM_ConfigClockSource+0x178>
 8001d32:	2b60      	cmp	r3, #96	; 0x60
 8001d34:	d04f      	beq.n	8001dd6 <HAL_TIM_ConfigClockSource+0x126>
 8001d36:	d900      	bls.n	8001d3a <HAL_TIM_ConfigClockSource+0x8a>
 8001d38:	e076      	b.n	8001e28 <HAL_TIM_ConfigClockSource+0x178>
 8001d3a:	2b50      	cmp	r3, #80	; 0x50
 8001d3c:	d03b      	beq.n	8001db6 <HAL_TIM_ConfigClockSource+0x106>
 8001d3e:	d900      	bls.n	8001d42 <HAL_TIM_ConfigClockSource+0x92>
 8001d40:	e072      	b.n	8001e28 <HAL_TIM_ConfigClockSource+0x178>
 8001d42:	2b40      	cmp	r3, #64	; 0x40
 8001d44:	d057      	beq.n	8001df6 <HAL_TIM_ConfigClockSource+0x146>
 8001d46:	d900      	bls.n	8001d4a <HAL_TIM_ConfigClockSource+0x9a>
 8001d48:	e06e      	b.n	8001e28 <HAL_TIM_ConfigClockSource+0x178>
 8001d4a:	2b30      	cmp	r3, #48	; 0x30
 8001d4c:	d063      	beq.n	8001e16 <HAL_TIM_ConfigClockSource+0x166>
 8001d4e:	d86b      	bhi.n	8001e28 <HAL_TIM_ConfigClockSource+0x178>
 8001d50:	2b20      	cmp	r3, #32
 8001d52:	d060      	beq.n	8001e16 <HAL_TIM_ConfigClockSource+0x166>
 8001d54:	d868      	bhi.n	8001e28 <HAL_TIM_ConfigClockSource+0x178>
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d05d      	beq.n	8001e16 <HAL_TIM_ConfigClockSource+0x166>
 8001d5a:	2b10      	cmp	r3, #16
 8001d5c:	d05b      	beq.n	8001e16 <HAL_TIM_ConfigClockSource+0x166>
 8001d5e:	e063      	b.n	8001e28 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6818      	ldr	r0, [r3, #0]
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	6899      	ldr	r1, [r3, #8]
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f000 f98c 	bl	800208c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	2277      	movs	r2, #119	; 0x77
 8001d80:	4313      	orrs	r3, r2
 8001d82:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68ba      	ldr	r2, [r7, #8]
 8001d8a:	609a      	str	r2, [r3, #8]
      break;
 8001d8c:	e052      	b.n	8001e34 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6818      	ldr	r0, [r3, #0]
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	6899      	ldr	r1, [r3, #8]
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	f000 f975 	bl	800208c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2180      	movs	r1, #128	; 0x80
 8001dae:	01c9      	lsls	r1, r1, #7
 8001db0:	430a      	orrs	r2, r1
 8001db2:	609a      	str	r2, [r3, #8]
      break;
 8001db4:	e03e      	b.n	8001e34 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6818      	ldr	r0, [r3, #0]
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	6859      	ldr	r1, [r3, #4]
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	001a      	movs	r2, r3
 8001dc4:	f000 f8e8 	bl	8001f98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2150      	movs	r1, #80	; 0x50
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f000 f942 	bl	8002058 <TIM_ITRx_SetConfig>
      break;
 8001dd4:	e02e      	b.n	8001e34 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6818      	ldr	r0, [r3, #0]
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	6859      	ldr	r1, [r3, #4]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	001a      	movs	r2, r3
 8001de4:	f000 f906 	bl	8001ff4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2160      	movs	r1, #96	; 0x60
 8001dee:	0018      	movs	r0, r3
 8001df0:	f000 f932 	bl	8002058 <TIM_ITRx_SetConfig>
      break;
 8001df4:	e01e      	b.n	8001e34 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6818      	ldr	r0, [r3, #0]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	6859      	ldr	r1, [r3, #4]
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	001a      	movs	r2, r3
 8001e04:	f000 f8c8 	bl	8001f98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2140      	movs	r1, #64	; 0x40
 8001e0e:	0018      	movs	r0, r3
 8001e10:	f000 f922 	bl	8002058 <TIM_ITRx_SetConfig>
      break;
 8001e14:	e00e      	b.n	8001e34 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	0019      	movs	r1, r3
 8001e20:	0010      	movs	r0, r2
 8001e22:	f000 f919 	bl	8002058 <TIM_ITRx_SetConfig>
      break;
 8001e26:	e005      	b.n	8001e34 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001e28:	230f      	movs	r3, #15
 8001e2a:	18fb      	adds	r3, r7, r3
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	701a      	strb	r2, [r3, #0]
      break;
 8001e30:	e000      	b.n	8001e34 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001e32:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	223d      	movs	r2, #61	; 0x3d
 8001e38:	2101      	movs	r1, #1
 8001e3a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	223c      	movs	r2, #60	; 0x3c
 8001e40:	2100      	movs	r1, #0
 8001e42:	5499      	strb	r1, [r3, r2]

  return status;
 8001e44:	230f      	movs	r3, #15
 8001e46:	18fb      	adds	r3, r7, r3
 8001e48:	781b      	ldrb	r3, [r3, #0]
}
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	b004      	add	sp, #16
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	46c0      	nop			; (mov r8, r8)
 8001e54:	ffff00ff 	.word	0xffff00ff

08001e58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e60:	46c0      	nop			; (mov r8, r8)
 8001e62:	46bd      	mov	sp, r7
 8001e64:	b002      	add	sp, #8
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e70:	46c0      	nop			; (mov r8, r8)
 8001e72:	46bd      	mov	sp, r7
 8001e74:	b002      	add	sp, #8
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e80:	46c0      	nop			; (mov r8, r8)
 8001e82:	46bd      	mov	sp, r7
 8001e84:	b002      	add	sp, #8
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e90:	46c0      	nop			; (mov r8, r8)
 8001e92:	46bd      	mov	sp, r7
 8001e94:	b002      	add	sp, #8
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a34      	ldr	r2, [pc, #208]	; (8001f7c <TIM_Base_SetConfig+0xe4>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d008      	beq.n	8001ec2 <TIM_Base_SetConfig+0x2a>
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	2380      	movs	r3, #128	; 0x80
 8001eb4:	05db      	lsls	r3, r3, #23
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d003      	beq.n	8001ec2 <TIM_Base_SetConfig+0x2a>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a30      	ldr	r2, [pc, #192]	; (8001f80 <TIM_Base_SetConfig+0xe8>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d108      	bne.n	8001ed4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2270      	movs	r2, #112	; 0x70
 8001ec6:	4393      	bics	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a29      	ldr	r2, [pc, #164]	; (8001f7c <TIM_Base_SetConfig+0xe4>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d018      	beq.n	8001f0e <TIM_Base_SetConfig+0x76>
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	2380      	movs	r3, #128	; 0x80
 8001ee0:	05db      	lsls	r3, r3, #23
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d013      	beq.n	8001f0e <TIM_Base_SetConfig+0x76>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a25      	ldr	r2, [pc, #148]	; (8001f80 <TIM_Base_SetConfig+0xe8>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d00f      	beq.n	8001f0e <TIM_Base_SetConfig+0x76>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a24      	ldr	r2, [pc, #144]	; (8001f84 <TIM_Base_SetConfig+0xec>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d00b      	beq.n	8001f0e <TIM_Base_SetConfig+0x76>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a23      	ldr	r2, [pc, #140]	; (8001f88 <TIM_Base_SetConfig+0xf0>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d007      	beq.n	8001f0e <TIM_Base_SetConfig+0x76>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a22      	ldr	r2, [pc, #136]	; (8001f8c <TIM_Base_SetConfig+0xf4>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d003      	beq.n	8001f0e <TIM_Base_SetConfig+0x76>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a21      	ldr	r2, [pc, #132]	; (8001f90 <TIM_Base_SetConfig+0xf8>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d108      	bne.n	8001f20 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	4a20      	ldr	r2, [pc, #128]	; (8001f94 <TIM_Base_SetConfig+0xfc>)
 8001f12:	4013      	ands	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2280      	movs	r2, #128	; 0x80
 8001f24:	4393      	bics	r3, r2
 8001f26:	001a      	movs	r2, r3
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	695b      	ldr	r3, [r3, #20]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	689a      	ldr	r2, [r3, #8]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a0c      	ldr	r2, [pc, #48]	; (8001f7c <TIM_Base_SetConfig+0xe4>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d00b      	beq.n	8001f66 <TIM_Base_SetConfig+0xce>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a0d      	ldr	r2, [pc, #52]	; (8001f88 <TIM_Base_SetConfig+0xf0>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d007      	beq.n	8001f66 <TIM_Base_SetConfig+0xce>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a0c      	ldr	r2, [pc, #48]	; (8001f8c <TIM_Base_SetConfig+0xf4>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d003      	beq.n	8001f66 <TIM_Base_SetConfig+0xce>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a0b      	ldr	r2, [pc, #44]	; (8001f90 <TIM_Base_SetConfig+0xf8>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d103      	bne.n	8001f6e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	691a      	ldr	r2, [r3, #16]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	615a      	str	r2, [r3, #20]
}
 8001f74:	46c0      	nop			; (mov r8, r8)
 8001f76:	46bd      	mov	sp, r7
 8001f78:	b004      	add	sp, #16
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40012c00 	.word	0x40012c00
 8001f80:	40000400 	.word	0x40000400
 8001f84:	40002000 	.word	0x40002000
 8001f88:	40014000 	.word	0x40014000
 8001f8c:	40014400 	.word	0x40014400
 8001f90:	40014800 	.word	0x40014800
 8001f94:	fffffcff 	.word	0xfffffcff

08001f98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	4393      	bics	r3, r2
 8001fb2:	001a      	movs	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	22f0      	movs	r2, #240	; 0xf0
 8001fc2:	4393      	bics	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	011b      	lsls	r3, r3, #4
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	220a      	movs	r2, #10
 8001fd4:	4393      	bics	r3, r2
 8001fd6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	621a      	str	r2, [r3, #32]
}
 8001fec:	46c0      	nop			; (mov r8, r8)
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	b006      	add	sp, #24
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	2210      	movs	r2, #16
 8002006:	4393      	bics	r3, r2
 8002008:	001a      	movs	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	4a0d      	ldr	r2, [pc, #52]	; (8002054 <TIM_TI2_ConfigInputStage+0x60>)
 800201e:	4013      	ands	r3, r2
 8002020:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	031b      	lsls	r3, r3, #12
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	4313      	orrs	r3, r2
 800202a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	22a0      	movs	r2, #160	; 0xa0
 8002030:	4393      	bics	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	011b      	lsls	r3, r3, #4
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	4313      	orrs	r3, r2
 800203c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	621a      	str	r2, [r3, #32]
}
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	46bd      	mov	sp, r7
 800204e:	b006      	add	sp, #24
 8002050:	bd80      	pop	{r7, pc}
 8002052:	46c0      	nop			; (mov r8, r8)
 8002054:	ffff0fff 	.word	0xffff0fff

08002058 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2270      	movs	r2, #112	; 0x70
 800206c:	4393      	bics	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	4313      	orrs	r3, r2
 8002076:	2207      	movs	r2, #7
 8002078:	4313      	orrs	r3, r2
 800207a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	609a      	str	r2, [r3, #8]
}
 8002082:	46c0      	nop			; (mov r8, r8)
 8002084:	46bd      	mov	sp, r7
 8002086:	b004      	add	sp, #16
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
 8002098:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	4a09      	ldr	r2, [pc, #36]	; (80020c8 <TIM_ETR_SetConfig+0x3c>)
 80020a4:	4013      	ands	r3, r2
 80020a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	021a      	lsls	r2, r3, #8
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	431a      	orrs	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	609a      	str	r2, [r3, #8]
}
 80020c0:	46c0      	nop			; (mov r8, r8)
 80020c2:	46bd      	mov	sp, r7
 80020c4:	b006      	add	sp, #24
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	ffff00ff 	.word	0xffff00ff

080020cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	223c      	movs	r2, #60	; 0x3c
 80020da:	5c9b      	ldrb	r3, [r3, r2]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d101      	bne.n	80020e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80020e0:	2302      	movs	r3, #2
 80020e2:	e047      	b.n	8002174 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	223c      	movs	r2, #60	; 0x3c
 80020e8:	2101      	movs	r1, #1
 80020ea:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	223d      	movs	r2, #61	; 0x3d
 80020f0:	2102      	movs	r1, #2
 80020f2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2270      	movs	r2, #112	; 0x70
 8002108:	4393      	bics	r3, r2
 800210a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	4313      	orrs	r3, r2
 8002114:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a16      	ldr	r2, [pc, #88]	; (800217c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d00f      	beq.n	8002148 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	2380      	movs	r3, #128	; 0x80
 800212e:	05db      	lsls	r3, r3, #23
 8002130:	429a      	cmp	r2, r3
 8002132:	d009      	beq.n	8002148 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a11      	ldr	r2, [pc, #68]	; (8002180 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d004      	beq.n	8002148 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a10      	ldr	r2, [pc, #64]	; (8002184 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d10c      	bne.n	8002162 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2280      	movs	r2, #128	; 0x80
 800214c:	4393      	bics	r3, r2
 800214e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	68ba      	ldr	r2, [r7, #8]
 8002156:	4313      	orrs	r3, r2
 8002158:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	223d      	movs	r2, #61	; 0x3d
 8002166:	2101      	movs	r1, #1
 8002168:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	223c      	movs	r2, #60	; 0x3c
 800216e:	2100      	movs	r1, #0
 8002170:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	0018      	movs	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	b004      	add	sp, #16
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40012c00 	.word	0x40012c00
 8002180:	40000400 	.word	0x40000400
 8002184:	40014000 	.word	0x40014000

08002188 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002190:	46c0      	nop			; (mov r8, r8)
 8002192:	46bd      	mov	sp, r7
 8002194:	b002      	add	sp, #8
 8002196:	bd80      	pop	{r7, pc}

08002198 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021a0:	46c0      	nop			; (mov r8, r8)
 80021a2:	46bd      	mov	sp, r7
 80021a4:	b002      	add	sp, #8
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e044      	b.n	8002244 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d107      	bne.n	80021d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2274      	movs	r2, #116	; 0x74
 80021c6:	2100      	movs	r1, #0
 80021c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	0018      	movs	r0, r3
 80021ce:	f7fe fa05 	bl	80005dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2224      	movs	r2, #36	; 0x24
 80021d6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2101      	movs	r1, #1
 80021e4:	438a      	bics	r2, r1
 80021e6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	0018      	movs	r0, r3
 80021ec:	f000 f8da 	bl	80023a4 <UART_SetConfig>
 80021f0:	0003      	movs	r3, r0
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d101      	bne.n	80021fa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e024      	b.n	8002244 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	0018      	movs	r0, r3
 8002206:	f000 fa55 	bl	80026b4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	490d      	ldr	r1, [pc, #52]	; (800224c <HAL_UART_Init+0xa4>)
 8002216:	400a      	ands	r2, r1
 8002218:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	212a      	movs	r1, #42	; 0x2a
 8002226:	438a      	bics	r2, r1
 8002228:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2101      	movs	r1, #1
 8002236:	430a      	orrs	r2, r1
 8002238:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	0018      	movs	r0, r3
 800223e:	f000 faed 	bl	800281c <UART_CheckIdleState>
 8002242:	0003      	movs	r3, r0
}
 8002244:	0018      	movs	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	b002      	add	sp, #8
 800224a:	bd80      	pop	{r7, pc}
 800224c:	ffffb7ff 	.word	0xffffb7ff

08002250 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b08a      	sub	sp, #40	; 0x28
 8002254:	af02      	add	r7, sp, #8
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	603b      	str	r3, [r7, #0]
 800225c:	1dbb      	adds	r3, r7, #6
 800225e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002264:	2b20      	cmp	r3, #32
 8002266:	d000      	beq.n	800226a <HAL_UART_Transmit+0x1a>
 8002268:	e096      	b.n	8002398 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <HAL_UART_Transmit+0x28>
 8002270:	1dbb      	adds	r3, r7, #6
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e08e      	b.n	800239a <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	2380      	movs	r3, #128	; 0x80
 8002282:	015b      	lsls	r3, r3, #5
 8002284:	429a      	cmp	r2, r3
 8002286:	d109      	bne.n	800229c <HAL_UART_Transmit+0x4c>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d105      	bne.n	800229c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	2201      	movs	r2, #1
 8002294:	4013      	ands	r3, r2
 8002296:	d001      	beq.n	800229c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e07e      	b.n	800239a <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2274      	movs	r2, #116	; 0x74
 80022a0:	5c9b      	ldrb	r3, [r3, r2]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d101      	bne.n	80022aa <HAL_UART_Transmit+0x5a>
 80022a6:	2302      	movs	r3, #2
 80022a8:	e077      	b.n	800239a <HAL_UART_Transmit+0x14a>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2274      	movs	r2, #116	; 0x74
 80022ae:	2101      	movs	r1, #1
 80022b0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2280      	movs	r2, #128	; 0x80
 80022b6:	2100      	movs	r1, #0
 80022b8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2221      	movs	r2, #33	; 0x21
 80022be:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022c0:	f7fe fabc 	bl	800083c <HAL_GetTick>
 80022c4:	0003      	movs	r3, r0
 80022c6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	1dba      	adds	r2, r7, #6
 80022cc:	2150      	movs	r1, #80	; 0x50
 80022ce:	8812      	ldrh	r2, [r2, #0]
 80022d0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	1dba      	adds	r2, r7, #6
 80022d6:	2152      	movs	r1, #82	; 0x52
 80022d8:	8812      	ldrh	r2, [r2, #0]
 80022da:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	2380      	movs	r3, #128	; 0x80
 80022e2:	015b      	lsls	r3, r3, #5
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d108      	bne.n	80022fa <HAL_UART_Transmit+0xaa>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d104      	bne.n	80022fa <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	61bb      	str	r3, [r7, #24]
 80022f8:	e003      	b.n	8002302 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2274      	movs	r2, #116	; 0x74
 8002306:	2100      	movs	r1, #0
 8002308:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800230a:	e02d      	b.n	8002368 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	0013      	movs	r3, r2
 8002316:	2200      	movs	r2, #0
 8002318:	2180      	movs	r1, #128	; 0x80
 800231a:	f000 fac7 	bl	80028ac <UART_WaitOnFlagUntilTimeout>
 800231e:	1e03      	subs	r3, r0, #0
 8002320:	d001      	beq.n	8002326 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e039      	b.n	800239a <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d10b      	bne.n	8002344 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	881a      	ldrh	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	05d2      	lsls	r2, r2, #23
 8002336:	0dd2      	lsrs	r2, r2, #23
 8002338:	b292      	uxth	r2, r2
 800233a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	3302      	adds	r3, #2
 8002340:	61bb      	str	r3, [r7, #24]
 8002342:	e008      	b.n	8002356 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	781a      	ldrb	r2, [r3, #0]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	b292      	uxth	r2, r2
 800234e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	3301      	adds	r3, #1
 8002354:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2252      	movs	r2, #82	; 0x52
 800235a:	5a9b      	ldrh	r3, [r3, r2]
 800235c:	b29b      	uxth	r3, r3
 800235e:	3b01      	subs	r3, #1
 8002360:	b299      	uxth	r1, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2252      	movs	r2, #82	; 0x52
 8002366:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2252      	movs	r2, #82	; 0x52
 800236c:	5a9b      	ldrh	r3, [r3, r2]
 800236e:	b29b      	uxth	r3, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1cb      	bne.n	800230c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	0013      	movs	r3, r2
 800237e:	2200      	movs	r2, #0
 8002380:	2140      	movs	r1, #64	; 0x40
 8002382:	f000 fa93 	bl	80028ac <UART_WaitOnFlagUntilTimeout>
 8002386:	1e03      	subs	r3, r0, #0
 8002388:	d001      	beq.n	800238e <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e005      	b.n	800239a <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2220      	movs	r2, #32
 8002392:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002394:	2300      	movs	r3, #0
 8002396:	e000      	b.n	800239a <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002398:	2302      	movs	r3, #2
  }
}
 800239a:	0018      	movs	r0, r3
 800239c:	46bd      	mov	sp, r7
 800239e:	b008      	add	sp, #32
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b088      	sub	sp, #32
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80023ac:	231e      	movs	r3, #30
 80023ae:	18fb      	adds	r3, r7, r3
 80023b0:	2200      	movs	r2, #0
 80023b2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	431a      	orrs	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4aaf      	ldr	r2, [pc, #700]	; (8002690 <UART_SetConfig+0x2ec>)
 80023d4:	4013      	ands	r3, r2
 80023d6:	0019      	movs	r1, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	430a      	orrs	r2, r1
 80023e0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	4aaa      	ldr	r2, [pc, #680]	; (8002694 <UART_SetConfig+0x2f0>)
 80023ea:	4013      	ands	r3, r2
 80023ec:	0019      	movs	r1, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68da      	ldr	r2, [r3, #12]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	4313      	orrs	r3, r2
 8002408:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	4aa1      	ldr	r2, [pc, #644]	; (8002698 <UART_SetConfig+0x2f4>)
 8002412:	4013      	ands	r3, r2
 8002414:	0019      	movs	r1, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	430a      	orrs	r2, r1
 800241e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a9d      	ldr	r2, [pc, #628]	; (800269c <UART_SetConfig+0x2f8>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d127      	bne.n	800247a <UART_SetConfig+0xd6>
 800242a:	4b9d      	ldr	r3, [pc, #628]	; (80026a0 <UART_SetConfig+0x2fc>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	2203      	movs	r2, #3
 8002430:	4013      	ands	r3, r2
 8002432:	2b03      	cmp	r3, #3
 8002434:	d00d      	beq.n	8002452 <UART_SetConfig+0xae>
 8002436:	d81b      	bhi.n	8002470 <UART_SetConfig+0xcc>
 8002438:	2b02      	cmp	r3, #2
 800243a:	d014      	beq.n	8002466 <UART_SetConfig+0xc2>
 800243c:	d818      	bhi.n	8002470 <UART_SetConfig+0xcc>
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <UART_SetConfig+0xa4>
 8002442:	2b01      	cmp	r3, #1
 8002444:	d00a      	beq.n	800245c <UART_SetConfig+0xb8>
 8002446:	e013      	b.n	8002470 <UART_SetConfig+0xcc>
 8002448:	231f      	movs	r3, #31
 800244a:	18fb      	adds	r3, r7, r3
 800244c:	2200      	movs	r2, #0
 800244e:	701a      	strb	r2, [r3, #0]
 8002450:	e065      	b.n	800251e <UART_SetConfig+0x17a>
 8002452:	231f      	movs	r3, #31
 8002454:	18fb      	adds	r3, r7, r3
 8002456:	2202      	movs	r2, #2
 8002458:	701a      	strb	r2, [r3, #0]
 800245a:	e060      	b.n	800251e <UART_SetConfig+0x17a>
 800245c:	231f      	movs	r3, #31
 800245e:	18fb      	adds	r3, r7, r3
 8002460:	2204      	movs	r2, #4
 8002462:	701a      	strb	r2, [r3, #0]
 8002464:	e05b      	b.n	800251e <UART_SetConfig+0x17a>
 8002466:	231f      	movs	r3, #31
 8002468:	18fb      	adds	r3, r7, r3
 800246a:	2208      	movs	r2, #8
 800246c:	701a      	strb	r2, [r3, #0]
 800246e:	e056      	b.n	800251e <UART_SetConfig+0x17a>
 8002470:	231f      	movs	r3, #31
 8002472:	18fb      	adds	r3, r7, r3
 8002474:	2210      	movs	r2, #16
 8002476:	701a      	strb	r2, [r3, #0]
 8002478:	e051      	b.n	800251e <UART_SetConfig+0x17a>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a89      	ldr	r2, [pc, #548]	; (80026a4 <UART_SetConfig+0x300>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d134      	bne.n	80024ee <UART_SetConfig+0x14a>
 8002484:	4b86      	ldr	r3, [pc, #536]	; (80026a0 <UART_SetConfig+0x2fc>)
 8002486:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002488:	23c0      	movs	r3, #192	; 0xc0
 800248a:	029b      	lsls	r3, r3, #10
 800248c:	4013      	ands	r3, r2
 800248e:	22c0      	movs	r2, #192	; 0xc0
 8002490:	0292      	lsls	r2, r2, #10
 8002492:	4293      	cmp	r3, r2
 8002494:	d017      	beq.n	80024c6 <UART_SetConfig+0x122>
 8002496:	22c0      	movs	r2, #192	; 0xc0
 8002498:	0292      	lsls	r2, r2, #10
 800249a:	4293      	cmp	r3, r2
 800249c:	d822      	bhi.n	80024e4 <UART_SetConfig+0x140>
 800249e:	2280      	movs	r2, #128	; 0x80
 80024a0:	0292      	lsls	r2, r2, #10
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d019      	beq.n	80024da <UART_SetConfig+0x136>
 80024a6:	2280      	movs	r2, #128	; 0x80
 80024a8:	0292      	lsls	r2, r2, #10
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d81a      	bhi.n	80024e4 <UART_SetConfig+0x140>
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d004      	beq.n	80024bc <UART_SetConfig+0x118>
 80024b2:	2280      	movs	r2, #128	; 0x80
 80024b4:	0252      	lsls	r2, r2, #9
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d00a      	beq.n	80024d0 <UART_SetConfig+0x12c>
 80024ba:	e013      	b.n	80024e4 <UART_SetConfig+0x140>
 80024bc:	231f      	movs	r3, #31
 80024be:	18fb      	adds	r3, r7, r3
 80024c0:	2200      	movs	r2, #0
 80024c2:	701a      	strb	r2, [r3, #0]
 80024c4:	e02b      	b.n	800251e <UART_SetConfig+0x17a>
 80024c6:	231f      	movs	r3, #31
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	2202      	movs	r2, #2
 80024cc:	701a      	strb	r2, [r3, #0]
 80024ce:	e026      	b.n	800251e <UART_SetConfig+0x17a>
 80024d0:	231f      	movs	r3, #31
 80024d2:	18fb      	adds	r3, r7, r3
 80024d4:	2204      	movs	r2, #4
 80024d6:	701a      	strb	r2, [r3, #0]
 80024d8:	e021      	b.n	800251e <UART_SetConfig+0x17a>
 80024da:	231f      	movs	r3, #31
 80024dc:	18fb      	adds	r3, r7, r3
 80024de:	2208      	movs	r2, #8
 80024e0:	701a      	strb	r2, [r3, #0]
 80024e2:	e01c      	b.n	800251e <UART_SetConfig+0x17a>
 80024e4:	231f      	movs	r3, #31
 80024e6:	18fb      	adds	r3, r7, r3
 80024e8:	2210      	movs	r2, #16
 80024ea:	701a      	strb	r2, [r3, #0]
 80024ec:	e017      	b.n	800251e <UART_SetConfig+0x17a>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a6d      	ldr	r2, [pc, #436]	; (80026a8 <UART_SetConfig+0x304>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d104      	bne.n	8002502 <UART_SetConfig+0x15e>
 80024f8:	231f      	movs	r3, #31
 80024fa:	18fb      	adds	r3, r7, r3
 80024fc:	2200      	movs	r2, #0
 80024fe:	701a      	strb	r2, [r3, #0]
 8002500:	e00d      	b.n	800251e <UART_SetConfig+0x17a>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a69      	ldr	r2, [pc, #420]	; (80026ac <UART_SetConfig+0x308>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d104      	bne.n	8002516 <UART_SetConfig+0x172>
 800250c:	231f      	movs	r3, #31
 800250e:	18fb      	adds	r3, r7, r3
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]
 8002514:	e003      	b.n	800251e <UART_SetConfig+0x17a>
 8002516:	231f      	movs	r3, #31
 8002518:	18fb      	adds	r3, r7, r3
 800251a:	2210      	movs	r2, #16
 800251c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69da      	ldr	r2, [r3, #28]
 8002522:	2380      	movs	r3, #128	; 0x80
 8002524:	021b      	lsls	r3, r3, #8
 8002526:	429a      	cmp	r2, r3
 8002528:	d15d      	bne.n	80025e6 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 800252a:	231f      	movs	r3, #31
 800252c:	18fb      	adds	r3, r7, r3
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b08      	cmp	r3, #8
 8002532:	d015      	beq.n	8002560 <UART_SetConfig+0x1bc>
 8002534:	dc18      	bgt.n	8002568 <UART_SetConfig+0x1c4>
 8002536:	2b04      	cmp	r3, #4
 8002538:	d00d      	beq.n	8002556 <UART_SetConfig+0x1b2>
 800253a:	dc15      	bgt.n	8002568 <UART_SetConfig+0x1c4>
 800253c:	2b00      	cmp	r3, #0
 800253e:	d002      	beq.n	8002546 <UART_SetConfig+0x1a2>
 8002540:	2b02      	cmp	r3, #2
 8002542:	d005      	beq.n	8002550 <UART_SetConfig+0x1ac>
 8002544:	e010      	b.n	8002568 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002546:	f7ff f8e7 	bl	8001718 <HAL_RCC_GetPCLK1Freq>
 800254a:	0003      	movs	r3, r0
 800254c:	61bb      	str	r3, [r7, #24]
        break;
 800254e:	e012      	b.n	8002576 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002550:	4b57      	ldr	r3, [pc, #348]	; (80026b0 <UART_SetConfig+0x30c>)
 8002552:	61bb      	str	r3, [r7, #24]
        break;
 8002554:	e00f      	b.n	8002576 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002556:	f7ff f855 	bl	8001604 <HAL_RCC_GetSysClockFreq>
 800255a:	0003      	movs	r3, r0
 800255c:	61bb      	str	r3, [r7, #24]
        break;
 800255e:	e00a      	b.n	8002576 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002560:	2380      	movs	r3, #128	; 0x80
 8002562:	021b      	lsls	r3, r3, #8
 8002564:	61bb      	str	r3, [r7, #24]
        break;
 8002566:	e006      	b.n	8002576 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002568:	2300      	movs	r3, #0
 800256a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800256c:	231e      	movs	r3, #30
 800256e:	18fb      	adds	r3, r7, r3
 8002570:	2201      	movs	r2, #1
 8002572:	701a      	strb	r2, [r3, #0]
        break;
 8002574:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d100      	bne.n	800257e <UART_SetConfig+0x1da>
 800257c:	e07b      	b.n	8002676 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	005a      	lsls	r2, r3, #1
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	085b      	lsrs	r3, r3, #1
 8002588:	18d2      	adds	r2, r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	0019      	movs	r1, r3
 8002590:	0010      	movs	r0, r2
 8002592:	f7fd fdc3 	bl	800011c <__udivsi3>
 8002596:	0003      	movs	r3, r0
 8002598:	b29b      	uxth	r3, r3
 800259a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	2b0f      	cmp	r3, #15
 80025a0:	d91c      	bls.n	80025dc <UART_SetConfig+0x238>
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	2380      	movs	r3, #128	; 0x80
 80025a6:	025b      	lsls	r3, r3, #9
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d217      	bcs.n	80025dc <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	200e      	movs	r0, #14
 80025b2:	183b      	adds	r3, r7, r0
 80025b4:	210f      	movs	r1, #15
 80025b6:	438a      	bics	r2, r1
 80025b8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	085b      	lsrs	r3, r3, #1
 80025be:	b29b      	uxth	r3, r3
 80025c0:	2207      	movs	r2, #7
 80025c2:	4013      	ands	r3, r2
 80025c4:	b299      	uxth	r1, r3
 80025c6:	183b      	adds	r3, r7, r0
 80025c8:	183a      	adds	r2, r7, r0
 80025ca:	8812      	ldrh	r2, [r2, #0]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	183a      	adds	r2, r7, r0
 80025d6:	8812      	ldrh	r2, [r2, #0]
 80025d8:	60da      	str	r2, [r3, #12]
 80025da:	e04c      	b.n	8002676 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 80025dc:	231e      	movs	r3, #30
 80025de:	18fb      	adds	r3, r7, r3
 80025e0:	2201      	movs	r2, #1
 80025e2:	701a      	strb	r2, [r3, #0]
 80025e4:	e047      	b.n	8002676 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80025e6:	231f      	movs	r3, #31
 80025e8:	18fb      	adds	r3, r7, r3
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b08      	cmp	r3, #8
 80025ee:	d015      	beq.n	800261c <UART_SetConfig+0x278>
 80025f0:	dc18      	bgt.n	8002624 <UART_SetConfig+0x280>
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d00d      	beq.n	8002612 <UART_SetConfig+0x26e>
 80025f6:	dc15      	bgt.n	8002624 <UART_SetConfig+0x280>
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <UART_SetConfig+0x25e>
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d005      	beq.n	800260c <UART_SetConfig+0x268>
 8002600:	e010      	b.n	8002624 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002602:	f7ff f889 	bl	8001718 <HAL_RCC_GetPCLK1Freq>
 8002606:	0003      	movs	r3, r0
 8002608:	61bb      	str	r3, [r7, #24]
        break;
 800260a:	e012      	b.n	8002632 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800260c:	4b28      	ldr	r3, [pc, #160]	; (80026b0 <UART_SetConfig+0x30c>)
 800260e:	61bb      	str	r3, [r7, #24]
        break;
 8002610:	e00f      	b.n	8002632 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002612:	f7fe fff7 	bl	8001604 <HAL_RCC_GetSysClockFreq>
 8002616:	0003      	movs	r3, r0
 8002618:	61bb      	str	r3, [r7, #24]
        break;
 800261a:	e00a      	b.n	8002632 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800261c:	2380      	movs	r3, #128	; 0x80
 800261e:	021b      	lsls	r3, r3, #8
 8002620:	61bb      	str	r3, [r7, #24]
        break;
 8002622:	e006      	b.n	8002632 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8002624:	2300      	movs	r3, #0
 8002626:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002628:	231e      	movs	r3, #30
 800262a:	18fb      	adds	r3, r7, r3
 800262c:	2201      	movs	r2, #1
 800262e:	701a      	strb	r2, [r3, #0]
        break;
 8002630:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d01e      	beq.n	8002676 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	085a      	lsrs	r2, r3, #1
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	18d2      	adds	r2, r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	0019      	movs	r1, r3
 8002648:	0010      	movs	r0, r2
 800264a:	f7fd fd67 	bl	800011c <__udivsi3>
 800264e:	0003      	movs	r3, r0
 8002650:	b29b      	uxth	r3, r3
 8002652:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	2b0f      	cmp	r3, #15
 8002658:	d909      	bls.n	800266e <UART_SetConfig+0x2ca>
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	2380      	movs	r3, #128	; 0x80
 800265e:	025b      	lsls	r3, r3, #9
 8002660:	429a      	cmp	r2, r3
 8002662:	d204      	bcs.n	800266e <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	60da      	str	r2, [r3, #12]
 800266c:	e003      	b.n	8002676 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 800266e:	231e      	movs	r3, #30
 8002670:	18fb      	adds	r3, r7, r3
 8002672:	2201      	movs	r2, #1
 8002674:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002682:	231e      	movs	r3, #30
 8002684:	18fb      	adds	r3, r7, r3
 8002686:	781b      	ldrb	r3, [r3, #0]
}
 8002688:	0018      	movs	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	b008      	add	sp, #32
 800268e:	bd80      	pop	{r7, pc}
 8002690:	efff69f3 	.word	0xefff69f3
 8002694:	ffffcfff 	.word	0xffffcfff
 8002698:	fffff4ff 	.word	0xfffff4ff
 800269c:	40013800 	.word	0x40013800
 80026a0:	40021000 	.word	0x40021000
 80026a4:	40004400 	.word	0x40004400
 80026a8:	40004800 	.word	0x40004800
 80026ac:	40004c00 	.word	0x40004c00
 80026b0:	007a1200 	.word	0x007a1200

080026b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	2201      	movs	r2, #1
 80026c2:	4013      	ands	r3, r2
 80026c4:	d00b      	beq.n	80026de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	4a4a      	ldr	r2, [pc, #296]	; (80027f8 <UART_AdvFeatureConfig+0x144>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	0019      	movs	r1, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e2:	2202      	movs	r2, #2
 80026e4:	4013      	ands	r3, r2
 80026e6:	d00b      	beq.n	8002700 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	4a43      	ldr	r2, [pc, #268]	; (80027fc <UART_AdvFeatureConfig+0x148>)
 80026f0:	4013      	ands	r3, r2
 80026f2:	0019      	movs	r1, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	2204      	movs	r2, #4
 8002706:	4013      	ands	r3, r2
 8002708:	d00b      	beq.n	8002722 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	4a3b      	ldr	r2, [pc, #236]	; (8002800 <UART_AdvFeatureConfig+0x14c>)
 8002712:	4013      	ands	r3, r2
 8002714:	0019      	movs	r1, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	430a      	orrs	r2, r1
 8002720:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	2208      	movs	r2, #8
 8002728:	4013      	ands	r3, r2
 800272a:	d00b      	beq.n	8002744 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	4a34      	ldr	r2, [pc, #208]	; (8002804 <UART_AdvFeatureConfig+0x150>)
 8002734:	4013      	ands	r3, r2
 8002736:	0019      	movs	r1, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	2210      	movs	r2, #16
 800274a:	4013      	ands	r3, r2
 800274c:	d00b      	beq.n	8002766 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	4a2c      	ldr	r2, [pc, #176]	; (8002808 <UART_AdvFeatureConfig+0x154>)
 8002756:	4013      	ands	r3, r2
 8002758:	0019      	movs	r1, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	430a      	orrs	r2, r1
 8002764:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276a:	2220      	movs	r2, #32
 800276c:	4013      	ands	r3, r2
 800276e:	d00b      	beq.n	8002788 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	4a25      	ldr	r2, [pc, #148]	; (800280c <UART_AdvFeatureConfig+0x158>)
 8002778:	4013      	ands	r3, r2
 800277a:	0019      	movs	r1, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	2240      	movs	r2, #64	; 0x40
 800278e:	4013      	ands	r3, r2
 8002790:	d01d      	beq.n	80027ce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	4a1d      	ldr	r2, [pc, #116]	; (8002810 <UART_AdvFeatureConfig+0x15c>)
 800279a:	4013      	ands	r3, r2
 800279c:	0019      	movs	r1, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027ae:	2380      	movs	r3, #128	; 0x80
 80027b0:	035b      	lsls	r3, r3, #13
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d10b      	bne.n	80027ce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	4a15      	ldr	r2, [pc, #84]	; (8002814 <UART_AdvFeatureConfig+0x160>)
 80027be:	4013      	ands	r3, r2
 80027c0:	0019      	movs	r1, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	2280      	movs	r2, #128	; 0x80
 80027d4:	4013      	ands	r3, r2
 80027d6:	d00b      	beq.n	80027f0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	4a0e      	ldr	r2, [pc, #56]	; (8002818 <UART_AdvFeatureConfig+0x164>)
 80027e0:	4013      	ands	r3, r2
 80027e2:	0019      	movs	r1, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	605a      	str	r2, [r3, #4]
  }
}
 80027f0:	46c0      	nop			; (mov r8, r8)
 80027f2:	46bd      	mov	sp, r7
 80027f4:	b002      	add	sp, #8
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	fffdffff 	.word	0xfffdffff
 80027fc:	fffeffff 	.word	0xfffeffff
 8002800:	fffbffff 	.word	0xfffbffff
 8002804:	ffff7fff 	.word	0xffff7fff
 8002808:	ffffefff 	.word	0xffffefff
 800280c:	ffffdfff 	.word	0xffffdfff
 8002810:	ffefffff 	.word	0xffefffff
 8002814:	ff9fffff 	.word	0xff9fffff
 8002818:	fff7ffff 	.word	0xfff7ffff

0800281c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af02      	add	r7, sp, #8
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2280      	movs	r2, #128	; 0x80
 8002828:	2100      	movs	r1, #0
 800282a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800282c:	f7fe f806 	bl	800083c <HAL_GetTick>
 8002830:	0003      	movs	r3, r0
 8002832:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2208      	movs	r2, #8
 800283c:	4013      	ands	r3, r2
 800283e:	2b08      	cmp	r3, #8
 8002840:	d10c      	bne.n	800285c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2280      	movs	r2, #128	; 0x80
 8002846:	0391      	lsls	r1, r2, #14
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	4a17      	ldr	r2, [pc, #92]	; (80028a8 <UART_CheckIdleState+0x8c>)
 800284c:	9200      	str	r2, [sp, #0]
 800284e:	2200      	movs	r2, #0
 8002850:	f000 f82c 	bl	80028ac <UART_WaitOnFlagUntilTimeout>
 8002854:	1e03      	subs	r3, r0, #0
 8002856:	d001      	beq.n	800285c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e021      	b.n	80028a0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2204      	movs	r2, #4
 8002864:	4013      	ands	r3, r2
 8002866:	2b04      	cmp	r3, #4
 8002868:	d10c      	bne.n	8002884 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2280      	movs	r2, #128	; 0x80
 800286e:	03d1      	lsls	r1, r2, #15
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	4a0d      	ldr	r2, [pc, #52]	; (80028a8 <UART_CheckIdleState+0x8c>)
 8002874:	9200      	str	r2, [sp, #0]
 8002876:	2200      	movs	r2, #0
 8002878:	f000 f818 	bl	80028ac <UART_WaitOnFlagUntilTimeout>
 800287c:	1e03      	subs	r3, r0, #0
 800287e:	d001      	beq.n	8002884 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e00d      	b.n	80028a0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2220      	movs	r2, #32
 8002888:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2220      	movs	r2, #32
 800288e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2274      	movs	r2, #116	; 0x74
 800289a:	2100      	movs	r1, #0
 800289c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	0018      	movs	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	b004      	add	sp, #16
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	01ffffff 	.word	0x01ffffff

080028ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b094      	sub	sp, #80	; 0x50
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	603b      	str	r3, [r7, #0]
 80028b8:	1dfb      	adds	r3, r7, #7
 80028ba:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028bc:	e0a3      	b.n	8002a06 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028c0:	3301      	adds	r3, #1
 80028c2:	d100      	bne.n	80028c6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80028c4:	e09f      	b.n	8002a06 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028c6:	f7fd ffb9 	bl	800083c <HAL_GetTick>
 80028ca:	0002      	movs	r2, r0
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d302      	bcc.n	80028dc <UART_WaitOnFlagUntilTimeout+0x30>
 80028d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d13d      	bne.n	8002958 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028dc:	f3ef 8310 	mrs	r3, PRIMASK
 80028e0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80028e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028e4:	647b      	str	r3, [r7, #68]	; 0x44
 80028e6:	2301      	movs	r3, #1
 80028e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ec:	f383 8810 	msr	PRIMASK, r3
}
 80028f0:	46c0      	nop			; (mov r8, r8)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	494c      	ldr	r1, [pc, #304]	; (8002a30 <UART_WaitOnFlagUntilTimeout+0x184>)
 80028fe:	400a      	ands	r2, r1
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002904:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002908:	f383 8810 	msr	PRIMASK, r3
}
 800290c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800290e:	f3ef 8310 	mrs	r3, PRIMASK
 8002912:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002916:	643b      	str	r3, [r7, #64]	; 0x40
 8002918:	2301      	movs	r3, #1
 800291a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800291c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800291e:	f383 8810 	msr	PRIMASK, r3
}
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2101      	movs	r1, #1
 8002930:	438a      	bics	r2, r1
 8002932:	609a      	str	r2, [r3, #8]
 8002934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002936:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800293a:	f383 8810 	msr	PRIMASK, r3
}
 800293e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2220      	movs	r2, #32
 8002944:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2220      	movs	r2, #32
 800294a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2274      	movs	r2, #116	; 0x74
 8002950:	2100      	movs	r1, #0
 8002952:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e067      	b.n	8002a28 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2204      	movs	r2, #4
 8002960:	4013      	ands	r3, r2
 8002962:	d050      	beq.n	8002a06 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	69da      	ldr	r2, [r3, #28]
 800296a:	2380      	movs	r3, #128	; 0x80
 800296c:	011b      	lsls	r3, r3, #4
 800296e:	401a      	ands	r2, r3
 8002970:	2380      	movs	r3, #128	; 0x80
 8002972:	011b      	lsls	r3, r3, #4
 8002974:	429a      	cmp	r2, r3
 8002976:	d146      	bne.n	8002a06 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2280      	movs	r2, #128	; 0x80
 800297e:	0112      	lsls	r2, r2, #4
 8002980:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002982:	f3ef 8310 	mrs	r3, PRIMASK
 8002986:	613b      	str	r3, [r7, #16]
  return(result);
 8002988:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800298a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800298c:	2301      	movs	r3, #1
 800298e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	f383 8810 	msr	PRIMASK, r3
}
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4923      	ldr	r1, [pc, #140]	; (8002a30 <UART_WaitOnFlagUntilTimeout+0x184>)
 80029a4:	400a      	ands	r2, r1
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029aa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	f383 8810 	msr	PRIMASK, r3
}
 80029b2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029b4:	f3ef 8310 	mrs	r3, PRIMASK
 80029b8:	61fb      	str	r3, [r7, #28]
  return(result);
 80029ba:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80029be:	2301      	movs	r3, #1
 80029c0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029c2:	6a3b      	ldr	r3, [r7, #32]
 80029c4:	f383 8810 	msr	PRIMASK, r3
}
 80029c8:	46c0      	nop			; (mov r8, r8)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2101      	movs	r1, #1
 80029d6:	438a      	bics	r2, r1
 80029d8:	609a      	str	r2, [r3, #8]
 80029da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029dc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	f383 8810 	msr	PRIMASK, r3
}
 80029e4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2220      	movs	r2, #32
 80029ea:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2220      	movs	r2, #32
 80029f0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2280      	movs	r2, #128	; 0x80
 80029f6:	2120      	movs	r1, #32
 80029f8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2274      	movs	r2, #116	; 0x74
 80029fe:	2100      	movs	r1, #0
 8002a00:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e010      	b.n	8002a28 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	425a      	negs	r2, r3
 8002a16:	4153      	adcs	r3, r2
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	001a      	movs	r2, r3
 8002a1c:	1dfb      	adds	r3, r7, #7
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d100      	bne.n	8002a26 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002a24:	e74b      	b.n	80028be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	0018      	movs	r0, r3
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	b014      	add	sp, #80	; 0x50
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	fffffe5f 	.word	0xfffffe5f

08002a34 <__errno>:
 8002a34:	4b01      	ldr	r3, [pc, #4]	; (8002a3c <__errno+0x8>)
 8002a36:	6818      	ldr	r0, [r3, #0]
 8002a38:	4770      	bx	lr
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	20000040 	.word	0x20000040

08002a40 <__libc_init_array>:
 8002a40:	b570      	push	{r4, r5, r6, lr}
 8002a42:	2600      	movs	r6, #0
 8002a44:	4d0c      	ldr	r5, [pc, #48]	; (8002a78 <__libc_init_array+0x38>)
 8002a46:	4c0d      	ldr	r4, [pc, #52]	; (8002a7c <__libc_init_array+0x3c>)
 8002a48:	1b64      	subs	r4, r4, r5
 8002a4a:	10a4      	asrs	r4, r4, #2
 8002a4c:	42a6      	cmp	r6, r4
 8002a4e:	d109      	bne.n	8002a64 <__libc_init_array+0x24>
 8002a50:	2600      	movs	r6, #0
 8002a52:	f000 fc8b 	bl	800336c <_init>
 8002a56:	4d0a      	ldr	r5, [pc, #40]	; (8002a80 <__libc_init_array+0x40>)
 8002a58:	4c0a      	ldr	r4, [pc, #40]	; (8002a84 <__libc_init_array+0x44>)
 8002a5a:	1b64      	subs	r4, r4, r5
 8002a5c:	10a4      	asrs	r4, r4, #2
 8002a5e:	42a6      	cmp	r6, r4
 8002a60:	d105      	bne.n	8002a6e <__libc_init_array+0x2e>
 8002a62:	bd70      	pop	{r4, r5, r6, pc}
 8002a64:	00b3      	lsls	r3, r6, #2
 8002a66:	58eb      	ldr	r3, [r5, r3]
 8002a68:	4798      	blx	r3
 8002a6a:	3601      	adds	r6, #1
 8002a6c:	e7ee      	b.n	8002a4c <__libc_init_array+0xc>
 8002a6e:	00b3      	lsls	r3, r6, #2
 8002a70:	58eb      	ldr	r3, [r5, r3]
 8002a72:	4798      	blx	r3
 8002a74:	3601      	adds	r6, #1
 8002a76:	e7f2      	b.n	8002a5e <__libc_init_array+0x1e>
 8002a78:	08003408 	.word	0x08003408
 8002a7c:	08003408 	.word	0x08003408
 8002a80:	08003408 	.word	0x08003408
 8002a84:	0800340c 	.word	0x0800340c

08002a88 <memset>:
 8002a88:	0003      	movs	r3, r0
 8002a8a:	1882      	adds	r2, r0, r2
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d100      	bne.n	8002a92 <memset+0xa>
 8002a90:	4770      	bx	lr
 8002a92:	7019      	strb	r1, [r3, #0]
 8002a94:	3301      	adds	r3, #1
 8002a96:	e7f9      	b.n	8002a8c <memset+0x4>

08002a98 <siprintf>:
 8002a98:	b40e      	push	{r1, r2, r3}
 8002a9a:	b500      	push	{lr}
 8002a9c:	490b      	ldr	r1, [pc, #44]	; (8002acc <siprintf+0x34>)
 8002a9e:	b09c      	sub	sp, #112	; 0x70
 8002aa0:	ab1d      	add	r3, sp, #116	; 0x74
 8002aa2:	9002      	str	r0, [sp, #8]
 8002aa4:	9006      	str	r0, [sp, #24]
 8002aa6:	9107      	str	r1, [sp, #28]
 8002aa8:	9104      	str	r1, [sp, #16]
 8002aaa:	4809      	ldr	r0, [pc, #36]	; (8002ad0 <siprintf+0x38>)
 8002aac:	4909      	ldr	r1, [pc, #36]	; (8002ad4 <siprintf+0x3c>)
 8002aae:	cb04      	ldmia	r3!, {r2}
 8002ab0:	9105      	str	r1, [sp, #20]
 8002ab2:	6800      	ldr	r0, [r0, #0]
 8002ab4:	a902      	add	r1, sp, #8
 8002ab6:	9301      	str	r3, [sp, #4]
 8002ab8:	f000 f870 	bl	8002b9c <_svfiprintf_r>
 8002abc:	2300      	movs	r3, #0
 8002abe:	9a02      	ldr	r2, [sp, #8]
 8002ac0:	7013      	strb	r3, [r2, #0]
 8002ac2:	b01c      	add	sp, #112	; 0x70
 8002ac4:	bc08      	pop	{r3}
 8002ac6:	b003      	add	sp, #12
 8002ac8:	4718      	bx	r3
 8002aca:	46c0      	nop			; (mov r8, r8)
 8002acc:	7fffffff 	.word	0x7fffffff
 8002ad0:	20000040 	.word	0x20000040
 8002ad4:	ffff0208 	.word	0xffff0208

08002ad8 <__ssputs_r>:
 8002ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ada:	688e      	ldr	r6, [r1, #8]
 8002adc:	b085      	sub	sp, #20
 8002ade:	0007      	movs	r7, r0
 8002ae0:	000c      	movs	r4, r1
 8002ae2:	9203      	str	r2, [sp, #12]
 8002ae4:	9301      	str	r3, [sp, #4]
 8002ae6:	429e      	cmp	r6, r3
 8002ae8:	d83c      	bhi.n	8002b64 <__ssputs_r+0x8c>
 8002aea:	2390      	movs	r3, #144	; 0x90
 8002aec:	898a      	ldrh	r2, [r1, #12]
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	421a      	tst	r2, r3
 8002af2:	d034      	beq.n	8002b5e <__ssputs_r+0x86>
 8002af4:	6909      	ldr	r1, [r1, #16]
 8002af6:	6823      	ldr	r3, [r4, #0]
 8002af8:	6960      	ldr	r0, [r4, #20]
 8002afa:	1a5b      	subs	r3, r3, r1
 8002afc:	9302      	str	r3, [sp, #8]
 8002afe:	2303      	movs	r3, #3
 8002b00:	4343      	muls	r3, r0
 8002b02:	0fdd      	lsrs	r5, r3, #31
 8002b04:	18ed      	adds	r5, r5, r3
 8002b06:	9b01      	ldr	r3, [sp, #4]
 8002b08:	9802      	ldr	r0, [sp, #8]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	181b      	adds	r3, r3, r0
 8002b0e:	106d      	asrs	r5, r5, #1
 8002b10:	42ab      	cmp	r3, r5
 8002b12:	d900      	bls.n	8002b16 <__ssputs_r+0x3e>
 8002b14:	001d      	movs	r5, r3
 8002b16:	0553      	lsls	r3, r2, #21
 8002b18:	d532      	bpl.n	8002b80 <__ssputs_r+0xa8>
 8002b1a:	0029      	movs	r1, r5
 8002b1c:	0038      	movs	r0, r7
 8002b1e:	f000 fb53 	bl	80031c8 <_malloc_r>
 8002b22:	1e06      	subs	r6, r0, #0
 8002b24:	d109      	bne.n	8002b3a <__ssputs_r+0x62>
 8002b26:	230c      	movs	r3, #12
 8002b28:	603b      	str	r3, [r7, #0]
 8002b2a:	2340      	movs	r3, #64	; 0x40
 8002b2c:	2001      	movs	r0, #1
 8002b2e:	89a2      	ldrh	r2, [r4, #12]
 8002b30:	4240      	negs	r0, r0
 8002b32:	4313      	orrs	r3, r2
 8002b34:	81a3      	strh	r3, [r4, #12]
 8002b36:	b005      	add	sp, #20
 8002b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b3a:	9a02      	ldr	r2, [sp, #8]
 8002b3c:	6921      	ldr	r1, [r4, #16]
 8002b3e:	f000 faba 	bl	80030b6 <memcpy>
 8002b42:	89a3      	ldrh	r3, [r4, #12]
 8002b44:	4a14      	ldr	r2, [pc, #80]	; (8002b98 <__ssputs_r+0xc0>)
 8002b46:	401a      	ands	r2, r3
 8002b48:	2380      	movs	r3, #128	; 0x80
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	81a3      	strh	r3, [r4, #12]
 8002b4e:	9b02      	ldr	r3, [sp, #8]
 8002b50:	6126      	str	r6, [r4, #16]
 8002b52:	18f6      	adds	r6, r6, r3
 8002b54:	6026      	str	r6, [r4, #0]
 8002b56:	6165      	str	r5, [r4, #20]
 8002b58:	9e01      	ldr	r6, [sp, #4]
 8002b5a:	1aed      	subs	r5, r5, r3
 8002b5c:	60a5      	str	r5, [r4, #8]
 8002b5e:	9b01      	ldr	r3, [sp, #4]
 8002b60:	429e      	cmp	r6, r3
 8002b62:	d900      	bls.n	8002b66 <__ssputs_r+0x8e>
 8002b64:	9e01      	ldr	r6, [sp, #4]
 8002b66:	0032      	movs	r2, r6
 8002b68:	9903      	ldr	r1, [sp, #12]
 8002b6a:	6820      	ldr	r0, [r4, #0]
 8002b6c:	f000 faac 	bl	80030c8 <memmove>
 8002b70:	68a3      	ldr	r3, [r4, #8]
 8002b72:	2000      	movs	r0, #0
 8002b74:	1b9b      	subs	r3, r3, r6
 8002b76:	60a3      	str	r3, [r4, #8]
 8002b78:	6823      	ldr	r3, [r4, #0]
 8002b7a:	199e      	adds	r6, r3, r6
 8002b7c:	6026      	str	r6, [r4, #0]
 8002b7e:	e7da      	b.n	8002b36 <__ssputs_r+0x5e>
 8002b80:	002a      	movs	r2, r5
 8002b82:	0038      	movs	r0, r7
 8002b84:	f000 fb96 	bl	80032b4 <_realloc_r>
 8002b88:	1e06      	subs	r6, r0, #0
 8002b8a:	d1e0      	bne.n	8002b4e <__ssputs_r+0x76>
 8002b8c:	0038      	movs	r0, r7
 8002b8e:	6921      	ldr	r1, [r4, #16]
 8002b90:	f000 faae 	bl	80030f0 <_free_r>
 8002b94:	e7c7      	b.n	8002b26 <__ssputs_r+0x4e>
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	fffffb7f 	.word	0xfffffb7f

08002b9c <_svfiprintf_r>:
 8002b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b9e:	b0a1      	sub	sp, #132	; 0x84
 8002ba0:	9003      	str	r0, [sp, #12]
 8002ba2:	001d      	movs	r5, r3
 8002ba4:	898b      	ldrh	r3, [r1, #12]
 8002ba6:	000f      	movs	r7, r1
 8002ba8:	0016      	movs	r6, r2
 8002baa:	061b      	lsls	r3, r3, #24
 8002bac:	d511      	bpl.n	8002bd2 <_svfiprintf_r+0x36>
 8002bae:	690b      	ldr	r3, [r1, #16]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10e      	bne.n	8002bd2 <_svfiprintf_r+0x36>
 8002bb4:	2140      	movs	r1, #64	; 0x40
 8002bb6:	f000 fb07 	bl	80031c8 <_malloc_r>
 8002bba:	6038      	str	r0, [r7, #0]
 8002bbc:	6138      	str	r0, [r7, #16]
 8002bbe:	2800      	cmp	r0, #0
 8002bc0:	d105      	bne.n	8002bce <_svfiprintf_r+0x32>
 8002bc2:	230c      	movs	r3, #12
 8002bc4:	9a03      	ldr	r2, [sp, #12]
 8002bc6:	3801      	subs	r0, #1
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	b021      	add	sp, #132	; 0x84
 8002bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bce:	2340      	movs	r3, #64	; 0x40
 8002bd0:	617b      	str	r3, [r7, #20]
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	ac08      	add	r4, sp, #32
 8002bd6:	6163      	str	r3, [r4, #20]
 8002bd8:	3320      	adds	r3, #32
 8002bda:	7663      	strb	r3, [r4, #25]
 8002bdc:	3310      	adds	r3, #16
 8002bde:	76a3      	strb	r3, [r4, #26]
 8002be0:	9507      	str	r5, [sp, #28]
 8002be2:	0035      	movs	r5, r6
 8002be4:	782b      	ldrb	r3, [r5, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <_svfiprintf_r+0x52>
 8002bea:	2b25      	cmp	r3, #37	; 0x25
 8002bec:	d147      	bne.n	8002c7e <_svfiprintf_r+0xe2>
 8002bee:	1bab      	subs	r3, r5, r6
 8002bf0:	9305      	str	r3, [sp, #20]
 8002bf2:	42b5      	cmp	r5, r6
 8002bf4:	d00c      	beq.n	8002c10 <_svfiprintf_r+0x74>
 8002bf6:	0032      	movs	r2, r6
 8002bf8:	0039      	movs	r1, r7
 8002bfa:	9803      	ldr	r0, [sp, #12]
 8002bfc:	f7ff ff6c 	bl	8002ad8 <__ssputs_r>
 8002c00:	1c43      	adds	r3, r0, #1
 8002c02:	d100      	bne.n	8002c06 <_svfiprintf_r+0x6a>
 8002c04:	e0ae      	b.n	8002d64 <_svfiprintf_r+0x1c8>
 8002c06:	6962      	ldr	r2, [r4, #20]
 8002c08:	9b05      	ldr	r3, [sp, #20]
 8002c0a:	4694      	mov	ip, r2
 8002c0c:	4463      	add	r3, ip
 8002c0e:	6163      	str	r3, [r4, #20]
 8002c10:	782b      	ldrb	r3, [r5, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d100      	bne.n	8002c18 <_svfiprintf_r+0x7c>
 8002c16:	e0a5      	b.n	8002d64 <_svfiprintf_r+0x1c8>
 8002c18:	2201      	movs	r2, #1
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	4252      	negs	r2, r2
 8002c1e:	6062      	str	r2, [r4, #4]
 8002c20:	a904      	add	r1, sp, #16
 8002c22:	3254      	adds	r2, #84	; 0x54
 8002c24:	1852      	adds	r2, r2, r1
 8002c26:	1c6e      	adds	r6, r5, #1
 8002c28:	6023      	str	r3, [r4, #0]
 8002c2a:	60e3      	str	r3, [r4, #12]
 8002c2c:	60a3      	str	r3, [r4, #8]
 8002c2e:	7013      	strb	r3, [r2, #0]
 8002c30:	65a3      	str	r3, [r4, #88]	; 0x58
 8002c32:	2205      	movs	r2, #5
 8002c34:	7831      	ldrb	r1, [r6, #0]
 8002c36:	4854      	ldr	r0, [pc, #336]	; (8002d88 <_svfiprintf_r+0x1ec>)
 8002c38:	f000 fa32 	bl	80030a0 <memchr>
 8002c3c:	1c75      	adds	r5, r6, #1
 8002c3e:	2800      	cmp	r0, #0
 8002c40:	d11f      	bne.n	8002c82 <_svfiprintf_r+0xe6>
 8002c42:	6822      	ldr	r2, [r4, #0]
 8002c44:	06d3      	lsls	r3, r2, #27
 8002c46:	d504      	bpl.n	8002c52 <_svfiprintf_r+0xb6>
 8002c48:	2353      	movs	r3, #83	; 0x53
 8002c4a:	a904      	add	r1, sp, #16
 8002c4c:	185b      	adds	r3, r3, r1
 8002c4e:	2120      	movs	r1, #32
 8002c50:	7019      	strb	r1, [r3, #0]
 8002c52:	0713      	lsls	r3, r2, #28
 8002c54:	d504      	bpl.n	8002c60 <_svfiprintf_r+0xc4>
 8002c56:	2353      	movs	r3, #83	; 0x53
 8002c58:	a904      	add	r1, sp, #16
 8002c5a:	185b      	adds	r3, r3, r1
 8002c5c:	212b      	movs	r1, #43	; 0x2b
 8002c5e:	7019      	strb	r1, [r3, #0]
 8002c60:	7833      	ldrb	r3, [r6, #0]
 8002c62:	2b2a      	cmp	r3, #42	; 0x2a
 8002c64:	d016      	beq.n	8002c94 <_svfiprintf_r+0xf8>
 8002c66:	0035      	movs	r5, r6
 8002c68:	2100      	movs	r1, #0
 8002c6a:	200a      	movs	r0, #10
 8002c6c:	68e3      	ldr	r3, [r4, #12]
 8002c6e:	782a      	ldrb	r2, [r5, #0]
 8002c70:	1c6e      	adds	r6, r5, #1
 8002c72:	3a30      	subs	r2, #48	; 0x30
 8002c74:	2a09      	cmp	r2, #9
 8002c76:	d94e      	bls.n	8002d16 <_svfiprintf_r+0x17a>
 8002c78:	2900      	cmp	r1, #0
 8002c7a:	d111      	bne.n	8002ca0 <_svfiprintf_r+0x104>
 8002c7c:	e017      	b.n	8002cae <_svfiprintf_r+0x112>
 8002c7e:	3501      	adds	r5, #1
 8002c80:	e7b0      	b.n	8002be4 <_svfiprintf_r+0x48>
 8002c82:	4b41      	ldr	r3, [pc, #260]	; (8002d88 <_svfiprintf_r+0x1ec>)
 8002c84:	6822      	ldr	r2, [r4, #0]
 8002c86:	1ac0      	subs	r0, r0, r3
 8002c88:	2301      	movs	r3, #1
 8002c8a:	4083      	lsls	r3, r0
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	002e      	movs	r6, r5
 8002c90:	6023      	str	r3, [r4, #0]
 8002c92:	e7ce      	b.n	8002c32 <_svfiprintf_r+0x96>
 8002c94:	9b07      	ldr	r3, [sp, #28]
 8002c96:	1d19      	adds	r1, r3, #4
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	9107      	str	r1, [sp, #28]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	db01      	blt.n	8002ca4 <_svfiprintf_r+0x108>
 8002ca0:	930b      	str	r3, [sp, #44]	; 0x2c
 8002ca2:	e004      	b.n	8002cae <_svfiprintf_r+0x112>
 8002ca4:	425b      	negs	r3, r3
 8002ca6:	60e3      	str	r3, [r4, #12]
 8002ca8:	2302      	movs	r3, #2
 8002caa:	4313      	orrs	r3, r2
 8002cac:	6023      	str	r3, [r4, #0]
 8002cae:	782b      	ldrb	r3, [r5, #0]
 8002cb0:	2b2e      	cmp	r3, #46	; 0x2e
 8002cb2:	d10a      	bne.n	8002cca <_svfiprintf_r+0x12e>
 8002cb4:	786b      	ldrb	r3, [r5, #1]
 8002cb6:	2b2a      	cmp	r3, #42	; 0x2a
 8002cb8:	d135      	bne.n	8002d26 <_svfiprintf_r+0x18a>
 8002cba:	9b07      	ldr	r3, [sp, #28]
 8002cbc:	3502      	adds	r5, #2
 8002cbe:	1d1a      	adds	r2, r3, #4
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	9207      	str	r2, [sp, #28]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	db2b      	blt.n	8002d20 <_svfiprintf_r+0x184>
 8002cc8:	9309      	str	r3, [sp, #36]	; 0x24
 8002cca:	4e30      	ldr	r6, [pc, #192]	; (8002d8c <_svfiprintf_r+0x1f0>)
 8002ccc:	2203      	movs	r2, #3
 8002cce:	0030      	movs	r0, r6
 8002cd0:	7829      	ldrb	r1, [r5, #0]
 8002cd2:	f000 f9e5 	bl	80030a0 <memchr>
 8002cd6:	2800      	cmp	r0, #0
 8002cd8:	d006      	beq.n	8002ce8 <_svfiprintf_r+0x14c>
 8002cda:	2340      	movs	r3, #64	; 0x40
 8002cdc:	1b80      	subs	r0, r0, r6
 8002cde:	4083      	lsls	r3, r0
 8002ce0:	6822      	ldr	r2, [r4, #0]
 8002ce2:	3501      	adds	r5, #1
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	6023      	str	r3, [r4, #0]
 8002ce8:	7829      	ldrb	r1, [r5, #0]
 8002cea:	2206      	movs	r2, #6
 8002cec:	4828      	ldr	r0, [pc, #160]	; (8002d90 <_svfiprintf_r+0x1f4>)
 8002cee:	1c6e      	adds	r6, r5, #1
 8002cf0:	7621      	strb	r1, [r4, #24]
 8002cf2:	f000 f9d5 	bl	80030a0 <memchr>
 8002cf6:	2800      	cmp	r0, #0
 8002cf8:	d03c      	beq.n	8002d74 <_svfiprintf_r+0x1d8>
 8002cfa:	4b26      	ldr	r3, [pc, #152]	; (8002d94 <_svfiprintf_r+0x1f8>)
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d125      	bne.n	8002d4c <_svfiprintf_r+0x1b0>
 8002d00:	2207      	movs	r2, #7
 8002d02:	9b07      	ldr	r3, [sp, #28]
 8002d04:	3307      	adds	r3, #7
 8002d06:	4393      	bics	r3, r2
 8002d08:	3308      	adds	r3, #8
 8002d0a:	9307      	str	r3, [sp, #28]
 8002d0c:	6963      	ldr	r3, [r4, #20]
 8002d0e:	9a04      	ldr	r2, [sp, #16]
 8002d10:	189b      	adds	r3, r3, r2
 8002d12:	6163      	str	r3, [r4, #20]
 8002d14:	e765      	b.n	8002be2 <_svfiprintf_r+0x46>
 8002d16:	4343      	muls	r3, r0
 8002d18:	0035      	movs	r5, r6
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	189b      	adds	r3, r3, r2
 8002d1e:	e7a6      	b.n	8002c6e <_svfiprintf_r+0xd2>
 8002d20:	2301      	movs	r3, #1
 8002d22:	425b      	negs	r3, r3
 8002d24:	e7d0      	b.n	8002cc8 <_svfiprintf_r+0x12c>
 8002d26:	2300      	movs	r3, #0
 8002d28:	200a      	movs	r0, #10
 8002d2a:	001a      	movs	r2, r3
 8002d2c:	3501      	adds	r5, #1
 8002d2e:	6063      	str	r3, [r4, #4]
 8002d30:	7829      	ldrb	r1, [r5, #0]
 8002d32:	1c6e      	adds	r6, r5, #1
 8002d34:	3930      	subs	r1, #48	; 0x30
 8002d36:	2909      	cmp	r1, #9
 8002d38:	d903      	bls.n	8002d42 <_svfiprintf_r+0x1a6>
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0c5      	beq.n	8002cca <_svfiprintf_r+0x12e>
 8002d3e:	9209      	str	r2, [sp, #36]	; 0x24
 8002d40:	e7c3      	b.n	8002cca <_svfiprintf_r+0x12e>
 8002d42:	4342      	muls	r2, r0
 8002d44:	0035      	movs	r5, r6
 8002d46:	2301      	movs	r3, #1
 8002d48:	1852      	adds	r2, r2, r1
 8002d4a:	e7f1      	b.n	8002d30 <_svfiprintf_r+0x194>
 8002d4c:	ab07      	add	r3, sp, #28
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	003a      	movs	r2, r7
 8002d52:	0021      	movs	r1, r4
 8002d54:	4b10      	ldr	r3, [pc, #64]	; (8002d98 <_svfiprintf_r+0x1fc>)
 8002d56:	9803      	ldr	r0, [sp, #12]
 8002d58:	e000      	b.n	8002d5c <_svfiprintf_r+0x1c0>
 8002d5a:	bf00      	nop
 8002d5c:	9004      	str	r0, [sp, #16]
 8002d5e:	9b04      	ldr	r3, [sp, #16]
 8002d60:	3301      	adds	r3, #1
 8002d62:	d1d3      	bne.n	8002d0c <_svfiprintf_r+0x170>
 8002d64:	89bb      	ldrh	r3, [r7, #12]
 8002d66:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002d68:	065b      	lsls	r3, r3, #25
 8002d6a:	d400      	bmi.n	8002d6e <_svfiprintf_r+0x1d2>
 8002d6c:	e72d      	b.n	8002bca <_svfiprintf_r+0x2e>
 8002d6e:	2001      	movs	r0, #1
 8002d70:	4240      	negs	r0, r0
 8002d72:	e72a      	b.n	8002bca <_svfiprintf_r+0x2e>
 8002d74:	ab07      	add	r3, sp, #28
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	003a      	movs	r2, r7
 8002d7a:	0021      	movs	r1, r4
 8002d7c:	4b06      	ldr	r3, [pc, #24]	; (8002d98 <_svfiprintf_r+0x1fc>)
 8002d7e:	9803      	ldr	r0, [sp, #12]
 8002d80:	f000 f87c 	bl	8002e7c <_printf_i>
 8002d84:	e7ea      	b.n	8002d5c <_svfiprintf_r+0x1c0>
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	080033d4 	.word	0x080033d4
 8002d8c:	080033da 	.word	0x080033da
 8002d90:	080033de 	.word	0x080033de
 8002d94:	00000000 	.word	0x00000000
 8002d98:	08002ad9 	.word	0x08002ad9

08002d9c <_printf_common>:
 8002d9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d9e:	0015      	movs	r5, r2
 8002da0:	9301      	str	r3, [sp, #4]
 8002da2:	688a      	ldr	r2, [r1, #8]
 8002da4:	690b      	ldr	r3, [r1, #16]
 8002da6:	000c      	movs	r4, r1
 8002da8:	9000      	str	r0, [sp, #0]
 8002daa:	4293      	cmp	r3, r2
 8002dac:	da00      	bge.n	8002db0 <_printf_common+0x14>
 8002dae:	0013      	movs	r3, r2
 8002db0:	0022      	movs	r2, r4
 8002db2:	602b      	str	r3, [r5, #0]
 8002db4:	3243      	adds	r2, #67	; 0x43
 8002db6:	7812      	ldrb	r2, [r2, #0]
 8002db8:	2a00      	cmp	r2, #0
 8002dba:	d001      	beq.n	8002dc0 <_printf_common+0x24>
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	602b      	str	r3, [r5, #0]
 8002dc0:	6823      	ldr	r3, [r4, #0]
 8002dc2:	069b      	lsls	r3, r3, #26
 8002dc4:	d502      	bpl.n	8002dcc <_printf_common+0x30>
 8002dc6:	682b      	ldr	r3, [r5, #0]
 8002dc8:	3302      	adds	r3, #2
 8002dca:	602b      	str	r3, [r5, #0]
 8002dcc:	6822      	ldr	r2, [r4, #0]
 8002dce:	2306      	movs	r3, #6
 8002dd0:	0017      	movs	r7, r2
 8002dd2:	401f      	ands	r7, r3
 8002dd4:	421a      	tst	r2, r3
 8002dd6:	d027      	beq.n	8002e28 <_printf_common+0x8c>
 8002dd8:	0023      	movs	r3, r4
 8002dda:	3343      	adds	r3, #67	; 0x43
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	1e5a      	subs	r2, r3, #1
 8002de0:	4193      	sbcs	r3, r2
 8002de2:	6822      	ldr	r2, [r4, #0]
 8002de4:	0692      	lsls	r2, r2, #26
 8002de6:	d430      	bmi.n	8002e4a <_printf_common+0xae>
 8002de8:	0022      	movs	r2, r4
 8002dea:	9901      	ldr	r1, [sp, #4]
 8002dec:	9800      	ldr	r0, [sp, #0]
 8002dee:	9e08      	ldr	r6, [sp, #32]
 8002df0:	3243      	adds	r2, #67	; 0x43
 8002df2:	47b0      	blx	r6
 8002df4:	1c43      	adds	r3, r0, #1
 8002df6:	d025      	beq.n	8002e44 <_printf_common+0xa8>
 8002df8:	2306      	movs	r3, #6
 8002dfa:	6820      	ldr	r0, [r4, #0]
 8002dfc:	682a      	ldr	r2, [r5, #0]
 8002dfe:	68e1      	ldr	r1, [r4, #12]
 8002e00:	2500      	movs	r5, #0
 8002e02:	4003      	ands	r3, r0
 8002e04:	2b04      	cmp	r3, #4
 8002e06:	d103      	bne.n	8002e10 <_printf_common+0x74>
 8002e08:	1a8d      	subs	r5, r1, r2
 8002e0a:	43eb      	mvns	r3, r5
 8002e0c:	17db      	asrs	r3, r3, #31
 8002e0e:	401d      	ands	r5, r3
 8002e10:	68a3      	ldr	r3, [r4, #8]
 8002e12:	6922      	ldr	r2, [r4, #16]
 8002e14:	4293      	cmp	r3, r2
 8002e16:	dd01      	ble.n	8002e1c <_printf_common+0x80>
 8002e18:	1a9b      	subs	r3, r3, r2
 8002e1a:	18ed      	adds	r5, r5, r3
 8002e1c:	2700      	movs	r7, #0
 8002e1e:	42bd      	cmp	r5, r7
 8002e20:	d120      	bne.n	8002e64 <_printf_common+0xc8>
 8002e22:	2000      	movs	r0, #0
 8002e24:	e010      	b.n	8002e48 <_printf_common+0xac>
 8002e26:	3701      	adds	r7, #1
 8002e28:	68e3      	ldr	r3, [r4, #12]
 8002e2a:	682a      	ldr	r2, [r5, #0]
 8002e2c:	1a9b      	subs	r3, r3, r2
 8002e2e:	42bb      	cmp	r3, r7
 8002e30:	ddd2      	ble.n	8002dd8 <_printf_common+0x3c>
 8002e32:	0022      	movs	r2, r4
 8002e34:	2301      	movs	r3, #1
 8002e36:	9901      	ldr	r1, [sp, #4]
 8002e38:	9800      	ldr	r0, [sp, #0]
 8002e3a:	9e08      	ldr	r6, [sp, #32]
 8002e3c:	3219      	adds	r2, #25
 8002e3e:	47b0      	blx	r6
 8002e40:	1c43      	adds	r3, r0, #1
 8002e42:	d1f0      	bne.n	8002e26 <_printf_common+0x8a>
 8002e44:	2001      	movs	r0, #1
 8002e46:	4240      	negs	r0, r0
 8002e48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002e4a:	2030      	movs	r0, #48	; 0x30
 8002e4c:	18e1      	adds	r1, r4, r3
 8002e4e:	3143      	adds	r1, #67	; 0x43
 8002e50:	7008      	strb	r0, [r1, #0]
 8002e52:	0021      	movs	r1, r4
 8002e54:	1c5a      	adds	r2, r3, #1
 8002e56:	3145      	adds	r1, #69	; 0x45
 8002e58:	7809      	ldrb	r1, [r1, #0]
 8002e5a:	18a2      	adds	r2, r4, r2
 8002e5c:	3243      	adds	r2, #67	; 0x43
 8002e5e:	3302      	adds	r3, #2
 8002e60:	7011      	strb	r1, [r2, #0]
 8002e62:	e7c1      	b.n	8002de8 <_printf_common+0x4c>
 8002e64:	0022      	movs	r2, r4
 8002e66:	2301      	movs	r3, #1
 8002e68:	9901      	ldr	r1, [sp, #4]
 8002e6a:	9800      	ldr	r0, [sp, #0]
 8002e6c:	9e08      	ldr	r6, [sp, #32]
 8002e6e:	321a      	adds	r2, #26
 8002e70:	47b0      	blx	r6
 8002e72:	1c43      	adds	r3, r0, #1
 8002e74:	d0e6      	beq.n	8002e44 <_printf_common+0xa8>
 8002e76:	3701      	adds	r7, #1
 8002e78:	e7d1      	b.n	8002e1e <_printf_common+0x82>
	...

08002e7c <_printf_i>:
 8002e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e7e:	b08b      	sub	sp, #44	; 0x2c
 8002e80:	9206      	str	r2, [sp, #24]
 8002e82:	000a      	movs	r2, r1
 8002e84:	3243      	adds	r2, #67	; 0x43
 8002e86:	9307      	str	r3, [sp, #28]
 8002e88:	9005      	str	r0, [sp, #20]
 8002e8a:	9204      	str	r2, [sp, #16]
 8002e8c:	7e0a      	ldrb	r2, [r1, #24]
 8002e8e:	000c      	movs	r4, r1
 8002e90:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002e92:	2a78      	cmp	r2, #120	; 0x78
 8002e94:	d807      	bhi.n	8002ea6 <_printf_i+0x2a>
 8002e96:	2a62      	cmp	r2, #98	; 0x62
 8002e98:	d809      	bhi.n	8002eae <_printf_i+0x32>
 8002e9a:	2a00      	cmp	r2, #0
 8002e9c:	d100      	bne.n	8002ea0 <_printf_i+0x24>
 8002e9e:	e0c1      	b.n	8003024 <_printf_i+0x1a8>
 8002ea0:	2a58      	cmp	r2, #88	; 0x58
 8002ea2:	d100      	bne.n	8002ea6 <_printf_i+0x2a>
 8002ea4:	e08c      	b.n	8002fc0 <_printf_i+0x144>
 8002ea6:	0026      	movs	r6, r4
 8002ea8:	3642      	adds	r6, #66	; 0x42
 8002eaa:	7032      	strb	r2, [r6, #0]
 8002eac:	e022      	b.n	8002ef4 <_printf_i+0x78>
 8002eae:	0010      	movs	r0, r2
 8002eb0:	3863      	subs	r0, #99	; 0x63
 8002eb2:	2815      	cmp	r0, #21
 8002eb4:	d8f7      	bhi.n	8002ea6 <_printf_i+0x2a>
 8002eb6:	f7fd f927 	bl	8000108 <__gnu_thumb1_case_shi>
 8002eba:	0016      	.short	0x0016
 8002ebc:	fff6001f 	.word	0xfff6001f
 8002ec0:	fff6fff6 	.word	0xfff6fff6
 8002ec4:	001ffff6 	.word	0x001ffff6
 8002ec8:	fff6fff6 	.word	0xfff6fff6
 8002ecc:	fff6fff6 	.word	0xfff6fff6
 8002ed0:	003600a8 	.word	0x003600a8
 8002ed4:	fff6009a 	.word	0xfff6009a
 8002ed8:	00b9fff6 	.word	0x00b9fff6
 8002edc:	0036fff6 	.word	0x0036fff6
 8002ee0:	fff6fff6 	.word	0xfff6fff6
 8002ee4:	009e      	.short	0x009e
 8002ee6:	0026      	movs	r6, r4
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	3642      	adds	r6, #66	; 0x42
 8002eec:	1d11      	adds	r1, r2, #4
 8002eee:	6019      	str	r1, [r3, #0]
 8002ef0:	6813      	ldr	r3, [r2, #0]
 8002ef2:	7033      	strb	r3, [r6, #0]
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e0a7      	b.n	8003048 <_printf_i+0x1cc>
 8002ef8:	6808      	ldr	r0, [r1, #0]
 8002efa:	6819      	ldr	r1, [r3, #0]
 8002efc:	1d0a      	adds	r2, r1, #4
 8002efe:	0605      	lsls	r5, r0, #24
 8002f00:	d50b      	bpl.n	8002f1a <_printf_i+0x9e>
 8002f02:	680d      	ldr	r5, [r1, #0]
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	2d00      	cmp	r5, #0
 8002f08:	da03      	bge.n	8002f12 <_printf_i+0x96>
 8002f0a:	232d      	movs	r3, #45	; 0x2d
 8002f0c:	9a04      	ldr	r2, [sp, #16]
 8002f0e:	426d      	negs	r5, r5
 8002f10:	7013      	strb	r3, [r2, #0]
 8002f12:	4b61      	ldr	r3, [pc, #388]	; (8003098 <_printf_i+0x21c>)
 8002f14:	270a      	movs	r7, #10
 8002f16:	9303      	str	r3, [sp, #12]
 8002f18:	e01b      	b.n	8002f52 <_printf_i+0xd6>
 8002f1a:	680d      	ldr	r5, [r1, #0]
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	0641      	lsls	r1, r0, #25
 8002f20:	d5f1      	bpl.n	8002f06 <_printf_i+0x8a>
 8002f22:	b22d      	sxth	r5, r5
 8002f24:	e7ef      	b.n	8002f06 <_printf_i+0x8a>
 8002f26:	680d      	ldr	r5, [r1, #0]
 8002f28:	6819      	ldr	r1, [r3, #0]
 8002f2a:	1d08      	adds	r0, r1, #4
 8002f2c:	6018      	str	r0, [r3, #0]
 8002f2e:	062e      	lsls	r6, r5, #24
 8002f30:	d501      	bpl.n	8002f36 <_printf_i+0xba>
 8002f32:	680d      	ldr	r5, [r1, #0]
 8002f34:	e003      	b.n	8002f3e <_printf_i+0xc2>
 8002f36:	066d      	lsls	r5, r5, #25
 8002f38:	d5fb      	bpl.n	8002f32 <_printf_i+0xb6>
 8002f3a:	680d      	ldr	r5, [r1, #0]
 8002f3c:	b2ad      	uxth	r5, r5
 8002f3e:	4b56      	ldr	r3, [pc, #344]	; (8003098 <_printf_i+0x21c>)
 8002f40:	2708      	movs	r7, #8
 8002f42:	9303      	str	r3, [sp, #12]
 8002f44:	2a6f      	cmp	r2, #111	; 0x6f
 8002f46:	d000      	beq.n	8002f4a <_printf_i+0xce>
 8002f48:	3702      	adds	r7, #2
 8002f4a:	0023      	movs	r3, r4
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	3343      	adds	r3, #67	; 0x43
 8002f50:	701a      	strb	r2, [r3, #0]
 8002f52:	6863      	ldr	r3, [r4, #4]
 8002f54:	60a3      	str	r3, [r4, #8]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	db03      	blt.n	8002f62 <_printf_i+0xe6>
 8002f5a:	2204      	movs	r2, #4
 8002f5c:	6821      	ldr	r1, [r4, #0]
 8002f5e:	4391      	bics	r1, r2
 8002f60:	6021      	str	r1, [r4, #0]
 8002f62:	2d00      	cmp	r5, #0
 8002f64:	d102      	bne.n	8002f6c <_printf_i+0xf0>
 8002f66:	9e04      	ldr	r6, [sp, #16]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00c      	beq.n	8002f86 <_printf_i+0x10a>
 8002f6c:	9e04      	ldr	r6, [sp, #16]
 8002f6e:	0028      	movs	r0, r5
 8002f70:	0039      	movs	r1, r7
 8002f72:	f7fd f959 	bl	8000228 <__aeabi_uidivmod>
 8002f76:	9b03      	ldr	r3, [sp, #12]
 8002f78:	3e01      	subs	r6, #1
 8002f7a:	5c5b      	ldrb	r3, [r3, r1]
 8002f7c:	7033      	strb	r3, [r6, #0]
 8002f7e:	002b      	movs	r3, r5
 8002f80:	0005      	movs	r5, r0
 8002f82:	429f      	cmp	r7, r3
 8002f84:	d9f3      	bls.n	8002f6e <_printf_i+0xf2>
 8002f86:	2f08      	cmp	r7, #8
 8002f88:	d109      	bne.n	8002f9e <_printf_i+0x122>
 8002f8a:	6823      	ldr	r3, [r4, #0]
 8002f8c:	07db      	lsls	r3, r3, #31
 8002f8e:	d506      	bpl.n	8002f9e <_printf_i+0x122>
 8002f90:	6863      	ldr	r3, [r4, #4]
 8002f92:	6922      	ldr	r2, [r4, #16]
 8002f94:	4293      	cmp	r3, r2
 8002f96:	dc02      	bgt.n	8002f9e <_printf_i+0x122>
 8002f98:	2330      	movs	r3, #48	; 0x30
 8002f9a:	3e01      	subs	r6, #1
 8002f9c:	7033      	strb	r3, [r6, #0]
 8002f9e:	9b04      	ldr	r3, [sp, #16]
 8002fa0:	1b9b      	subs	r3, r3, r6
 8002fa2:	6123      	str	r3, [r4, #16]
 8002fa4:	9b07      	ldr	r3, [sp, #28]
 8002fa6:	0021      	movs	r1, r4
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	9805      	ldr	r0, [sp, #20]
 8002fac:	9b06      	ldr	r3, [sp, #24]
 8002fae:	aa09      	add	r2, sp, #36	; 0x24
 8002fb0:	f7ff fef4 	bl	8002d9c <_printf_common>
 8002fb4:	1c43      	adds	r3, r0, #1
 8002fb6:	d14c      	bne.n	8003052 <_printf_i+0x1d6>
 8002fb8:	2001      	movs	r0, #1
 8002fba:	4240      	negs	r0, r0
 8002fbc:	b00b      	add	sp, #44	; 0x2c
 8002fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fc0:	3145      	adds	r1, #69	; 0x45
 8002fc2:	700a      	strb	r2, [r1, #0]
 8002fc4:	4a34      	ldr	r2, [pc, #208]	; (8003098 <_printf_i+0x21c>)
 8002fc6:	9203      	str	r2, [sp, #12]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	6821      	ldr	r1, [r4, #0]
 8002fcc:	ca20      	ldmia	r2!, {r5}
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	0608      	lsls	r0, r1, #24
 8002fd2:	d516      	bpl.n	8003002 <_printf_i+0x186>
 8002fd4:	07cb      	lsls	r3, r1, #31
 8002fd6:	d502      	bpl.n	8002fde <_printf_i+0x162>
 8002fd8:	2320      	movs	r3, #32
 8002fda:	4319      	orrs	r1, r3
 8002fdc:	6021      	str	r1, [r4, #0]
 8002fde:	2710      	movs	r7, #16
 8002fe0:	2d00      	cmp	r5, #0
 8002fe2:	d1b2      	bne.n	8002f4a <_printf_i+0xce>
 8002fe4:	2320      	movs	r3, #32
 8002fe6:	6822      	ldr	r2, [r4, #0]
 8002fe8:	439a      	bics	r2, r3
 8002fea:	6022      	str	r2, [r4, #0]
 8002fec:	e7ad      	b.n	8002f4a <_printf_i+0xce>
 8002fee:	2220      	movs	r2, #32
 8002ff0:	6809      	ldr	r1, [r1, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	6022      	str	r2, [r4, #0]
 8002ff6:	0022      	movs	r2, r4
 8002ff8:	2178      	movs	r1, #120	; 0x78
 8002ffa:	3245      	adds	r2, #69	; 0x45
 8002ffc:	7011      	strb	r1, [r2, #0]
 8002ffe:	4a27      	ldr	r2, [pc, #156]	; (800309c <_printf_i+0x220>)
 8003000:	e7e1      	b.n	8002fc6 <_printf_i+0x14a>
 8003002:	0648      	lsls	r0, r1, #25
 8003004:	d5e6      	bpl.n	8002fd4 <_printf_i+0x158>
 8003006:	b2ad      	uxth	r5, r5
 8003008:	e7e4      	b.n	8002fd4 <_printf_i+0x158>
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	680d      	ldr	r5, [r1, #0]
 800300e:	1d10      	adds	r0, r2, #4
 8003010:	6949      	ldr	r1, [r1, #20]
 8003012:	6018      	str	r0, [r3, #0]
 8003014:	6813      	ldr	r3, [r2, #0]
 8003016:	062e      	lsls	r6, r5, #24
 8003018:	d501      	bpl.n	800301e <_printf_i+0x1a2>
 800301a:	6019      	str	r1, [r3, #0]
 800301c:	e002      	b.n	8003024 <_printf_i+0x1a8>
 800301e:	066d      	lsls	r5, r5, #25
 8003020:	d5fb      	bpl.n	800301a <_printf_i+0x19e>
 8003022:	8019      	strh	r1, [r3, #0]
 8003024:	2300      	movs	r3, #0
 8003026:	9e04      	ldr	r6, [sp, #16]
 8003028:	6123      	str	r3, [r4, #16]
 800302a:	e7bb      	b.n	8002fa4 <_printf_i+0x128>
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	1d11      	adds	r1, r2, #4
 8003030:	6019      	str	r1, [r3, #0]
 8003032:	6816      	ldr	r6, [r2, #0]
 8003034:	2100      	movs	r1, #0
 8003036:	0030      	movs	r0, r6
 8003038:	6862      	ldr	r2, [r4, #4]
 800303a:	f000 f831 	bl	80030a0 <memchr>
 800303e:	2800      	cmp	r0, #0
 8003040:	d001      	beq.n	8003046 <_printf_i+0x1ca>
 8003042:	1b80      	subs	r0, r0, r6
 8003044:	6060      	str	r0, [r4, #4]
 8003046:	6863      	ldr	r3, [r4, #4]
 8003048:	6123      	str	r3, [r4, #16]
 800304a:	2300      	movs	r3, #0
 800304c:	9a04      	ldr	r2, [sp, #16]
 800304e:	7013      	strb	r3, [r2, #0]
 8003050:	e7a8      	b.n	8002fa4 <_printf_i+0x128>
 8003052:	6923      	ldr	r3, [r4, #16]
 8003054:	0032      	movs	r2, r6
 8003056:	9906      	ldr	r1, [sp, #24]
 8003058:	9805      	ldr	r0, [sp, #20]
 800305a:	9d07      	ldr	r5, [sp, #28]
 800305c:	47a8      	blx	r5
 800305e:	1c43      	adds	r3, r0, #1
 8003060:	d0aa      	beq.n	8002fb8 <_printf_i+0x13c>
 8003062:	6823      	ldr	r3, [r4, #0]
 8003064:	079b      	lsls	r3, r3, #30
 8003066:	d415      	bmi.n	8003094 <_printf_i+0x218>
 8003068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800306a:	68e0      	ldr	r0, [r4, #12]
 800306c:	4298      	cmp	r0, r3
 800306e:	daa5      	bge.n	8002fbc <_printf_i+0x140>
 8003070:	0018      	movs	r0, r3
 8003072:	e7a3      	b.n	8002fbc <_printf_i+0x140>
 8003074:	0022      	movs	r2, r4
 8003076:	2301      	movs	r3, #1
 8003078:	9906      	ldr	r1, [sp, #24]
 800307a:	9805      	ldr	r0, [sp, #20]
 800307c:	9e07      	ldr	r6, [sp, #28]
 800307e:	3219      	adds	r2, #25
 8003080:	47b0      	blx	r6
 8003082:	1c43      	adds	r3, r0, #1
 8003084:	d098      	beq.n	8002fb8 <_printf_i+0x13c>
 8003086:	3501      	adds	r5, #1
 8003088:	68e3      	ldr	r3, [r4, #12]
 800308a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800308c:	1a9b      	subs	r3, r3, r2
 800308e:	42ab      	cmp	r3, r5
 8003090:	dcf0      	bgt.n	8003074 <_printf_i+0x1f8>
 8003092:	e7e9      	b.n	8003068 <_printf_i+0x1ec>
 8003094:	2500      	movs	r5, #0
 8003096:	e7f7      	b.n	8003088 <_printf_i+0x20c>
 8003098:	080033e5 	.word	0x080033e5
 800309c:	080033f6 	.word	0x080033f6

080030a0 <memchr>:
 80030a0:	b2c9      	uxtb	r1, r1
 80030a2:	1882      	adds	r2, r0, r2
 80030a4:	4290      	cmp	r0, r2
 80030a6:	d101      	bne.n	80030ac <memchr+0xc>
 80030a8:	2000      	movs	r0, #0
 80030aa:	4770      	bx	lr
 80030ac:	7803      	ldrb	r3, [r0, #0]
 80030ae:	428b      	cmp	r3, r1
 80030b0:	d0fb      	beq.n	80030aa <memchr+0xa>
 80030b2:	3001      	adds	r0, #1
 80030b4:	e7f6      	b.n	80030a4 <memchr+0x4>

080030b6 <memcpy>:
 80030b6:	2300      	movs	r3, #0
 80030b8:	b510      	push	{r4, lr}
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d100      	bne.n	80030c0 <memcpy+0xa>
 80030be:	bd10      	pop	{r4, pc}
 80030c0:	5ccc      	ldrb	r4, [r1, r3]
 80030c2:	54c4      	strb	r4, [r0, r3]
 80030c4:	3301      	adds	r3, #1
 80030c6:	e7f8      	b.n	80030ba <memcpy+0x4>

080030c8 <memmove>:
 80030c8:	b510      	push	{r4, lr}
 80030ca:	4288      	cmp	r0, r1
 80030cc:	d902      	bls.n	80030d4 <memmove+0xc>
 80030ce:	188b      	adds	r3, r1, r2
 80030d0:	4298      	cmp	r0, r3
 80030d2:	d303      	bcc.n	80030dc <memmove+0x14>
 80030d4:	2300      	movs	r3, #0
 80030d6:	e007      	b.n	80030e8 <memmove+0x20>
 80030d8:	5c8b      	ldrb	r3, [r1, r2]
 80030da:	5483      	strb	r3, [r0, r2]
 80030dc:	3a01      	subs	r2, #1
 80030de:	d2fb      	bcs.n	80030d8 <memmove+0x10>
 80030e0:	bd10      	pop	{r4, pc}
 80030e2:	5ccc      	ldrb	r4, [r1, r3]
 80030e4:	54c4      	strb	r4, [r0, r3]
 80030e6:	3301      	adds	r3, #1
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d1fa      	bne.n	80030e2 <memmove+0x1a>
 80030ec:	e7f8      	b.n	80030e0 <memmove+0x18>
	...

080030f0 <_free_r>:
 80030f0:	b570      	push	{r4, r5, r6, lr}
 80030f2:	0005      	movs	r5, r0
 80030f4:	2900      	cmp	r1, #0
 80030f6:	d010      	beq.n	800311a <_free_r+0x2a>
 80030f8:	1f0c      	subs	r4, r1, #4
 80030fa:	6823      	ldr	r3, [r4, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	da00      	bge.n	8003102 <_free_r+0x12>
 8003100:	18e4      	adds	r4, r4, r3
 8003102:	0028      	movs	r0, r5
 8003104:	f000 f918 	bl	8003338 <__malloc_lock>
 8003108:	4a1d      	ldr	r2, [pc, #116]	; (8003180 <_free_r+0x90>)
 800310a:	6813      	ldr	r3, [r2, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d105      	bne.n	800311c <_free_r+0x2c>
 8003110:	6063      	str	r3, [r4, #4]
 8003112:	6014      	str	r4, [r2, #0]
 8003114:	0028      	movs	r0, r5
 8003116:	f000 f917 	bl	8003348 <__malloc_unlock>
 800311a:	bd70      	pop	{r4, r5, r6, pc}
 800311c:	42a3      	cmp	r3, r4
 800311e:	d908      	bls.n	8003132 <_free_r+0x42>
 8003120:	6821      	ldr	r1, [r4, #0]
 8003122:	1860      	adds	r0, r4, r1
 8003124:	4283      	cmp	r3, r0
 8003126:	d1f3      	bne.n	8003110 <_free_r+0x20>
 8003128:	6818      	ldr	r0, [r3, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	1841      	adds	r1, r0, r1
 800312e:	6021      	str	r1, [r4, #0]
 8003130:	e7ee      	b.n	8003110 <_free_r+0x20>
 8003132:	001a      	movs	r2, r3
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <_free_r+0x4e>
 800313a:	42a3      	cmp	r3, r4
 800313c:	d9f9      	bls.n	8003132 <_free_r+0x42>
 800313e:	6811      	ldr	r1, [r2, #0]
 8003140:	1850      	adds	r0, r2, r1
 8003142:	42a0      	cmp	r0, r4
 8003144:	d10b      	bne.n	800315e <_free_r+0x6e>
 8003146:	6820      	ldr	r0, [r4, #0]
 8003148:	1809      	adds	r1, r1, r0
 800314a:	1850      	adds	r0, r2, r1
 800314c:	6011      	str	r1, [r2, #0]
 800314e:	4283      	cmp	r3, r0
 8003150:	d1e0      	bne.n	8003114 <_free_r+0x24>
 8003152:	6818      	ldr	r0, [r3, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	1841      	adds	r1, r0, r1
 8003158:	6011      	str	r1, [r2, #0]
 800315a:	6053      	str	r3, [r2, #4]
 800315c:	e7da      	b.n	8003114 <_free_r+0x24>
 800315e:	42a0      	cmp	r0, r4
 8003160:	d902      	bls.n	8003168 <_free_r+0x78>
 8003162:	230c      	movs	r3, #12
 8003164:	602b      	str	r3, [r5, #0]
 8003166:	e7d5      	b.n	8003114 <_free_r+0x24>
 8003168:	6821      	ldr	r1, [r4, #0]
 800316a:	1860      	adds	r0, r4, r1
 800316c:	4283      	cmp	r3, r0
 800316e:	d103      	bne.n	8003178 <_free_r+0x88>
 8003170:	6818      	ldr	r0, [r3, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	1841      	adds	r1, r0, r1
 8003176:	6021      	str	r1, [r4, #0]
 8003178:	6063      	str	r3, [r4, #4]
 800317a:	6054      	str	r4, [r2, #4]
 800317c:	e7ca      	b.n	8003114 <_free_r+0x24>
 800317e:	46c0      	nop			; (mov r8, r8)
 8003180:	20000194 	.word	0x20000194

08003184 <sbrk_aligned>:
 8003184:	b570      	push	{r4, r5, r6, lr}
 8003186:	4e0f      	ldr	r6, [pc, #60]	; (80031c4 <sbrk_aligned+0x40>)
 8003188:	000d      	movs	r5, r1
 800318a:	6831      	ldr	r1, [r6, #0]
 800318c:	0004      	movs	r4, r0
 800318e:	2900      	cmp	r1, #0
 8003190:	d102      	bne.n	8003198 <sbrk_aligned+0x14>
 8003192:	f000 f8bf 	bl	8003314 <_sbrk_r>
 8003196:	6030      	str	r0, [r6, #0]
 8003198:	0029      	movs	r1, r5
 800319a:	0020      	movs	r0, r4
 800319c:	f000 f8ba 	bl	8003314 <_sbrk_r>
 80031a0:	1c43      	adds	r3, r0, #1
 80031a2:	d00a      	beq.n	80031ba <sbrk_aligned+0x36>
 80031a4:	2303      	movs	r3, #3
 80031a6:	1cc5      	adds	r5, r0, #3
 80031a8:	439d      	bics	r5, r3
 80031aa:	42a8      	cmp	r0, r5
 80031ac:	d007      	beq.n	80031be <sbrk_aligned+0x3a>
 80031ae:	1a29      	subs	r1, r5, r0
 80031b0:	0020      	movs	r0, r4
 80031b2:	f000 f8af 	bl	8003314 <_sbrk_r>
 80031b6:	1c43      	adds	r3, r0, #1
 80031b8:	d101      	bne.n	80031be <sbrk_aligned+0x3a>
 80031ba:	2501      	movs	r5, #1
 80031bc:	426d      	negs	r5, r5
 80031be:	0028      	movs	r0, r5
 80031c0:	bd70      	pop	{r4, r5, r6, pc}
 80031c2:	46c0      	nop			; (mov r8, r8)
 80031c4:	20000198 	.word	0x20000198

080031c8 <_malloc_r>:
 80031c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031ca:	2203      	movs	r2, #3
 80031cc:	1ccb      	adds	r3, r1, #3
 80031ce:	4393      	bics	r3, r2
 80031d0:	3308      	adds	r3, #8
 80031d2:	0006      	movs	r6, r0
 80031d4:	001f      	movs	r7, r3
 80031d6:	2b0c      	cmp	r3, #12
 80031d8:	d232      	bcs.n	8003240 <_malloc_r+0x78>
 80031da:	270c      	movs	r7, #12
 80031dc:	42b9      	cmp	r1, r7
 80031de:	d831      	bhi.n	8003244 <_malloc_r+0x7c>
 80031e0:	0030      	movs	r0, r6
 80031e2:	f000 f8a9 	bl	8003338 <__malloc_lock>
 80031e6:	4d32      	ldr	r5, [pc, #200]	; (80032b0 <_malloc_r+0xe8>)
 80031e8:	682b      	ldr	r3, [r5, #0]
 80031ea:	001c      	movs	r4, r3
 80031ec:	2c00      	cmp	r4, #0
 80031ee:	d12e      	bne.n	800324e <_malloc_r+0x86>
 80031f0:	0039      	movs	r1, r7
 80031f2:	0030      	movs	r0, r6
 80031f4:	f7ff ffc6 	bl	8003184 <sbrk_aligned>
 80031f8:	0004      	movs	r4, r0
 80031fa:	1c43      	adds	r3, r0, #1
 80031fc:	d11e      	bne.n	800323c <_malloc_r+0x74>
 80031fe:	682c      	ldr	r4, [r5, #0]
 8003200:	0025      	movs	r5, r4
 8003202:	2d00      	cmp	r5, #0
 8003204:	d14a      	bne.n	800329c <_malloc_r+0xd4>
 8003206:	6823      	ldr	r3, [r4, #0]
 8003208:	0029      	movs	r1, r5
 800320a:	18e3      	adds	r3, r4, r3
 800320c:	0030      	movs	r0, r6
 800320e:	9301      	str	r3, [sp, #4]
 8003210:	f000 f880 	bl	8003314 <_sbrk_r>
 8003214:	9b01      	ldr	r3, [sp, #4]
 8003216:	4283      	cmp	r3, r0
 8003218:	d143      	bne.n	80032a2 <_malloc_r+0xda>
 800321a:	6823      	ldr	r3, [r4, #0]
 800321c:	3703      	adds	r7, #3
 800321e:	1aff      	subs	r7, r7, r3
 8003220:	2303      	movs	r3, #3
 8003222:	439f      	bics	r7, r3
 8003224:	3708      	adds	r7, #8
 8003226:	2f0c      	cmp	r7, #12
 8003228:	d200      	bcs.n	800322c <_malloc_r+0x64>
 800322a:	270c      	movs	r7, #12
 800322c:	0039      	movs	r1, r7
 800322e:	0030      	movs	r0, r6
 8003230:	f7ff ffa8 	bl	8003184 <sbrk_aligned>
 8003234:	1c43      	adds	r3, r0, #1
 8003236:	d034      	beq.n	80032a2 <_malloc_r+0xda>
 8003238:	6823      	ldr	r3, [r4, #0]
 800323a:	19df      	adds	r7, r3, r7
 800323c:	6027      	str	r7, [r4, #0]
 800323e:	e013      	b.n	8003268 <_malloc_r+0xa0>
 8003240:	2b00      	cmp	r3, #0
 8003242:	dacb      	bge.n	80031dc <_malloc_r+0x14>
 8003244:	230c      	movs	r3, #12
 8003246:	2500      	movs	r5, #0
 8003248:	6033      	str	r3, [r6, #0]
 800324a:	0028      	movs	r0, r5
 800324c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800324e:	6822      	ldr	r2, [r4, #0]
 8003250:	1bd1      	subs	r1, r2, r7
 8003252:	d420      	bmi.n	8003296 <_malloc_r+0xce>
 8003254:	290b      	cmp	r1, #11
 8003256:	d917      	bls.n	8003288 <_malloc_r+0xc0>
 8003258:	19e2      	adds	r2, r4, r7
 800325a:	6027      	str	r7, [r4, #0]
 800325c:	42a3      	cmp	r3, r4
 800325e:	d111      	bne.n	8003284 <_malloc_r+0xbc>
 8003260:	602a      	str	r2, [r5, #0]
 8003262:	6863      	ldr	r3, [r4, #4]
 8003264:	6011      	str	r1, [r2, #0]
 8003266:	6053      	str	r3, [r2, #4]
 8003268:	0030      	movs	r0, r6
 800326a:	0025      	movs	r5, r4
 800326c:	f000 f86c 	bl	8003348 <__malloc_unlock>
 8003270:	2207      	movs	r2, #7
 8003272:	350b      	adds	r5, #11
 8003274:	1d23      	adds	r3, r4, #4
 8003276:	4395      	bics	r5, r2
 8003278:	1aea      	subs	r2, r5, r3
 800327a:	429d      	cmp	r5, r3
 800327c:	d0e5      	beq.n	800324a <_malloc_r+0x82>
 800327e:	1b5b      	subs	r3, r3, r5
 8003280:	50a3      	str	r3, [r4, r2]
 8003282:	e7e2      	b.n	800324a <_malloc_r+0x82>
 8003284:	605a      	str	r2, [r3, #4]
 8003286:	e7ec      	b.n	8003262 <_malloc_r+0x9a>
 8003288:	6862      	ldr	r2, [r4, #4]
 800328a:	42a3      	cmp	r3, r4
 800328c:	d101      	bne.n	8003292 <_malloc_r+0xca>
 800328e:	602a      	str	r2, [r5, #0]
 8003290:	e7ea      	b.n	8003268 <_malloc_r+0xa0>
 8003292:	605a      	str	r2, [r3, #4]
 8003294:	e7e8      	b.n	8003268 <_malloc_r+0xa0>
 8003296:	0023      	movs	r3, r4
 8003298:	6864      	ldr	r4, [r4, #4]
 800329a:	e7a7      	b.n	80031ec <_malloc_r+0x24>
 800329c:	002c      	movs	r4, r5
 800329e:	686d      	ldr	r5, [r5, #4]
 80032a0:	e7af      	b.n	8003202 <_malloc_r+0x3a>
 80032a2:	230c      	movs	r3, #12
 80032a4:	0030      	movs	r0, r6
 80032a6:	6033      	str	r3, [r6, #0]
 80032a8:	f000 f84e 	bl	8003348 <__malloc_unlock>
 80032ac:	e7cd      	b.n	800324a <_malloc_r+0x82>
 80032ae:	46c0      	nop			; (mov r8, r8)
 80032b0:	20000194 	.word	0x20000194

080032b4 <_realloc_r>:
 80032b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80032b6:	0007      	movs	r7, r0
 80032b8:	000e      	movs	r6, r1
 80032ba:	0014      	movs	r4, r2
 80032bc:	2900      	cmp	r1, #0
 80032be:	d105      	bne.n	80032cc <_realloc_r+0x18>
 80032c0:	0011      	movs	r1, r2
 80032c2:	f7ff ff81 	bl	80031c8 <_malloc_r>
 80032c6:	0005      	movs	r5, r0
 80032c8:	0028      	movs	r0, r5
 80032ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80032cc:	2a00      	cmp	r2, #0
 80032ce:	d103      	bne.n	80032d8 <_realloc_r+0x24>
 80032d0:	f7ff ff0e 	bl	80030f0 <_free_r>
 80032d4:	0025      	movs	r5, r4
 80032d6:	e7f7      	b.n	80032c8 <_realloc_r+0x14>
 80032d8:	f000 f83e 	bl	8003358 <_malloc_usable_size_r>
 80032dc:	9001      	str	r0, [sp, #4]
 80032de:	4284      	cmp	r4, r0
 80032e0:	d803      	bhi.n	80032ea <_realloc_r+0x36>
 80032e2:	0035      	movs	r5, r6
 80032e4:	0843      	lsrs	r3, r0, #1
 80032e6:	42a3      	cmp	r3, r4
 80032e8:	d3ee      	bcc.n	80032c8 <_realloc_r+0x14>
 80032ea:	0021      	movs	r1, r4
 80032ec:	0038      	movs	r0, r7
 80032ee:	f7ff ff6b 	bl	80031c8 <_malloc_r>
 80032f2:	1e05      	subs	r5, r0, #0
 80032f4:	d0e8      	beq.n	80032c8 <_realloc_r+0x14>
 80032f6:	9b01      	ldr	r3, [sp, #4]
 80032f8:	0022      	movs	r2, r4
 80032fa:	429c      	cmp	r4, r3
 80032fc:	d900      	bls.n	8003300 <_realloc_r+0x4c>
 80032fe:	001a      	movs	r2, r3
 8003300:	0031      	movs	r1, r6
 8003302:	0028      	movs	r0, r5
 8003304:	f7ff fed7 	bl	80030b6 <memcpy>
 8003308:	0031      	movs	r1, r6
 800330a:	0038      	movs	r0, r7
 800330c:	f7ff fef0 	bl	80030f0 <_free_r>
 8003310:	e7da      	b.n	80032c8 <_realloc_r+0x14>
	...

08003314 <_sbrk_r>:
 8003314:	2300      	movs	r3, #0
 8003316:	b570      	push	{r4, r5, r6, lr}
 8003318:	4d06      	ldr	r5, [pc, #24]	; (8003334 <_sbrk_r+0x20>)
 800331a:	0004      	movs	r4, r0
 800331c:	0008      	movs	r0, r1
 800331e:	602b      	str	r3, [r5, #0]
 8003320:	f7fd f9cc 	bl	80006bc <_sbrk>
 8003324:	1c43      	adds	r3, r0, #1
 8003326:	d103      	bne.n	8003330 <_sbrk_r+0x1c>
 8003328:	682b      	ldr	r3, [r5, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d000      	beq.n	8003330 <_sbrk_r+0x1c>
 800332e:	6023      	str	r3, [r4, #0]
 8003330:	bd70      	pop	{r4, r5, r6, pc}
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	2000019c 	.word	0x2000019c

08003338 <__malloc_lock>:
 8003338:	b510      	push	{r4, lr}
 800333a:	4802      	ldr	r0, [pc, #8]	; (8003344 <__malloc_lock+0xc>)
 800333c:	f000 f814 	bl	8003368 <__retarget_lock_acquire_recursive>
 8003340:	bd10      	pop	{r4, pc}
 8003342:	46c0      	nop			; (mov r8, r8)
 8003344:	200001a0 	.word	0x200001a0

08003348 <__malloc_unlock>:
 8003348:	b510      	push	{r4, lr}
 800334a:	4802      	ldr	r0, [pc, #8]	; (8003354 <__malloc_unlock+0xc>)
 800334c:	f000 f80d 	bl	800336a <__retarget_lock_release_recursive>
 8003350:	bd10      	pop	{r4, pc}
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	200001a0 	.word	0x200001a0

08003358 <_malloc_usable_size_r>:
 8003358:	1f0b      	subs	r3, r1, #4
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	1f18      	subs	r0, r3, #4
 800335e:	2b00      	cmp	r3, #0
 8003360:	da01      	bge.n	8003366 <_malloc_usable_size_r+0xe>
 8003362:	580b      	ldr	r3, [r1, r0]
 8003364:	18c0      	adds	r0, r0, r3
 8003366:	4770      	bx	lr

08003368 <__retarget_lock_acquire_recursive>:
 8003368:	4770      	bx	lr

0800336a <__retarget_lock_release_recursive>:
 800336a:	4770      	bx	lr

0800336c <_init>:
 800336c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336e:	46c0      	nop			; (mov r8, r8)
 8003370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003372:	bc08      	pop	{r3}
 8003374:	469e      	mov	lr, r3
 8003376:	4770      	bx	lr

08003378 <_fini>:
 8003378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800337a:	46c0      	nop			; (mov r8, r8)
 800337c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800337e:	bc08      	pop	{r3}
 8003380:	469e      	mov	lr, r3
 8003382:	4770      	bx	lr
