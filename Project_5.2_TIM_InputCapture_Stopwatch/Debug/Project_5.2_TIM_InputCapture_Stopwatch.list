
Project_5.2_TIM_InputCapture_Stopwatch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bcc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08003c8c  08003c8c  00013c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d40  08003d40  000200d4  2**0
                  CONTENTS
  4 .ARM          00000000  08003d40  08003d40  000200d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d40  08003d40  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d40  08003d40  00013d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d44  08003d44  00013d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  08003d48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  200000d4  08003e1c  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08003e1c  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc9a  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019fc  00000000  00000000  0002cd96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  0002e798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af0  00000000  00000000  0002f330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019187  00000000  00000000  0002fe20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d907  00000000  00000000  00048fa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096636  00000000  00000000  000568ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ecee4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d60  00000000  00000000  000ecf34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000d4 	.word	0x200000d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003c74 	.word	0x08003c74

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000d8 	.word	0x200000d8
 8000104:	08003c74 	.word	0x08003c74

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <instantClock>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void instantClock(void){
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	last_cptr_vrbl = TIM3->CCR1;
 8000238:	4b26      	ldr	r3, [pc, #152]	; (80002d4 <instantClock+0xa0>)
 800023a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800023c:	4b26      	ldr	r3, [pc, #152]	; (80002d8 <instantClock+0xa4>)
 800023e:	601a      	str	r2, [r3, #0]
	total_second = ((last_cptr_vrbl + (overflow * 48000)) - first_cptr_vrbl) / 48000;
 8000240:	4b26      	ldr	r3, [pc, #152]	; (80002dc <instantClock+0xa8>)
 8000242:	881b      	ldrh	r3, [r3, #0]
 8000244:	b29b      	uxth	r3, r3
 8000246:	001a      	movs	r2, r3
 8000248:	4b25      	ldr	r3, [pc, #148]	; (80002e0 <instantClock+0xac>)
 800024a:	4353      	muls	r3, r2
 800024c:	001a      	movs	r2, r3
 800024e:	4b22      	ldr	r3, [pc, #136]	; (80002d8 <instantClock+0xa4>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	18d2      	adds	r2, r2, r3
 8000254:	4b23      	ldr	r3, [pc, #140]	; (80002e4 <instantClock+0xb0>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	1ad3      	subs	r3, r2, r3
 800025a:	4921      	ldr	r1, [pc, #132]	; (80002e0 <instantClock+0xac>)
 800025c:	0018      	movs	r0, r3
 800025e:	f7ff ff5d 	bl	800011c <__udivsi3>
 8000262:	0003      	movs	r3, r0
 8000264:	001a      	movs	r2, r3
 8000266:	4b20      	ldr	r3, [pc, #128]	; (80002e8 <instantClock+0xb4>)
 8000268:	601a      	str	r2, [r3, #0]

	minute = (total_second/60);
 800026a:	4b1f      	ldr	r3, [pc, #124]	; (80002e8 <instantClock+0xb4>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	213c      	movs	r1, #60	; 0x3c
 8000270:	0018      	movs	r0, r3
 8000272:	f7ff ff53 	bl	800011c <__udivsi3>
 8000276:	0003      	movs	r3, r0
 8000278:	b2da      	uxtb	r2, r3
 800027a:	4b1c      	ldr	r3, [pc, #112]	; (80002ec <instantClock+0xb8>)
 800027c:	701a      	strb	r2, [r3, #0]
	hours  = minute / 60;
 800027e:	4b1b      	ldr	r3, [pc, #108]	; (80002ec <instantClock+0xb8>)
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	b2db      	uxtb	r3, r3
 8000284:	213c      	movs	r1, #60	; 0x3c
 8000286:	0018      	movs	r0, r3
 8000288:	f7ff ff48 	bl	800011c <__udivsi3>
 800028c:	0003      	movs	r3, r0
 800028e:	b2da      	uxtb	r2, r3
 8000290:	4b17      	ldr	r3, [pc, #92]	; (80002f0 <instantClock+0xbc>)
 8000292:	701a      	strb	r2, [r3, #0]

	second = total_second - minute*60;
 8000294:	4b14      	ldr	r3, [pc, #80]	; (80002e8 <instantClock+0xb4>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	b2da      	uxtb	r2, r3
 800029a:	4b14      	ldr	r3, [pc, #80]	; (80002ec <instantClock+0xb8>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	b2db      	uxtb	r3, r3
 80002a0:	213c      	movs	r1, #60	; 0x3c
 80002a2:	434b      	muls	r3, r1
 80002a4:	b2db      	uxtb	r3, r3
 80002a6:	1ad3      	subs	r3, r2, r3
 80002a8:	b2da      	uxtb	r2, r3
 80002aa:	4b12      	ldr	r3, [pc, #72]	; (80002f4 <instantClock+0xc0>)
 80002ac:	701a      	strb	r2, [r3, #0]
	minute = minute - hours*60;
 80002ae:	4b10      	ldr	r3, [pc, #64]	; (80002f0 <instantClock+0xbc>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	b2db      	uxtb	r3, r3
 80002b4:	1c1a      	adds	r2, r3, #0
 80002b6:	011b      	lsls	r3, r3, #4
 80002b8:	1ad3      	subs	r3, r2, r3
 80002ba:	009b      	lsls	r3, r3, #2
 80002bc:	b2da      	uxtb	r2, r3
 80002be:	4b0b      	ldr	r3, [pc, #44]	; (80002ec <instantClock+0xb8>)
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	18d3      	adds	r3, r2, r3
 80002c6:	b2da      	uxtb	r2, r3
 80002c8:	4b08      	ldr	r3, [pc, #32]	; (80002ec <instantClock+0xb8>)
 80002ca:	701a      	strb	r2, [r3, #0]


}
 80002cc:	46c0      	nop			; (mov r8, r8)
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	46c0      	nop			; (mov r8, r8)
 80002d4:	40000400 	.word	0x40000400
 80002d8:	2000018c 	.word	0x2000018c
 80002dc:	20000194 	.word	0x20000194
 80002e0:	0000bb80 	.word	0x0000bb80
 80002e4:	20000188 	.word	0x20000188
 80002e8:	20000190 	.word	0x20000190
 80002ec:	20000199 	.word	0x20000199
 80002f0:	2000019a 	.word	0x2000019a
 80002f4:	20000198 	.word	0x20000198

080002f8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80002f8:	b590      	push	{r4, r7, lr}
 80002fa:	b085      	sub	sp, #20
 80002fc:	af02      	add	r7, sp, #8
 80002fe:	6078      	str	r0, [r7, #4]

	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8000300:	2380      	movs	r3, #128	; 0x80
 8000302:	005a      	lsls	r2, r3, #1
 8000304:	2390      	movs	r3, #144	; 0x90
 8000306:	05db      	lsls	r3, r3, #23
 8000308:	0011      	movs	r1, r2
 800030a:	0018      	movs	r0, r3
 800030c:	f000 fe39 	bl	8000f82 <HAL_GPIO_TogglePin>

	switch (ticks){
 8000310:	4b24      	ldr	r3, [pc, #144]	; (80003a4 <HAL_TIM_IC_CaptureCallback+0xac>)
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	b2db      	uxtb	r3, r3
 8000316:	2b00      	cmp	r3, #0
 8000318:	d002      	beq.n	8000320 <HAL_TIM_IC_CaptureCallback+0x28>
 800031a:	2b01      	cmp	r3, #1
 800031c:	d014      	beq.n	8000348 <HAL_TIM_IC_CaptureCallback+0x50>
		ticks = IDLE;
		break;

	}

}
 800031e:	e03d      	b.n	800039c <HAL_TIM_IC_CaptureCallback+0xa4>
		HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000320:	4921      	ldr	r1, [pc, #132]	; (80003a8 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000322:	4822      	ldr	r0, [pc, #136]	; (80003ac <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000324:	2364      	movs	r3, #100	; 0x64
 8000326:	2264      	movs	r2, #100	; 0x64
 8000328:	f002 fc16 	bl	8002b58 <HAL_UART_Transmit>
		first_cptr_vrbl = TIM3->CCR1;
 800032c:	4b20      	ldr	r3, [pc, #128]	; (80003b0 <HAL_TIM_IC_CaptureCallback+0xb8>)
 800032e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000330:	4b20      	ldr	r3, [pc, #128]	; (80003b4 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000332:	601a      	str	r2, [r3, #0]
		overflow = 0;
 8000334:	4b20      	ldr	r3, [pc, #128]	; (80003b8 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000336:	2200      	movs	r2, #0
 8000338:	801a      	strh	r2, [r3, #0]
		ticks = DONE;
 800033a:	4b1a      	ldr	r3, [pc, #104]	; (80003a4 <HAL_TIM_IC_CaptureCallback+0xac>)
 800033c:	2201      	movs	r2, #1
 800033e:	701a      	strb	r2, [r3, #0]
		flag=DONE;
 8000340:	4b1e      	ldr	r3, [pc, #120]	; (80003bc <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000342:	2201      	movs	r2, #1
 8000344:	701a      	strb	r2, [r3, #0]
		break;
 8000346:	e029      	b.n	800039c <HAL_TIM_IC_CaptureCallback+0xa4>
		flag = IDLE;
 8000348:	4b1c      	ldr	r3, [pc, #112]	; (80003bc <HAL_TIM_IC_CaptureCallback+0xc4>)
 800034a:	2200      	movs	r2, #0
 800034c:	701a      	strb	r2, [r3, #0]
		instantClock();
 800034e:	f7ff ff71 	bl	8000234 <instantClock>
		if (total_second != 0) {
 8000352:	4b1b      	ldr	r3, [pc, #108]	; (80003c0 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d016      	beq.n	8000388 <HAL_TIM_IC_CaptureCallback+0x90>
			sprintf(MSG, "Stopwatch ended\n\Passing time = %lu:%lu:%lu\n\n\n\r", hours,minute,second);
 800035a:	4b1a      	ldr	r3, [pc, #104]	; (80003c4 <HAL_TIM_IC_CaptureCallback+0xcc>)
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	b2db      	uxtb	r3, r3
 8000360:	001a      	movs	r2, r3
 8000362:	4b19      	ldr	r3, [pc, #100]	; (80003c8 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	b2db      	uxtb	r3, r3
 8000368:	001c      	movs	r4, r3
 800036a:	4b18      	ldr	r3, [pc, #96]	; (80003cc <HAL_TIM_IC_CaptureCallback+0xd4>)
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	b2db      	uxtb	r3, r3
 8000370:	4917      	ldr	r1, [pc, #92]	; (80003d0 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000372:	4818      	ldr	r0, [pc, #96]	; (80003d4 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000374:	9300      	str	r3, [sp, #0]
 8000376:	0023      	movs	r3, r4
 8000378:	f003 f812 	bl	80033a0 <siprintf>
			HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 800037c:	4915      	ldr	r1, [pc, #84]	; (80003d4 <HAL_TIM_IC_CaptureCallback+0xdc>)
 800037e:	480b      	ldr	r0, [pc, #44]	; (80003ac <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000380:	2364      	movs	r3, #100	; 0x64
 8000382:	2264      	movs	r2, #100	; 0x64
 8000384:	f002 fbe8 	bl	8002b58 <HAL_UART_Transmit>
		first_cptr_vrbl = 0;
 8000388:	4b0a      	ldr	r3, [pc, #40]	; (80003b4 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
		last_cptr_vrbl = 0;
 800038e:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000390:	2200      	movs	r2, #0
 8000392:	601a      	str	r2, [r3, #0]
		ticks = IDLE;
 8000394:	4b03      	ldr	r3, [pc, #12]	; (80003a4 <HAL_TIM_IC_CaptureCallback+0xac>)
 8000396:	2200      	movs	r2, #0
 8000398:	701a      	strb	r2, [r3, #0]
		break;
 800039a:	46c0      	nop			; (mov r8, r8)
}
 800039c:	46c0      	nop			; (mov r8, r8)
 800039e:	46bd      	mov	sp, r7
 80003a0:	b003      	add	sp, #12
 80003a2:	bd90      	pop	{r4, r7, pc}
 80003a4:	20000196 	.word	0x20000196
 80003a8:	20000000 	.word	0x20000000
 80003ac:	200001e4 	.word	0x200001e4
 80003b0:	40000400 	.word	0x40000400
 80003b4:	20000188 	.word	0x20000188
 80003b8:	20000194 	.word	0x20000194
 80003bc:	20000197 	.word	0x20000197
 80003c0:	20000190 	.word	0x20000190
 80003c4:	2000019a 	.word	0x2000019a
 80003c8:	20000199 	.word	0x20000199
 80003cc:	20000198 	.word	0x20000198
 80003d0:	08003c8c 	.word	0x08003c8c
 80003d4:	200000f0 	.word	0x200000f0
 80003d8:	2000018c 	.word	0x2000018c

080003dc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80003dc:	b590      	push	{r4, r7, lr}
 80003de:	b085      	sub	sp, #20
 80003e0:	af02      	add	r7, sp, #8
 80003e2:	6078      	str	r0, [r7, #4]


	instantClock();
 80003e4:	f7ff ff26 	bl	8000234 <instantClock>
	 if(flag == DONE){
 80003e8:	4b13      	ldr	r3, [pc, #76]	; (8000438 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	2b01      	cmp	r3, #1
 80003f0:	d116      	bne.n	8000420 <HAL_TIM_PeriodElapsedCallback+0x44>
				sprintf(i_MSG, "*** %lu:%lu:%lu ***\n\r", hours,minute,second);
 80003f2:	4b12      	ldr	r3, [pc, #72]	; (800043c <HAL_TIM_PeriodElapsedCallback+0x60>)
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	001a      	movs	r2, r3
 80003fa:	4b11      	ldr	r3, [pc, #68]	; (8000440 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	001c      	movs	r4, r3
 8000402:	4b10      	ldr	r3, [pc, #64]	; (8000444 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	b2db      	uxtb	r3, r3
 8000408:	490f      	ldr	r1, [pc, #60]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800040a:	4810      	ldr	r0, [pc, #64]	; (800044c <HAL_TIM_PeriodElapsedCallback+0x70>)
 800040c:	9300      	str	r3, [sp, #0]
 800040e:	0023      	movs	r3, r4
 8000410:	f002 ffc6 	bl	80033a0 <siprintf>
				HAL_UART_Transmit(&huart2, i_MSG, sizeof(i_MSG), 100);}
 8000414:	490d      	ldr	r1, [pc, #52]	; (800044c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000416:	480e      	ldr	r0, [pc, #56]	; (8000450 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000418:	2364      	movs	r3, #100	; 0x64
 800041a:	2232      	movs	r2, #50	; 0x32
 800041c:	f002 fb9c 	bl	8002b58 <HAL_UART_Transmit>
	 overflow++;
 8000420:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000422:	881b      	ldrh	r3, [r3, #0]
 8000424:	b29b      	uxth	r3, r3
 8000426:	3301      	adds	r3, #1
 8000428:	b29a      	uxth	r2, r3
 800042a:	4b0a      	ldr	r3, [pc, #40]	; (8000454 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800042c:	801a      	strh	r2, [r3, #0]
}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	46bd      	mov	sp, r7
 8000432:	b003      	add	sp, #12
 8000434:	bd90      	pop	{r4, r7, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	20000197 	.word	0x20000197
 800043c:	2000019a 	.word	0x2000019a
 8000440:	20000199 	.word	0x20000199
 8000444:	20000198 	.word	0x20000198
 8000448:	08003cbc 	.word	0x08003cbc
 800044c:	20000154 	.word	0x20000154
 8000450:	200001e4 	.word	0x200001e4
 8000454:	20000194 	.word	0x20000194

08000458 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800045c:	f000 faba 	bl	80009d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000460:	f000 f81a 	bl	8000498 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000464:	f000 f91a 	bl	800069c <MX_GPIO_Init>
  MX_TIM3_Init();
 8000468:	f000 f86a 	bl	8000540 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800046c:	f000 f8e6 	bl	800063c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000470:	4b08      	ldr	r3, [pc, #32]	; (8000494 <main+0x3c>)
 8000472:	0018      	movs	r0, r3
 8000474:	f001 fbee 	bl	8001c54 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000478:	4b06      	ldr	r3, [pc, #24]	; (8000494 <main+0x3c>)
 800047a:	2100      	movs	r1, #0
 800047c:	0018      	movs	r0, r3
 800047e:	f001 fc93 	bl	8001da8 <HAL_TIM_IC_Start_IT>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000482:	2380      	movs	r3, #128	; 0x80
 8000484:	0059      	lsls	r1, r3, #1
 8000486:	2390      	movs	r3, #144	; 0x90
 8000488:	05db      	lsls	r3, r3, #23
 800048a:	2201      	movs	r2, #1
 800048c:	0018      	movs	r0, r3
 800048e:	f000 fd5b 	bl	8000f48 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000492:	e7fe      	b.n	8000492 <main+0x3a>
 8000494:	2000019c 	.word	0x2000019c

08000498 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000498:	b590      	push	{r4, r7, lr}
 800049a:	b099      	sub	sp, #100	; 0x64
 800049c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800049e:	242c      	movs	r4, #44	; 0x2c
 80004a0:	193b      	adds	r3, r7, r4
 80004a2:	0018      	movs	r0, r3
 80004a4:	2334      	movs	r3, #52	; 0x34
 80004a6:	001a      	movs	r2, r3
 80004a8:	2100      	movs	r1, #0
 80004aa:	f002 ff71 	bl	8003390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ae:	231c      	movs	r3, #28
 80004b0:	18fb      	adds	r3, r7, r3
 80004b2:	0018      	movs	r0, r3
 80004b4:	2310      	movs	r3, #16
 80004b6:	001a      	movs	r2, r3
 80004b8:	2100      	movs	r1, #0
 80004ba:	f002 ff69 	bl	8003390 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004be:	003b      	movs	r3, r7
 80004c0:	0018      	movs	r0, r3
 80004c2:	231c      	movs	r3, #28
 80004c4:	001a      	movs	r2, r3
 80004c6:	2100      	movs	r1, #0
 80004c8:	f002 ff62 	bl	8003390 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80004cc:	193b      	adds	r3, r7, r4
 80004ce:	2220      	movs	r2, #32
 80004d0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80004d2:	193b      	adds	r3, r7, r4
 80004d4:	2201      	movs	r2, #1
 80004d6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004d8:	193b      	adds	r3, r7, r4
 80004da:	2200      	movs	r2, #0
 80004dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004de:	193b      	adds	r3, r7, r4
 80004e0:	0018      	movs	r0, r3
 80004e2:	f000 fd69 	bl	8000fb8 <HAL_RCC_OscConfig>
 80004e6:	1e03      	subs	r3, r0, #0
 80004e8:	d001      	beq.n	80004ee <SystemClock_Config+0x56>
  {
    Error_Handler();
 80004ea:	f000 f921 	bl	8000730 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ee:	211c      	movs	r1, #28
 80004f0:	187b      	adds	r3, r7, r1
 80004f2:	2207      	movs	r2, #7
 80004f4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2203      	movs	r2, #3
 80004fa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004fc:	187b      	adds	r3, r7, r1
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000502:	187b      	adds	r3, r7, r1
 8000504:	2200      	movs	r2, #0
 8000506:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000508:	187b      	adds	r3, r7, r1
 800050a:	2101      	movs	r1, #1
 800050c:	0018      	movs	r0, r3
 800050e:	f001 f8d9 	bl	80016c4 <HAL_RCC_ClockConfig>
 8000512:	1e03      	subs	r3, r0, #0
 8000514:	d001      	beq.n	800051a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000516:	f000 f90b 	bl	8000730 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800051a:	003b      	movs	r3, r7
 800051c:	2202      	movs	r2, #2
 800051e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000520:	003b      	movs	r3, r7
 8000522:	2200      	movs	r2, #0
 8000524:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000526:	003b      	movs	r3, r7
 8000528:	0018      	movs	r0, r3
 800052a:	f001 fa45 	bl	80019b8 <HAL_RCCEx_PeriphCLKConfig>
 800052e:	1e03      	subs	r3, r0, #0
 8000530:	d001      	beq.n	8000536 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000532:	f000 f8fd 	bl	8000730 <Error_Handler>
  }
}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	b019      	add	sp, #100	; 0x64
 800053c:	bd90      	pop	{r4, r7, pc}
	...

08000540 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b08a      	sub	sp, #40	; 0x28
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000546:	2318      	movs	r3, #24
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	0018      	movs	r0, r3
 800054c:	2310      	movs	r3, #16
 800054e:	001a      	movs	r2, r3
 8000550:	2100      	movs	r1, #0
 8000552:	f002 ff1d 	bl	8003390 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000556:	2310      	movs	r3, #16
 8000558:	18fb      	adds	r3, r7, r3
 800055a:	0018      	movs	r0, r3
 800055c:	2308      	movs	r3, #8
 800055e:	001a      	movs	r2, r3
 8000560:	2100      	movs	r1, #0
 8000562:	f002 ff15 	bl	8003390 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000566:	003b      	movs	r3, r7
 8000568:	0018      	movs	r0, r3
 800056a:	2310      	movs	r3, #16
 800056c:	001a      	movs	r2, r3
 800056e:	2100      	movs	r1, #0
 8000570:	f002 ff0e 	bl	8003390 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000574:	4b2e      	ldr	r3, [pc, #184]	; (8000630 <MX_TIM3_Init+0xf0>)
 8000576:	4a2f      	ldr	r2, [pc, #188]	; (8000634 <MX_TIM3_Init+0xf4>)
 8000578:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000;
 800057a:	4b2d      	ldr	r3, [pc, #180]	; (8000630 <MX_TIM3_Init+0xf0>)
 800057c:	22fa      	movs	r2, #250	; 0xfa
 800057e:	0092      	lsls	r2, r2, #2
 8000580:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000582:	4b2b      	ldr	r3, [pc, #172]	; (8000630 <MX_TIM3_Init+0xf0>)
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 48000;
 8000588:	4b29      	ldr	r3, [pc, #164]	; (8000630 <MX_TIM3_Init+0xf0>)
 800058a:	4a2b      	ldr	r2, [pc, #172]	; (8000638 <MX_TIM3_Init+0xf8>)
 800058c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800058e:	4b28      	ldr	r3, [pc, #160]	; (8000630 <MX_TIM3_Init+0xf0>)
 8000590:	2200      	movs	r2, #0
 8000592:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000594:	4b26      	ldr	r3, [pc, #152]	; (8000630 <MX_TIM3_Init+0xf0>)
 8000596:	2280      	movs	r2, #128	; 0x80
 8000598:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800059a:	4b25      	ldr	r3, [pc, #148]	; (8000630 <MX_TIM3_Init+0xf0>)
 800059c:	0018      	movs	r0, r3
 800059e:	f001 fb09 	bl	8001bb4 <HAL_TIM_Base_Init>
 80005a2:	1e03      	subs	r3, r0, #0
 80005a4:	d001      	beq.n	80005aa <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80005a6:	f000 f8c3 	bl	8000730 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005aa:	2118      	movs	r1, #24
 80005ac:	187b      	adds	r3, r7, r1
 80005ae:	2280      	movs	r2, #128	; 0x80
 80005b0:	0152      	lsls	r2, r2, #5
 80005b2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005b4:	187a      	adds	r2, r7, r1
 80005b6:	4b1e      	ldr	r3, [pc, #120]	; (8000630 <MX_TIM3_Init+0xf0>)
 80005b8:	0011      	movs	r1, r2
 80005ba:	0018      	movs	r0, r3
 80005bc:	f001 febc 	bl	8002338 <HAL_TIM_ConfigClockSource>
 80005c0:	1e03      	subs	r3, r0, #0
 80005c2:	d001      	beq.n	80005c8 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80005c4:	f000 f8b4 	bl	8000730 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80005c8:	4b19      	ldr	r3, [pc, #100]	; (8000630 <MX_TIM3_Init+0xf0>)
 80005ca:	0018      	movs	r0, r3
 80005cc:	f001 fb94 	bl	8001cf8 <HAL_TIM_IC_Init>
 80005d0:	1e03      	subs	r3, r0, #0
 80005d2:	d001      	beq.n	80005d8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80005d4:	f000 f8ac 	bl	8000730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005d8:	2110      	movs	r1, #16
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	2200      	movs	r2, #0
 80005e4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005e6:	187a      	adds	r2, r7, r1
 80005e8:	4b11      	ldr	r3, [pc, #68]	; (8000630 <MX_TIM3_Init+0xf0>)
 80005ea:	0011      	movs	r1, r2
 80005ec:	0018      	movs	r0, r3
 80005ee:	f002 f9f1 	bl	80029d4 <HAL_TIMEx_MasterConfigSynchronization>
 80005f2:	1e03      	subs	r3, r0, #0
 80005f4:	d001      	beq.n	80005fa <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 80005f6:	f000 f89b 	bl	8000730 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80005fa:	003b      	movs	r3, r7
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000600:	003b      	movs	r3, r7
 8000602:	2201      	movs	r2, #1
 8000604:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000606:	003b      	movs	r3, r7
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 15;
 800060c:	003b      	movs	r3, r7
 800060e:	220f      	movs	r2, #15
 8000610:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000612:	0039      	movs	r1, r7
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <MX_TIM3_Init+0xf0>)
 8000616:	2200      	movs	r2, #0
 8000618:	0018      	movs	r0, r3
 800061a:	f001 fde9 	bl	80021f0 <HAL_TIM_IC_ConfigChannel>
 800061e:	1e03      	subs	r3, r0, #0
 8000620:	d001      	beq.n	8000626 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8000622:	f000 f885 	bl	8000730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	46bd      	mov	sp, r7
 800062a:	b00a      	add	sp, #40	; 0x28
 800062c:	bd80      	pop	{r7, pc}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	2000019c 	.word	0x2000019c
 8000634:	40000400 	.word	0x40000400
 8000638:	0000bb80 	.word	0x0000bb80

0800063c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000640:	4b14      	ldr	r3, [pc, #80]	; (8000694 <MX_USART2_UART_Init+0x58>)
 8000642:	4a15      	ldr	r2, [pc, #84]	; (8000698 <MX_USART2_UART_Init+0x5c>)
 8000644:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000646:	4b13      	ldr	r3, [pc, #76]	; (8000694 <MX_USART2_UART_Init+0x58>)
 8000648:	2296      	movs	r2, #150	; 0x96
 800064a:	0192      	lsls	r2, r2, #6
 800064c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800064e:	4b11      	ldr	r3, [pc, #68]	; (8000694 <MX_USART2_UART_Init+0x58>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000654:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <MX_USART2_UART_Init+0x58>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <MX_USART2_UART_Init+0x58>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_USART2_UART_Init+0x58>)
 8000662:	220c      	movs	r2, #12
 8000664:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000666:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <MX_USART2_UART_Init+0x58>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_USART2_UART_Init+0x58>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000672:	4b08      	ldr	r3, [pc, #32]	; (8000694 <MX_USART2_UART_Init+0x58>)
 8000674:	2200      	movs	r2, #0
 8000676:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_USART2_UART_Init+0x58>)
 800067a:	2200      	movs	r2, #0
 800067c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800067e:	4b05      	ldr	r3, [pc, #20]	; (8000694 <MX_USART2_UART_Init+0x58>)
 8000680:	0018      	movs	r0, r3
 8000682:	f002 fa15 	bl	8002ab0 <HAL_UART_Init>
 8000686:	1e03      	subs	r3, r0, #0
 8000688:	d001      	beq.n	800068e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800068a:	f000 f851 	bl	8000730 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	200001e4 	.word	0x200001e4
 8000698:	40004400 	.word	0x40004400

0800069c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800069c:	b590      	push	{r4, r7, lr}
 800069e:	b089      	sub	sp, #36	; 0x24
 80006a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a2:	240c      	movs	r4, #12
 80006a4:	193b      	adds	r3, r7, r4
 80006a6:	0018      	movs	r0, r3
 80006a8:	2314      	movs	r3, #20
 80006aa:	001a      	movs	r2, r3
 80006ac:	2100      	movs	r1, #0
 80006ae:	f002 fe6f 	bl	8003390 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006b2:	4b1e      	ldr	r3, [pc, #120]	; (800072c <MX_GPIO_Init+0x90>)
 80006b4:	695a      	ldr	r2, [r3, #20]
 80006b6:	4b1d      	ldr	r3, [pc, #116]	; (800072c <MX_GPIO_Init+0x90>)
 80006b8:	2180      	movs	r1, #128	; 0x80
 80006ba:	03c9      	lsls	r1, r1, #15
 80006bc:	430a      	orrs	r2, r1
 80006be:	615a      	str	r2, [r3, #20]
 80006c0:	4b1a      	ldr	r3, [pc, #104]	; (800072c <MX_GPIO_Init+0x90>)
 80006c2:	695a      	ldr	r2, [r3, #20]
 80006c4:	2380      	movs	r3, #128	; 0x80
 80006c6:	03db      	lsls	r3, r3, #15
 80006c8:	4013      	ands	r3, r2
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	4b17      	ldr	r3, [pc, #92]	; (800072c <MX_GPIO_Init+0x90>)
 80006d0:	695a      	ldr	r2, [r3, #20]
 80006d2:	4b16      	ldr	r3, [pc, #88]	; (800072c <MX_GPIO_Init+0x90>)
 80006d4:	2180      	movs	r1, #128	; 0x80
 80006d6:	0289      	lsls	r1, r1, #10
 80006d8:	430a      	orrs	r2, r1
 80006da:	615a      	str	r2, [r3, #20]
 80006dc:	4b13      	ldr	r3, [pc, #76]	; (800072c <MX_GPIO_Init+0x90>)
 80006de:	695a      	ldr	r2, [r3, #20]
 80006e0:	2380      	movs	r3, #128	; 0x80
 80006e2:	029b      	lsls	r3, r3, #10
 80006e4:	4013      	ands	r3, r2
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80006ea:	2380      	movs	r3, #128	; 0x80
 80006ec:	0059      	lsls	r1, r3, #1
 80006ee:	2390      	movs	r3, #144	; 0x90
 80006f0:	05db      	lsls	r3, r3, #23
 80006f2:	2200      	movs	r2, #0
 80006f4:	0018      	movs	r0, r3
 80006f6:	f000 fc27 	bl	8000f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	2280      	movs	r2, #128	; 0x80
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000702:	193b      	adds	r3, r7, r4
 8000704:	2201      	movs	r2, #1
 8000706:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	193b      	adds	r3, r7, r4
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070e:	193b      	adds	r3, r7, r4
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000714:	193a      	adds	r2, r7, r4
 8000716:	2390      	movs	r3, #144	; 0x90
 8000718:	05db      	lsls	r3, r3, #23
 800071a:	0011      	movs	r1, r2
 800071c:	0018      	movs	r0, r3
 800071e:	f000 fa9b 	bl	8000c58 <HAL_GPIO_Init>

}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	46bd      	mov	sp, r7
 8000726:	b009      	add	sp, #36	; 0x24
 8000728:	bd90      	pop	{r4, r7, pc}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	40021000 	.word	0x40021000

08000730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000734:	b672      	cpsid	i
}
 8000736:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000738:	e7fe      	b.n	8000738 <Error_Handler+0x8>
	...

0800073c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000742:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <HAL_MspInit+0x44>)
 8000744:	699a      	ldr	r2, [r3, #24]
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <HAL_MspInit+0x44>)
 8000748:	2101      	movs	r1, #1
 800074a:	430a      	orrs	r2, r1
 800074c:	619a      	str	r2, [r3, #24]
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <HAL_MspInit+0x44>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	2201      	movs	r2, #1
 8000754:	4013      	ands	r3, r2
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <HAL_MspInit+0x44>)
 800075c:	69da      	ldr	r2, [r3, #28]
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <HAL_MspInit+0x44>)
 8000760:	2180      	movs	r1, #128	; 0x80
 8000762:	0549      	lsls	r1, r1, #21
 8000764:	430a      	orrs	r2, r1
 8000766:	61da      	str	r2, [r3, #28]
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <HAL_MspInit+0x44>)
 800076a:	69da      	ldr	r2, [r3, #28]
 800076c:	2380      	movs	r3, #128	; 0x80
 800076e:	055b      	lsls	r3, r3, #21
 8000770:	4013      	ands	r3, r2
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	46bd      	mov	sp, r7
 800077a:	b002      	add	sp, #8
 800077c:	bd80      	pop	{r7, pc}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	40021000 	.word	0x40021000

08000784 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000784:	b590      	push	{r4, r7, lr}
 8000786:	b08b      	sub	sp, #44	; 0x2c
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078c:	2414      	movs	r4, #20
 800078e:	193b      	adds	r3, r7, r4
 8000790:	0018      	movs	r0, r3
 8000792:	2314      	movs	r3, #20
 8000794:	001a      	movs	r2, r3
 8000796:	2100      	movs	r1, #0
 8000798:	f002 fdfa 	bl	8003390 <memset>
  if(htim_base->Instance==TIM3)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a1f      	ldr	r2, [pc, #124]	; (8000820 <HAL_TIM_Base_MspInit+0x9c>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d138      	bne.n	8000818 <HAL_TIM_Base_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007a6:	4b1f      	ldr	r3, [pc, #124]	; (8000824 <HAL_TIM_Base_MspInit+0xa0>)
 80007a8:	69da      	ldr	r2, [r3, #28]
 80007aa:	4b1e      	ldr	r3, [pc, #120]	; (8000824 <HAL_TIM_Base_MspInit+0xa0>)
 80007ac:	2102      	movs	r1, #2
 80007ae:	430a      	orrs	r2, r1
 80007b0:	61da      	str	r2, [r3, #28]
 80007b2:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <HAL_TIM_Base_MspInit+0xa0>)
 80007b4:	69db      	ldr	r3, [r3, #28]
 80007b6:	2202      	movs	r2, #2
 80007b8:	4013      	ands	r3, r2
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	4b19      	ldr	r3, [pc, #100]	; (8000824 <HAL_TIM_Base_MspInit+0xa0>)
 80007c0:	695a      	ldr	r2, [r3, #20]
 80007c2:	4b18      	ldr	r3, [pc, #96]	; (8000824 <HAL_TIM_Base_MspInit+0xa0>)
 80007c4:	2180      	movs	r1, #128	; 0x80
 80007c6:	0289      	lsls	r1, r1, #10
 80007c8:	430a      	orrs	r2, r1
 80007ca:	615a      	str	r2, [r3, #20]
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <HAL_TIM_Base_MspInit+0xa0>)
 80007ce:	695a      	ldr	r2, [r3, #20]
 80007d0:	2380      	movs	r3, #128	; 0x80
 80007d2:	029b      	lsls	r3, r3, #10
 80007d4:	4013      	ands	r3, r2
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007da:	0021      	movs	r1, r4
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	2240      	movs	r2, #64	; 0x40
 80007e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	2202      	movs	r2, #2
 80007e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	2200      	movs	r2, #0
 80007f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2201      	movs	r2, #1
 80007f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fa:	187a      	adds	r2, r7, r1
 80007fc:	2390      	movs	r3, #144	; 0x90
 80007fe:	05db      	lsls	r3, r3, #23
 8000800:	0011      	movs	r1, r2
 8000802:	0018      	movs	r0, r3
 8000804:	f000 fa28 	bl	8000c58 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000808:	2200      	movs	r2, #0
 800080a:	2100      	movs	r1, #0
 800080c:	2010      	movs	r0, #16
 800080e:	f000 f9f1 	bl	8000bf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000812:	2010      	movs	r0, #16
 8000814:	f000 fa03 	bl	8000c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	b00b      	add	sp, #44	; 0x2c
 800081e:	bd90      	pop	{r4, r7, pc}
 8000820:	40000400 	.word	0x40000400
 8000824:	40021000 	.word	0x40021000

08000828 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b08b      	sub	sp, #44	; 0x2c
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000830:	2414      	movs	r4, #20
 8000832:	193b      	adds	r3, r7, r4
 8000834:	0018      	movs	r0, r3
 8000836:	2314      	movs	r3, #20
 8000838:	001a      	movs	r2, r3
 800083a:	2100      	movs	r1, #0
 800083c:	f002 fda8 	bl	8003390 <memset>
  if(huart->Instance==USART2)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a1c      	ldr	r2, [pc, #112]	; (80008b8 <HAL_UART_MspInit+0x90>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d132      	bne.n	80008b0 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800084a:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <HAL_UART_MspInit+0x94>)
 800084c:	69da      	ldr	r2, [r3, #28]
 800084e:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <HAL_UART_MspInit+0x94>)
 8000850:	2180      	movs	r1, #128	; 0x80
 8000852:	0289      	lsls	r1, r1, #10
 8000854:	430a      	orrs	r2, r1
 8000856:	61da      	str	r2, [r3, #28]
 8000858:	4b18      	ldr	r3, [pc, #96]	; (80008bc <HAL_UART_MspInit+0x94>)
 800085a:	69da      	ldr	r2, [r3, #28]
 800085c:	2380      	movs	r3, #128	; 0x80
 800085e:	029b      	lsls	r3, r3, #10
 8000860:	4013      	ands	r3, r2
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <HAL_UART_MspInit+0x94>)
 8000868:	695a      	ldr	r2, [r3, #20]
 800086a:	4b14      	ldr	r3, [pc, #80]	; (80008bc <HAL_UART_MspInit+0x94>)
 800086c:	2180      	movs	r1, #128	; 0x80
 800086e:	0289      	lsls	r1, r1, #10
 8000870:	430a      	orrs	r2, r1
 8000872:	615a      	str	r2, [r3, #20]
 8000874:	4b11      	ldr	r3, [pc, #68]	; (80008bc <HAL_UART_MspInit+0x94>)
 8000876:	695a      	ldr	r2, [r3, #20]
 8000878:	2380      	movs	r3, #128	; 0x80
 800087a:	029b      	lsls	r3, r3, #10
 800087c:	4013      	ands	r3, r2
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000882:	0021      	movs	r1, r4
 8000884:	187b      	adds	r3, r7, r1
 8000886:	220c      	movs	r2, #12
 8000888:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	187b      	adds	r3, r7, r1
 800088c:	2202      	movs	r2, #2
 800088e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	187b      	adds	r3, r7, r1
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000896:	187b      	adds	r3, r7, r1
 8000898:	2203      	movs	r2, #3
 800089a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2201      	movs	r2, #1
 80008a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a2:	187a      	adds	r2, r7, r1
 80008a4:	2390      	movs	r3, #144	; 0x90
 80008a6:	05db      	lsls	r3, r3, #23
 80008a8:	0011      	movs	r1, r2
 80008aa:	0018      	movs	r0, r3
 80008ac:	f000 f9d4 	bl	8000c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	b00b      	add	sp, #44	; 0x2c
 80008b6:	bd90      	pop	{r4, r7, pc}
 80008b8:	40004400 	.word	0x40004400
 80008bc:	40021000 	.word	0x40021000

080008c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <NMI_Handler+0x4>

080008c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ca:	e7fe      	b.n	80008ca <HardFault_Handler+0x4>

080008cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008d0:	46c0      	nop			; (mov r8, r8)
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e4:	f000 f8be 	bl	8000a64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e8:	46c0      	nop			; (mov r8, r8)
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80008f4:	4b03      	ldr	r3, [pc, #12]	; (8000904 <TIM3_IRQHandler+0x14>)
 80008f6:	0018      	movs	r0, r3
 80008f8:	f001 fb64 	bl	8001fc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80008fc:	46c0      	nop			; (mov r8, r8)
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	2000019c 	.word	0x2000019c

08000908 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000910:	4a14      	ldr	r2, [pc, #80]	; (8000964 <_sbrk+0x5c>)
 8000912:	4b15      	ldr	r3, [pc, #84]	; (8000968 <_sbrk+0x60>)
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800091c:	4b13      	ldr	r3, [pc, #76]	; (800096c <_sbrk+0x64>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d102      	bne.n	800092a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000924:	4b11      	ldr	r3, [pc, #68]	; (800096c <_sbrk+0x64>)
 8000926:	4a12      	ldr	r2, [pc, #72]	; (8000970 <_sbrk+0x68>)
 8000928:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <_sbrk+0x64>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	18d3      	adds	r3, r2, r3
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	429a      	cmp	r2, r3
 8000936:	d207      	bcs.n	8000948 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000938:	f002 fd00 	bl	800333c <__errno>
 800093c:	0003      	movs	r3, r0
 800093e:	220c      	movs	r2, #12
 8000940:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000942:	2301      	movs	r3, #1
 8000944:	425b      	negs	r3, r3
 8000946:	e009      	b.n	800095c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000948:	4b08      	ldr	r3, [pc, #32]	; (800096c <_sbrk+0x64>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800094e:	4b07      	ldr	r3, [pc, #28]	; (800096c <_sbrk+0x64>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	18d2      	adds	r2, r2, r3
 8000956:	4b05      	ldr	r3, [pc, #20]	; (800096c <_sbrk+0x64>)
 8000958:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800095a:	68fb      	ldr	r3, [r7, #12]
}
 800095c:	0018      	movs	r0, r3
 800095e:	46bd      	mov	sp, r7
 8000960:	b006      	add	sp, #24
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20004000 	.word	0x20004000
 8000968:	00000400 	.word	0x00000400
 800096c:	20000268 	.word	0x20000268
 8000970:	20000280 	.word	0x20000280

08000974 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
	...

08000980 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000980:	480d      	ldr	r0, [pc, #52]	; (80009b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000982:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000984:	480d      	ldr	r0, [pc, #52]	; (80009bc <LoopForever+0x6>)
  ldr r1, =_edata
 8000986:	490e      	ldr	r1, [pc, #56]	; (80009c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000988:	4a0e      	ldr	r2, [pc, #56]	; (80009c4 <LoopForever+0xe>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800098c:	e002      	b.n	8000994 <LoopCopyDataInit>

0800098e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000992:	3304      	adds	r3, #4

08000994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000998:	d3f9      	bcc.n	800098e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099a:	4a0b      	ldr	r2, [pc, #44]	; (80009c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800099c:	4c0b      	ldr	r4, [pc, #44]	; (80009cc <LoopForever+0x16>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a0:	e001      	b.n	80009a6 <LoopFillZerobss>

080009a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a4:	3204      	adds	r2, #4

080009a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a8:	d3fb      	bcc.n	80009a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009aa:	f7ff ffe3 	bl	8000974 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80009ae:	f002 fccb 	bl	8003348 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009b2:	f7ff fd51 	bl	8000458 <main>

080009b6 <LoopForever>:

LoopForever:
    b LoopForever
 80009b6:	e7fe      	b.n	80009b6 <LoopForever>
  ldr   r0, =_estack
 80009b8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80009bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c0:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 80009c4:	08003d48 	.word	0x08003d48
  ldr r2, =_sbss
 80009c8:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 80009cc:	20000280 	.word	0x20000280

080009d0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009d0:	e7fe      	b.n	80009d0 <ADC1_COMP_IRQHandler>
	...

080009d4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d8:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <HAL_Init+0x24>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <HAL_Init+0x24>)
 80009de:	2110      	movs	r1, #16
 80009e0:	430a      	orrs	r2, r1
 80009e2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80009e4:	2003      	movs	r0, #3
 80009e6:	f000 f809 	bl	80009fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009ea:	f7ff fea7 	bl	800073c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009ee:	2300      	movs	r3, #0
}
 80009f0:	0018      	movs	r0, r3
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	40022000 	.word	0x40022000

080009fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009fc:	b590      	push	{r4, r7, lr}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a04:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <HAL_InitTick+0x5c>)
 8000a06:	681c      	ldr	r4, [r3, #0]
 8000a08:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <HAL_InitTick+0x60>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	0019      	movs	r1, r3
 8000a0e:	23fa      	movs	r3, #250	; 0xfa
 8000a10:	0098      	lsls	r0, r3, #2
 8000a12:	f7ff fb83 	bl	800011c <__udivsi3>
 8000a16:	0003      	movs	r3, r0
 8000a18:	0019      	movs	r1, r3
 8000a1a:	0020      	movs	r0, r4
 8000a1c:	f7ff fb7e 	bl	800011c <__udivsi3>
 8000a20:	0003      	movs	r3, r0
 8000a22:	0018      	movs	r0, r3
 8000a24:	f000 f90b 	bl	8000c3e <HAL_SYSTICK_Config>
 8000a28:	1e03      	subs	r3, r0, #0
 8000a2a:	d001      	beq.n	8000a30 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	e00f      	b.n	8000a50 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2b03      	cmp	r3, #3
 8000a34:	d80b      	bhi.n	8000a4e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a36:	6879      	ldr	r1, [r7, #4]
 8000a38:	2301      	movs	r3, #1
 8000a3a:	425b      	negs	r3, r3
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f000 f8d8 	bl	8000bf4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <HAL_InitTick+0x64>)
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	e000      	b.n	8000a50 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
}
 8000a50:	0018      	movs	r0, r3
 8000a52:	46bd      	mov	sp, r7
 8000a54:	b003      	add	sp, #12
 8000a56:	bd90      	pop	{r4, r7, pc}
 8000a58:	20000064 	.word	0x20000064
 8000a5c:	2000006c 	.word	0x2000006c
 8000a60:	20000068 	.word	0x20000068

08000a64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <HAL_IncTick+0x1c>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	001a      	movs	r2, r3
 8000a6e:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <HAL_IncTick+0x20>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	18d2      	adds	r2, r2, r3
 8000a74:	4b03      	ldr	r3, [pc, #12]	; (8000a84 <HAL_IncTick+0x20>)
 8000a76:	601a      	str	r2, [r3, #0]
}
 8000a78:	46c0      	nop			; (mov r8, r8)
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	2000006c 	.word	0x2000006c
 8000a84:	2000026c 	.word	0x2000026c

08000a88 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a8c:	4b02      	ldr	r3, [pc, #8]	; (8000a98 <HAL_GetTick+0x10>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
}
 8000a90:	0018      	movs	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	2000026c 	.word	0x2000026c

08000a9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	0002      	movs	r2, r0
 8000aa4:	1dfb      	adds	r3, r7, #7
 8000aa6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000aa8:	1dfb      	adds	r3, r7, #7
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b7f      	cmp	r3, #127	; 0x7f
 8000aae:	d809      	bhi.n	8000ac4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab0:	1dfb      	adds	r3, r7, #7
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	001a      	movs	r2, r3
 8000ab6:	231f      	movs	r3, #31
 8000ab8:	401a      	ands	r2, r3
 8000aba:	4b04      	ldr	r3, [pc, #16]	; (8000acc <__NVIC_EnableIRQ+0x30>)
 8000abc:	2101      	movs	r1, #1
 8000abe:	4091      	lsls	r1, r2
 8000ac0:	000a      	movs	r2, r1
 8000ac2:	601a      	str	r2, [r3, #0]
  }
}
 8000ac4:	46c0      	nop			; (mov r8, r8)
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	b002      	add	sp, #8
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	e000e100 	.word	0xe000e100

08000ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad0:	b590      	push	{r4, r7, lr}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	0002      	movs	r2, r0
 8000ad8:	6039      	str	r1, [r7, #0]
 8000ada:	1dfb      	adds	r3, r7, #7
 8000adc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ade:	1dfb      	adds	r3, r7, #7
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b7f      	cmp	r3, #127	; 0x7f
 8000ae4:	d828      	bhi.n	8000b38 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ae6:	4a2f      	ldr	r2, [pc, #188]	; (8000ba4 <__NVIC_SetPriority+0xd4>)
 8000ae8:	1dfb      	adds	r3, r7, #7
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	b25b      	sxtb	r3, r3
 8000aee:	089b      	lsrs	r3, r3, #2
 8000af0:	33c0      	adds	r3, #192	; 0xc0
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	589b      	ldr	r3, [r3, r2]
 8000af6:	1dfa      	adds	r2, r7, #7
 8000af8:	7812      	ldrb	r2, [r2, #0]
 8000afa:	0011      	movs	r1, r2
 8000afc:	2203      	movs	r2, #3
 8000afe:	400a      	ands	r2, r1
 8000b00:	00d2      	lsls	r2, r2, #3
 8000b02:	21ff      	movs	r1, #255	; 0xff
 8000b04:	4091      	lsls	r1, r2
 8000b06:	000a      	movs	r2, r1
 8000b08:	43d2      	mvns	r2, r2
 8000b0a:	401a      	ands	r2, r3
 8000b0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	019b      	lsls	r3, r3, #6
 8000b12:	22ff      	movs	r2, #255	; 0xff
 8000b14:	401a      	ands	r2, r3
 8000b16:	1dfb      	adds	r3, r7, #7
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	4003      	ands	r3, r0
 8000b20:	00db      	lsls	r3, r3, #3
 8000b22:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b24:	481f      	ldr	r0, [pc, #124]	; (8000ba4 <__NVIC_SetPriority+0xd4>)
 8000b26:	1dfb      	adds	r3, r7, #7
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	b25b      	sxtb	r3, r3
 8000b2c:	089b      	lsrs	r3, r3, #2
 8000b2e:	430a      	orrs	r2, r1
 8000b30:	33c0      	adds	r3, #192	; 0xc0
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b36:	e031      	b.n	8000b9c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b38:	4a1b      	ldr	r2, [pc, #108]	; (8000ba8 <__NVIC_SetPriority+0xd8>)
 8000b3a:	1dfb      	adds	r3, r7, #7
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	0019      	movs	r1, r3
 8000b40:	230f      	movs	r3, #15
 8000b42:	400b      	ands	r3, r1
 8000b44:	3b08      	subs	r3, #8
 8000b46:	089b      	lsrs	r3, r3, #2
 8000b48:	3306      	adds	r3, #6
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	18d3      	adds	r3, r2, r3
 8000b4e:	3304      	adds	r3, #4
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	1dfa      	adds	r2, r7, #7
 8000b54:	7812      	ldrb	r2, [r2, #0]
 8000b56:	0011      	movs	r1, r2
 8000b58:	2203      	movs	r2, #3
 8000b5a:	400a      	ands	r2, r1
 8000b5c:	00d2      	lsls	r2, r2, #3
 8000b5e:	21ff      	movs	r1, #255	; 0xff
 8000b60:	4091      	lsls	r1, r2
 8000b62:	000a      	movs	r2, r1
 8000b64:	43d2      	mvns	r2, r2
 8000b66:	401a      	ands	r2, r3
 8000b68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	019b      	lsls	r3, r3, #6
 8000b6e:	22ff      	movs	r2, #255	; 0xff
 8000b70:	401a      	ands	r2, r3
 8000b72:	1dfb      	adds	r3, r7, #7
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	0018      	movs	r0, r3
 8000b78:	2303      	movs	r3, #3
 8000b7a:	4003      	ands	r3, r0
 8000b7c:	00db      	lsls	r3, r3, #3
 8000b7e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b80:	4809      	ldr	r0, [pc, #36]	; (8000ba8 <__NVIC_SetPriority+0xd8>)
 8000b82:	1dfb      	adds	r3, r7, #7
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	001c      	movs	r4, r3
 8000b88:	230f      	movs	r3, #15
 8000b8a:	4023      	ands	r3, r4
 8000b8c:	3b08      	subs	r3, #8
 8000b8e:	089b      	lsrs	r3, r3, #2
 8000b90:	430a      	orrs	r2, r1
 8000b92:	3306      	adds	r3, #6
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	18c3      	adds	r3, r0, r3
 8000b98:	3304      	adds	r3, #4
 8000b9a:	601a      	str	r2, [r3, #0]
}
 8000b9c:	46c0      	nop			; (mov r8, r8)
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	b003      	add	sp, #12
 8000ba2:	bd90      	pop	{r4, r7, pc}
 8000ba4:	e000e100 	.word	0xe000e100
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	1e5a      	subs	r2, r3, #1
 8000bb8:	2380      	movs	r3, #128	; 0x80
 8000bba:	045b      	lsls	r3, r3, #17
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d301      	bcc.n	8000bc4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	e010      	b.n	8000be6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <SysTick_Config+0x44>)
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	3a01      	subs	r2, #1
 8000bca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bcc:	2301      	movs	r3, #1
 8000bce:	425b      	negs	r3, r3
 8000bd0:	2103      	movs	r1, #3
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f7ff ff7c 	bl	8000ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd8:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <SysTick_Config+0x44>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bde:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <SysTick_Config+0x44>)
 8000be0:	2207      	movs	r2, #7
 8000be2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	0018      	movs	r0, r3
 8000be8:	46bd      	mov	sp, r7
 8000bea:	b002      	add	sp, #8
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	e000e010 	.word	0xe000e010

08000bf4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60b9      	str	r1, [r7, #8]
 8000bfc:	607a      	str	r2, [r7, #4]
 8000bfe:	210f      	movs	r1, #15
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	1c02      	adds	r2, r0, #0
 8000c04:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c06:	68ba      	ldr	r2, [r7, #8]
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	b25b      	sxtb	r3, r3
 8000c0e:	0011      	movs	r1, r2
 8000c10:	0018      	movs	r0, r3
 8000c12:	f7ff ff5d 	bl	8000ad0 <__NVIC_SetPriority>
}
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	b004      	add	sp, #16
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	0002      	movs	r2, r0
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c2a:	1dfb      	adds	r3, r7, #7
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	b25b      	sxtb	r3, r3
 8000c30:	0018      	movs	r0, r3
 8000c32:	f7ff ff33 	bl	8000a9c <__NVIC_EnableIRQ>
}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	b002      	add	sp, #8
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f7ff ffaf 	bl	8000bac <SysTick_Config>
 8000c4e:	0003      	movs	r3, r0
}
 8000c50:	0018      	movs	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	b002      	add	sp, #8
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c66:	e155      	b.n	8000f14 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	697a      	ldr	r2, [r7, #20]
 8000c70:	4091      	lsls	r1, r2
 8000c72:	000a      	movs	r2, r1
 8000c74:	4013      	ands	r3, r2
 8000c76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d100      	bne.n	8000c80 <HAL_GPIO_Init+0x28>
 8000c7e:	e146      	b.n	8000f0e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	2203      	movs	r2, #3
 8000c86:	4013      	ands	r3, r2
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d005      	beq.n	8000c98 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	2203      	movs	r2, #3
 8000c92:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	d130      	bne.n	8000cfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	2203      	movs	r2, #3
 8000ca4:	409a      	lsls	r2, r3
 8000ca6:	0013      	movs	r3, r2
 8000ca8:	43da      	mvns	r2, r3
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	4013      	ands	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	68da      	ldr	r2, [r3, #12]
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	409a      	lsls	r2, r3
 8000cba:	0013      	movs	r3, r2
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cce:	2201      	movs	r2, #1
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	409a      	lsls	r2, r3
 8000cd4:	0013      	movs	r3, r2
 8000cd6:	43da      	mvns	r2, r3
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	091b      	lsrs	r3, r3, #4
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	409a      	lsls	r2, r3
 8000cec:	0013      	movs	r3, r2
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	2203      	movs	r2, #3
 8000d00:	4013      	ands	r3, r2
 8000d02:	2b03      	cmp	r3, #3
 8000d04:	d017      	beq.n	8000d36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	68db      	ldr	r3, [r3, #12]
 8000d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	2203      	movs	r2, #3
 8000d12:	409a      	lsls	r2, r3
 8000d14:	0013      	movs	r3, r2
 8000d16:	43da      	mvns	r2, r3
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	689a      	ldr	r2, [r3, #8]
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	409a      	lsls	r2, r3
 8000d28:	0013      	movs	r3, r2
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	2203      	movs	r2, #3
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d123      	bne.n	8000d8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	08da      	lsrs	r2, r3, #3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	3208      	adds	r2, #8
 8000d4a:	0092      	lsls	r2, r2, #2
 8000d4c:	58d3      	ldr	r3, [r2, r3]
 8000d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	2207      	movs	r2, #7
 8000d54:	4013      	ands	r3, r2
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	220f      	movs	r2, #15
 8000d5a:	409a      	lsls	r2, r3
 8000d5c:	0013      	movs	r3, r2
 8000d5e:	43da      	mvns	r2, r3
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	4013      	ands	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	691a      	ldr	r2, [r3, #16]
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	2107      	movs	r1, #7
 8000d6e:	400b      	ands	r3, r1
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	409a      	lsls	r2, r3
 8000d74:	0013      	movs	r3, r2
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	08da      	lsrs	r2, r3, #3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3208      	adds	r2, #8
 8000d84:	0092      	lsls	r2, r2, #2
 8000d86:	6939      	ldr	r1, [r7, #16]
 8000d88:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	2203      	movs	r2, #3
 8000d96:	409a      	lsls	r2, r3
 8000d98:	0013      	movs	r3, r2
 8000d9a:	43da      	mvns	r2, r3
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	2203      	movs	r2, #3
 8000da8:	401a      	ands	r2, r3
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	409a      	lsls	r2, r3
 8000db0:	0013      	movs	r3, r2
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685a      	ldr	r2, [r3, #4]
 8000dc2:	23c0      	movs	r3, #192	; 0xc0
 8000dc4:	029b      	lsls	r3, r3, #10
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	d100      	bne.n	8000dcc <HAL_GPIO_Init+0x174>
 8000dca:	e0a0      	b.n	8000f0e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dcc:	4b57      	ldr	r3, [pc, #348]	; (8000f2c <HAL_GPIO_Init+0x2d4>)
 8000dce:	699a      	ldr	r2, [r3, #24]
 8000dd0:	4b56      	ldr	r3, [pc, #344]	; (8000f2c <HAL_GPIO_Init+0x2d4>)
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	619a      	str	r2, [r3, #24]
 8000dd8:	4b54      	ldr	r3, [pc, #336]	; (8000f2c <HAL_GPIO_Init+0x2d4>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	2201      	movs	r2, #1
 8000dde:	4013      	ands	r3, r2
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000de4:	4a52      	ldr	r2, [pc, #328]	; (8000f30 <HAL_GPIO_Init+0x2d8>)
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	089b      	lsrs	r3, r3, #2
 8000dea:	3302      	adds	r3, #2
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	589b      	ldr	r3, [r3, r2]
 8000df0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	2203      	movs	r2, #3
 8000df6:	4013      	ands	r3, r2
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	220f      	movs	r2, #15
 8000dfc:	409a      	lsls	r2, r3
 8000dfe:	0013      	movs	r3, r2
 8000e00:	43da      	mvns	r2, r3
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	2390      	movs	r3, #144	; 0x90
 8000e0c:	05db      	lsls	r3, r3, #23
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d019      	beq.n	8000e46 <HAL_GPIO_Init+0x1ee>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a47      	ldr	r2, [pc, #284]	; (8000f34 <HAL_GPIO_Init+0x2dc>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d013      	beq.n	8000e42 <HAL_GPIO_Init+0x1ea>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a46      	ldr	r2, [pc, #280]	; (8000f38 <HAL_GPIO_Init+0x2e0>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d00d      	beq.n	8000e3e <HAL_GPIO_Init+0x1e6>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a45      	ldr	r2, [pc, #276]	; (8000f3c <HAL_GPIO_Init+0x2e4>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d007      	beq.n	8000e3a <HAL_GPIO_Init+0x1e2>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a44      	ldr	r2, [pc, #272]	; (8000f40 <HAL_GPIO_Init+0x2e8>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d101      	bne.n	8000e36 <HAL_GPIO_Init+0x1de>
 8000e32:	2304      	movs	r3, #4
 8000e34:	e008      	b.n	8000e48 <HAL_GPIO_Init+0x1f0>
 8000e36:	2305      	movs	r3, #5
 8000e38:	e006      	b.n	8000e48 <HAL_GPIO_Init+0x1f0>
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	e004      	b.n	8000e48 <HAL_GPIO_Init+0x1f0>
 8000e3e:	2302      	movs	r3, #2
 8000e40:	e002      	b.n	8000e48 <HAL_GPIO_Init+0x1f0>
 8000e42:	2301      	movs	r3, #1
 8000e44:	e000      	b.n	8000e48 <HAL_GPIO_Init+0x1f0>
 8000e46:	2300      	movs	r3, #0
 8000e48:	697a      	ldr	r2, [r7, #20]
 8000e4a:	2103      	movs	r1, #3
 8000e4c:	400a      	ands	r2, r1
 8000e4e:	0092      	lsls	r2, r2, #2
 8000e50:	4093      	lsls	r3, r2
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e58:	4935      	ldr	r1, [pc, #212]	; (8000f30 <HAL_GPIO_Init+0x2d8>)
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	089b      	lsrs	r3, r3, #2
 8000e5e:	3302      	adds	r3, #2
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e66:	4b37      	ldr	r3, [pc, #220]	; (8000f44 <HAL_GPIO_Init+0x2ec>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685a      	ldr	r2, [r3, #4]
 8000e7a:	2380      	movs	r3, #128	; 0x80
 8000e7c:	025b      	lsls	r3, r3, #9
 8000e7e:	4013      	ands	r3, r2
 8000e80:	d003      	beq.n	8000e8a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e8a:	4b2e      	ldr	r3, [pc, #184]	; (8000f44 <HAL_GPIO_Init+0x2ec>)
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000e90:	4b2c      	ldr	r3, [pc, #176]	; (8000f44 <HAL_GPIO_Init+0x2ec>)
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	43da      	mvns	r2, r3
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685a      	ldr	r2, [r3, #4]
 8000ea4:	2380      	movs	r3, #128	; 0x80
 8000ea6:	029b      	lsls	r3, r3, #10
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	d003      	beq.n	8000eb4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000eb4:	4b23      	ldr	r3, [pc, #140]	; (8000f44 <HAL_GPIO_Init+0x2ec>)
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eba:	4b22      	ldr	r3, [pc, #136]	; (8000f44 <HAL_GPIO_Init+0x2ec>)
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	43da      	mvns	r2, r3
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685a      	ldr	r2, [r3, #4]
 8000ece:	2380      	movs	r3, #128	; 0x80
 8000ed0:	035b      	lsls	r3, r3, #13
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ede:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <HAL_GPIO_Init+0x2ec>)
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000ee4:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <HAL_GPIO_Init+0x2ec>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	43da      	mvns	r2, r3
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685a      	ldr	r2, [r3, #4]
 8000ef8:	2380      	movs	r3, #128	; 0x80
 8000efa:	039b      	lsls	r3, r3, #14
 8000efc:	4013      	ands	r3, r2
 8000efe:	d003      	beq.n	8000f08 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f08:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <HAL_GPIO_Init+0x2ec>)
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	3301      	adds	r3, #1
 8000f12:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	40da      	lsrs	r2, r3
 8000f1c:	1e13      	subs	r3, r2, #0
 8000f1e:	d000      	beq.n	8000f22 <HAL_GPIO_Init+0x2ca>
 8000f20:	e6a2      	b.n	8000c68 <HAL_GPIO_Init+0x10>
  } 
}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	46c0      	nop			; (mov r8, r8)
 8000f26:	46bd      	mov	sp, r7
 8000f28:	b006      	add	sp, #24
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	40010000 	.word	0x40010000
 8000f34:	48000400 	.word	0x48000400
 8000f38:	48000800 	.word	0x48000800
 8000f3c:	48000c00 	.word	0x48000c00
 8000f40:	48001000 	.word	0x48001000
 8000f44:	40010400 	.word	0x40010400

08000f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	0008      	movs	r0, r1
 8000f52:	0011      	movs	r1, r2
 8000f54:	1cbb      	adds	r3, r7, #2
 8000f56:	1c02      	adds	r2, r0, #0
 8000f58:	801a      	strh	r2, [r3, #0]
 8000f5a:	1c7b      	adds	r3, r7, #1
 8000f5c:	1c0a      	adds	r2, r1, #0
 8000f5e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f60:	1c7b      	adds	r3, r7, #1
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d004      	beq.n	8000f72 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f68:	1cbb      	adds	r3, r7, #2
 8000f6a:	881a      	ldrh	r2, [r3, #0]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f70:	e003      	b.n	8000f7a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f72:	1cbb      	adds	r3, r7, #2
 8000f74:	881a      	ldrh	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	b002      	add	sp, #8
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b084      	sub	sp, #16
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
 8000f8a:	000a      	movs	r2, r1
 8000f8c:	1cbb      	adds	r3, r7, #2
 8000f8e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	695b      	ldr	r3, [r3, #20]
 8000f94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f96:	1cbb      	adds	r3, r7, #2
 8000f98:	881b      	ldrh	r3, [r3, #0]
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	041a      	lsls	r2, r3, #16
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	1cb9      	adds	r1, r7, #2
 8000fa6:	8809      	ldrh	r1, [r1, #0]
 8000fa8:	400b      	ands	r3, r1
 8000faa:	431a      	orrs	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	619a      	str	r2, [r3, #24]
}
 8000fb0:	46c0      	nop			; (mov r8, r8)
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	b004      	add	sp, #16
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d102      	bne.n	8000fcc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	f000 fb76 	bl	80016b8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	d100      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x20>
 8000fd6:	e08e      	b.n	80010f6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000fd8:	4bc5      	ldr	r3, [pc, #788]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	220c      	movs	r2, #12
 8000fde:	4013      	ands	r3, r2
 8000fe0:	2b04      	cmp	r3, #4
 8000fe2:	d00e      	beq.n	8001002 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fe4:	4bc2      	ldr	r3, [pc, #776]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	220c      	movs	r2, #12
 8000fea:	4013      	ands	r3, r2
 8000fec:	2b08      	cmp	r3, #8
 8000fee:	d117      	bne.n	8001020 <HAL_RCC_OscConfig+0x68>
 8000ff0:	4bbf      	ldr	r3, [pc, #764]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 8000ff2:	685a      	ldr	r2, [r3, #4]
 8000ff4:	23c0      	movs	r3, #192	; 0xc0
 8000ff6:	025b      	lsls	r3, r3, #9
 8000ff8:	401a      	ands	r2, r3
 8000ffa:	2380      	movs	r3, #128	; 0x80
 8000ffc:	025b      	lsls	r3, r3, #9
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d10e      	bne.n	8001020 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001002:	4bbb      	ldr	r3, [pc, #748]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	2380      	movs	r3, #128	; 0x80
 8001008:	029b      	lsls	r3, r3, #10
 800100a:	4013      	ands	r3, r2
 800100c:	d100      	bne.n	8001010 <HAL_RCC_OscConfig+0x58>
 800100e:	e071      	b.n	80010f4 <HAL_RCC_OscConfig+0x13c>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d000      	beq.n	800101a <HAL_RCC_OscConfig+0x62>
 8001018:	e06c      	b.n	80010f4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	f000 fb4c 	bl	80016b8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d107      	bne.n	8001038 <HAL_RCC_OscConfig+0x80>
 8001028:	4bb1      	ldr	r3, [pc, #708]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4bb0      	ldr	r3, [pc, #704]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 800102e:	2180      	movs	r1, #128	; 0x80
 8001030:	0249      	lsls	r1, r1, #9
 8001032:	430a      	orrs	r2, r1
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	e02f      	b.n	8001098 <HAL_RCC_OscConfig+0xe0>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d10c      	bne.n	800105a <HAL_RCC_OscConfig+0xa2>
 8001040:	4bab      	ldr	r3, [pc, #684]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4baa      	ldr	r3, [pc, #680]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 8001046:	49ab      	ldr	r1, [pc, #684]	; (80012f4 <HAL_RCC_OscConfig+0x33c>)
 8001048:	400a      	ands	r2, r1
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	4ba8      	ldr	r3, [pc, #672]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4ba7      	ldr	r3, [pc, #668]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 8001052:	49a9      	ldr	r1, [pc, #676]	; (80012f8 <HAL_RCC_OscConfig+0x340>)
 8001054:	400a      	ands	r2, r1
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	e01e      	b.n	8001098 <HAL_RCC_OscConfig+0xe0>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	2b05      	cmp	r3, #5
 8001060:	d10e      	bne.n	8001080 <HAL_RCC_OscConfig+0xc8>
 8001062:	4ba3      	ldr	r3, [pc, #652]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	4ba2      	ldr	r3, [pc, #648]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 8001068:	2180      	movs	r1, #128	; 0x80
 800106a:	02c9      	lsls	r1, r1, #11
 800106c:	430a      	orrs	r2, r1
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	4b9f      	ldr	r3, [pc, #636]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b9e      	ldr	r3, [pc, #632]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 8001076:	2180      	movs	r1, #128	; 0x80
 8001078:	0249      	lsls	r1, r1, #9
 800107a:	430a      	orrs	r2, r1
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	e00b      	b.n	8001098 <HAL_RCC_OscConfig+0xe0>
 8001080:	4b9b      	ldr	r3, [pc, #620]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4b9a      	ldr	r3, [pc, #616]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 8001086:	499b      	ldr	r1, [pc, #620]	; (80012f4 <HAL_RCC_OscConfig+0x33c>)
 8001088:	400a      	ands	r2, r1
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	4b98      	ldr	r3, [pc, #608]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4b97      	ldr	r3, [pc, #604]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 8001092:	4999      	ldr	r1, [pc, #612]	; (80012f8 <HAL_RCC_OscConfig+0x340>)
 8001094:	400a      	ands	r2, r1
 8001096:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d014      	beq.n	80010ca <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a0:	f7ff fcf2 	bl	8000a88 <HAL_GetTick>
 80010a4:	0003      	movs	r3, r0
 80010a6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a8:	e008      	b.n	80010bc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010aa:	f7ff fced 	bl	8000a88 <HAL_GetTick>
 80010ae:	0002      	movs	r2, r0
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b64      	cmp	r3, #100	; 0x64
 80010b6:	d901      	bls.n	80010bc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e2fd      	b.n	80016b8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010bc:	4b8c      	ldr	r3, [pc, #560]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	029b      	lsls	r3, r3, #10
 80010c4:	4013      	ands	r3, r2
 80010c6:	d0f0      	beq.n	80010aa <HAL_RCC_OscConfig+0xf2>
 80010c8:	e015      	b.n	80010f6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ca:	f7ff fcdd 	bl	8000a88 <HAL_GetTick>
 80010ce:	0003      	movs	r3, r0
 80010d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010d2:	e008      	b.n	80010e6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010d4:	f7ff fcd8 	bl	8000a88 <HAL_GetTick>
 80010d8:	0002      	movs	r2, r0
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b64      	cmp	r3, #100	; 0x64
 80010e0:	d901      	bls.n	80010e6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e2e8      	b.n	80016b8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010e6:	4b82      	ldr	r3, [pc, #520]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	029b      	lsls	r3, r3, #10
 80010ee:	4013      	ands	r3, r2
 80010f0:	d1f0      	bne.n	80010d4 <HAL_RCC_OscConfig+0x11c>
 80010f2:	e000      	b.n	80010f6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2202      	movs	r2, #2
 80010fc:	4013      	ands	r3, r2
 80010fe:	d100      	bne.n	8001102 <HAL_RCC_OscConfig+0x14a>
 8001100:	e06c      	b.n	80011dc <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001102:	4b7b      	ldr	r3, [pc, #492]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	220c      	movs	r2, #12
 8001108:	4013      	ands	r3, r2
 800110a:	d00e      	beq.n	800112a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800110c:	4b78      	ldr	r3, [pc, #480]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	220c      	movs	r2, #12
 8001112:	4013      	ands	r3, r2
 8001114:	2b08      	cmp	r3, #8
 8001116:	d11f      	bne.n	8001158 <HAL_RCC_OscConfig+0x1a0>
 8001118:	4b75      	ldr	r3, [pc, #468]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 800111a:	685a      	ldr	r2, [r3, #4]
 800111c:	23c0      	movs	r3, #192	; 0xc0
 800111e:	025b      	lsls	r3, r3, #9
 8001120:	401a      	ands	r2, r3
 8001122:	2380      	movs	r3, #128	; 0x80
 8001124:	021b      	lsls	r3, r3, #8
 8001126:	429a      	cmp	r2, r3
 8001128:	d116      	bne.n	8001158 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800112a:	4b71      	ldr	r3, [pc, #452]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2202      	movs	r2, #2
 8001130:	4013      	ands	r3, r2
 8001132:	d005      	beq.n	8001140 <HAL_RCC_OscConfig+0x188>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d001      	beq.n	8001140 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e2bb      	b.n	80016b8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001140:	4b6b      	ldr	r3, [pc, #428]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	22f8      	movs	r2, #248	; 0xf8
 8001146:	4393      	bics	r3, r2
 8001148:	0019      	movs	r1, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	691b      	ldr	r3, [r3, #16]
 800114e:	00da      	lsls	r2, r3, #3
 8001150:	4b67      	ldr	r3, [pc, #412]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 8001152:	430a      	orrs	r2, r1
 8001154:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001156:	e041      	b.n	80011dc <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d024      	beq.n	80011aa <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001160:	4b63      	ldr	r3, [pc, #396]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	4b62      	ldr	r3, [pc, #392]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 8001166:	2101      	movs	r1, #1
 8001168:	430a      	orrs	r2, r1
 800116a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800116c:	f7ff fc8c 	bl	8000a88 <HAL_GetTick>
 8001170:	0003      	movs	r3, r0
 8001172:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001174:	e008      	b.n	8001188 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001176:	f7ff fc87 	bl	8000a88 <HAL_GetTick>
 800117a:	0002      	movs	r2, r0
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d901      	bls.n	8001188 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	e297      	b.n	80016b8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001188:	4b59      	ldr	r3, [pc, #356]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2202      	movs	r2, #2
 800118e:	4013      	ands	r3, r2
 8001190:	d0f1      	beq.n	8001176 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001192:	4b57      	ldr	r3, [pc, #348]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	22f8      	movs	r2, #248	; 0xf8
 8001198:	4393      	bics	r3, r2
 800119a:	0019      	movs	r1, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	691b      	ldr	r3, [r3, #16]
 80011a0:	00da      	lsls	r2, r3, #3
 80011a2:	4b53      	ldr	r3, [pc, #332]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 80011a4:	430a      	orrs	r2, r1
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	e018      	b.n	80011dc <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011aa:	4b51      	ldr	r3, [pc, #324]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	4b50      	ldr	r3, [pc, #320]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 80011b0:	2101      	movs	r1, #1
 80011b2:	438a      	bics	r2, r1
 80011b4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b6:	f7ff fc67 	bl	8000a88 <HAL_GetTick>
 80011ba:	0003      	movs	r3, r0
 80011bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011be:	e008      	b.n	80011d2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011c0:	f7ff fc62 	bl	8000a88 <HAL_GetTick>
 80011c4:	0002      	movs	r2, r0
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e272      	b.n	80016b8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011d2:	4b47      	ldr	r3, [pc, #284]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2202      	movs	r2, #2
 80011d8:	4013      	ands	r3, r2
 80011da:	d1f1      	bne.n	80011c0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2208      	movs	r2, #8
 80011e2:	4013      	ands	r3, r2
 80011e4:	d036      	beq.n	8001254 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d019      	beq.n	8001222 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ee:	4b40      	ldr	r3, [pc, #256]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 80011f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011f2:	4b3f      	ldr	r3, [pc, #252]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 80011f4:	2101      	movs	r1, #1
 80011f6:	430a      	orrs	r2, r1
 80011f8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011fa:	f7ff fc45 	bl	8000a88 <HAL_GetTick>
 80011fe:	0003      	movs	r3, r0
 8001200:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001204:	f7ff fc40 	bl	8000a88 <HAL_GetTick>
 8001208:	0002      	movs	r2, r0
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e250      	b.n	80016b8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001216:	4b36      	ldr	r3, [pc, #216]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 8001218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121a:	2202      	movs	r2, #2
 800121c:	4013      	ands	r3, r2
 800121e:	d0f1      	beq.n	8001204 <HAL_RCC_OscConfig+0x24c>
 8001220:	e018      	b.n	8001254 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001222:	4b33      	ldr	r3, [pc, #204]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 8001224:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001226:	4b32      	ldr	r3, [pc, #200]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 8001228:	2101      	movs	r1, #1
 800122a:	438a      	bics	r2, r1
 800122c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800122e:	f7ff fc2b 	bl	8000a88 <HAL_GetTick>
 8001232:	0003      	movs	r3, r0
 8001234:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001238:	f7ff fc26 	bl	8000a88 <HAL_GetTick>
 800123c:	0002      	movs	r2, r0
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e236      	b.n	80016b8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800124a:	4b29      	ldr	r3, [pc, #164]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 800124c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124e:	2202      	movs	r2, #2
 8001250:	4013      	ands	r3, r2
 8001252:	d1f1      	bne.n	8001238 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2204      	movs	r2, #4
 800125a:	4013      	ands	r3, r2
 800125c:	d100      	bne.n	8001260 <HAL_RCC_OscConfig+0x2a8>
 800125e:	e0b5      	b.n	80013cc <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001260:	201f      	movs	r0, #31
 8001262:	183b      	adds	r3, r7, r0
 8001264:	2200      	movs	r2, #0
 8001266:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001268:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 800126a:	69da      	ldr	r2, [r3, #28]
 800126c:	2380      	movs	r3, #128	; 0x80
 800126e:	055b      	lsls	r3, r3, #21
 8001270:	4013      	ands	r3, r2
 8001272:	d110      	bne.n	8001296 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001274:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 8001276:	69da      	ldr	r2, [r3, #28]
 8001278:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 800127a:	2180      	movs	r1, #128	; 0x80
 800127c:	0549      	lsls	r1, r1, #21
 800127e:	430a      	orrs	r2, r1
 8001280:	61da      	str	r2, [r3, #28]
 8001282:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 8001284:	69da      	ldr	r2, [r3, #28]
 8001286:	2380      	movs	r3, #128	; 0x80
 8001288:	055b      	lsls	r3, r3, #21
 800128a:	4013      	ands	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001290:	183b      	adds	r3, r7, r0
 8001292:	2201      	movs	r2, #1
 8001294:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001296:	4b19      	ldr	r3, [pc, #100]	; (80012fc <HAL_RCC_OscConfig+0x344>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	2380      	movs	r3, #128	; 0x80
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	4013      	ands	r3, r2
 80012a0:	d11a      	bne.n	80012d8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012a2:	4b16      	ldr	r3, [pc, #88]	; (80012fc <HAL_RCC_OscConfig+0x344>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <HAL_RCC_OscConfig+0x344>)
 80012a8:	2180      	movs	r1, #128	; 0x80
 80012aa:	0049      	lsls	r1, r1, #1
 80012ac:	430a      	orrs	r2, r1
 80012ae:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012b0:	f7ff fbea 	bl	8000a88 <HAL_GetTick>
 80012b4:	0003      	movs	r3, r0
 80012b6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b8:	e008      	b.n	80012cc <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ba:	f7ff fbe5 	bl	8000a88 <HAL_GetTick>
 80012be:	0002      	movs	r2, r0
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b64      	cmp	r3, #100	; 0x64
 80012c6:	d901      	bls.n	80012cc <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e1f5      	b.n	80016b8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012cc:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <HAL_RCC_OscConfig+0x344>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	2380      	movs	r3, #128	; 0x80
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	4013      	ands	r3, r2
 80012d6:	d0f0      	beq.n	80012ba <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d10f      	bne.n	8001300 <HAL_RCC_OscConfig+0x348>
 80012e0:	4b03      	ldr	r3, [pc, #12]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 80012e2:	6a1a      	ldr	r2, [r3, #32]
 80012e4:	4b02      	ldr	r3, [pc, #8]	; (80012f0 <HAL_RCC_OscConfig+0x338>)
 80012e6:	2101      	movs	r1, #1
 80012e8:	430a      	orrs	r2, r1
 80012ea:	621a      	str	r2, [r3, #32]
 80012ec:	e036      	b.n	800135c <HAL_RCC_OscConfig+0x3a4>
 80012ee:	46c0      	nop			; (mov r8, r8)
 80012f0:	40021000 	.word	0x40021000
 80012f4:	fffeffff 	.word	0xfffeffff
 80012f8:	fffbffff 	.word	0xfffbffff
 80012fc:	40007000 	.word	0x40007000
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d10c      	bne.n	8001322 <HAL_RCC_OscConfig+0x36a>
 8001308:	4bca      	ldr	r3, [pc, #808]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 800130a:	6a1a      	ldr	r2, [r3, #32]
 800130c:	4bc9      	ldr	r3, [pc, #804]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 800130e:	2101      	movs	r1, #1
 8001310:	438a      	bics	r2, r1
 8001312:	621a      	str	r2, [r3, #32]
 8001314:	4bc7      	ldr	r3, [pc, #796]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 8001316:	6a1a      	ldr	r2, [r3, #32]
 8001318:	4bc6      	ldr	r3, [pc, #792]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 800131a:	2104      	movs	r1, #4
 800131c:	438a      	bics	r2, r1
 800131e:	621a      	str	r2, [r3, #32]
 8001320:	e01c      	b.n	800135c <HAL_RCC_OscConfig+0x3a4>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	2b05      	cmp	r3, #5
 8001328:	d10c      	bne.n	8001344 <HAL_RCC_OscConfig+0x38c>
 800132a:	4bc2      	ldr	r3, [pc, #776]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 800132c:	6a1a      	ldr	r2, [r3, #32]
 800132e:	4bc1      	ldr	r3, [pc, #772]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 8001330:	2104      	movs	r1, #4
 8001332:	430a      	orrs	r2, r1
 8001334:	621a      	str	r2, [r3, #32]
 8001336:	4bbf      	ldr	r3, [pc, #764]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 8001338:	6a1a      	ldr	r2, [r3, #32]
 800133a:	4bbe      	ldr	r3, [pc, #760]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 800133c:	2101      	movs	r1, #1
 800133e:	430a      	orrs	r2, r1
 8001340:	621a      	str	r2, [r3, #32]
 8001342:	e00b      	b.n	800135c <HAL_RCC_OscConfig+0x3a4>
 8001344:	4bbb      	ldr	r3, [pc, #748]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 8001346:	6a1a      	ldr	r2, [r3, #32]
 8001348:	4bba      	ldr	r3, [pc, #744]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 800134a:	2101      	movs	r1, #1
 800134c:	438a      	bics	r2, r1
 800134e:	621a      	str	r2, [r3, #32]
 8001350:	4bb8      	ldr	r3, [pc, #736]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 8001352:	6a1a      	ldr	r2, [r3, #32]
 8001354:	4bb7      	ldr	r3, [pc, #732]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 8001356:	2104      	movs	r1, #4
 8001358:	438a      	bics	r2, r1
 800135a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d014      	beq.n	800138e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001364:	f7ff fb90 	bl	8000a88 <HAL_GetTick>
 8001368:	0003      	movs	r3, r0
 800136a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800136c:	e009      	b.n	8001382 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800136e:	f7ff fb8b 	bl	8000a88 <HAL_GetTick>
 8001372:	0002      	movs	r2, r0
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	4aaf      	ldr	r2, [pc, #700]	; (8001638 <HAL_RCC_OscConfig+0x680>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e19a      	b.n	80016b8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001382:	4bac      	ldr	r3, [pc, #688]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 8001384:	6a1b      	ldr	r3, [r3, #32]
 8001386:	2202      	movs	r2, #2
 8001388:	4013      	ands	r3, r2
 800138a:	d0f0      	beq.n	800136e <HAL_RCC_OscConfig+0x3b6>
 800138c:	e013      	b.n	80013b6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800138e:	f7ff fb7b 	bl	8000a88 <HAL_GetTick>
 8001392:	0003      	movs	r3, r0
 8001394:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001396:	e009      	b.n	80013ac <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001398:	f7ff fb76 	bl	8000a88 <HAL_GetTick>
 800139c:	0002      	movs	r2, r0
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	4aa5      	ldr	r2, [pc, #660]	; (8001638 <HAL_RCC_OscConfig+0x680>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e185      	b.n	80016b8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ac:	4ba1      	ldr	r3, [pc, #644]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	2202      	movs	r2, #2
 80013b2:	4013      	ands	r3, r2
 80013b4:	d1f0      	bne.n	8001398 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013b6:	231f      	movs	r3, #31
 80013b8:	18fb      	adds	r3, r7, r3
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d105      	bne.n	80013cc <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013c0:	4b9c      	ldr	r3, [pc, #624]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 80013c2:	69da      	ldr	r2, [r3, #28]
 80013c4:	4b9b      	ldr	r3, [pc, #620]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 80013c6:	499d      	ldr	r1, [pc, #628]	; (800163c <HAL_RCC_OscConfig+0x684>)
 80013c8:	400a      	ands	r2, r1
 80013ca:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2210      	movs	r2, #16
 80013d2:	4013      	ands	r3, r2
 80013d4:	d063      	beq.n	800149e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	695b      	ldr	r3, [r3, #20]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d12a      	bne.n	8001434 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80013de:	4b95      	ldr	r3, [pc, #596]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 80013e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013e2:	4b94      	ldr	r3, [pc, #592]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 80013e4:	2104      	movs	r1, #4
 80013e6:	430a      	orrs	r2, r1
 80013e8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80013ea:	4b92      	ldr	r3, [pc, #584]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 80013ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013ee:	4b91      	ldr	r3, [pc, #580]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 80013f0:	2101      	movs	r1, #1
 80013f2:	430a      	orrs	r2, r1
 80013f4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f6:	f7ff fb47 	bl	8000a88 <HAL_GetTick>
 80013fa:	0003      	movs	r3, r0
 80013fc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001400:	f7ff fb42 	bl	8000a88 <HAL_GetTick>
 8001404:	0002      	movs	r2, r0
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e152      	b.n	80016b8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001412:	4b88      	ldr	r3, [pc, #544]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 8001414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001416:	2202      	movs	r2, #2
 8001418:	4013      	ands	r3, r2
 800141a:	d0f1      	beq.n	8001400 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800141c:	4b85      	ldr	r3, [pc, #532]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 800141e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001420:	22f8      	movs	r2, #248	; 0xf8
 8001422:	4393      	bics	r3, r2
 8001424:	0019      	movs	r1, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	00da      	lsls	r2, r3, #3
 800142c:	4b81      	ldr	r3, [pc, #516]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 800142e:	430a      	orrs	r2, r1
 8001430:	635a      	str	r2, [r3, #52]	; 0x34
 8001432:	e034      	b.n	800149e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	3305      	adds	r3, #5
 800143a:	d111      	bne.n	8001460 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800143c:	4b7d      	ldr	r3, [pc, #500]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 800143e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001440:	4b7c      	ldr	r3, [pc, #496]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 8001442:	2104      	movs	r1, #4
 8001444:	438a      	bics	r2, r1
 8001446:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001448:	4b7a      	ldr	r3, [pc, #488]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 800144a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800144c:	22f8      	movs	r2, #248	; 0xf8
 800144e:	4393      	bics	r3, r2
 8001450:	0019      	movs	r1, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	00da      	lsls	r2, r3, #3
 8001458:	4b76      	ldr	r3, [pc, #472]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 800145a:	430a      	orrs	r2, r1
 800145c:	635a      	str	r2, [r3, #52]	; 0x34
 800145e:	e01e      	b.n	800149e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001460:	4b74      	ldr	r3, [pc, #464]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 8001462:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001464:	4b73      	ldr	r3, [pc, #460]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 8001466:	2104      	movs	r1, #4
 8001468:	430a      	orrs	r2, r1
 800146a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800146c:	4b71      	ldr	r3, [pc, #452]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 800146e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001470:	4b70      	ldr	r3, [pc, #448]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 8001472:	2101      	movs	r1, #1
 8001474:	438a      	bics	r2, r1
 8001476:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001478:	f7ff fb06 	bl	8000a88 <HAL_GetTick>
 800147c:	0003      	movs	r3, r0
 800147e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001482:	f7ff fb01 	bl	8000a88 <HAL_GetTick>
 8001486:	0002      	movs	r2, r0
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e111      	b.n	80016b8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001494:	4b67      	ldr	r3, [pc, #412]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 8001496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001498:	2202      	movs	r2, #2
 800149a:	4013      	ands	r3, r2
 800149c:	d1f1      	bne.n	8001482 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2220      	movs	r2, #32
 80014a4:	4013      	ands	r3, r2
 80014a6:	d05c      	beq.n	8001562 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80014a8:	4b62      	ldr	r3, [pc, #392]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	220c      	movs	r2, #12
 80014ae:	4013      	ands	r3, r2
 80014b0:	2b0c      	cmp	r3, #12
 80014b2:	d00e      	beq.n	80014d2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80014b4:	4b5f      	ldr	r3, [pc, #380]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	220c      	movs	r2, #12
 80014ba:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80014bc:	2b08      	cmp	r3, #8
 80014be:	d114      	bne.n	80014ea <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80014c0:	4b5c      	ldr	r3, [pc, #368]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	23c0      	movs	r3, #192	; 0xc0
 80014c6:	025b      	lsls	r3, r3, #9
 80014c8:	401a      	ands	r2, r3
 80014ca:	23c0      	movs	r3, #192	; 0xc0
 80014cc:	025b      	lsls	r3, r3, #9
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d10b      	bne.n	80014ea <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80014d2:	4b58      	ldr	r3, [pc, #352]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 80014d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014d6:	2380      	movs	r3, #128	; 0x80
 80014d8:	025b      	lsls	r3, r3, #9
 80014da:	4013      	ands	r3, r2
 80014dc:	d040      	beq.n	8001560 <HAL_RCC_OscConfig+0x5a8>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a1b      	ldr	r3, [r3, #32]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d03c      	beq.n	8001560 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e0e6      	b.n	80016b8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d01b      	beq.n	800152a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80014f2:	4b50      	ldr	r3, [pc, #320]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 80014f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014f6:	4b4f      	ldr	r3, [pc, #316]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 80014f8:	2180      	movs	r1, #128	; 0x80
 80014fa:	0249      	lsls	r1, r1, #9
 80014fc:	430a      	orrs	r2, r1
 80014fe:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001500:	f7ff fac2 	bl	8000a88 <HAL_GetTick>
 8001504:	0003      	movs	r3, r0
 8001506:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800150a:	f7ff fabd 	bl	8000a88 <HAL_GetTick>
 800150e:	0002      	movs	r2, r0
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e0cd      	b.n	80016b8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800151c:	4b45      	ldr	r3, [pc, #276]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 800151e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001520:	2380      	movs	r3, #128	; 0x80
 8001522:	025b      	lsls	r3, r3, #9
 8001524:	4013      	ands	r3, r2
 8001526:	d0f0      	beq.n	800150a <HAL_RCC_OscConfig+0x552>
 8001528:	e01b      	b.n	8001562 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800152a:	4b42      	ldr	r3, [pc, #264]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 800152c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800152e:	4b41      	ldr	r3, [pc, #260]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 8001530:	4943      	ldr	r1, [pc, #268]	; (8001640 <HAL_RCC_OscConfig+0x688>)
 8001532:	400a      	ands	r2, r1
 8001534:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001536:	f7ff faa7 	bl	8000a88 <HAL_GetTick>
 800153a:	0003      	movs	r3, r0
 800153c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001540:	f7ff faa2 	bl	8000a88 <HAL_GetTick>
 8001544:	0002      	movs	r2, r0
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e0b2      	b.n	80016b8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001552:	4b38      	ldr	r3, [pc, #224]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 8001554:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001556:	2380      	movs	r3, #128	; 0x80
 8001558:	025b      	lsls	r3, r3, #9
 800155a:	4013      	ands	r3, r2
 800155c:	d1f0      	bne.n	8001540 <HAL_RCC_OscConfig+0x588>
 800155e:	e000      	b.n	8001562 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001560:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001566:	2b00      	cmp	r3, #0
 8001568:	d100      	bne.n	800156c <HAL_RCC_OscConfig+0x5b4>
 800156a:	e0a4      	b.n	80016b6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800156c:	4b31      	ldr	r3, [pc, #196]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	220c      	movs	r2, #12
 8001572:	4013      	ands	r3, r2
 8001574:	2b08      	cmp	r3, #8
 8001576:	d100      	bne.n	800157a <HAL_RCC_OscConfig+0x5c2>
 8001578:	e078      	b.n	800166c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157e:	2b02      	cmp	r3, #2
 8001580:	d14c      	bne.n	800161c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001582:	4b2c      	ldr	r3, [pc, #176]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	4b2b      	ldr	r3, [pc, #172]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 8001588:	492e      	ldr	r1, [pc, #184]	; (8001644 <HAL_RCC_OscConfig+0x68c>)
 800158a:	400a      	ands	r2, r1
 800158c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158e:	f7ff fa7b 	bl	8000a88 <HAL_GetTick>
 8001592:	0003      	movs	r3, r0
 8001594:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001598:	f7ff fa76 	bl	8000a88 <HAL_GetTick>
 800159c:	0002      	movs	r2, r0
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e086      	b.n	80016b8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015aa:	4b22      	ldr	r3, [pc, #136]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	2380      	movs	r3, #128	; 0x80
 80015b0:	049b      	lsls	r3, r3, #18
 80015b2:	4013      	ands	r3, r2
 80015b4:	d1f0      	bne.n	8001598 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015b6:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 80015b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ba:	220f      	movs	r2, #15
 80015bc:	4393      	bics	r3, r2
 80015be:	0019      	movs	r1, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015c4:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 80015c6:	430a      	orrs	r2, r1
 80015c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80015ca:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	4a1e      	ldr	r2, [pc, #120]	; (8001648 <HAL_RCC_OscConfig+0x690>)
 80015d0:	4013      	ands	r3, r2
 80015d2:	0019      	movs	r1, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015dc:	431a      	orrs	r2, r3
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 80015e0:	430a      	orrs	r2, r1
 80015e2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015e4:	4b13      	ldr	r3, [pc, #76]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 80015ea:	2180      	movs	r1, #128	; 0x80
 80015ec:	0449      	lsls	r1, r1, #17
 80015ee:	430a      	orrs	r2, r1
 80015f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f2:	f7ff fa49 	bl	8000a88 <HAL_GetTick>
 80015f6:	0003      	movs	r3, r0
 80015f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015fc:	f7ff fa44 	bl	8000a88 <HAL_GetTick>
 8001600:	0002      	movs	r2, r0
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e054      	b.n	80016b8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800160e:	4b09      	ldr	r3, [pc, #36]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	2380      	movs	r3, #128	; 0x80
 8001614:	049b      	lsls	r3, r3, #18
 8001616:	4013      	ands	r3, r2
 8001618:	d0f0      	beq.n	80015fc <HAL_RCC_OscConfig+0x644>
 800161a:	e04c      	b.n	80016b6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <HAL_RCC_OscConfig+0x67c>)
 8001622:	4908      	ldr	r1, [pc, #32]	; (8001644 <HAL_RCC_OscConfig+0x68c>)
 8001624:	400a      	ands	r2, r1
 8001626:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001628:	f7ff fa2e 	bl	8000a88 <HAL_GetTick>
 800162c:	0003      	movs	r3, r0
 800162e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001630:	e015      	b.n	800165e <HAL_RCC_OscConfig+0x6a6>
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	40021000 	.word	0x40021000
 8001638:	00001388 	.word	0x00001388
 800163c:	efffffff 	.word	0xefffffff
 8001640:	fffeffff 	.word	0xfffeffff
 8001644:	feffffff 	.word	0xfeffffff
 8001648:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800164c:	f7ff fa1c 	bl	8000a88 <HAL_GetTick>
 8001650:	0002      	movs	r2, r0
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e02c      	b.n	80016b8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800165e:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <HAL_RCC_OscConfig+0x708>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	2380      	movs	r3, #128	; 0x80
 8001664:	049b      	lsls	r3, r3, #18
 8001666:	4013      	ands	r3, r2
 8001668:	d1f0      	bne.n	800164c <HAL_RCC_OscConfig+0x694>
 800166a:	e024      	b.n	80016b6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001670:	2b01      	cmp	r3, #1
 8001672:	d101      	bne.n	8001678 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e01f      	b.n	80016b8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <HAL_RCC_OscConfig+0x708>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800167e:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <HAL_RCC_OscConfig+0x708>)
 8001680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001682:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	23c0      	movs	r3, #192	; 0xc0
 8001688:	025b      	lsls	r3, r3, #9
 800168a:	401a      	ands	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001690:	429a      	cmp	r2, r3
 8001692:	d10e      	bne.n	80016b2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	220f      	movs	r2, #15
 8001698:	401a      	ands	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800169e:	429a      	cmp	r2, r3
 80016a0:	d107      	bne.n	80016b2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	23f0      	movs	r3, #240	; 0xf0
 80016a6:	039b      	lsls	r3, r3, #14
 80016a8:	401a      	ands	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d001      	beq.n	80016b6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e000      	b.n	80016b8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	0018      	movs	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	b008      	add	sp, #32
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40021000 	.word	0x40021000

080016c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d101      	bne.n	80016d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e0bf      	b.n	8001858 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016d8:	4b61      	ldr	r3, [pc, #388]	; (8001860 <HAL_RCC_ClockConfig+0x19c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2201      	movs	r2, #1
 80016de:	4013      	ands	r3, r2
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d911      	bls.n	800170a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e6:	4b5e      	ldr	r3, [pc, #376]	; (8001860 <HAL_RCC_ClockConfig+0x19c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2201      	movs	r2, #1
 80016ec:	4393      	bics	r3, r2
 80016ee:	0019      	movs	r1, r3
 80016f0:	4b5b      	ldr	r3, [pc, #364]	; (8001860 <HAL_RCC_ClockConfig+0x19c>)
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	430a      	orrs	r2, r1
 80016f6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f8:	4b59      	ldr	r3, [pc, #356]	; (8001860 <HAL_RCC_ClockConfig+0x19c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2201      	movs	r2, #1
 80016fe:	4013      	ands	r3, r2
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	429a      	cmp	r2, r3
 8001704:	d001      	beq.n	800170a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e0a6      	b.n	8001858 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2202      	movs	r2, #2
 8001710:	4013      	ands	r3, r2
 8001712:	d015      	beq.n	8001740 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2204      	movs	r2, #4
 800171a:	4013      	ands	r3, r2
 800171c:	d006      	beq.n	800172c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800171e:	4b51      	ldr	r3, [pc, #324]	; (8001864 <HAL_RCC_ClockConfig+0x1a0>)
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	4b50      	ldr	r3, [pc, #320]	; (8001864 <HAL_RCC_ClockConfig+0x1a0>)
 8001724:	21e0      	movs	r1, #224	; 0xe0
 8001726:	00c9      	lsls	r1, r1, #3
 8001728:	430a      	orrs	r2, r1
 800172a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800172c:	4b4d      	ldr	r3, [pc, #308]	; (8001864 <HAL_RCC_ClockConfig+0x1a0>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	22f0      	movs	r2, #240	; 0xf0
 8001732:	4393      	bics	r3, r2
 8001734:	0019      	movs	r1, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689a      	ldr	r2, [r3, #8]
 800173a:	4b4a      	ldr	r3, [pc, #296]	; (8001864 <HAL_RCC_ClockConfig+0x1a0>)
 800173c:	430a      	orrs	r2, r1
 800173e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2201      	movs	r2, #1
 8001746:	4013      	ands	r3, r2
 8001748:	d04c      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d107      	bne.n	8001762 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001752:	4b44      	ldr	r3, [pc, #272]	; (8001864 <HAL_RCC_ClockConfig+0x1a0>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	2380      	movs	r3, #128	; 0x80
 8001758:	029b      	lsls	r3, r3, #10
 800175a:	4013      	ands	r3, r2
 800175c:	d120      	bne.n	80017a0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e07a      	b.n	8001858 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b02      	cmp	r3, #2
 8001768:	d107      	bne.n	800177a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800176a:	4b3e      	ldr	r3, [pc, #248]	; (8001864 <HAL_RCC_ClockConfig+0x1a0>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	2380      	movs	r3, #128	; 0x80
 8001770:	049b      	lsls	r3, r3, #18
 8001772:	4013      	ands	r3, r2
 8001774:	d114      	bne.n	80017a0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e06e      	b.n	8001858 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b03      	cmp	r3, #3
 8001780:	d107      	bne.n	8001792 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001782:	4b38      	ldr	r3, [pc, #224]	; (8001864 <HAL_RCC_ClockConfig+0x1a0>)
 8001784:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001786:	2380      	movs	r3, #128	; 0x80
 8001788:	025b      	lsls	r3, r3, #9
 800178a:	4013      	ands	r3, r2
 800178c:	d108      	bne.n	80017a0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e062      	b.n	8001858 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001792:	4b34      	ldr	r3, [pc, #208]	; (8001864 <HAL_RCC_ClockConfig+0x1a0>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2202      	movs	r2, #2
 8001798:	4013      	ands	r3, r2
 800179a:	d101      	bne.n	80017a0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e05b      	b.n	8001858 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017a0:	4b30      	ldr	r3, [pc, #192]	; (8001864 <HAL_RCC_ClockConfig+0x1a0>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2203      	movs	r2, #3
 80017a6:	4393      	bics	r3, r2
 80017a8:	0019      	movs	r1, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	4b2d      	ldr	r3, [pc, #180]	; (8001864 <HAL_RCC_ClockConfig+0x1a0>)
 80017b0:	430a      	orrs	r2, r1
 80017b2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017b4:	f7ff f968 	bl	8000a88 <HAL_GetTick>
 80017b8:	0003      	movs	r3, r0
 80017ba:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017bc:	e009      	b.n	80017d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017be:	f7ff f963 	bl	8000a88 <HAL_GetTick>
 80017c2:	0002      	movs	r2, r0
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	4a27      	ldr	r2, [pc, #156]	; (8001868 <HAL_RCC_ClockConfig+0x1a4>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e042      	b.n	8001858 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017d2:	4b24      	ldr	r3, [pc, #144]	; (8001864 <HAL_RCC_ClockConfig+0x1a0>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	220c      	movs	r2, #12
 80017d8:	401a      	ands	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d1ec      	bne.n	80017be <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017e4:	4b1e      	ldr	r3, [pc, #120]	; (8001860 <HAL_RCC_ClockConfig+0x19c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2201      	movs	r2, #1
 80017ea:	4013      	ands	r3, r2
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d211      	bcs.n	8001816 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f2:	4b1b      	ldr	r3, [pc, #108]	; (8001860 <HAL_RCC_ClockConfig+0x19c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2201      	movs	r2, #1
 80017f8:	4393      	bics	r3, r2
 80017fa:	0019      	movs	r1, r3
 80017fc:	4b18      	ldr	r3, [pc, #96]	; (8001860 <HAL_RCC_ClockConfig+0x19c>)
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	430a      	orrs	r2, r1
 8001802:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001804:	4b16      	ldr	r3, [pc, #88]	; (8001860 <HAL_RCC_ClockConfig+0x19c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2201      	movs	r2, #1
 800180a:	4013      	ands	r3, r2
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	429a      	cmp	r2, r3
 8001810:	d001      	beq.n	8001816 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e020      	b.n	8001858 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2204      	movs	r2, #4
 800181c:	4013      	ands	r3, r2
 800181e:	d009      	beq.n	8001834 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001820:	4b10      	ldr	r3, [pc, #64]	; (8001864 <HAL_RCC_ClockConfig+0x1a0>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	4a11      	ldr	r2, [pc, #68]	; (800186c <HAL_RCC_ClockConfig+0x1a8>)
 8001826:	4013      	ands	r3, r2
 8001828:	0019      	movs	r1, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68da      	ldr	r2, [r3, #12]
 800182e:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <HAL_RCC_ClockConfig+0x1a0>)
 8001830:	430a      	orrs	r2, r1
 8001832:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001834:	f000 f820 	bl	8001878 <HAL_RCC_GetSysClockFreq>
 8001838:	0001      	movs	r1, r0
 800183a:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <HAL_RCC_ClockConfig+0x1a0>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	091b      	lsrs	r3, r3, #4
 8001840:	220f      	movs	r2, #15
 8001842:	4013      	ands	r3, r2
 8001844:	4a0a      	ldr	r2, [pc, #40]	; (8001870 <HAL_RCC_ClockConfig+0x1ac>)
 8001846:	5cd3      	ldrb	r3, [r2, r3]
 8001848:	000a      	movs	r2, r1
 800184a:	40da      	lsrs	r2, r3
 800184c:	4b09      	ldr	r3, [pc, #36]	; (8001874 <HAL_RCC_ClockConfig+0x1b0>)
 800184e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001850:	2003      	movs	r0, #3
 8001852:	f7ff f8d3 	bl	80009fc <HAL_InitTick>
  
  return HAL_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	0018      	movs	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	b004      	add	sp, #16
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40022000 	.word	0x40022000
 8001864:	40021000 	.word	0x40021000
 8001868:	00001388 	.word	0x00001388
 800186c:	fffff8ff 	.word	0xfffff8ff
 8001870:	08003cf4 	.word	0x08003cf4
 8001874:	20000064 	.word	0x20000064

08001878 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001878:	b590      	push	{r4, r7, lr}
 800187a:	b08f      	sub	sp, #60	; 0x3c
 800187c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800187e:	2314      	movs	r3, #20
 8001880:	18fb      	adds	r3, r7, r3
 8001882:	4a38      	ldr	r2, [pc, #224]	; (8001964 <HAL_RCC_GetSysClockFreq+0xec>)
 8001884:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001886:	c313      	stmia	r3!, {r0, r1, r4}
 8001888:	6812      	ldr	r2, [r2, #0]
 800188a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	4a36      	ldr	r2, [pc, #216]	; (8001968 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001890:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001892:	c313      	stmia	r3!, {r0, r1, r4}
 8001894:	6812      	ldr	r2, [r2, #0]
 8001896:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001898:	2300      	movs	r3, #0
 800189a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800189c:	2300      	movs	r3, #0
 800189e:	62bb      	str	r3, [r7, #40]	; 0x28
 80018a0:	2300      	movs	r3, #0
 80018a2:	637b      	str	r3, [r7, #52]	; 0x34
 80018a4:	2300      	movs	r3, #0
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80018ac:	4b2f      	ldr	r3, [pc, #188]	; (800196c <HAL_RCC_GetSysClockFreq+0xf4>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b4:	220c      	movs	r2, #12
 80018b6:	4013      	ands	r3, r2
 80018b8:	2b0c      	cmp	r3, #12
 80018ba:	d047      	beq.n	800194c <HAL_RCC_GetSysClockFreq+0xd4>
 80018bc:	d849      	bhi.n	8001952 <HAL_RCC_GetSysClockFreq+0xda>
 80018be:	2b04      	cmp	r3, #4
 80018c0:	d002      	beq.n	80018c8 <HAL_RCC_GetSysClockFreq+0x50>
 80018c2:	2b08      	cmp	r3, #8
 80018c4:	d003      	beq.n	80018ce <HAL_RCC_GetSysClockFreq+0x56>
 80018c6:	e044      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018c8:	4b29      	ldr	r3, [pc, #164]	; (8001970 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018ca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018cc:	e044      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80018ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d0:	0c9b      	lsrs	r3, r3, #18
 80018d2:	220f      	movs	r2, #15
 80018d4:	4013      	ands	r3, r2
 80018d6:	2214      	movs	r2, #20
 80018d8:	18ba      	adds	r2, r7, r2
 80018da:	5cd3      	ldrb	r3, [r2, r3]
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80018de:	4b23      	ldr	r3, [pc, #140]	; (800196c <HAL_RCC_GetSysClockFreq+0xf4>)
 80018e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e2:	220f      	movs	r2, #15
 80018e4:	4013      	ands	r3, r2
 80018e6:	1d3a      	adds	r2, r7, #4
 80018e8:	5cd3      	ldrb	r3, [r2, r3]
 80018ea:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80018ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018ee:	23c0      	movs	r3, #192	; 0xc0
 80018f0:	025b      	lsls	r3, r3, #9
 80018f2:	401a      	ands	r2, r3
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	025b      	lsls	r3, r3, #9
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d109      	bne.n	8001910 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80018fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018fe:	481c      	ldr	r0, [pc, #112]	; (8001970 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001900:	f7fe fc0c 	bl	800011c <__udivsi3>
 8001904:	0003      	movs	r3, r0
 8001906:	001a      	movs	r2, r3
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	4353      	muls	r3, r2
 800190c:	637b      	str	r3, [r7, #52]	; 0x34
 800190e:	e01a      	b.n	8001946 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001912:	23c0      	movs	r3, #192	; 0xc0
 8001914:	025b      	lsls	r3, r3, #9
 8001916:	401a      	ands	r2, r3
 8001918:	23c0      	movs	r3, #192	; 0xc0
 800191a:	025b      	lsls	r3, r3, #9
 800191c:	429a      	cmp	r2, r3
 800191e:	d109      	bne.n	8001934 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001920:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001922:	4814      	ldr	r0, [pc, #80]	; (8001974 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001924:	f7fe fbfa 	bl	800011c <__udivsi3>
 8001928:	0003      	movs	r3, r0
 800192a:	001a      	movs	r2, r3
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	4353      	muls	r3, r2
 8001930:	637b      	str	r3, [r7, #52]	; 0x34
 8001932:	e008      	b.n	8001946 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001934:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001936:	480e      	ldr	r0, [pc, #56]	; (8001970 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001938:	f7fe fbf0 	bl	800011c <__udivsi3>
 800193c:	0003      	movs	r3, r0
 800193e:	001a      	movs	r2, r3
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	4353      	muls	r3, r2
 8001944:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001948:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800194a:	e005      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800194c:	4b09      	ldr	r3, [pc, #36]	; (8001974 <HAL_RCC_GetSysClockFreq+0xfc>)
 800194e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001950:	e002      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001952:	4b07      	ldr	r3, [pc, #28]	; (8001970 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001954:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001956:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800195a:	0018      	movs	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	b00f      	add	sp, #60	; 0x3c
 8001960:	bd90      	pop	{r4, r7, pc}
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	08003cd4 	.word	0x08003cd4
 8001968:	08003ce4 	.word	0x08003ce4
 800196c:	40021000 	.word	0x40021000
 8001970:	007a1200 	.word	0x007a1200
 8001974:	02dc6c00 	.word	0x02dc6c00

08001978 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800197c:	4b02      	ldr	r3, [pc, #8]	; (8001988 <HAL_RCC_GetHCLKFreq+0x10>)
 800197e:	681b      	ldr	r3, [r3, #0]
}
 8001980:	0018      	movs	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	20000064 	.word	0x20000064

0800198c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001990:	f7ff fff2 	bl	8001978 <HAL_RCC_GetHCLKFreq>
 8001994:	0001      	movs	r1, r0
 8001996:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	0a1b      	lsrs	r3, r3, #8
 800199c:	2207      	movs	r2, #7
 800199e:	4013      	ands	r3, r2
 80019a0:	4a04      	ldr	r2, [pc, #16]	; (80019b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80019a2:	5cd3      	ldrb	r3, [r2, r3]
 80019a4:	40d9      	lsrs	r1, r3
 80019a6:	000b      	movs	r3, r1
}    
 80019a8:	0018      	movs	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	46c0      	nop			; (mov r8, r8)
 80019b0:	40021000 	.word	0x40021000
 80019b4:	08003d04 	.word	0x08003d04

080019b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	2380      	movs	r3, #128	; 0x80
 80019ce:	025b      	lsls	r3, r3, #9
 80019d0:	4013      	ands	r3, r2
 80019d2:	d100      	bne.n	80019d6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80019d4:	e08e      	b.n	8001af4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80019d6:	2017      	movs	r0, #23
 80019d8:	183b      	adds	r3, r7, r0
 80019da:	2200      	movs	r2, #0
 80019dc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019de:	4b6e      	ldr	r3, [pc, #440]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019e0:	69da      	ldr	r2, [r3, #28]
 80019e2:	2380      	movs	r3, #128	; 0x80
 80019e4:	055b      	lsls	r3, r3, #21
 80019e6:	4013      	ands	r3, r2
 80019e8:	d110      	bne.n	8001a0c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80019ea:	4b6b      	ldr	r3, [pc, #428]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019ec:	69da      	ldr	r2, [r3, #28]
 80019ee:	4b6a      	ldr	r3, [pc, #424]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019f0:	2180      	movs	r1, #128	; 0x80
 80019f2:	0549      	lsls	r1, r1, #21
 80019f4:	430a      	orrs	r2, r1
 80019f6:	61da      	str	r2, [r3, #28]
 80019f8:	4b67      	ldr	r3, [pc, #412]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019fa:	69da      	ldr	r2, [r3, #28]
 80019fc:	2380      	movs	r3, #128	; 0x80
 80019fe:	055b      	lsls	r3, r3, #21
 8001a00:	4013      	ands	r3, r2
 8001a02:	60bb      	str	r3, [r7, #8]
 8001a04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a06:	183b      	adds	r3, r7, r0
 8001a08:	2201      	movs	r2, #1
 8001a0a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a0c:	4b63      	ldr	r3, [pc, #396]	; (8001b9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	4013      	ands	r3, r2
 8001a16:	d11a      	bne.n	8001a4e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a18:	4b60      	ldr	r3, [pc, #384]	; (8001b9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4b5f      	ldr	r3, [pc, #380]	; (8001b9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a1e:	2180      	movs	r1, #128	; 0x80
 8001a20:	0049      	lsls	r1, r1, #1
 8001a22:	430a      	orrs	r2, r1
 8001a24:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a26:	f7ff f82f 	bl	8000a88 <HAL_GetTick>
 8001a2a:	0003      	movs	r3, r0
 8001a2c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a2e:	e008      	b.n	8001a42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a30:	f7ff f82a 	bl	8000a88 <HAL_GetTick>
 8001a34:	0002      	movs	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b64      	cmp	r3, #100	; 0x64
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e0a6      	b.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a42:	4b56      	ldr	r3, [pc, #344]	; (8001b9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	2380      	movs	r3, #128	; 0x80
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d0f0      	beq.n	8001a30 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a4e:	4b52      	ldr	r3, [pc, #328]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a50:	6a1a      	ldr	r2, [r3, #32]
 8001a52:	23c0      	movs	r3, #192	; 0xc0
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4013      	ands	r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d034      	beq.n	8001aca <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	23c0      	movs	r3, #192	; 0xc0
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4013      	ands	r3, r2
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d02c      	beq.n	8001aca <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a70:	4b49      	ldr	r3, [pc, #292]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	4a4a      	ldr	r2, [pc, #296]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001a76:	4013      	ands	r3, r2
 8001a78:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a7a:	4b47      	ldr	r3, [pc, #284]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a7c:	6a1a      	ldr	r2, [r3, #32]
 8001a7e:	4b46      	ldr	r3, [pc, #280]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a80:	2180      	movs	r1, #128	; 0x80
 8001a82:	0249      	lsls	r1, r1, #9
 8001a84:	430a      	orrs	r2, r1
 8001a86:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a88:	4b43      	ldr	r3, [pc, #268]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a8a:	6a1a      	ldr	r2, [r3, #32]
 8001a8c:	4b42      	ldr	r3, [pc, #264]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a8e:	4945      	ldr	r1, [pc, #276]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001a90:	400a      	ands	r2, r1
 8001a92:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001a94:	4b40      	ldr	r3, [pc, #256]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d013      	beq.n	8001aca <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa2:	f7fe fff1 	bl	8000a88 <HAL_GetTick>
 8001aa6:	0003      	movs	r3, r0
 8001aa8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aaa:	e009      	b.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aac:	f7fe ffec 	bl	8000a88 <HAL_GetTick>
 8001ab0:	0002      	movs	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	4a3c      	ldr	r2, [pc, #240]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e067      	b.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac0:	4b35      	ldr	r3, [pc, #212]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d0f0      	beq.n	8001aac <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001aca:	4b33      	ldr	r3, [pc, #204]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	4a34      	ldr	r2, [pc, #208]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	0019      	movs	r1, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	4b2f      	ldr	r3, [pc, #188]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ada:	430a      	orrs	r2, r1
 8001adc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ade:	2317      	movs	r3, #23
 8001ae0:	18fb      	adds	r3, r7, r3
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d105      	bne.n	8001af4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ae8:	4b2b      	ldr	r3, [pc, #172]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001aea:	69da      	ldr	r2, [r3, #28]
 8001aec:	4b2a      	ldr	r3, [pc, #168]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001aee:	492f      	ldr	r1, [pc, #188]	; (8001bac <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001af0:	400a      	ands	r2, r1
 8001af2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2201      	movs	r2, #1
 8001afa:	4013      	ands	r3, r2
 8001afc:	d009      	beq.n	8001b12 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001afe:	4b26      	ldr	r3, [pc, #152]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	2203      	movs	r2, #3
 8001b04:	4393      	bics	r3, r2
 8001b06:	0019      	movs	r1, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	4b22      	ldr	r3, [pc, #136]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2202      	movs	r2, #2
 8001b18:	4013      	ands	r3, r2
 8001b1a:	d009      	beq.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b1c:	4b1e      	ldr	r3, [pc, #120]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b20:	4a23      	ldr	r2, [pc, #140]	; (8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b22:	4013      	ands	r3, r2
 8001b24:	0019      	movs	r1, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68da      	ldr	r2, [r3, #12]
 8001b2a:	4b1b      	ldr	r3, [pc, #108]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2220      	movs	r2, #32
 8001b36:	4013      	ands	r3, r2
 8001b38:	d009      	beq.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b3a:	4b17      	ldr	r3, [pc, #92]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	2210      	movs	r2, #16
 8001b40:	4393      	bics	r3, r2
 8001b42:	0019      	movs	r1, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	691a      	ldr	r2, [r3, #16]
 8001b48:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	2380      	movs	r3, #128	; 0x80
 8001b54:	029b      	lsls	r3, r3, #10
 8001b56:	4013      	ands	r3, r2
 8001b58:	d009      	beq.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b5a:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	2280      	movs	r2, #128	; 0x80
 8001b60:	4393      	bics	r3, r2
 8001b62:	0019      	movs	r1, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	699a      	ldr	r2, [r3, #24]
 8001b68:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	2380      	movs	r3, #128	; 0x80
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	4013      	ands	r3, r2
 8001b78:	d009      	beq.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001b7a:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	2240      	movs	r2, #64	; 0x40
 8001b80:	4393      	bics	r3, r2
 8001b82:	0019      	movs	r1, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	695a      	ldr	r2, [r3, #20]
 8001b88:	4b03      	ldr	r3, [pc, #12]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	0018      	movs	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	b006      	add	sp, #24
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40007000 	.word	0x40007000
 8001ba0:	fffffcff 	.word	0xfffffcff
 8001ba4:	fffeffff 	.word	0xfffeffff
 8001ba8:	00001388 	.word	0x00001388
 8001bac:	efffffff 	.word	0xefffffff
 8001bb0:	fffcffff 	.word	0xfffcffff

08001bb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e042      	b.n	8001c4c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	223d      	movs	r2, #61	; 0x3d
 8001bca:	5c9b      	ldrb	r3, [r3, r2]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d107      	bne.n	8001be2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	223c      	movs	r2, #60	; 0x3c
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	0018      	movs	r0, r3
 8001bde:	f7fe fdd1 	bl	8000784 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	223d      	movs	r2, #61	; 0x3d
 8001be6:	2102      	movs	r1, #2
 8001be8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	0019      	movs	r1, r3
 8001bf4:	0010      	movs	r0, r2
 8001bf6:	f000 fc8b 	bl	8002510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2246      	movs	r2, #70	; 0x46
 8001bfe:	2101      	movs	r1, #1
 8001c00:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	223e      	movs	r2, #62	; 0x3e
 8001c06:	2101      	movs	r1, #1
 8001c08:	5499      	strb	r1, [r3, r2]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	223f      	movs	r2, #63	; 0x3f
 8001c0e:	2101      	movs	r1, #1
 8001c10:	5499      	strb	r1, [r3, r2]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2240      	movs	r2, #64	; 0x40
 8001c16:	2101      	movs	r1, #1
 8001c18:	5499      	strb	r1, [r3, r2]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2241      	movs	r2, #65	; 0x41
 8001c1e:	2101      	movs	r1, #1
 8001c20:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2242      	movs	r2, #66	; 0x42
 8001c26:	2101      	movs	r1, #1
 8001c28:	5499      	strb	r1, [r3, r2]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2243      	movs	r2, #67	; 0x43
 8001c2e:	2101      	movs	r1, #1
 8001c30:	5499      	strb	r1, [r3, r2]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2244      	movs	r2, #68	; 0x44
 8001c36:	2101      	movs	r1, #1
 8001c38:	5499      	strb	r1, [r3, r2]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2245      	movs	r2, #69	; 0x45
 8001c3e:	2101      	movs	r1, #1
 8001c40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	223d      	movs	r2, #61	; 0x3d
 8001c46:	2101      	movs	r1, #1
 8001c48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	b002      	add	sp, #8
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	223d      	movs	r2, #61	; 0x3d
 8001c60:	5c9b      	ldrb	r3, [r3, r2]
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d001      	beq.n	8001c6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e03b      	b.n	8001ce4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	223d      	movs	r2, #61	; 0x3d
 8001c70:	2102      	movs	r1, #2
 8001c72:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68da      	ldr	r2, [r3, #12]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2101      	movs	r1, #1
 8001c80:	430a      	orrs	r2, r1
 8001c82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a18      	ldr	r2, [pc, #96]	; (8001cec <HAL_TIM_Base_Start_IT+0x98>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d00f      	beq.n	8001cae <HAL_TIM_Base_Start_IT+0x5a>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	2380      	movs	r3, #128	; 0x80
 8001c94:	05db      	lsls	r3, r3, #23
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d009      	beq.n	8001cae <HAL_TIM_Base_Start_IT+0x5a>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a14      	ldr	r2, [pc, #80]	; (8001cf0 <HAL_TIM_Base_Start_IT+0x9c>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d004      	beq.n	8001cae <HAL_TIM_Base_Start_IT+0x5a>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a12      	ldr	r2, [pc, #72]	; (8001cf4 <HAL_TIM_Base_Start_IT+0xa0>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d111      	bne.n	8001cd2 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	2207      	movs	r2, #7
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2b06      	cmp	r3, #6
 8001cbe:	d010      	beq.n	8001ce2 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2101      	movs	r1, #1
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cd0:	e007      	b.n	8001ce2 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2101      	movs	r1, #1
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	b004      	add	sp, #16
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40012c00 	.word	0x40012c00
 8001cf0:	40000400 	.word	0x40000400
 8001cf4:	40014000 	.word	0x40014000

08001cf8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e042      	b.n	8001d90 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	223d      	movs	r2, #61	; 0x3d
 8001d0e:	5c9b      	ldrb	r3, [r3, r2]
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d107      	bne.n	8001d26 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	223c      	movs	r2, #60	; 0x3c
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	0018      	movs	r0, r3
 8001d22:	f000 f839 	bl	8001d98 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	223d      	movs	r2, #61	; 0x3d
 8001d2a:	2102      	movs	r1, #2
 8001d2c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3304      	adds	r3, #4
 8001d36:	0019      	movs	r1, r3
 8001d38:	0010      	movs	r0, r2
 8001d3a:	f000 fbe9 	bl	8002510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2246      	movs	r2, #70	; 0x46
 8001d42:	2101      	movs	r1, #1
 8001d44:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	223e      	movs	r2, #62	; 0x3e
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	5499      	strb	r1, [r3, r2]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	223f      	movs	r2, #63	; 0x3f
 8001d52:	2101      	movs	r1, #1
 8001d54:	5499      	strb	r1, [r3, r2]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2240      	movs	r2, #64	; 0x40
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	5499      	strb	r1, [r3, r2]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2241      	movs	r2, #65	; 0x41
 8001d62:	2101      	movs	r1, #1
 8001d64:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2242      	movs	r2, #66	; 0x42
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	5499      	strb	r1, [r3, r2]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2243      	movs	r2, #67	; 0x43
 8001d72:	2101      	movs	r1, #1
 8001d74:	5499      	strb	r1, [r3, r2]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2244      	movs	r2, #68	; 0x44
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	5499      	strb	r1, [r3, r2]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2245      	movs	r2, #69	; 0x45
 8001d82:	2101      	movs	r1, #1
 8001d84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	223d      	movs	r2, #61	; 0x3d
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	0018      	movs	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	b002      	add	sp, #8
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001da0:	46c0      	nop			; (mov r8, r8)
 8001da2:	46bd      	mov	sp, r7
 8001da4:	b002      	add	sp, #8
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001db2:	230f      	movs	r3, #15
 8001db4:	18fb      	adds	r3, r7, r3
 8001db6:	2200      	movs	r2, #0
 8001db8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d104      	bne.n	8001dca <HAL_TIM_IC_Start_IT+0x22>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	223e      	movs	r2, #62	; 0x3e
 8001dc4:	5c9b      	ldrb	r3, [r3, r2]
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	e013      	b.n	8001df2 <HAL_TIM_IC_Start_IT+0x4a>
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d104      	bne.n	8001dda <HAL_TIM_IC_Start_IT+0x32>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	223f      	movs	r2, #63	; 0x3f
 8001dd4:	5c9b      	ldrb	r3, [r3, r2]
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	e00b      	b.n	8001df2 <HAL_TIM_IC_Start_IT+0x4a>
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	2b08      	cmp	r3, #8
 8001dde:	d104      	bne.n	8001dea <HAL_TIM_IC_Start_IT+0x42>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2240      	movs	r2, #64	; 0x40
 8001de4:	5c9b      	ldrb	r3, [r3, r2]
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	e003      	b.n	8001df2 <HAL_TIM_IC_Start_IT+0x4a>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2241      	movs	r2, #65	; 0x41
 8001dee:	5c9b      	ldrb	r3, [r3, r2]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	220e      	movs	r2, #14
 8001df4:	18ba      	adds	r2, r7, r2
 8001df6:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d104      	bne.n	8001e08 <HAL_TIM_IC_Start_IT+0x60>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2242      	movs	r2, #66	; 0x42
 8001e02:	5c9b      	ldrb	r3, [r3, r2]
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	e013      	b.n	8001e30 <HAL_TIM_IC_Start_IT+0x88>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	d104      	bne.n	8001e18 <HAL_TIM_IC_Start_IT+0x70>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2243      	movs	r2, #67	; 0x43
 8001e12:	5c9b      	ldrb	r3, [r3, r2]
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	e00b      	b.n	8001e30 <HAL_TIM_IC_Start_IT+0x88>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	2b08      	cmp	r3, #8
 8001e1c:	d104      	bne.n	8001e28 <HAL_TIM_IC_Start_IT+0x80>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2244      	movs	r2, #68	; 0x44
 8001e22:	5c9b      	ldrb	r3, [r3, r2]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	e003      	b.n	8001e30 <HAL_TIM_IC_Start_IT+0x88>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2245      	movs	r2, #69	; 0x45
 8001e2c:	5c9b      	ldrb	r3, [r3, r2]
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	210d      	movs	r1, #13
 8001e32:	187a      	adds	r2, r7, r1
 8001e34:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001e36:	230e      	movs	r3, #14
 8001e38:	18fb      	adds	r3, r7, r3
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d103      	bne.n	8001e48 <HAL_TIM_IC_Start_IT+0xa0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001e40:	187b      	adds	r3, r7, r1
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d001      	beq.n	8001e4c <HAL_TIM_IC_Start_IT+0xa4>
  {
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e0b1      	b.n	8001fb0 <HAL_TIM_IC_Start_IT+0x208>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d104      	bne.n	8001e5c <HAL_TIM_IC_Start_IT+0xb4>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	223e      	movs	r2, #62	; 0x3e
 8001e56:	2102      	movs	r1, #2
 8001e58:	5499      	strb	r1, [r3, r2]
 8001e5a:	e013      	b.n	8001e84 <HAL_TIM_IC_Start_IT+0xdc>
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	d104      	bne.n	8001e6c <HAL_TIM_IC_Start_IT+0xc4>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	223f      	movs	r2, #63	; 0x3f
 8001e66:	2102      	movs	r1, #2
 8001e68:	5499      	strb	r1, [r3, r2]
 8001e6a:	e00b      	b.n	8001e84 <HAL_TIM_IC_Start_IT+0xdc>
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	d104      	bne.n	8001e7c <HAL_TIM_IC_Start_IT+0xd4>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2240      	movs	r2, #64	; 0x40
 8001e76:	2102      	movs	r1, #2
 8001e78:	5499      	strb	r1, [r3, r2]
 8001e7a:	e003      	b.n	8001e84 <HAL_TIM_IC_Start_IT+0xdc>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2241      	movs	r2, #65	; 0x41
 8001e80:	2102      	movs	r1, #2
 8001e82:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d104      	bne.n	8001e94 <HAL_TIM_IC_Start_IT+0xec>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2242      	movs	r2, #66	; 0x42
 8001e8e:	2102      	movs	r1, #2
 8001e90:	5499      	strb	r1, [r3, r2]
 8001e92:	e013      	b.n	8001ebc <HAL_TIM_IC_Start_IT+0x114>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	d104      	bne.n	8001ea4 <HAL_TIM_IC_Start_IT+0xfc>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2243      	movs	r2, #67	; 0x43
 8001e9e:	2102      	movs	r1, #2
 8001ea0:	5499      	strb	r1, [r3, r2]
 8001ea2:	e00b      	b.n	8001ebc <HAL_TIM_IC_Start_IT+0x114>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	2b08      	cmp	r3, #8
 8001ea8:	d104      	bne.n	8001eb4 <HAL_TIM_IC_Start_IT+0x10c>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2244      	movs	r2, #68	; 0x44
 8001eae:	2102      	movs	r1, #2
 8001eb0:	5499      	strb	r1, [r3, r2]
 8001eb2:	e003      	b.n	8001ebc <HAL_TIM_IC_Start_IT+0x114>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2245      	movs	r2, #69	; 0x45
 8001eb8:	2102      	movs	r1, #2
 8001eba:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	2b0c      	cmp	r3, #12
 8001ec0:	d02a      	beq.n	8001f18 <HAL_TIM_IC_Start_IT+0x170>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	2b0c      	cmp	r3, #12
 8001ec6:	d830      	bhi.n	8001f2a <HAL_TIM_IC_Start_IT+0x182>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	2b08      	cmp	r3, #8
 8001ecc:	d01b      	beq.n	8001f06 <HAL_TIM_IC_Start_IT+0x15e>
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	d82a      	bhi.n	8001f2a <HAL_TIM_IC_Start_IT+0x182>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_TIM_IC_Start_IT+0x13a>
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	d009      	beq.n	8001ef4 <HAL_TIM_IC_Start_IT+0x14c>
 8001ee0:	e023      	b.n	8001f2a <HAL_TIM_IC_Start_IT+0x182>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68da      	ldr	r2, [r3, #12]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2102      	movs	r1, #2
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	60da      	str	r2, [r3, #12]
      break;
 8001ef2:	e01f      	b.n	8001f34 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68da      	ldr	r2, [r3, #12]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2104      	movs	r1, #4
 8001f00:	430a      	orrs	r2, r1
 8001f02:	60da      	str	r2, [r3, #12]
      break;
 8001f04:	e016      	b.n	8001f34 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68da      	ldr	r2, [r3, #12]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2108      	movs	r1, #8
 8001f12:	430a      	orrs	r2, r1
 8001f14:	60da      	str	r2, [r3, #12]
      break;
 8001f16:	e00d      	b.n	8001f34 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2110      	movs	r1, #16
 8001f24:	430a      	orrs	r2, r1
 8001f26:	60da      	str	r2, [r3, #12]
      break;
 8001f28:	e004      	b.n	8001f34 <HAL_TIM_IC_Start_IT+0x18c>
    }

    default:
      status = HAL_ERROR;
 8001f2a:	230f      	movs	r3, #15
 8001f2c:	18fb      	adds	r3, r7, r3
 8001f2e:	2201      	movs	r2, #1
 8001f30:	701a      	strb	r2, [r3, #0]
      break;
 8001f32:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8001f34:	230f      	movs	r3, #15
 8001f36:	18fb      	adds	r3, r7, r3
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d135      	bne.n	8001faa <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6839      	ldr	r1, [r7, #0]
 8001f44:	2201      	movs	r2, #1
 8001f46:	0018      	movs	r0, r3
 8001f48:	f000 fd20 	bl	800298c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a19      	ldr	r2, [pc, #100]	; (8001fb8 <HAL_TIM_IC_Start_IT+0x210>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d00f      	beq.n	8001f76 <HAL_TIM_IC_Start_IT+0x1ce>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	2380      	movs	r3, #128	; 0x80
 8001f5c:	05db      	lsls	r3, r3, #23
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d009      	beq.n	8001f76 <HAL_TIM_IC_Start_IT+0x1ce>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a15      	ldr	r2, [pc, #84]	; (8001fbc <HAL_TIM_IC_Start_IT+0x214>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d004      	beq.n	8001f76 <HAL_TIM_IC_Start_IT+0x1ce>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a13      	ldr	r2, [pc, #76]	; (8001fc0 <HAL_TIM_IC_Start_IT+0x218>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d111      	bne.n	8001f9a <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	2207      	movs	r2, #7
 8001f7e:	4013      	ands	r3, r2
 8001f80:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	2b06      	cmp	r3, #6
 8001f86:	d010      	beq.n	8001faa <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2101      	movs	r1, #1
 8001f94:	430a      	orrs	r2, r1
 8001f96:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f98:	e007      	b.n	8001faa <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8001faa:	230f      	movs	r3, #15
 8001fac:	18fb      	adds	r3, r7, r3
 8001fae:	781b      	ldrb	r3, [r3, #0]
}
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	b004      	add	sp, #16
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40012c00 	.word	0x40012c00
 8001fbc:	40000400 	.word	0x40000400
 8001fc0:	40014000 	.word	0x40014000

08001fc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d124      	bne.n	8002024 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d11d      	bne.n	8002024 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2203      	movs	r2, #3
 8001fee:	4252      	negs	r2, r2
 8001ff0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	2203      	movs	r2, #3
 8002000:	4013      	ands	r3, r2
 8002002:	d004      	beq.n	800200e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	0018      	movs	r0, r3
 8002008:	f7fe f976 	bl	80002f8 <HAL_TIM_IC_CaptureCallback>
 800200c:	e007      	b.n	800201e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	0018      	movs	r0, r3
 8002012:	f000 fa65 	bl	80024e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	0018      	movs	r0, r3
 800201a:	f000 fa69 	bl	80024f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	2204      	movs	r2, #4
 800202c:	4013      	ands	r3, r2
 800202e:	2b04      	cmp	r3, #4
 8002030:	d125      	bne.n	800207e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	2204      	movs	r2, #4
 800203a:	4013      	ands	r3, r2
 800203c:	2b04      	cmp	r3, #4
 800203e:	d11e      	bne.n	800207e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2205      	movs	r2, #5
 8002046:	4252      	negs	r2, r2
 8002048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2202      	movs	r2, #2
 800204e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	699a      	ldr	r2, [r3, #24]
 8002056:	23c0      	movs	r3, #192	; 0xc0
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4013      	ands	r3, r2
 800205c:	d004      	beq.n	8002068 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	0018      	movs	r0, r3
 8002062:	f7fe f949 	bl	80002f8 <HAL_TIM_IC_CaptureCallback>
 8002066:	e007      	b.n	8002078 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	0018      	movs	r0, r3
 800206c:	f000 fa38 	bl	80024e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	0018      	movs	r0, r3
 8002074:	f000 fa3c 	bl	80024f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	2208      	movs	r2, #8
 8002086:	4013      	ands	r3, r2
 8002088:	2b08      	cmp	r3, #8
 800208a:	d124      	bne.n	80020d6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	2208      	movs	r2, #8
 8002094:	4013      	ands	r3, r2
 8002096:	2b08      	cmp	r3, #8
 8002098:	d11d      	bne.n	80020d6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2209      	movs	r2, #9
 80020a0:	4252      	negs	r2, r2
 80020a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2204      	movs	r2, #4
 80020a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	69db      	ldr	r3, [r3, #28]
 80020b0:	2203      	movs	r2, #3
 80020b2:	4013      	ands	r3, r2
 80020b4:	d004      	beq.n	80020c0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	0018      	movs	r0, r3
 80020ba:	f7fe f91d 	bl	80002f8 <HAL_TIM_IC_CaptureCallback>
 80020be:	e007      	b.n	80020d0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	0018      	movs	r0, r3
 80020c4:	f000 fa0c 	bl	80024e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	0018      	movs	r0, r3
 80020cc:	f000 fa10 	bl	80024f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	2210      	movs	r2, #16
 80020de:	4013      	ands	r3, r2
 80020e0:	2b10      	cmp	r3, #16
 80020e2:	d125      	bne.n	8002130 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	2210      	movs	r2, #16
 80020ec:	4013      	ands	r3, r2
 80020ee:	2b10      	cmp	r3, #16
 80020f0:	d11e      	bne.n	8002130 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2211      	movs	r2, #17
 80020f8:	4252      	negs	r2, r2
 80020fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2208      	movs	r2, #8
 8002100:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	69da      	ldr	r2, [r3, #28]
 8002108:	23c0      	movs	r3, #192	; 0xc0
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4013      	ands	r3, r2
 800210e:	d004      	beq.n	800211a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	0018      	movs	r0, r3
 8002114:	f7fe f8f0 	bl	80002f8 <HAL_TIM_IC_CaptureCallback>
 8002118:	e007      	b.n	800212a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	0018      	movs	r0, r3
 800211e:	f000 f9df 	bl	80024e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	0018      	movs	r0, r3
 8002126:	f000 f9e3 	bl	80024f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	2201      	movs	r2, #1
 8002138:	4013      	ands	r3, r2
 800213a:	2b01      	cmp	r3, #1
 800213c:	d10f      	bne.n	800215e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	2201      	movs	r2, #1
 8002146:	4013      	ands	r3, r2
 8002148:	2b01      	cmp	r3, #1
 800214a:	d108      	bne.n	800215e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2202      	movs	r2, #2
 8002152:	4252      	negs	r2, r2
 8002154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	0018      	movs	r0, r3
 800215a:	f7fe f93f 	bl	80003dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	2280      	movs	r2, #128	; 0x80
 8002166:	4013      	ands	r3, r2
 8002168:	2b80      	cmp	r3, #128	; 0x80
 800216a:	d10f      	bne.n	800218c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	2280      	movs	r2, #128	; 0x80
 8002174:	4013      	ands	r3, r2
 8002176:	2b80      	cmp	r3, #128	; 0x80
 8002178:	d108      	bne.n	800218c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2281      	movs	r2, #129	; 0x81
 8002180:	4252      	negs	r2, r2
 8002182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	0018      	movs	r0, r3
 8002188:	f000 fc8a 	bl	8002aa0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	2240      	movs	r2, #64	; 0x40
 8002194:	4013      	ands	r3, r2
 8002196:	2b40      	cmp	r3, #64	; 0x40
 8002198:	d10f      	bne.n	80021ba <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	2240      	movs	r2, #64	; 0x40
 80021a2:	4013      	ands	r3, r2
 80021a4:	2b40      	cmp	r3, #64	; 0x40
 80021a6:	d108      	bne.n	80021ba <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2241      	movs	r2, #65	; 0x41
 80021ae:	4252      	negs	r2, r2
 80021b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	0018      	movs	r0, r3
 80021b6:	f000 f9a3 	bl	8002500 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	2220      	movs	r2, #32
 80021c2:	4013      	ands	r3, r2
 80021c4:	2b20      	cmp	r3, #32
 80021c6:	d10f      	bne.n	80021e8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	2220      	movs	r2, #32
 80021d0:	4013      	ands	r3, r2
 80021d2:	2b20      	cmp	r3, #32
 80021d4:	d108      	bne.n	80021e8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2221      	movs	r2, #33	; 0x21
 80021dc:	4252      	negs	r2, r2
 80021de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	0018      	movs	r0, r3
 80021e4:	f000 fc54 	bl	8002a90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021e8:	46c0      	nop			; (mov r8, r8)
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b002      	add	sp, #8
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021fc:	2317      	movs	r3, #23
 80021fe:	18fb      	adds	r3, r7, r3
 8002200:	2200      	movs	r2, #0
 8002202:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	223c      	movs	r2, #60	; 0x3c
 8002208:	5c9b      	ldrb	r3, [r3, r2]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d101      	bne.n	8002212 <HAL_TIM_IC_ConfigChannel+0x22>
 800220e:	2302      	movs	r3, #2
 8002210:	e08c      	b.n	800232c <HAL_TIM_IC_ConfigChannel+0x13c>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	223c      	movs	r2, #60	; 0x3c
 8002216:	2101      	movs	r1, #1
 8002218:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d11b      	bne.n	8002258 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6818      	ldr	r0, [r3, #0]
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	6819      	ldr	r1, [r3, #0]
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	f000 f9ee 	bl	8002610 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	699a      	ldr	r2, [r3, #24]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	210c      	movs	r1, #12
 8002240:	438a      	bics	r2, r1
 8002242:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6999      	ldr	r1, [r3, #24]
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	619a      	str	r2, [r3, #24]
 8002256:	e062      	b.n	800231e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b04      	cmp	r3, #4
 800225c:	d11c      	bne.n	8002298 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6818      	ldr	r0, [r3, #0]
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	6819      	ldr	r1, [r3, #0]
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	f000 fa59 	bl	8002724 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	699a      	ldr	r2, [r3, #24]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	492d      	ldr	r1, [pc, #180]	; (8002334 <HAL_TIM_IC_ConfigChannel+0x144>)
 800227e:	400a      	ands	r2, r1
 8002280:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6999      	ldr	r1, [r3, #24]
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	021a      	lsls	r2, r3, #8
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	619a      	str	r2, [r3, #24]
 8002296:	e042      	b.n	800231e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b08      	cmp	r3, #8
 800229c:	d11b      	bne.n	80022d6 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	6819      	ldr	r1, [r3, #0]
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	f000 faad 	bl	800280c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	69da      	ldr	r2, [r3, #28]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	210c      	movs	r1, #12
 80022be:	438a      	bics	r2, r1
 80022c0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	69d9      	ldr	r1, [r3, #28]
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	61da      	str	r2, [r3, #28]
 80022d4:	e023      	b.n	800231e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b0c      	cmp	r3, #12
 80022da:	d11c      	bne.n	8002316 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6818      	ldr	r0, [r3, #0]
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	6819      	ldr	r1, [r3, #0]
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	f000 face 	bl	800288c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	69da      	ldr	r2, [r3, #28]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	490e      	ldr	r1, [pc, #56]	; (8002334 <HAL_TIM_IC_ConfigChannel+0x144>)
 80022fc:	400a      	ands	r2, r1
 80022fe:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	69d9      	ldr	r1, [r3, #28]
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	021a      	lsls	r2, r3, #8
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	61da      	str	r2, [r3, #28]
 8002314:	e003      	b.n	800231e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8002316:	2317      	movs	r3, #23
 8002318:	18fb      	adds	r3, r7, r3
 800231a:	2201      	movs	r2, #1
 800231c:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	223c      	movs	r2, #60	; 0x3c
 8002322:	2100      	movs	r1, #0
 8002324:	5499      	strb	r1, [r3, r2]

  return status;
 8002326:	2317      	movs	r3, #23
 8002328:	18fb      	adds	r3, r7, r3
 800232a:	781b      	ldrb	r3, [r3, #0]
}
 800232c:	0018      	movs	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	b006      	add	sp, #24
 8002332:	bd80      	pop	{r7, pc}
 8002334:	fffff3ff 	.word	0xfffff3ff

08002338 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002342:	230f      	movs	r3, #15
 8002344:	18fb      	adds	r3, r7, r3
 8002346:	2200      	movs	r2, #0
 8002348:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	223c      	movs	r2, #60	; 0x3c
 800234e:	5c9b      	ldrb	r3, [r3, r2]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d101      	bne.n	8002358 <HAL_TIM_ConfigClockSource+0x20>
 8002354:	2302      	movs	r3, #2
 8002356:	e0bc      	b.n	80024d2 <HAL_TIM_ConfigClockSource+0x19a>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	223c      	movs	r2, #60	; 0x3c
 800235c:	2101      	movs	r1, #1
 800235e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	223d      	movs	r2, #61	; 0x3d
 8002364:	2102      	movs	r1, #2
 8002366:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2277      	movs	r2, #119	; 0x77
 8002374:	4393      	bics	r3, r2
 8002376:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	4a58      	ldr	r2, [pc, #352]	; (80024dc <HAL_TIM_ConfigClockSource+0x1a4>)
 800237c:	4013      	ands	r3, r2
 800237e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68ba      	ldr	r2, [r7, #8]
 8002386:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2280      	movs	r2, #128	; 0x80
 800238e:	0192      	lsls	r2, r2, #6
 8002390:	4293      	cmp	r3, r2
 8002392:	d040      	beq.n	8002416 <HAL_TIM_ConfigClockSource+0xde>
 8002394:	2280      	movs	r2, #128	; 0x80
 8002396:	0192      	lsls	r2, r2, #6
 8002398:	4293      	cmp	r3, r2
 800239a:	d900      	bls.n	800239e <HAL_TIM_ConfigClockSource+0x66>
 800239c:	e088      	b.n	80024b0 <HAL_TIM_ConfigClockSource+0x178>
 800239e:	2280      	movs	r2, #128	; 0x80
 80023a0:	0152      	lsls	r2, r2, #5
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d100      	bne.n	80023a8 <HAL_TIM_ConfigClockSource+0x70>
 80023a6:	e088      	b.n	80024ba <HAL_TIM_ConfigClockSource+0x182>
 80023a8:	2280      	movs	r2, #128	; 0x80
 80023aa:	0152      	lsls	r2, r2, #5
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d900      	bls.n	80023b2 <HAL_TIM_ConfigClockSource+0x7a>
 80023b0:	e07e      	b.n	80024b0 <HAL_TIM_ConfigClockSource+0x178>
 80023b2:	2b70      	cmp	r3, #112	; 0x70
 80023b4:	d018      	beq.n	80023e8 <HAL_TIM_ConfigClockSource+0xb0>
 80023b6:	d900      	bls.n	80023ba <HAL_TIM_ConfigClockSource+0x82>
 80023b8:	e07a      	b.n	80024b0 <HAL_TIM_ConfigClockSource+0x178>
 80023ba:	2b60      	cmp	r3, #96	; 0x60
 80023bc:	d04f      	beq.n	800245e <HAL_TIM_ConfigClockSource+0x126>
 80023be:	d900      	bls.n	80023c2 <HAL_TIM_ConfigClockSource+0x8a>
 80023c0:	e076      	b.n	80024b0 <HAL_TIM_ConfigClockSource+0x178>
 80023c2:	2b50      	cmp	r3, #80	; 0x50
 80023c4:	d03b      	beq.n	800243e <HAL_TIM_ConfigClockSource+0x106>
 80023c6:	d900      	bls.n	80023ca <HAL_TIM_ConfigClockSource+0x92>
 80023c8:	e072      	b.n	80024b0 <HAL_TIM_ConfigClockSource+0x178>
 80023ca:	2b40      	cmp	r3, #64	; 0x40
 80023cc:	d057      	beq.n	800247e <HAL_TIM_ConfigClockSource+0x146>
 80023ce:	d900      	bls.n	80023d2 <HAL_TIM_ConfigClockSource+0x9a>
 80023d0:	e06e      	b.n	80024b0 <HAL_TIM_ConfigClockSource+0x178>
 80023d2:	2b30      	cmp	r3, #48	; 0x30
 80023d4:	d063      	beq.n	800249e <HAL_TIM_ConfigClockSource+0x166>
 80023d6:	d86b      	bhi.n	80024b0 <HAL_TIM_ConfigClockSource+0x178>
 80023d8:	2b20      	cmp	r3, #32
 80023da:	d060      	beq.n	800249e <HAL_TIM_ConfigClockSource+0x166>
 80023dc:	d868      	bhi.n	80024b0 <HAL_TIM_ConfigClockSource+0x178>
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d05d      	beq.n	800249e <HAL_TIM_ConfigClockSource+0x166>
 80023e2:	2b10      	cmp	r3, #16
 80023e4:	d05b      	beq.n	800249e <HAL_TIM_ConfigClockSource+0x166>
 80023e6:	e063      	b.n	80024b0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6818      	ldr	r0, [r3, #0]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	6899      	ldr	r1, [r3, #8]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	f000 faa8 	bl	800294c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2277      	movs	r2, #119	; 0x77
 8002408:	4313      	orrs	r3, r2
 800240a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68ba      	ldr	r2, [r7, #8]
 8002412:	609a      	str	r2, [r3, #8]
      break;
 8002414:	e052      	b.n	80024bc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6818      	ldr	r0, [r3, #0]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	6899      	ldr	r1, [r3, #8]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	f000 fa91 	bl	800294c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2180      	movs	r1, #128	; 0x80
 8002436:	01c9      	lsls	r1, r1, #7
 8002438:	430a      	orrs	r2, r1
 800243a:	609a      	str	r2, [r3, #8]
      break;
 800243c:	e03e      	b.n	80024bc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6818      	ldr	r0, [r3, #0]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	6859      	ldr	r1, [r3, #4]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	001a      	movs	r2, r3
 800244c:	f000 f93c 	bl	80026c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2150      	movs	r1, #80	; 0x50
 8002456:	0018      	movs	r0, r3
 8002458:	f000 fa5e 	bl	8002918 <TIM_ITRx_SetConfig>
      break;
 800245c:	e02e      	b.n	80024bc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6818      	ldr	r0, [r3, #0]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	6859      	ldr	r1, [r3, #4]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	001a      	movs	r2, r3
 800246c:	f000 f99c 	bl	80027a8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2160      	movs	r1, #96	; 0x60
 8002476:	0018      	movs	r0, r3
 8002478:	f000 fa4e 	bl	8002918 <TIM_ITRx_SetConfig>
      break;
 800247c:	e01e      	b.n	80024bc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6818      	ldr	r0, [r3, #0]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	6859      	ldr	r1, [r3, #4]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	001a      	movs	r2, r3
 800248c:	f000 f91c 	bl	80026c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2140      	movs	r1, #64	; 0x40
 8002496:	0018      	movs	r0, r3
 8002498:	f000 fa3e 	bl	8002918 <TIM_ITRx_SetConfig>
      break;
 800249c:	e00e      	b.n	80024bc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	0019      	movs	r1, r3
 80024a8:	0010      	movs	r0, r2
 80024aa:	f000 fa35 	bl	8002918 <TIM_ITRx_SetConfig>
      break;
 80024ae:	e005      	b.n	80024bc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80024b0:	230f      	movs	r3, #15
 80024b2:	18fb      	adds	r3, r7, r3
 80024b4:	2201      	movs	r2, #1
 80024b6:	701a      	strb	r2, [r3, #0]
      break;
 80024b8:	e000      	b.n	80024bc <HAL_TIM_ConfigClockSource+0x184>
      break;
 80024ba:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	223d      	movs	r2, #61	; 0x3d
 80024c0:	2101      	movs	r1, #1
 80024c2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	223c      	movs	r2, #60	; 0x3c
 80024c8:	2100      	movs	r1, #0
 80024ca:	5499      	strb	r1, [r3, r2]

  return status;
 80024cc:	230f      	movs	r3, #15
 80024ce:	18fb      	adds	r3, r7, r3
 80024d0:	781b      	ldrb	r3, [r3, #0]
}
 80024d2:	0018      	movs	r0, r3
 80024d4:	46bd      	mov	sp, r7
 80024d6:	b004      	add	sp, #16
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	46c0      	nop			; (mov r8, r8)
 80024dc:	ffff00ff 	.word	0xffff00ff

080024e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024e8:	46c0      	nop			; (mov r8, r8)
 80024ea:	46bd      	mov	sp, r7
 80024ec:	b002      	add	sp, #8
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024f8:	46c0      	nop			; (mov r8, r8)
 80024fa:	46bd      	mov	sp, r7
 80024fc:	b002      	add	sp, #8
 80024fe:	bd80      	pop	{r7, pc}

08002500 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002508:	46c0      	nop			; (mov r8, r8)
 800250a:	46bd      	mov	sp, r7
 800250c:	b002      	add	sp, #8
 800250e:	bd80      	pop	{r7, pc}

08002510 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a34      	ldr	r2, [pc, #208]	; (80025f4 <TIM_Base_SetConfig+0xe4>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d008      	beq.n	800253a <TIM_Base_SetConfig+0x2a>
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	2380      	movs	r3, #128	; 0x80
 800252c:	05db      	lsls	r3, r3, #23
 800252e:	429a      	cmp	r2, r3
 8002530:	d003      	beq.n	800253a <TIM_Base_SetConfig+0x2a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a30      	ldr	r2, [pc, #192]	; (80025f8 <TIM_Base_SetConfig+0xe8>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d108      	bne.n	800254c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2270      	movs	r2, #112	; 0x70
 800253e:	4393      	bics	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	4313      	orrs	r3, r2
 800254a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a29      	ldr	r2, [pc, #164]	; (80025f4 <TIM_Base_SetConfig+0xe4>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d018      	beq.n	8002586 <TIM_Base_SetConfig+0x76>
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	2380      	movs	r3, #128	; 0x80
 8002558:	05db      	lsls	r3, r3, #23
 800255a:	429a      	cmp	r2, r3
 800255c:	d013      	beq.n	8002586 <TIM_Base_SetConfig+0x76>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a25      	ldr	r2, [pc, #148]	; (80025f8 <TIM_Base_SetConfig+0xe8>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d00f      	beq.n	8002586 <TIM_Base_SetConfig+0x76>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a24      	ldr	r2, [pc, #144]	; (80025fc <TIM_Base_SetConfig+0xec>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d00b      	beq.n	8002586 <TIM_Base_SetConfig+0x76>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a23      	ldr	r2, [pc, #140]	; (8002600 <TIM_Base_SetConfig+0xf0>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d007      	beq.n	8002586 <TIM_Base_SetConfig+0x76>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a22      	ldr	r2, [pc, #136]	; (8002604 <TIM_Base_SetConfig+0xf4>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d003      	beq.n	8002586 <TIM_Base_SetConfig+0x76>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a21      	ldr	r2, [pc, #132]	; (8002608 <TIM_Base_SetConfig+0xf8>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d108      	bne.n	8002598 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	4a20      	ldr	r2, [pc, #128]	; (800260c <TIM_Base_SetConfig+0xfc>)
 800258a:	4013      	ands	r3, r2
 800258c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	4313      	orrs	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2280      	movs	r2, #128	; 0x80
 800259c:	4393      	bics	r3, r2
 800259e:	001a      	movs	r2, r3
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a0c      	ldr	r2, [pc, #48]	; (80025f4 <TIM_Base_SetConfig+0xe4>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d00b      	beq.n	80025de <TIM_Base_SetConfig+0xce>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a0d      	ldr	r2, [pc, #52]	; (8002600 <TIM_Base_SetConfig+0xf0>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d007      	beq.n	80025de <TIM_Base_SetConfig+0xce>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a0c      	ldr	r2, [pc, #48]	; (8002604 <TIM_Base_SetConfig+0xf4>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d003      	beq.n	80025de <TIM_Base_SetConfig+0xce>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a0b      	ldr	r2, [pc, #44]	; (8002608 <TIM_Base_SetConfig+0xf8>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d103      	bne.n	80025e6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	691a      	ldr	r2, [r3, #16]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	615a      	str	r2, [r3, #20]
}
 80025ec:	46c0      	nop			; (mov r8, r8)
 80025ee:	46bd      	mov	sp, r7
 80025f0:	b004      	add	sp, #16
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40012c00 	.word	0x40012c00
 80025f8:	40000400 	.word	0x40000400
 80025fc:	40002000 	.word	0x40002000
 8002600:	40014000 	.word	0x40014000
 8002604:	40014400 	.word	0x40014400
 8002608:	40014800 	.word	0x40014800
 800260c:	fffffcff 	.word	0xfffffcff

08002610 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
 800261c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	2201      	movs	r2, #1
 8002624:	4393      	bics	r3, r2
 8002626:	001a      	movs	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4a20      	ldr	r2, [pc, #128]	; (80026bc <TIM_TI1_SetConfig+0xac>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d00c      	beq.n	800265a <TIM_TI1_SetConfig+0x4a>
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	2380      	movs	r3, #128	; 0x80
 8002644:	05db      	lsls	r3, r3, #23
 8002646:	429a      	cmp	r2, r3
 8002648:	d007      	beq.n	800265a <TIM_TI1_SetConfig+0x4a>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	4a1c      	ldr	r2, [pc, #112]	; (80026c0 <TIM_TI1_SetConfig+0xb0>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d003      	beq.n	800265a <TIM_TI1_SetConfig+0x4a>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	4a1b      	ldr	r2, [pc, #108]	; (80026c4 <TIM_TI1_SetConfig+0xb4>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d101      	bne.n	800265e <TIM_TI1_SetConfig+0x4e>
 800265a:	2301      	movs	r3, #1
 800265c:	e000      	b.n	8002660 <TIM_TI1_SetConfig+0x50>
 800265e:	2300      	movs	r3, #0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d008      	beq.n	8002676 <TIM_TI1_SetConfig+0x66>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	2203      	movs	r2, #3
 8002668:	4393      	bics	r3, r2
 800266a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4313      	orrs	r3, r2
 8002672:	617b      	str	r3, [r7, #20]
 8002674:	e003      	b.n	800267e <TIM_TI1_SetConfig+0x6e>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	2201      	movs	r2, #1
 800267a:	4313      	orrs	r3, r2
 800267c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	22f0      	movs	r2, #240	; 0xf0
 8002682:	4393      	bics	r3, r2
 8002684:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	011b      	lsls	r3, r3, #4
 800268a:	22ff      	movs	r2, #255	; 0xff
 800268c:	4013      	ands	r3, r2
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	4313      	orrs	r3, r2
 8002692:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	220a      	movs	r2, #10
 8002698:	4393      	bics	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	220a      	movs	r2, #10
 80026a0:	4013      	ands	r3, r2
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	621a      	str	r2, [r3, #32]
}
 80026b4:	46c0      	nop			; (mov r8, r8)
 80026b6:	46bd      	mov	sp, r7
 80026b8:	b006      	add	sp, #24
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40012c00 	.word	0x40012c00
 80026c0:	40000400 	.word	0x40000400
 80026c4:	40014000 	.word	0x40014000

080026c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	2201      	movs	r2, #1
 80026e0:	4393      	bics	r3, r2
 80026e2:	001a      	movs	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	22f0      	movs	r2, #240	; 0xf0
 80026f2:	4393      	bics	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	011b      	lsls	r3, r3, #4
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	220a      	movs	r2, #10
 8002704:	4393      	bics	r3, r2
 8002706:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002708:	697a      	ldr	r2, [r7, #20]
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	4313      	orrs	r3, r2
 800270e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	621a      	str	r2, [r3, #32]
}
 800271c:	46c0      	nop			; (mov r8, r8)
 800271e:	46bd      	mov	sp, r7
 8002720:	b006      	add	sp, #24
 8002722:	bd80      	pop	{r7, pc}

08002724 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
 8002730:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	2210      	movs	r2, #16
 8002738:	4393      	bics	r3, r2
 800273a:	001a      	movs	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	4a14      	ldr	r2, [pc, #80]	; (80027a0 <TIM_TI2_SetConfig+0x7c>)
 8002750:	4013      	ands	r3, r2
 8002752:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	021b      	lsls	r3, r3, #8
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	4313      	orrs	r3, r2
 800275c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	4a10      	ldr	r2, [pc, #64]	; (80027a4 <TIM_TI2_SetConfig+0x80>)
 8002762:	4013      	ands	r3, r2
 8002764:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	031b      	lsls	r3, r3, #12
 800276a:	041b      	lsls	r3, r3, #16
 800276c:	0c1b      	lsrs	r3, r3, #16
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	4313      	orrs	r3, r2
 8002772:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	22a0      	movs	r2, #160	; 0xa0
 8002778:	4393      	bics	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	011b      	lsls	r3, r3, #4
 8002780:	22a0      	movs	r2, #160	; 0xa0
 8002782:	4013      	ands	r3, r2
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	4313      	orrs	r3, r2
 8002788:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	621a      	str	r2, [r3, #32]
}
 8002796:	46c0      	nop			; (mov r8, r8)
 8002798:	46bd      	mov	sp, r7
 800279a:	b006      	add	sp, #24
 800279c:	bd80      	pop	{r7, pc}
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	fffffcff 	.word	0xfffffcff
 80027a4:	ffff0fff 	.word	0xffff0fff

080027a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	2210      	movs	r2, #16
 80027ba:	4393      	bics	r3, r2
 80027bc:	001a      	movs	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6a1b      	ldr	r3, [r3, #32]
 80027cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	4a0d      	ldr	r2, [pc, #52]	; (8002808 <TIM_TI2_ConfigInputStage+0x60>)
 80027d2:	4013      	ands	r3, r2
 80027d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	031b      	lsls	r3, r3, #12
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	4313      	orrs	r3, r2
 80027de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	22a0      	movs	r2, #160	; 0xa0
 80027e4:	4393      	bics	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	011b      	lsls	r3, r3, #4
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	621a      	str	r2, [r3, #32]
}
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	46bd      	mov	sp, r7
 8002802:	b006      	add	sp, #24
 8002804:	bd80      	pop	{r7, pc}
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	ffff0fff 	.word	0xffff0fff

0800280c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
 8002818:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	4a19      	ldr	r2, [pc, #100]	; (8002884 <TIM_TI3_SetConfig+0x78>)
 8002820:	401a      	ands	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	2203      	movs	r2, #3
 8002836:	4393      	bics	r3, r2
 8002838:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4313      	orrs	r3, r2
 8002840:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	22f0      	movs	r2, #240	; 0xf0
 8002846:	4393      	bics	r3, r2
 8002848:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	011b      	lsls	r3, r3, #4
 800284e:	22ff      	movs	r2, #255	; 0xff
 8002850:	4013      	ands	r3, r2
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	4313      	orrs	r3, r2
 8002856:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	4a0b      	ldr	r2, [pc, #44]	; (8002888 <TIM_TI3_SetConfig+0x7c>)
 800285c:	4013      	ands	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	021a      	lsls	r2, r3, #8
 8002864:	23a0      	movs	r3, #160	; 0xa0
 8002866:	011b      	lsls	r3, r3, #4
 8002868:	4013      	ands	r3, r2
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	4313      	orrs	r3, r2
 800286e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	621a      	str	r2, [r3, #32]
}
 800287c:	46c0      	nop			; (mov r8, r8)
 800287e:	46bd      	mov	sp, r7
 8002880:	b006      	add	sp, #24
 8002882:	bd80      	pop	{r7, pc}
 8002884:	fffffeff 	.word	0xfffffeff
 8002888:	fffff5ff 	.word	0xfffff5ff

0800288c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
 8002898:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	4a1a      	ldr	r2, [pc, #104]	; (8002908 <TIM_TI4_SetConfig+0x7c>)
 80028a0:	401a      	ands	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	4a15      	ldr	r2, [pc, #84]	; (800290c <TIM_TI4_SetConfig+0x80>)
 80028b6:	4013      	ands	r3, r2
 80028b8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	021b      	lsls	r3, r3, #8
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	4a12      	ldr	r2, [pc, #72]	; (8002910 <TIM_TI4_SetConfig+0x84>)
 80028c8:	4013      	ands	r3, r2
 80028ca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	031b      	lsls	r3, r3, #12
 80028d0:	041b      	lsls	r3, r3, #16
 80028d2:	0c1b      	lsrs	r3, r3, #16
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	4a0d      	ldr	r2, [pc, #52]	; (8002914 <TIM_TI4_SetConfig+0x88>)
 80028de:	4013      	ands	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	031a      	lsls	r2, r3, #12
 80028e6:	23a0      	movs	r3, #160	; 0xa0
 80028e8:	021b      	lsls	r3, r3, #8
 80028ea:	4013      	ands	r3, r2
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	621a      	str	r2, [r3, #32]
}
 80028fe:	46c0      	nop			; (mov r8, r8)
 8002900:	46bd      	mov	sp, r7
 8002902:	b006      	add	sp, #24
 8002904:	bd80      	pop	{r7, pc}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	ffffefff 	.word	0xffffefff
 800290c:	fffffcff 	.word	0xfffffcff
 8002910:	ffff0fff 	.word	0xffff0fff
 8002914:	ffff5fff 	.word	0xffff5fff

08002918 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2270      	movs	r2, #112	; 0x70
 800292c:	4393      	bics	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	4313      	orrs	r3, r2
 8002936:	2207      	movs	r2, #7
 8002938:	4313      	orrs	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	609a      	str	r2, [r3, #8]
}
 8002942:	46c0      	nop			; (mov r8, r8)
 8002944:	46bd      	mov	sp, r7
 8002946:	b004      	add	sp, #16
 8002948:	bd80      	pop	{r7, pc}
	...

0800294c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
 8002958:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	4a09      	ldr	r2, [pc, #36]	; (8002988 <TIM_ETR_SetConfig+0x3c>)
 8002964:	4013      	ands	r3, r2
 8002966:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	021a      	lsls	r2, r3, #8
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	431a      	orrs	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	4313      	orrs	r3, r2
 8002974:	697a      	ldr	r2, [r7, #20]
 8002976:	4313      	orrs	r3, r2
 8002978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	609a      	str	r2, [r3, #8]
}
 8002980:	46c0      	nop			; (mov r8, r8)
 8002982:	46bd      	mov	sp, r7
 8002984:	b006      	add	sp, #24
 8002986:	bd80      	pop	{r7, pc}
 8002988:	ffff00ff 	.word	0xffff00ff

0800298c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	221f      	movs	r2, #31
 800299c:	4013      	ands	r3, r2
 800299e:	2201      	movs	r2, #1
 80029a0:	409a      	lsls	r2, r3
 80029a2:	0013      	movs	r3, r2
 80029a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	43d2      	mvns	r2, r2
 80029ae:	401a      	ands	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6a1a      	ldr	r2, [r3, #32]
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	211f      	movs	r1, #31
 80029bc:	400b      	ands	r3, r1
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	4099      	lsls	r1, r3
 80029c2:	000b      	movs	r3, r1
 80029c4:	431a      	orrs	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	621a      	str	r2, [r3, #32]
}
 80029ca:	46c0      	nop			; (mov r8, r8)
 80029cc:	46bd      	mov	sp, r7
 80029ce:	b006      	add	sp, #24
 80029d0:	bd80      	pop	{r7, pc}
	...

080029d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	223c      	movs	r2, #60	; 0x3c
 80029e2:	5c9b      	ldrb	r3, [r3, r2]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d101      	bne.n	80029ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029e8:	2302      	movs	r3, #2
 80029ea:	e047      	b.n	8002a7c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	223c      	movs	r2, #60	; 0x3c
 80029f0:	2101      	movs	r1, #1
 80029f2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	223d      	movs	r2, #61	; 0x3d
 80029f8:	2102      	movs	r1, #2
 80029fa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2270      	movs	r2, #112	; 0x70
 8002a10:	4393      	bics	r3, r2
 8002a12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a16      	ldr	r2, [pc, #88]	; (8002a84 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d00f      	beq.n	8002a50 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	2380      	movs	r3, #128	; 0x80
 8002a36:	05db      	lsls	r3, r3, #23
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d009      	beq.n	8002a50 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a11      	ldr	r2, [pc, #68]	; (8002a88 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d004      	beq.n	8002a50 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a10      	ldr	r2, [pc, #64]	; (8002a8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d10c      	bne.n	8002a6a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2280      	movs	r2, #128	; 0x80
 8002a54:	4393      	bics	r3, r2
 8002a56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	68ba      	ldr	r2, [r7, #8]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	223d      	movs	r2, #61	; 0x3d
 8002a6e:	2101      	movs	r1, #1
 8002a70:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	223c      	movs	r2, #60	; 0x3c
 8002a76:	2100      	movs	r1, #0
 8002a78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	b004      	add	sp, #16
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40012c00 	.word	0x40012c00
 8002a88:	40000400 	.word	0x40000400
 8002a8c:	40014000 	.word	0x40014000

08002a90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a98:	46c0      	nop			; (mov r8, r8)
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	b002      	add	sp, #8
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002aa8:	46c0      	nop			; (mov r8, r8)
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	b002      	add	sp, #8
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e044      	b.n	8002b4c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d107      	bne.n	8002ada <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2274      	movs	r2, #116	; 0x74
 8002ace:	2100      	movs	r1, #0
 8002ad0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f7fd fea7 	bl	8000828 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2224      	movs	r2, #36	; 0x24
 8002ade:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2101      	movs	r1, #1
 8002aec:	438a      	bics	r2, r1
 8002aee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	0018      	movs	r0, r3
 8002af4:	f000 f8da 	bl	8002cac <UART_SetConfig>
 8002af8:	0003      	movs	r3, r0
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d101      	bne.n	8002b02 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e024      	b.n	8002b4c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f000 fa55 	bl	8002fbc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	490d      	ldr	r1, [pc, #52]	; (8002b54 <HAL_UART_Init+0xa4>)
 8002b1e:	400a      	ands	r2, r1
 8002b20:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	212a      	movs	r1, #42	; 0x2a
 8002b2e:	438a      	bics	r2, r1
 8002b30:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	0018      	movs	r0, r3
 8002b46:	f000 faed 	bl	8003124 <UART_CheckIdleState>
 8002b4a:	0003      	movs	r3, r0
}
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	b002      	add	sp, #8
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	ffffb7ff 	.word	0xffffb7ff

08002b58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08a      	sub	sp, #40	; 0x28
 8002b5c:	af02      	add	r7, sp, #8
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	603b      	str	r3, [r7, #0]
 8002b64:	1dbb      	adds	r3, r7, #6
 8002b66:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b6c:	2b20      	cmp	r3, #32
 8002b6e:	d000      	beq.n	8002b72 <HAL_UART_Transmit+0x1a>
 8002b70:	e096      	b.n	8002ca0 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <HAL_UART_Transmit+0x28>
 8002b78:	1dbb      	adds	r3, r7, #6
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d101      	bne.n	8002b84 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e08e      	b.n	8002ca2 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	2380      	movs	r3, #128	; 0x80
 8002b8a:	015b      	lsls	r3, r3, #5
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d109      	bne.n	8002ba4 <HAL_UART_Transmit+0x4c>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d105      	bne.n	8002ba4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	d001      	beq.n	8002ba4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e07e      	b.n	8002ca2 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2274      	movs	r2, #116	; 0x74
 8002ba8:	5c9b      	ldrb	r3, [r3, r2]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d101      	bne.n	8002bb2 <HAL_UART_Transmit+0x5a>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e077      	b.n	8002ca2 <HAL_UART_Transmit+0x14a>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2274      	movs	r2, #116	; 0x74
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2280      	movs	r2, #128	; 0x80
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2221      	movs	r2, #33	; 0x21
 8002bc6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bc8:	f7fd ff5e 	bl	8000a88 <HAL_GetTick>
 8002bcc:	0003      	movs	r3, r0
 8002bce:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	1dba      	adds	r2, r7, #6
 8002bd4:	2150      	movs	r1, #80	; 0x50
 8002bd6:	8812      	ldrh	r2, [r2, #0]
 8002bd8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	1dba      	adds	r2, r7, #6
 8002bde:	2152      	movs	r1, #82	; 0x52
 8002be0:	8812      	ldrh	r2, [r2, #0]
 8002be2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	2380      	movs	r3, #128	; 0x80
 8002bea:	015b      	lsls	r3, r3, #5
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d108      	bne.n	8002c02 <HAL_UART_Transmit+0xaa>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d104      	bne.n	8002c02 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	61bb      	str	r3, [r7, #24]
 8002c00:	e003      	b.n	8002c0a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2274      	movs	r2, #116	; 0x74
 8002c0e:	2100      	movs	r1, #0
 8002c10:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002c12:	e02d      	b.n	8002c70 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	0013      	movs	r3, r2
 8002c1e:	2200      	movs	r2, #0
 8002c20:	2180      	movs	r1, #128	; 0x80
 8002c22:	f000 fac7 	bl	80031b4 <UART_WaitOnFlagUntilTimeout>
 8002c26:	1e03      	subs	r3, r0, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e039      	b.n	8002ca2 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10b      	bne.n	8002c4c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	881a      	ldrh	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	05d2      	lsls	r2, r2, #23
 8002c3e:	0dd2      	lsrs	r2, r2, #23
 8002c40:	b292      	uxth	r2, r2
 8002c42:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	3302      	adds	r3, #2
 8002c48:	61bb      	str	r3, [r7, #24]
 8002c4a:	e008      	b.n	8002c5e <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	781a      	ldrb	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	b292      	uxth	r2, r2
 8002c56:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2252      	movs	r2, #82	; 0x52
 8002c62:	5a9b      	ldrh	r3, [r3, r2]
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	3b01      	subs	r3, #1
 8002c68:	b299      	uxth	r1, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2252      	movs	r2, #82	; 0x52
 8002c6e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2252      	movs	r2, #82	; 0x52
 8002c74:	5a9b      	ldrh	r3, [r3, r2]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1cb      	bne.n	8002c14 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	0013      	movs	r3, r2
 8002c86:	2200      	movs	r2, #0
 8002c88:	2140      	movs	r1, #64	; 0x40
 8002c8a:	f000 fa93 	bl	80031b4 <UART_WaitOnFlagUntilTimeout>
 8002c8e:	1e03      	subs	r3, r0, #0
 8002c90:	d001      	beq.n	8002c96 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e005      	b.n	8002ca2 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2220      	movs	r2, #32
 8002c9a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	e000      	b.n	8002ca2 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002ca0:	2302      	movs	r3, #2
  }
}
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	b008      	add	sp, #32
 8002ca8:	bd80      	pop	{r7, pc}
	...

08002cac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cb4:	231e      	movs	r3, #30
 8002cb6:	18fb      	adds	r3, r7, r3
 8002cb8:	2200      	movs	r2, #0
 8002cba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4aaf      	ldr	r2, [pc, #700]	; (8002f98 <UART_SetConfig+0x2ec>)
 8002cdc:	4013      	ands	r3, r2
 8002cde:	0019      	movs	r1, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	4aaa      	ldr	r2, [pc, #680]	; (8002f9c <UART_SetConfig+0x2f0>)
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	0019      	movs	r1, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	4aa1      	ldr	r2, [pc, #644]	; (8002fa0 <UART_SetConfig+0x2f4>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	0019      	movs	r1, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a9d      	ldr	r2, [pc, #628]	; (8002fa4 <UART_SetConfig+0x2f8>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d127      	bne.n	8002d82 <UART_SetConfig+0xd6>
 8002d32:	4b9d      	ldr	r3, [pc, #628]	; (8002fa8 <UART_SetConfig+0x2fc>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	2203      	movs	r2, #3
 8002d38:	4013      	ands	r3, r2
 8002d3a:	2b03      	cmp	r3, #3
 8002d3c:	d00d      	beq.n	8002d5a <UART_SetConfig+0xae>
 8002d3e:	d81b      	bhi.n	8002d78 <UART_SetConfig+0xcc>
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d014      	beq.n	8002d6e <UART_SetConfig+0xc2>
 8002d44:	d818      	bhi.n	8002d78 <UART_SetConfig+0xcc>
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d002      	beq.n	8002d50 <UART_SetConfig+0xa4>
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d00a      	beq.n	8002d64 <UART_SetConfig+0xb8>
 8002d4e:	e013      	b.n	8002d78 <UART_SetConfig+0xcc>
 8002d50:	231f      	movs	r3, #31
 8002d52:	18fb      	adds	r3, r7, r3
 8002d54:	2200      	movs	r2, #0
 8002d56:	701a      	strb	r2, [r3, #0]
 8002d58:	e065      	b.n	8002e26 <UART_SetConfig+0x17a>
 8002d5a:	231f      	movs	r3, #31
 8002d5c:	18fb      	adds	r3, r7, r3
 8002d5e:	2202      	movs	r2, #2
 8002d60:	701a      	strb	r2, [r3, #0]
 8002d62:	e060      	b.n	8002e26 <UART_SetConfig+0x17a>
 8002d64:	231f      	movs	r3, #31
 8002d66:	18fb      	adds	r3, r7, r3
 8002d68:	2204      	movs	r2, #4
 8002d6a:	701a      	strb	r2, [r3, #0]
 8002d6c:	e05b      	b.n	8002e26 <UART_SetConfig+0x17a>
 8002d6e:	231f      	movs	r3, #31
 8002d70:	18fb      	adds	r3, r7, r3
 8002d72:	2208      	movs	r2, #8
 8002d74:	701a      	strb	r2, [r3, #0]
 8002d76:	e056      	b.n	8002e26 <UART_SetConfig+0x17a>
 8002d78:	231f      	movs	r3, #31
 8002d7a:	18fb      	adds	r3, r7, r3
 8002d7c:	2210      	movs	r2, #16
 8002d7e:	701a      	strb	r2, [r3, #0]
 8002d80:	e051      	b.n	8002e26 <UART_SetConfig+0x17a>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a89      	ldr	r2, [pc, #548]	; (8002fac <UART_SetConfig+0x300>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d134      	bne.n	8002df6 <UART_SetConfig+0x14a>
 8002d8c:	4b86      	ldr	r3, [pc, #536]	; (8002fa8 <UART_SetConfig+0x2fc>)
 8002d8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d90:	23c0      	movs	r3, #192	; 0xc0
 8002d92:	029b      	lsls	r3, r3, #10
 8002d94:	4013      	ands	r3, r2
 8002d96:	22c0      	movs	r2, #192	; 0xc0
 8002d98:	0292      	lsls	r2, r2, #10
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d017      	beq.n	8002dce <UART_SetConfig+0x122>
 8002d9e:	22c0      	movs	r2, #192	; 0xc0
 8002da0:	0292      	lsls	r2, r2, #10
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d822      	bhi.n	8002dec <UART_SetConfig+0x140>
 8002da6:	2280      	movs	r2, #128	; 0x80
 8002da8:	0292      	lsls	r2, r2, #10
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d019      	beq.n	8002de2 <UART_SetConfig+0x136>
 8002dae:	2280      	movs	r2, #128	; 0x80
 8002db0:	0292      	lsls	r2, r2, #10
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d81a      	bhi.n	8002dec <UART_SetConfig+0x140>
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d004      	beq.n	8002dc4 <UART_SetConfig+0x118>
 8002dba:	2280      	movs	r2, #128	; 0x80
 8002dbc:	0252      	lsls	r2, r2, #9
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d00a      	beq.n	8002dd8 <UART_SetConfig+0x12c>
 8002dc2:	e013      	b.n	8002dec <UART_SetConfig+0x140>
 8002dc4:	231f      	movs	r3, #31
 8002dc6:	18fb      	adds	r3, r7, r3
 8002dc8:	2200      	movs	r2, #0
 8002dca:	701a      	strb	r2, [r3, #0]
 8002dcc:	e02b      	b.n	8002e26 <UART_SetConfig+0x17a>
 8002dce:	231f      	movs	r3, #31
 8002dd0:	18fb      	adds	r3, r7, r3
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	701a      	strb	r2, [r3, #0]
 8002dd6:	e026      	b.n	8002e26 <UART_SetConfig+0x17a>
 8002dd8:	231f      	movs	r3, #31
 8002dda:	18fb      	adds	r3, r7, r3
 8002ddc:	2204      	movs	r2, #4
 8002dde:	701a      	strb	r2, [r3, #0]
 8002de0:	e021      	b.n	8002e26 <UART_SetConfig+0x17a>
 8002de2:	231f      	movs	r3, #31
 8002de4:	18fb      	adds	r3, r7, r3
 8002de6:	2208      	movs	r2, #8
 8002de8:	701a      	strb	r2, [r3, #0]
 8002dea:	e01c      	b.n	8002e26 <UART_SetConfig+0x17a>
 8002dec:	231f      	movs	r3, #31
 8002dee:	18fb      	adds	r3, r7, r3
 8002df0:	2210      	movs	r2, #16
 8002df2:	701a      	strb	r2, [r3, #0]
 8002df4:	e017      	b.n	8002e26 <UART_SetConfig+0x17a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a6d      	ldr	r2, [pc, #436]	; (8002fb0 <UART_SetConfig+0x304>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d104      	bne.n	8002e0a <UART_SetConfig+0x15e>
 8002e00:	231f      	movs	r3, #31
 8002e02:	18fb      	adds	r3, r7, r3
 8002e04:	2200      	movs	r2, #0
 8002e06:	701a      	strb	r2, [r3, #0]
 8002e08:	e00d      	b.n	8002e26 <UART_SetConfig+0x17a>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a69      	ldr	r2, [pc, #420]	; (8002fb4 <UART_SetConfig+0x308>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d104      	bne.n	8002e1e <UART_SetConfig+0x172>
 8002e14:	231f      	movs	r3, #31
 8002e16:	18fb      	adds	r3, r7, r3
 8002e18:	2200      	movs	r2, #0
 8002e1a:	701a      	strb	r2, [r3, #0]
 8002e1c:	e003      	b.n	8002e26 <UART_SetConfig+0x17a>
 8002e1e:	231f      	movs	r3, #31
 8002e20:	18fb      	adds	r3, r7, r3
 8002e22:	2210      	movs	r2, #16
 8002e24:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69da      	ldr	r2, [r3, #28]
 8002e2a:	2380      	movs	r3, #128	; 0x80
 8002e2c:	021b      	lsls	r3, r3, #8
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d15d      	bne.n	8002eee <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8002e32:	231f      	movs	r3, #31
 8002e34:	18fb      	adds	r3, r7, r3
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b08      	cmp	r3, #8
 8002e3a:	d015      	beq.n	8002e68 <UART_SetConfig+0x1bc>
 8002e3c:	dc18      	bgt.n	8002e70 <UART_SetConfig+0x1c4>
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d00d      	beq.n	8002e5e <UART_SetConfig+0x1b2>
 8002e42:	dc15      	bgt.n	8002e70 <UART_SetConfig+0x1c4>
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d002      	beq.n	8002e4e <UART_SetConfig+0x1a2>
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d005      	beq.n	8002e58 <UART_SetConfig+0x1ac>
 8002e4c:	e010      	b.n	8002e70 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e4e:	f7fe fd9d 	bl	800198c <HAL_RCC_GetPCLK1Freq>
 8002e52:	0003      	movs	r3, r0
 8002e54:	61bb      	str	r3, [r7, #24]
        break;
 8002e56:	e012      	b.n	8002e7e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e58:	4b57      	ldr	r3, [pc, #348]	; (8002fb8 <UART_SetConfig+0x30c>)
 8002e5a:	61bb      	str	r3, [r7, #24]
        break;
 8002e5c:	e00f      	b.n	8002e7e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e5e:	f7fe fd0b 	bl	8001878 <HAL_RCC_GetSysClockFreq>
 8002e62:	0003      	movs	r3, r0
 8002e64:	61bb      	str	r3, [r7, #24]
        break;
 8002e66:	e00a      	b.n	8002e7e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e68:	2380      	movs	r3, #128	; 0x80
 8002e6a:	021b      	lsls	r3, r3, #8
 8002e6c:	61bb      	str	r3, [r7, #24]
        break;
 8002e6e:	e006      	b.n	8002e7e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e74:	231e      	movs	r3, #30
 8002e76:	18fb      	adds	r3, r7, r3
 8002e78:	2201      	movs	r2, #1
 8002e7a:	701a      	strb	r2, [r3, #0]
        break;
 8002e7c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d100      	bne.n	8002e86 <UART_SetConfig+0x1da>
 8002e84:	e07b      	b.n	8002f7e <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	005a      	lsls	r2, r3, #1
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	085b      	lsrs	r3, r3, #1
 8002e90:	18d2      	adds	r2, r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	0019      	movs	r1, r3
 8002e98:	0010      	movs	r0, r2
 8002e9a:	f7fd f93f 	bl	800011c <__udivsi3>
 8002e9e:	0003      	movs	r3, r0
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	2b0f      	cmp	r3, #15
 8002ea8:	d91c      	bls.n	8002ee4 <UART_SetConfig+0x238>
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	2380      	movs	r3, #128	; 0x80
 8002eae:	025b      	lsls	r3, r3, #9
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d217      	bcs.n	8002ee4 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	200e      	movs	r0, #14
 8002eba:	183b      	adds	r3, r7, r0
 8002ebc:	210f      	movs	r1, #15
 8002ebe:	438a      	bics	r2, r1
 8002ec0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	085b      	lsrs	r3, r3, #1
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	2207      	movs	r2, #7
 8002eca:	4013      	ands	r3, r2
 8002ecc:	b299      	uxth	r1, r3
 8002ece:	183b      	adds	r3, r7, r0
 8002ed0:	183a      	adds	r2, r7, r0
 8002ed2:	8812      	ldrh	r2, [r2, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	183a      	adds	r2, r7, r0
 8002ede:	8812      	ldrh	r2, [r2, #0]
 8002ee0:	60da      	str	r2, [r3, #12]
 8002ee2:	e04c      	b.n	8002f7e <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8002ee4:	231e      	movs	r3, #30
 8002ee6:	18fb      	adds	r3, r7, r3
 8002ee8:	2201      	movs	r2, #1
 8002eea:	701a      	strb	r2, [r3, #0]
 8002eec:	e047      	b.n	8002f7e <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002eee:	231f      	movs	r3, #31
 8002ef0:	18fb      	adds	r3, r7, r3
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	d015      	beq.n	8002f24 <UART_SetConfig+0x278>
 8002ef8:	dc18      	bgt.n	8002f2c <UART_SetConfig+0x280>
 8002efa:	2b04      	cmp	r3, #4
 8002efc:	d00d      	beq.n	8002f1a <UART_SetConfig+0x26e>
 8002efe:	dc15      	bgt.n	8002f2c <UART_SetConfig+0x280>
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <UART_SetConfig+0x25e>
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d005      	beq.n	8002f14 <UART_SetConfig+0x268>
 8002f08:	e010      	b.n	8002f2c <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f0a:	f7fe fd3f 	bl	800198c <HAL_RCC_GetPCLK1Freq>
 8002f0e:	0003      	movs	r3, r0
 8002f10:	61bb      	str	r3, [r7, #24]
        break;
 8002f12:	e012      	b.n	8002f3a <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f14:	4b28      	ldr	r3, [pc, #160]	; (8002fb8 <UART_SetConfig+0x30c>)
 8002f16:	61bb      	str	r3, [r7, #24]
        break;
 8002f18:	e00f      	b.n	8002f3a <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f1a:	f7fe fcad 	bl	8001878 <HAL_RCC_GetSysClockFreq>
 8002f1e:	0003      	movs	r3, r0
 8002f20:	61bb      	str	r3, [r7, #24]
        break;
 8002f22:	e00a      	b.n	8002f3a <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f24:	2380      	movs	r3, #128	; 0x80
 8002f26:	021b      	lsls	r3, r3, #8
 8002f28:	61bb      	str	r3, [r7, #24]
        break;
 8002f2a:	e006      	b.n	8002f3a <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f30:	231e      	movs	r3, #30
 8002f32:	18fb      	adds	r3, r7, r3
 8002f34:	2201      	movs	r2, #1
 8002f36:	701a      	strb	r2, [r3, #0]
        break;
 8002f38:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d01e      	beq.n	8002f7e <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	085a      	lsrs	r2, r3, #1
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	18d2      	adds	r2, r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	0019      	movs	r1, r3
 8002f50:	0010      	movs	r0, r2
 8002f52:	f7fd f8e3 	bl	800011c <__udivsi3>
 8002f56:	0003      	movs	r3, r0
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	2b0f      	cmp	r3, #15
 8002f60:	d909      	bls.n	8002f76 <UART_SetConfig+0x2ca>
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	2380      	movs	r3, #128	; 0x80
 8002f66:	025b      	lsls	r3, r3, #9
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d204      	bcs.n	8002f76 <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	60da      	str	r2, [r3, #12]
 8002f74:	e003      	b.n	8002f7e <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8002f76:	231e      	movs	r3, #30
 8002f78:	18fb      	adds	r3, r7, r3
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002f8a:	231e      	movs	r3, #30
 8002f8c:	18fb      	adds	r3, r7, r3
 8002f8e:	781b      	ldrb	r3, [r3, #0]
}
 8002f90:	0018      	movs	r0, r3
 8002f92:	46bd      	mov	sp, r7
 8002f94:	b008      	add	sp, #32
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	efff69f3 	.word	0xefff69f3
 8002f9c:	ffffcfff 	.word	0xffffcfff
 8002fa0:	fffff4ff 	.word	0xfffff4ff
 8002fa4:	40013800 	.word	0x40013800
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	40004400 	.word	0x40004400
 8002fb0:	40004800 	.word	0x40004800
 8002fb4:	40004c00 	.word	0x40004c00
 8002fb8:	007a1200 	.word	0x007a1200

08002fbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	2201      	movs	r2, #1
 8002fca:	4013      	ands	r3, r2
 8002fcc:	d00b      	beq.n	8002fe6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	4a4a      	ldr	r2, [pc, #296]	; (8003100 <UART_AdvFeatureConfig+0x144>)
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	0019      	movs	r1, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	2202      	movs	r2, #2
 8002fec:	4013      	ands	r3, r2
 8002fee:	d00b      	beq.n	8003008 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	4a43      	ldr	r2, [pc, #268]	; (8003104 <UART_AdvFeatureConfig+0x148>)
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	0019      	movs	r1, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	430a      	orrs	r2, r1
 8003006:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	2204      	movs	r2, #4
 800300e:	4013      	ands	r3, r2
 8003010:	d00b      	beq.n	800302a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	4a3b      	ldr	r2, [pc, #236]	; (8003108 <UART_AdvFeatureConfig+0x14c>)
 800301a:	4013      	ands	r3, r2
 800301c:	0019      	movs	r1, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	2208      	movs	r2, #8
 8003030:	4013      	ands	r3, r2
 8003032:	d00b      	beq.n	800304c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	4a34      	ldr	r2, [pc, #208]	; (800310c <UART_AdvFeatureConfig+0x150>)
 800303c:	4013      	ands	r3, r2
 800303e:	0019      	movs	r1, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	2210      	movs	r2, #16
 8003052:	4013      	ands	r3, r2
 8003054:	d00b      	beq.n	800306e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	4a2c      	ldr	r2, [pc, #176]	; (8003110 <UART_AdvFeatureConfig+0x154>)
 800305e:	4013      	ands	r3, r2
 8003060:	0019      	movs	r1, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003072:	2220      	movs	r2, #32
 8003074:	4013      	ands	r3, r2
 8003076:	d00b      	beq.n	8003090 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	4a25      	ldr	r2, [pc, #148]	; (8003114 <UART_AdvFeatureConfig+0x158>)
 8003080:	4013      	ands	r3, r2
 8003082:	0019      	movs	r1, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	2240      	movs	r2, #64	; 0x40
 8003096:	4013      	ands	r3, r2
 8003098:	d01d      	beq.n	80030d6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	4a1d      	ldr	r2, [pc, #116]	; (8003118 <UART_AdvFeatureConfig+0x15c>)
 80030a2:	4013      	ands	r3, r2
 80030a4:	0019      	movs	r1, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030b6:	2380      	movs	r3, #128	; 0x80
 80030b8:	035b      	lsls	r3, r3, #13
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d10b      	bne.n	80030d6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	4a15      	ldr	r2, [pc, #84]	; (800311c <UART_AdvFeatureConfig+0x160>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	0019      	movs	r1, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	2280      	movs	r2, #128	; 0x80
 80030dc:	4013      	ands	r3, r2
 80030de:	d00b      	beq.n	80030f8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	4a0e      	ldr	r2, [pc, #56]	; (8003120 <UART_AdvFeatureConfig+0x164>)
 80030e8:	4013      	ands	r3, r2
 80030ea:	0019      	movs	r1, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	605a      	str	r2, [r3, #4]
  }
}
 80030f8:	46c0      	nop			; (mov r8, r8)
 80030fa:	46bd      	mov	sp, r7
 80030fc:	b002      	add	sp, #8
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	fffdffff 	.word	0xfffdffff
 8003104:	fffeffff 	.word	0xfffeffff
 8003108:	fffbffff 	.word	0xfffbffff
 800310c:	ffff7fff 	.word	0xffff7fff
 8003110:	ffffefff 	.word	0xffffefff
 8003114:	ffffdfff 	.word	0xffffdfff
 8003118:	ffefffff 	.word	0xffefffff
 800311c:	ff9fffff 	.word	0xff9fffff
 8003120:	fff7ffff 	.word	0xfff7ffff

08003124 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af02      	add	r7, sp, #8
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2280      	movs	r2, #128	; 0x80
 8003130:	2100      	movs	r1, #0
 8003132:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003134:	f7fd fca8 	bl	8000a88 <HAL_GetTick>
 8003138:	0003      	movs	r3, r0
 800313a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2208      	movs	r2, #8
 8003144:	4013      	ands	r3, r2
 8003146:	2b08      	cmp	r3, #8
 8003148:	d10c      	bne.n	8003164 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2280      	movs	r2, #128	; 0x80
 800314e:	0391      	lsls	r1, r2, #14
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	4a17      	ldr	r2, [pc, #92]	; (80031b0 <UART_CheckIdleState+0x8c>)
 8003154:	9200      	str	r2, [sp, #0]
 8003156:	2200      	movs	r2, #0
 8003158:	f000 f82c 	bl	80031b4 <UART_WaitOnFlagUntilTimeout>
 800315c:	1e03      	subs	r3, r0, #0
 800315e:	d001      	beq.n	8003164 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e021      	b.n	80031a8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2204      	movs	r2, #4
 800316c:	4013      	ands	r3, r2
 800316e:	2b04      	cmp	r3, #4
 8003170:	d10c      	bne.n	800318c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2280      	movs	r2, #128	; 0x80
 8003176:	03d1      	lsls	r1, r2, #15
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	4a0d      	ldr	r2, [pc, #52]	; (80031b0 <UART_CheckIdleState+0x8c>)
 800317c:	9200      	str	r2, [sp, #0]
 800317e:	2200      	movs	r2, #0
 8003180:	f000 f818 	bl	80031b4 <UART_WaitOnFlagUntilTimeout>
 8003184:	1e03      	subs	r3, r0, #0
 8003186:	d001      	beq.n	800318c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e00d      	b.n	80031a8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2220      	movs	r2, #32
 8003190:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2220      	movs	r2, #32
 8003196:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2274      	movs	r2, #116	; 0x74
 80031a2:	2100      	movs	r1, #0
 80031a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	0018      	movs	r0, r3
 80031aa:	46bd      	mov	sp, r7
 80031ac:	b004      	add	sp, #16
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	01ffffff 	.word	0x01ffffff

080031b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b094      	sub	sp, #80	; 0x50
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	603b      	str	r3, [r7, #0]
 80031c0:	1dfb      	adds	r3, r7, #7
 80031c2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031c4:	e0a3      	b.n	800330e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031c8:	3301      	adds	r3, #1
 80031ca:	d100      	bne.n	80031ce <UART_WaitOnFlagUntilTimeout+0x1a>
 80031cc:	e09f      	b.n	800330e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ce:	f7fd fc5b 	bl	8000a88 <HAL_GetTick>
 80031d2:	0002      	movs	r2, r0
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031da:	429a      	cmp	r2, r3
 80031dc:	d302      	bcc.n	80031e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80031de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d13d      	bne.n	8003260 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031e4:	f3ef 8310 	mrs	r3, PRIMASK
 80031e8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80031ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031ec:	647b      	str	r3, [r7, #68]	; 0x44
 80031ee:	2301      	movs	r3, #1
 80031f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f4:	f383 8810 	msr	PRIMASK, r3
}
 80031f8:	46c0      	nop			; (mov r8, r8)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	494c      	ldr	r1, [pc, #304]	; (8003338 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003206:	400a      	ands	r2, r1
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800320c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800320e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003210:	f383 8810 	msr	PRIMASK, r3
}
 8003214:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003216:	f3ef 8310 	mrs	r3, PRIMASK
 800321a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800321c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800321e:	643b      	str	r3, [r7, #64]	; 0x40
 8003220:	2301      	movs	r3, #1
 8003222:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003226:	f383 8810 	msr	PRIMASK, r3
}
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689a      	ldr	r2, [r3, #8]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2101      	movs	r1, #1
 8003238:	438a      	bics	r2, r1
 800323a:	609a      	str	r2, [r3, #8]
 800323c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800323e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003242:	f383 8810 	msr	PRIMASK, r3
}
 8003246:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2220      	movs	r2, #32
 800324c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2220      	movs	r2, #32
 8003252:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2274      	movs	r2, #116	; 0x74
 8003258:	2100      	movs	r1, #0
 800325a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e067      	b.n	8003330 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2204      	movs	r2, #4
 8003268:	4013      	ands	r3, r2
 800326a:	d050      	beq.n	800330e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	69da      	ldr	r2, [r3, #28]
 8003272:	2380      	movs	r3, #128	; 0x80
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	401a      	ands	r2, r3
 8003278:	2380      	movs	r3, #128	; 0x80
 800327a:	011b      	lsls	r3, r3, #4
 800327c:	429a      	cmp	r2, r3
 800327e:	d146      	bne.n	800330e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2280      	movs	r2, #128	; 0x80
 8003286:	0112      	lsls	r2, r2, #4
 8003288:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800328a:	f3ef 8310 	mrs	r3, PRIMASK
 800328e:	613b      	str	r3, [r7, #16]
  return(result);
 8003290:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003292:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003294:	2301      	movs	r3, #1
 8003296:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	f383 8810 	msr	PRIMASK, r3
}
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4923      	ldr	r1, [pc, #140]	; (8003338 <UART_WaitOnFlagUntilTimeout+0x184>)
 80032ac:	400a      	ands	r2, r1
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	f383 8810 	msr	PRIMASK, r3
}
 80032ba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032bc:	f3ef 8310 	mrs	r3, PRIMASK
 80032c0:	61fb      	str	r3, [r7, #28]
  return(result);
 80032c2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80032c6:	2301      	movs	r3, #1
 80032c8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	f383 8810 	msr	PRIMASK, r3
}
 80032d0:	46c0      	nop			; (mov r8, r8)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2101      	movs	r1, #1
 80032de:	438a      	bics	r2, r1
 80032e0:	609a      	str	r2, [r3, #8]
 80032e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	f383 8810 	msr	PRIMASK, r3
}
 80032ec:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2220      	movs	r2, #32
 80032f2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2220      	movs	r2, #32
 80032f8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2280      	movs	r2, #128	; 0x80
 80032fe:	2120      	movs	r1, #32
 8003300:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2274      	movs	r2, #116	; 0x74
 8003306:	2100      	movs	r1, #0
 8003308:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e010      	b.n	8003330 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	69db      	ldr	r3, [r3, #28]
 8003314:	68ba      	ldr	r2, [r7, #8]
 8003316:	4013      	ands	r3, r2
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	425a      	negs	r2, r3
 800331e:	4153      	adcs	r3, r2
 8003320:	b2db      	uxtb	r3, r3
 8003322:	001a      	movs	r2, r3
 8003324:	1dfb      	adds	r3, r7, #7
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	429a      	cmp	r2, r3
 800332a:	d100      	bne.n	800332e <UART_WaitOnFlagUntilTimeout+0x17a>
 800332c:	e74b      	b.n	80031c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	0018      	movs	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	b014      	add	sp, #80	; 0x50
 8003336:	bd80      	pop	{r7, pc}
 8003338:	fffffe5f 	.word	0xfffffe5f

0800333c <__errno>:
 800333c:	4b01      	ldr	r3, [pc, #4]	; (8003344 <__errno+0x8>)
 800333e:	6818      	ldr	r0, [r3, #0]
 8003340:	4770      	bx	lr
 8003342:	46c0      	nop			; (mov r8, r8)
 8003344:	20000070 	.word	0x20000070

08003348 <__libc_init_array>:
 8003348:	b570      	push	{r4, r5, r6, lr}
 800334a:	2600      	movs	r6, #0
 800334c:	4d0c      	ldr	r5, [pc, #48]	; (8003380 <__libc_init_array+0x38>)
 800334e:	4c0d      	ldr	r4, [pc, #52]	; (8003384 <__libc_init_array+0x3c>)
 8003350:	1b64      	subs	r4, r4, r5
 8003352:	10a4      	asrs	r4, r4, #2
 8003354:	42a6      	cmp	r6, r4
 8003356:	d109      	bne.n	800336c <__libc_init_array+0x24>
 8003358:	2600      	movs	r6, #0
 800335a:	f000 fc8b 	bl	8003c74 <_init>
 800335e:	4d0a      	ldr	r5, [pc, #40]	; (8003388 <__libc_init_array+0x40>)
 8003360:	4c0a      	ldr	r4, [pc, #40]	; (800338c <__libc_init_array+0x44>)
 8003362:	1b64      	subs	r4, r4, r5
 8003364:	10a4      	asrs	r4, r4, #2
 8003366:	42a6      	cmp	r6, r4
 8003368:	d105      	bne.n	8003376 <__libc_init_array+0x2e>
 800336a:	bd70      	pop	{r4, r5, r6, pc}
 800336c:	00b3      	lsls	r3, r6, #2
 800336e:	58eb      	ldr	r3, [r5, r3]
 8003370:	4798      	blx	r3
 8003372:	3601      	adds	r6, #1
 8003374:	e7ee      	b.n	8003354 <__libc_init_array+0xc>
 8003376:	00b3      	lsls	r3, r6, #2
 8003378:	58eb      	ldr	r3, [r5, r3]
 800337a:	4798      	blx	r3
 800337c:	3601      	adds	r6, #1
 800337e:	e7f2      	b.n	8003366 <__libc_init_array+0x1e>
 8003380:	08003d40 	.word	0x08003d40
 8003384:	08003d40 	.word	0x08003d40
 8003388:	08003d40 	.word	0x08003d40
 800338c:	08003d44 	.word	0x08003d44

08003390 <memset>:
 8003390:	0003      	movs	r3, r0
 8003392:	1882      	adds	r2, r0, r2
 8003394:	4293      	cmp	r3, r2
 8003396:	d100      	bne.n	800339a <memset+0xa>
 8003398:	4770      	bx	lr
 800339a:	7019      	strb	r1, [r3, #0]
 800339c:	3301      	adds	r3, #1
 800339e:	e7f9      	b.n	8003394 <memset+0x4>

080033a0 <siprintf>:
 80033a0:	b40e      	push	{r1, r2, r3}
 80033a2:	b500      	push	{lr}
 80033a4:	490b      	ldr	r1, [pc, #44]	; (80033d4 <siprintf+0x34>)
 80033a6:	b09c      	sub	sp, #112	; 0x70
 80033a8:	ab1d      	add	r3, sp, #116	; 0x74
 80033aa:	9002      	str	r0, [sp, #8]
 80033ac:	9006      	str	r0, [sp, #24]
 80033ae:	9107      	str	r1, [sp, #28]
 80033b0:	9104      	str	r1, [sp, #16]
 80033b2:	4809      	ldr	r0, [pc, #36]	; (80033d8 <siprintf+0x38>)
 80033b4:	4909      	ldr	r1, [pc, #36]	; (80033dc <siprintf+0x3c>)
 80033b6:	cb04      	ldmia	r3!, {r2}
 80033b8:	9105      	str	r1, [sp, #20]
 80033ba:	6800      	ldr	r0, [r0, #0]
 80033bc:	a902      	add	r1, sp, #8
 80033be:	9301      	str	r3, [sp, #4]
 80033c0:	f000 f870 	bl	80034a4 <_svfiprintf_r>
 80033c4:	2300      	movs	r3, #0
 80033c6:	9a02      	ldr	r2, [sp, #8]
 80033c8:	7013      	strb	r3, [r2, #0]
 80033ca:	b01c      	add	sp, #112	; 0x70
 80033cc:	bc08      	pop	{r3}
 80033ce:	b003      	add	sp, #12
 80033d0:	4718      	bx	r3
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	7fffffff 	.word	0x7fffffff
 80033d8:	20000070 	.word	0x20000070
 80033dc:	ffff0208 	.word	0xffff0208

080033e0 <__ssputs_r>:
 80033e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033e2:	688e      	ldr	r6, [r1, #8]
 80033e4:	b085      	sub	sp, #20
 80033e6:	0007      	movs	r7, r0
 80033e8:	000c      	movs	r4, r1
 80033ea:	9203      	str	r2, [sp, #12]
 80033ec:	9301      	str	r3, [sp, #4]
 80033ee:	429e      	cmp	r6, r3
 80033f0:	d83c      	bhi.n	800346c <__ssputs_r+0x8c>
 80033f2:	2390      	movs	r3, #144	; 0x90
 80033f4:	898a      	ldrh	r2, [r1, #12]
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	421a      	tst	r2, r3
 80033fa:	d034      	beq.n	8003466 <__ssputs_r+0x86>
 80033fc:	6909      	ldr	r1, [r1, #16]
 80033fe:	6823      	ldr	r3, [r4, #0]
 8003400:	6960      	ldr	r0, [r4, #20]
 8003402:	1a5b      	subs	r3, r3, r1
 8003404:	9302      	str	r3, [sp, #8]
 8003406:	2303      	movs	r3, #3
 8003408:	4343      	muls	r3, r0
 800340a:	0fdd      	lsrs	r5, r3, #31
 800340c:	18ed      	adds	r5, r5, r3
 800340e:	9b01      	ldr	r3, [sp, #4]
 8003410:	9802      	ldr	r0, [sp, #8]
 8003412:	3301      	adds	r3, #1
 8003414:	181b      	adds	r3, r3, r0
 8003416:	106d      	asrs	r5, r5, #1
 8003418:	42ab      	cmp	r3, r5
 800341a:	d900      	bls.n	800341e <__ssputs_r+0x3e>
 800341c:	001d      	movs	r5, r3
 800341e:	0553      	lsls	r3, r2, #21
 8003420:	d532      	bpl.n	8003488 <__ssputs_r+0xa8>
 8003422:	0029      	movs	r1, r5
 8003424:	0038      	movs	r0, r7
 8003426:	f000 fb53 	bl	8003ad0 <_malloc_r>
 800342a:	1e06      	subs	r6, r0, #0
 800342c:	d109      	bne.n	8003442 <__ssputs_r+0x62>
 800342e:	230c      	movs	r3, #12
 8003430:	603b      	str	r3, [r7, #0]
 8003432:	2340      	movs	r3, #64	; 0x40
 8003434:	2001      	movs	r0, #1
 8003436:	89a2      	ldrh	r2, [r4, #12]
 8003438:	4240      	negs	r0, r0
 800343a:	4313      	orrs	r3, r2
 800343c:	81a3      	strh	r3, [r4, #12]
 800343e:	b005      	add	sp, #20
 8003440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003442:	9a02      	ldr	r2, [sp, #8]
 8003444:	6921      	ldr	r1, [r4, #16]
 8003446:	f000 faba 	bl	80039be <memcpy>
 800344a:	89a3      	ldrh	r3, [r4, #12]
 800344c:	4a14      	ldr	r2, [pc, #80]	; (80034a0 <__ssputs_r+0xc0>)
 800344e:	401a      	ands	r2, r3
 8003450:	2380      	movs	r3, #128	; 0x80
 8003452:	4313      	orrs	r3, r2
 8003454:	81a3      	strh	r3, [r4, #12]
 8003456:	9b02      	ldr	r3, [sp, #8]
 8003458:	6126      	str	r6, [r4, #16]
 800345a:	18f6      	adds	r6, r6, r3
 800345c:	6026      	str	r6, [r4, #0]
 800345e:	6165      	str	r5, [r4, #20]
 8003460:	9e01      	ldr	r6, [sp, #4]
 8003462:	1aed      	subs	r5, r5, r3
 8003464:	60a5      	str	r5, [r4, #8]
 8003466:	9b01      	ldr	r3, [sp, #4]
 8003468:	429e      	cmp	r6, r3
 800346a:	d900      	bls.n	800346e <__ssputs_r+0x8e>
 800346c:	9e01      	ldr	r6, [sp, #4]
 800346e:	0032      	movs	r2, r6
 8003470:	9903      	ldr	r1, [sp, #12]
 8003472:	6820      	ldr	r0, [r4, #0]
 8003474:	f000 faac 	bl	80039d0 <memmove>
 8003478:	68a3      	ldr	r3, [r4, #8]
 800347a:	2000      	movs	r0, #0
 800347c:	1b9b      	subs	r3, r3, r6
 800347e:	60a3      	str	r3, [r4, #8]
 8003480:	6823      	ldr	r3, [r4, #0]
 8003482:	199e      	adds	r6, r3, r6
 8003484:	6026      	str	r6, [r4, #0]
 8003486:	e7da      	b.n	800343e <__ssputs_r+0x5e>
 8003488:	002a      	movs	r2, r5
 800348a:	0038      	movs	r0, r7
 800348c:	f000 fb96 	bl	8003bbc <_realloc_r>
 8003490:	1e06      	subs	r6, r0, #0
 8003492:	d1e0      	bne.n	8003456 <__ssputs_r+0x76>
 8003494:	0038      	movs	r0, r7
 8003496:	6921      	ldr	r1, [r4, #16]
 8003498:	f000 faae 	bl	80039f8 <_free_r>
 800349c:	e7c7      	b.n	800342e <__ssputs_r+0x4e>
 800349e:	46c0      	nop			; (mov r8, r8)
 80034a0:	fffffb7f 	.word	0xfffffb7f

080034a4 <_svfiprintf_r>:
 80034a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034a6:	b0a1      	sub	sp, #132	; 0x84
 80034a8:	9003      	str	r0, [sp, #12]
 80034aa:	001d      	movs	r5, r3
 80034ac:	898b      	ldrh	r3, [r1, #12]
 80034ae:	000f      	movs	r7, r1
 80034b0:	0016      	movs	r6, r2
 80034b2:	061b      	lsls	r3, r3, #24
 80034b4:	d511      	bpl.n	80034da <_svfiprintf_r+0x36>
 80034b6:	690b      	ldr	r3, [r1, #16]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10e      	bne.n	80034da <_svfiprintf_r+0x36>
 80034bc:	2140      	movs	r1, #64	; 0x40
 80034be:	f000 fb07 	bl	8003ad0 <_malloc_r>
 80034c2:	6038      	str	r0, [r7, #0]
 80034c4:	6138      	str	r0, [r7, #16]
 80034c6:	2800      	cmp	r0, #0
 80034c8:	d105      	bne.n	80034d6 <_svfiprintf_r+0x32>
 80034ca:	230c      	movs	r3, #12
 80034cc:	9a03      	ldr	r2, [sp, #12]
 80034ce:	3801      	subs	r0, #1
 80034d0:	6013      	str	r3, [r2, #0]
 80034d2:	b021      	add	sp, #132	; 0x84
 80034d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034d6:	2340      	movs	r3, #64	; 0x40
 80034d8:	617b      	str	r3, [r7, #20]
 80034da:	2300      	movs	r3, #0
 80034dc:	ac08      	add	r4, sp, #32
 80034de:	6163      	str	r3, [r4, #20]
 80034e0:	3320      	adds	r3, #32
 80034e2:	7663      	strb	r3, [r4, #25]
 80034e4:	3310      	adds	r3, #16
 80034e6:	76a3      	strb	r3, [r4, #26]
 80034e8:	9507      	str	r5, [sp, #28]
 80034ea:	0035      	movs	r5, r6
 80034ec:	782b      	ldrb	r3, [r5, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <_svfiprintf_r+0x52>
 80034f2:	2b25      	cmp	r3, #37	; 0x25
 80034f4:	d147      	bne.n	8003586 <_svfiprintf_r+0xe2>
 80034f6:	1bab      	subs	r3, r5, r6
 80034f8:	9305      	str	r3, [sp, #20]
 80034fa:	42b5      	cmp	r5, r6
 80034fc:	d00c      	beq.n	8003518 <_svfiprintf_r+0x74>
 80034fe:	0032      	movs	r2, r6
 8003500:	0039      	movs	r1, r7
 8003502:	9803      	ldr	r0, [sp, #12]
 8003504:	f7ff ff6c 	bl	80033e0 <__ssputs_r>
 8003508:	1c43      	adds	r3, r0, #1
 800350a:	d100      	bne.n	800350e <_svfiprintf_r+0x6a>
 800350c:	e0ae      	b.n	800366c <_svfiprintf_r+0x1c8>
 800350e:	6962      	ldr	r2, [r4, #20]
 8003510:	9b05      	ldr	r3, [sp, #20]
 8003512:	4694      	mov	ip, r2
 8003514:	4463      	add	r3, ip
 8003516:	6163      	str	r3, [r4, #20]
 8003518:	782b      	ldrb	r3, [r5, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d100      	bne.n	8003520 <_svfiprintf_r+0x7c>
 800351e:	e0a5      	b.n	800366c <_svfiprintf_r+0x1c8>
 8003520:	2201      	movs	r2, #1
 8003522:	2300      	movs	r3, #0
 8003524:	4252      	negs	r2, r2
 8003526:	6062      	str	r2, [r4, #4]
 8003528:	a904      	add	r1, sp, #16
 800352a:	3254      	adds	r2, #84	; 0x54
 800352c:	1852      	adds	r2, r2, r1
 800352e:	1c6e      	adds	r6, r5, #1
 8003530:	6023      	str	r3, [r4, #0]
 8003532:	60e3      	str	r3, [r4, #12]
 8003534:	60a3      	str	r3, [r4, #8]
 8003536:	7013      	strb	r3, [r2, #0]
 8003538:	65a3      	str	r3, [r4, #88]	; 0x58
 800353a:	2205      	movs	r2, #5
 800353c:	7831      	ldrb	r1, [r6, #0]
 800353e:	4854      	ldr	r0, [pc, #336]	; (8003690 <_svfiprintf_r+0x1ec>)
 8003540:	f000 fa32 	bl	80039a8 <memchr>
 8003544:	1c75      	adds	r5, r6, #1
 8003546:	2800      	cmp	r0, #0
 8003548:	d11f      	bne.n	800358a <_svfiprintf_r+0xe6>
 800354a:	6822      	ldr	r2, [r4, #0]
 800354c:	06d3      	lsls	r3, r2, #27
 800354e:	d504      	bpl.n	800355a <_svfiprintf_r+0xb6>
 8003550:	2353      	movs	r3, #83	; 0x53
 8003552:	a904      	add	r1, sp, #16
 8003554:	185b      	adds	r3, r3, r1
 8003556:	2120      	movs	r1, #32
 8003558:	7019      	strb	r1, [r3, #0]
 800355a:	0713      	lsls	r3, r2, #28
 800355c:	d504      	bpl.n	8003568 <_svfiprintf_r+0xc4>
 800355e:	2353      	movs	r3, #83	; 0x53
 8003560:	a904      	add	r1, sp, #16
 8003562:	185b      	adds	r3, r3, r1
 8003564:	212b      	movs	r1, #43	; 0x2b
 8003566:	7019      	strb	r1, [r3, #0]
 8003568:	7833      	ldrb	r3, [r6, #0]
 800356a:	2b2a      	cmp	r3, #42	; 0x2a
 800356c:	d016      	beq.n	800359c <_svfiprintf_r+0xf8>
 800356e:	0035      	movs	r5, r6
 8003570:	2100      	movs	r1, #0
 8003572:	200a      	movs	r0, #10
 8003574:	68e3      	ldr	r3, [r4, #12]
 8003576:	782a      	ldrb	r2, [r5, #0]
 8003578:	1c6e      	adds	r6, r5, #1
 800357a:	3a30      	subs	r2, #48	; 0x30
 800357c:	2a09      	cmp	r2, #9
 800357e:	d94e      	bls.n	800361e <_svfiprintf_r+0x17a>
 8003580:	2900      	cmp	r1, #0
 8003582:	d111      	bne.n	80035a8 <_svfiprintf_r+0x104>
 8003584:	e017      	b.n	80035b6 <_svfiprintf_r+0x112>
 8003586:	3501      	adds	r5, #1
 8003588:	e7b0      	b.n	80034ec <_svfiprintf_r+0x48>
 800358a:	4b41      	ldr	r3, [pc, #260]	; (8003690 <_svfiprintf_r+0x1ec>)
 800358c:	6822      	ldr	r2, [r4, #0]
 800358e:	1ac0      	subs	r0, r0, r3
 8003590:	2301      	movs	r3, #1
 8003592:	4083      	lsls	r3, r0
 8003594:	4313      	orrs	r3, r2
 8003596:	002e      	movs	r6, r5
 8003598:	6023      	str	r3, [r4, #0]
 800359a:	e7ce      	b.n	800353a <_svfiprintf_r+0x96>
 800359c:	9b07      	ldr	r3, [sp, #28]
 800359e:	1d19      	adds	r1, r3, #4
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	9107      	str	r1, [sp, #28]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	db01      	blt.n	80035ac <_svfiprintf_r+0x108>
 80035a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80035aa:	e004      	b.n	80035b6 <_svfiprintf_r+0x112>
 80035ac:	425b      	negs	r3, r3
 80035ae:	60e3      	str	r3, [r4, #12]
 80035b0:	2302      	movs	r3, #2
 80035b2:	4313      	orrs	r3, r2
 80035b4:	6023      	str	r3, [r4, #0]
 80035b6:	782b      	ldrb	r3, [r5, #0]
 80035b8:	2b2e      	cmp	r3, #46	; 0x2e
 80035ba:	d10a      	bne.n	80035d2 <_svfiprintf_r+0x12e>
 80035bc:	786b      	ldrb	r3, [r5, #1]
 80035be:	2b2a      	cmp	r3, #42	; 0x2a
 80035c0:	d135      	bne.n	800362e <_svfiprintf_r+0x18a>
 80035c2:	9b07      	ldr	r3, [sp, #28]
 80035c4:	3502      	adds	r5, #2
 80035c6:	1d1a      	adds	r2, r3, #4
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	9207      	str	r2, [sp, #28]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	db2b      	blt.n	8003628 <_svfiprintf_r+0x184>
 80035d0:	9309      	str	r3, [sp, #36]	; 0x24
 80035d2:	4e30      	ldr	r6, [pc, #192]	; (8003694 <_svfiprintf_r+0x1f0>)
 80035d4:	2203      	movs	r2, #3
 80035d6:	0030      	movs	r0, r6
 80035d8:	7829      	ldrb	r1, [r5, #0]
 80035da:	f000 f9e5 	bl	80039a8 <memchr>
 80035de:	2800      	cmp	r0, #0
 80035e0:	d006      	beq.n	80035f0 <_svfiprintf_r+0x14c>
 80035e2:	2340      	movs	r3, #64	; 0x40
 80035e4:	1b80      	subs	r0, r0, r6
 80035e6:	4083      	lsls	r3, r0
 80035e8:	6822      	ldr	r2, [r4, #0]
 80035ea:	3501      	adds	r5, #1
 80035ec:	4313      	orrs	r3, r2
 80035ee:	6023      	str	r3, [r4, #0]
 80035f0:	7829      	ldrb	r1, [r5, #0]
 80035f2:	2206      	movs	r2, #6
 80035f4:	4828      	ldr	r0, [pc, #160]	; (8003698 <_svfiprintf_r+0x1f4>)
 80035f6:	1c6e      	adds	r6, r5, #1
 80035f8:	7621      	strb	r1, [r4, #24]
 80035fa:	f000 f9d5 	bl	80039a8 <memchr>
 80035fe:	2800      	cmp	r0, #0
 8003600:	d03c      	beq.n	800367c <_svfiprintf_r+0x1d8>
 8003602:	4b26      	ldr	r3, [pc, #152]	; (800369c <_svfiprintf_r+0x1f8>)
 8003604:	2b00      	cmp	r3, #0
 8003606:	d125      	bne.n	8003654 <_svfiprintf_r+0x1b0>
 8003608:	2207      	movs	r2, #7
 800360a:	9b07      	ldr	r3, [sp, #28]
 800360c:	3307      	adds	r3, #7
 800360e:	4393      	bics	r3, r2
 8003610:	3308      	adds	r3, #8
 8003612:	9307      	str	r3, [sp, #28]
 8003614:	6963      	ldr	r3, [r4, #20]
 8003616:	9a04      	ldr	r2, [sp, #16]
 8003618:	189b      	adds	r3, r3, r2
 800361a:	6163      	str	r3, [r4, #20]
 800361c:	e765      	b.n	80034ea <_svfiprintf_r+0x46>
 800361e:	4343      	muls	r3, r0
 8003620:	0035      	movs	r5, r6
 8003622:	2101      	movs	r1, #1
 8003624:	189b      	adds	r3, r3, r2
 8003626:	e7a6      	b.n	8003576 <_svfiprintf_r+0xd2>
 8003628:	2301      	movs	r3, #1
 800362a:	425b      	negs	r3, r3
 800362c:	e7d0      	b.n	80035d0 <_svfiprintf_r+0x12c>
 800362e:	2300      	movs	r3, #0
 8003630:	200a      	movs	r0, #10
 8003632:	001a      	movs	r2, r3
 8003634:	3501      	adds	r5, #1
 8003636:	6063      	str	r3, [r4, #4]
 8003638:	7829      	ldrb	r1, [r5, #0]
 800363a:	1c6e      	adds	r6, r5, #1
 800363c:	3930      	subs	r1, #48	; 0x30
 800363e:	2909      	cmp	r1, #9
 8003640:	d903      	bls.n	800364a <_svfiprintf_r+0x1a6>
 8003642:	2b00      	cmp	r3, #0
 8003644:	d0c5      	beq.n	80035d2 <_svfiprintf_r+0x12e>
 8003646:	9209      	str	r2, [sp, #36]	; 0x24
 8003648:	e7c3      	b.n	80035d2 <_svfiprintf_r+0x12e>
 800364a:	4342      	muls	r2, r0
 800364c:	0035      	movs	r5, r6
 800364e:	2301      	movs	r3, #1
 8003650:	1852      	adds	r2, r2, r1
 8003652:	e7f1      	b.n	8003638 <_svfiprintf_r+0x194>
 8003654:	ab07      	add	r3, sp, #28
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	003a      	movs	r2, r7
 800365a:	0021      	movs	r1, r4
 800365c:	4b10      	ldr	r3, [pc, #64]	; (80036a0 <_svfiprintf_r+0x1fc>)
 800365e:	9803      	ldr	r0, [sp, #12]
 8003660:	e000      	b.n	8003664 <_svfiprintf_r+0x1c0>
 8003662:	bf00      	nop
 8003664:	9004      	str	r0, [sp, #16]
 8003666:	9b04      	ldr	r3, [sp, #16]
 8003668:	3301      	adds	r3, #1
 800366a:	d1d3      	bne.n	8003614 <_svfiprintf_r+0x170>
 800366c:	89bb      	ldrh	r3, [r7, #12]
 800366e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003670:	065b      	lsls	r3, r3, #25
 8003672:	d400      	bmi.n	8003676 <_svfiprintf_r+0x1d2>
 8003674:	e72d      	b.n	80034d2 <_svfiprintf_r+0x2e>
 8003676:	2001      	movs	r0, #1
 8003678:	4240      	negs	r0, r0
 800367a:	e72a      	b.n	80034d2 <_svfiprintf_r+0x2e>
 800367c:	ab07      	add	r3, sp, #28
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	003a      	movs	r2, r7
 8003682:	0021      	movs	r1, r4
 8003684:	4b06      	ldr	r3, [pc, #24]	; (80036a0 <_svfiprintf_r+0x1fc>)
 8003686:	9803      	ldr	r0, [sp, #12]
 8003688:	f000 f87c 	bl	8003784 <_printf_i>
 800368c:	e7ea      	b.n	8003664 <_svfiprintf_r+0x1c0>
 800368e:	46c0      	nop			; (mov r8, r8)
 8003690:	08003d0c 	.word	0x08003d0c
 8003694:	08003d12 	.word	0x08003d12
 8003698:	08003d16 	.word	0x08003d16
 800369c:	00000000 	.word	0x00000000
 80036a0:	080033e1 	.word	0x080033e1

080036a4 <_printf_common>:
 80036a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036a6:	0015      	movs	r5, r2
 80036a8:	9301      	str	r3, [sp, #4]
 80036aa:	688a      	ldr	r2, [r1, #8]
 80036ac:	690b      	ldr	r3, [r1, #16]
 80036ae:	000c      	movs	r4, r1
 80036b0:	9000      	str	r0, [sp, #0]
 80036b2:	4293      	cmp	r3, r2
 80036b4:	da00      	bge.n	80036b8 <_printf_common+0x14>
 80036b6:	0013      	movs	r3, r2
 80036b8:	0022      	movs	r2, r4
 80036ba:	602b      	str	r3, [r5, #0]
 80036bc:	3243      	adds	r2, #67	; 0x43
 80036be:	7812      	ldrb	r2, [r2, #0]
 80036c0:	2a00      	cmp	r2, #0
 80036c2:	d001      	beq.n	80036c8 <_printf_common+0x24>
 80036c4:	3301      	adds	r3, #1
 80036c6:	602b      	str	r3, [r5, #0]
 80036c8:	6823      	ldr	r3, [r4, #0]
 80036ca:	069b      	lsls	r3, r3, #26
 80036cc:	d502      	bpl.n	80036d4 <_printf_common+0x30>
 80036ce:	682b      	ldr	r3, [r5, #0]
 80036d0:	3302      	adds	r3, #2
 80036d2:	602b      	str	r3, [r5, #0]
 80036d4:	6822      	ldr	r2, [r4, #0]
 80036d6:	2306      	movs	r3, #6
 80036d8:	0017      	movs	r7, r2
 80036da:	401f      	ands	r7, r3
 80036dc:	421a      	tst	r2, r3
 80036de:	d027      	beq.n	8003730 <_printf_common+0x8c>
 80036e0:	0023      	movs	r3, r4
 80036e2:	3343      	adds	r3, #67	; 0x43
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	1e5a      	subs	r2, r3, #1
 80036e8:	4193      	sbcs	r3, r2
 80036ea:	6822      	ldr	r2, [r4, #0]
 80036ec:	0692      	lsls	r2, r2, #26
 80036ee:	d430      	bmi.n	8003752 <_printf_common+0xae>
 80036f0:	0022      	movs	r2, r4
 80036f2:	9901      	ldr	r1, [sp, #4]
 80036f4:	9800      	ldr	r0, [sp, #0]
 80036f6:	9e08      	ldr	r6, [sp, #32]
 80036f8:	3243      	adds	r2, #67	; 0x43
 80036fa:	47b0      	blx	r6
 80036fc:	1c43      	adds	r3, r0, #1
 80036fe:	d025      	beq.n	800374c <_printf_common+0xa8>
 8003700:	2306      	movs	r3, #6
 8003702:	6820      	ldr	r0, [r4, #0]
 8003704:	682a      	ldr	r2, [r5, #0]
 8003706:	68e1      	ldr	r1, [r4, #12]
 8003708:	2500      	movs	r5, #0
 800370a:	4003      	ands	r3, r0
 800370c:	2b04      	cmp	r3, #4
 800370e:	d103      	bne.n	8003718 <_printf_common+0x74>
 8003710:	1a8d      	subs	r5, r1, r2
 8003712:	43eb      	mvns	r3, r5
 8003714:	17db      	asrs	r3, r3, #31
 8003716:	401d      	ands	r5, r3
 8003718:	68a3      	ldr	r3, [r4, #8]
 800371a:	6922      	ldr	r2, [r4, #16]
 800371c:	4293      	cmp	r3, r2
 800371e:	dd01      	ble.n	8003724 <_printf_common+0x80>
 8003720:	1a9b      	subs	r3, r3, r2
 8003722:	18ed      	adds	r5, r5, r3
 8003724:	2700      	movs	r7, #0
 8003726:	42bd      	cmp	r5, r7
 8003728:	d120      	bne.n	800376c <_printf_common+0xc8>
 800372a:	2000      	movs	r0, #0
 800372c:	e010      	b.n	8003750 <_printf_common+0xac>
 800372e:	3701      	adds	r7, #1
 8003730:	68e3      	ldr	r3, [r4, #12]
 8003732:	682a      	ldr	r2, [r5, #0]
 8003734:	1a9b      	subs	r3, r3, r2
 8003736:	42bb      	cmp	r3, r7
 8003738:	ddd2      	ble.n	80036e0 <_printf_common+0x3c>
 800373a:	0022      	movs	r2, r4
 800373c:	2301      	movs	r3, #1
 800373e:	9901      	ldr	r1, [sp, #4]
 8003740:	9800      	ldr	r0, [sp, #0]
 8003742:	9e08      	ldr	r6, [sp, #32]
 8003744:	3219      	adds	r2, #25
 8003746:	47b0      	blx	r6
 8003748:	1c43      	adds	r3, r0, #1
 800374a:	d1f0      	bne.n	800372e <_printf_common+0x8a>
 800374c:	2001      	movs	r0, #1
 800374e:	4240      	negs	r0, r0
 8003750:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003752:	2030      	movs	r0, #48	; 0x30
 8003754:	18e1      	adds	r1, r4, r3
 8003756:	3143      	adds	r1, #67	; 0x43
 8003758:	7008      	strb	r0, [r1, #0]
 800375a:	0021      	movs	r1, r4
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	3145      	adds	r1, #69	; 0x45
 8003760:	7809      	ldrb	r1, [r1, #0]
 8003762:	18a2      	adds	r2, r4, r2
 8003764:	3243      	adds	r2, #67	; 0x43
 8003766:	3302      	adds	r3, #2
 8003768:	7011      	strb	r1, [r2, #0]
 800376a:	e7c1      	b.n	80036f0 <_printf_common+0x4c>
 800376c:	0022      	movs	r2, r4
 800376e:	2301      	movs	r3, #1
 8003770:	9901      	ldr	r1, [sp, #4]
 8003772:	9800      	ldr	r0, [sp, #0]
 8003774:	9e08      	ldr	r6, [sp, #32]
 8003776:	321a      	adds	r2, #26
 8003778:	47b0      	blx	r6
 800377a:	1c43      	adds	r3, r0, #1
 800377c:	d0e6      	beq.n	800374c <_printf_common+0xa8>
 800377e:	3701      	adds	r7, #1
 8003780:	e7d1      	b.n	8003726 <_printf_common+0x82>
	...

08003784 <_printf_i>:
 8003784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003786:	b08b      	sub	sp, #44	; 0x2c
 8003788:	9206      	str	r2, [sp, #24]
 800378a:	000a      	movs	r2, r1
 800378c:	3243      	adds	r2, #67	; 0x43
 800378e:	9307      	str	r3, [sp, #28]
 8003790:	9005      	str	r0, [sp, #20]
 8003792:	9204      	str	r2, [sp, #16]
 8003794:	7e0a      	ldrb	r2, [r1, #24]
 8003796:	000c      	movs	r4, r1
 8003798:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800379a:	2a78      	cmp	r2, #120	; 0x78
 800379c:	d807      	bhi.n	80037ae <_printf_i+0x2a>
 800379e:	2a62      	cmp	r2, #98	; 0x62
 80037a0:	d809      	bhi.n	80037b6 <_printf_i+0x32>
 80037a2:	2a00      	cmp	r2, #0
 80037a4:	d100      	bne.n	80037a8 <_printf_i+0x24>
 80037a6:	e0c1      	b.n	800392c <_printf_i+0x1a8>
 80037a8:	2a58      	cmp	r2, #88	; 0x58
 80037aa:	d100      	bne.n	80037ae <_printf_i+0x2a>
 80037ac:	e08c      	b.n	80038c8 <_printf_i+0x144>
 80037ae:	0026      	movs	r6, r4
 80037b0:	3642      	adds	r6, #66	; 0x42
 80037b2:	7032      	strb	r2, [r6, #0]
 80037b4:	e022      	b.n	80037fc <_printf_i+0x78>
 80037b6:	0010      	movs	r0, r2
 80037b8:	3863      	subs	r0, #99	; 0x63
 80037ba:	2815      	cmp	r0, #21
 80037bc:	d8f7      	bhi.n	80037ae <_printf_i+0x2a>
 80037be:	f7fc fca3 	bl	8000108 <__gnu_thumb1_case_shi>
 80037c2:	0016      	.short	0x0016
 80037c4:	fff6001f 	.word	0xfff6001f
 80037c8:	fff6fff6 	.word	0xfff6fff6
 80037cc:	001ffff6 	.word	0x001ffff6
 80037d0:	fff6fff6 	.word	0xfff6fff6
 80037d4:	fff6fff6 	.word	0xfff6fff6
 80037d8:	003600a8 	.word	0x003600a8
 80037dc:	fff6009a 	.word	0xfff6009a
 80037e0:	00b9fff6 	.word	0x00b9fff6
 80037e4:	0036fff6 	.word	0x0036fff6
 80037e8:	fff6fff6 	.word	0xfff6fff6
 80037ec:	009e      	.short	0x009e
 80037ee:	0026      	movs	r6, r4
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	3642      	adds	r6, #66	; 0x42
 80037f4:	1d11      	adds	r1, r2, #4
 80037f6:	6019      	str	r1, [r3, #0]
 80037f8:	6813      	ldr	r3, [r2, #0]
 80037fa:	7033      	strb	r3, [r6, #0]
 80037fc:	2301      	movs	r3, #1
 80037fe:	e0a7      	b.n	8003950 <_printf_i+0x1cc>
 8003800:	6808      	ldr	r0, [r1, #0]
 8003802:	6819      	ldr	r1, [r3, #0]
 8003804:	1d0a      	adds	r2, r1, #4
 8003806:	0605      	lsls	r5, r0, #24
 8003808:	d50b      	bpl.n	8003822 <_printf_i+0x9e>
 800380a:	680d      	ldr	r5, [r1, #0]
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	2d00      	cmp	r5, #0
 8003810:	da03      	bge.n	800381a <_printf_i+0x96>
 8003812:	232d      	movs	r3, #45	; 0x2d
 8003814:	9a04      	ldr	r2, [sp, #16]
 8003816:	426d      	negs	r5, r5
 8003818:	7013      	strb	r3, [r2, #0]
 800381a:	4b61      	ldr	r3, [pc, #388]	; (80039a0 <_printf_i+0x21c>)
 800381c:	270a      	movs	r7, #10
 800381e:	9303      	str	r3, [sp, #12]
 8003820:	e01b      	b.n	800385a <_printf_i+0xd6>
 8003822:	680d      	ldr	r5, [r1, #0]
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	0641      	lsls	r1, r0, #25
 8003828:	d5f1      	bpl.n	800380e <_printf_i+0x8a>
 800382a:	b22d      	sxth	r5, r5
 800382c:	e7ef      	b.n	800380e <_printf_i+0x8a>
 800382e:	680d      	ldr	r5, [r1, #0]
 8003830:	6819      	ldr	r1, [r3, #0]
 8003832:	1d08      	adds	r0, r1, #4
 8003834:	6018      	str	r0, [r3, #0]
 8003836:	062e      	lsls	r6, r5, #24
 8003838:	d501      	bpl.n	800383e <_printf_i+0xba>
 800383a:	680d      	ldr	r5, [r1, #0]
 800383c:	e003      	b.n	8003846 <_printf_i+0xc2>
 800383e:	066d      	lsls	r5, r5, #25
 8003840:	d5fb      	bpl.n	800383a <_printf_i+0xb6>
 8003842:	680d      	ldr	r5, [r1, #0]
 8003844:	b2ad      	uxth	r5, r5
 8003846:	4b56      	ldr	r3, [pc, #344]	; (80039a0 <_printf_i+0x21c>)
 8003848:	2708      	movs	r7, #8
 800384a:	9303      	str	r3, [sp, #12]
 800384c:	2a6f      	cmp	r2, #111	; 0x6f
 800384e:	d000      	beq.n	8003852 <_printf_i+0xce>
 8003850:	3702      	adds	r7, #2
 8003852:	0023      	movs	r3, r4
 8003854:	2200      	movs	r2, #0
 8003856:	3343      	adds	r3, #67	; 0x43
 8003858:	701a      	strb	r2, [r3, #0]
 800385a:	6863      	ldr	r3, [r4, #4]
 800385c:	60a3      	str	r3, [r4, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	db03      	blt.n	800386a <_printf_i+0xe6>
 8003862:	2204      	movs	r2, #4
 8003864:	6821      	ldr	r1, [r4, #0]
 8003866:	4391      	bics	r1, r2
 8003868:	6021      	str	r1, [r4, #0]
 800386a:	2d00      	cmp	r5, #0
 800386c:	d102      	bne.n	8003874 <_printf_i+0xf0>
 800386e:	9e04      	ldr	r6, [sp, #16]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00c      	beq.n	800388e <_printf_i+0x10a>
 8003874:	9e04      	ldr	r6, [sp, #16]
 8003876:	0028      	movs	r0, r5
 8003878:	0039      	movs	r1, r7
 800387a:	f7fc fcd5 	bl	8000228 <__aeabi_uidivmod>
 800387e:	9b03      	ldr	r3, [sp, #12]
 8003880:	3e01      	subs	r6, #1
 8003882:	5c5b      	ldrb	r3, [r3, r1]
 8003884:	7033      	strb	r3, [r6, #0]
 8003886:	002b      	movs	r3, r5
 8003888:	0005      	movs	r5, r0
 800388a:	429f      	cmp	r7, r3
 800388c:	d9f3      	bls.n	8003876 <_printf_i+0xf2>
 800388e:	2f08      	cmp	r7, #8
 8003890:	d109      	bne.n	80038a6 <_printf_i+0x122>
 8003892:	6823      	ldr	r3, [r4, #0]
 8003894:	07db      	lsls	r3, r3, #31
 8003896:	d506      	bpl.n	80038a6 <_printf_i+0x122>
 8003898:	6863      	ldr	r3, [r4, #4]
 800389a:	6922      	ldr	r2, [r4, #16]
 800389c:	4293      	cmp	r3, r2
 800389e:	dc02      	bgt.n	80038a6 <_printf_i+0x122>
 80038a0:	2330      	movs	r3, #48	; 0x30
 80038a2:	3e01      	subs	r6, #1
 80038a4:	7033      	strb	r3, [r6, #0]
 80038a6:	9b04      	ldr	r3, [sp, #16]
 80038a8:	1b9b      	subs	r3, r3, r6
 80038aa:	6123      	str	r3, [r4, #16]
 80038ac:	9b07      	ldr	r3, [sp, #28]
 80038ae:	0021      	movs	r1, r4
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	9805      	ldr	r0, [sp, #20]
 80038b4:	9b06      	ldr	r3, [sp, #24]
 80038b6:	aa09      	add	r2, sp, #36	; 0x24
 80038b8:	f7ff fef4 	bl	80036a4 <_printf_common>
 80038bc:	1c43      	adds	r3, r0, #1
 80038be:	d14c      	bne.n	800395a <_printf_i+0x1d6>
 80038c0:	2001      	movs	r0, #1
 80038c2:	4240      	negs	r0, r0
 80038c4:	b00b      	add	sp, #44	; 0x2c
 80038c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038c8:	3145      	adds	r1, #69	; 0x45
 80038ca:	700a      	strb	r2, [r1, #0]
 80038cc:	4a34      	ldr	r2, [pc, #208]	; (80039a0 <_printf_i+0x21c>)
 80038ce:	9203      	str	r2, [sp, #12]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	6821      	ldr	r1, [r4, #0]
 80038d4:	ca20      	ldmia	r2!, {r5}
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	0608      	lsls	r0, r1, #24
 80038da:	d516      	bpl.n	800390a <_printf_i+0x186>
 80038dc:	07cb      	lsls	r3, r1, #31
 80038de:	d502      	bpl.n	80038e6 <_printf_i+0x162>
 80038e0:	2320      	movs	r3, #32
 80038e2:	4319      	orrs	r1, r3
 80038e4:	6021      	str	r1, [r4, #0]
 80038e6:	2710      	movs	r7, #16
 80038e8:	2d00      	cmp	r5, #0
 80038ea:	d1b2      	bne.n	8003852 <_printf_i+0xce>
 80038ec:	2320      	movs	r3, #32
 80038ee:	6822      	ldr	r2, [r4, #0]
 80038f0:	439a      	bics	r2, r3
 80038f2:	6022      	str	r2, [r4, #0]
 80038f4:	e7ad      	b.n	8003852 <_printf_i+0xce>
 80038f6:	2220      	movs	r2, #32
 80038f8:	6809      	ldr	r1, [r1, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	6022      	str	r2, [r4, #0]
 80038fe:	0022      	movs	r2, r4
 8003900:	2178      	movs	r1, #120	; 0x78
 8003902:	3245      	adds	r2, #69	; 0x45
 8003904:	7011      	strb	r1, [r2, #0]
 8003906:	4a27      	ldr	r2, [pc, #156]	; (80039a4 <_printf_i+0x220>)
 8003908:	e7e1      	b.n	80038ce <_printf_i+0x14a>
 800390a:	0648      	lsls	r0, r1, #25
 800390c:	d5e6      	bpl.n	80038dc <_printf_i+0x158>
 800390e:	b2ad      	uxth	r5, r5
 8003910:	e7e4      	b.n	80038dc <_printf_i+0x158>
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	680d      	ldr	r5, [r1, #0]
 8003916:	1d10      	adds	r0, r2, #4
 8003918:	6949      	ldr	r1, [r1, #20]
 800391a:	6018      	str	r0, [r3, #0]
 800391c:	6813      	ldr	r3, [r2, #0]
 800391e:	062e      	lsls	r6, r5, #24
 8003920:	d501      	bpl.n	8003926 <_printf_i+0x1a2>
 8003922:	6019      	str	r1, [r3, #0]
 8003924:	e002      	b.n	800392c <_printf_i+0x1a8>
 8003926:	066d      	lsls	r5, r5, #25
 8003928:	d5fb      	bpl.n	8003922 <_printf_i+0x19e>
 800392a:	8019      	strh	r1, [r3, #0]
 800392c:	2300      	movs	r3, #0
 800392e:	9e04      	ldr	r6, [sp, #16]
 8003930:	6123      	str	r3, [r4, #16]
 8003932:	e7bb      	b.n	80038ac <_printf_i+0x128>
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	1d11      	adds	r1, r2, #4
 8003938:	6019      	str	r1, [r3, #0]
 800393a:	6816      	ldr	r6, [r2, #0]
 800393c:	2100      	movs	r1, #0
 800393e:	0030      	movs	r0, r6
 8003940:	6862      	ldr	r2, [r4, #4]
 8003942:	f000 f831 	bl	80039a8 <memchr>
 8003946:	2800      	cmp	r0, #0
 8003948:	d001      	beq.n	800394e <_printf_i+0x1ca>
 800394a:	1b80      	subs	r0, r0, r6
 800394c:	6060      	str	r0, [r4, #4]
 800394e:	6863      	ldr	r3, [r4, #4]
 8003950:	6123      	str	r3, [r4, #16]
 8003952:	2300      	movs	r3, #0
 8003954:	9a04      	ldr	r2, [sp, #16]
 8003956:	7013      	strb	r3, [r2, #0]
 8003958:	e7a8      	b.n	80038ac <_printf_i+0x128>
 800395a:	6923      	ldr	r3, [r4, #16]
 800395c:	0032      	movs	r2, r6
 800395e:	9906      	ldr	r1, [sp, #24]
 8003960:	9805      	ldr	r0, [sp, #20]
 8003962:	9d07      	ldr	r5, [sp, #28]
 8003964:	47a8      	blx	r5
 8003966:	1c43      	adds	r3, r0, #1
 8003968:	d0aa      	beq.n	80038c0 <_printf_i+0x13c>
 800396a:	6823      	ldr	r3, [r4, #0]
 800396c:	079b      	lsls	r3, r3, #30
 800396e:	d415      	bmi.n	800399c <_printf_i+0x218>
 8003970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003972:	68e0      	ldr	r0, [r4, #12]
 8003974:	4298      	cmp	r0, r3
 8003976:	daa5      	bge.n	80038c4 <_printf_i+0x140>
 8003978:	0018      	movs	r0, r3
 800397a:	e7a3      	b.n	80038c4 <_printf_i+0x140>
 800397c:	0022      	movs	r2, r4
 800397e:	2301      	movs	r3, #1
 8003980:	9906      	ldr	r1, [sp, #24]
 8003982:	9805      	ldr	r0, [sp, #20]
 8003984:	9e07      	ldr	r6, [sp, #28]
 8003986:	3219      	adds	r2, #25
 8003988:	47b0      	blx	r6
 800398a:	1c43      	adds	r3, r0, #1
 800398c:	d098      	beq.n	80038c0 <_printf_i+0x13c>
 800398e:	3501      	adds	r5, #1
 8003990:	68e3      	ldr	r3, [r4, #12]
 8003992:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003994:	1a9b      	subs	r3, r3, r2
 8003996:	42ab      	cmp	r3, r5
 8003998:	dcf0      	bgt.n	800397c <_printf_i+0x1f8>
 800399a:	e7e9      	b.n	8003970 <_printf_i+0x1ec>
 800399c:	2500      	movs	r5, #0
 800399e:	e7f7      	b.n	8003990 <_printf_i+0x20c>
 80039a0:	08003d1d 	.word	0x08003d1d
 80039a4:	08003d2e 	.word	0x08003d2e

080039a8 <memchr>:
 80039a8:	b2c9      	uxtb	r1, r1
 80039aa:	1882      	adds	r2, r0, r2
 80039ac:	4290      	cmp	r0, r2
 80039ae:	d101      	bne.n	80039b4 <memchr+0xc>
 80039b0:	2000      	movs	r0, #0
 80039b2:	4770      	bx	lr
 80039b4:	7803      	ldrb	r3, [r0, #0]
 80039b6:	428b      	cmp	r3, r1
 80039b8:	d0fb      	beq.n	80039b2 <memchr+0xa>
 80039ba:	3001      	adds	r0, #1
 80039bc:	e7f6      	b.n	80039ac <memchr+0x4>

080039be <memcpy>:
 80039be:	2300      	movs	r3, #0
 80039c0:	b510      	push	{r4, lr}
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d100      	bne.n	80039c8 <memcpy+0xa>
 80039c6:	bd10      	pop	{r4, pc}
 80039c8:	5ccc      	ldrb	r4, [r1, r3]
 80039ca:	54c4      	strb	r4, [r0, r3]
 80039cc:	3301      	adds	r3, #1
 80039ce:	e7f8      	b.n	80039c2 <memcpy+0x4>

080039d0 <memmove>:
 80039d0:	b510      	push	{r4, lr}
 80039d2:	4288      	cmp	r0, r1
 80039d4:	d902      	bls.n	80039dc <memmove+0xc>
 80039d6:	188b      	adds	r3, r1, r2
 80039d8:	4298      	cmp	r0, r3
 80039da:	d303      	bcc.n	80039e4 <memmove+0x14>
 80039dc:	2300      	movs	r3, #0
 80039de:	e007      	b.n	80039f0 <memmove+0x20>
 80039e0:	5c8b      	ldrb	r3, [r1, r2]
 80039e2:	5483      	strb	r3, [r0, r2]
 80039e4:	3a01      	subs	r2, #1
 80039e6:	d2fb      	bcs.n	80039e0 <memmove+0x10>
 80039e8:	bd10      	pop	{r4, pc}
 80039ea:	5ccc      	ldrb	r4, [r1, r3]
 80039ec:	54c4      	strb	r4, [r0, r3]
 80039ee:	3301      	adds	r3, #1
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d1fa      	bne.n	80039ea <memmove+0x1a>
 80039f4:	e7f8      	b.n	80039e8 <memmove+0x18>
	...

080039f8 <_free_r>:
 80039f8:	b570      	push	{r4, r5, r6, lr}
 80039fa:	0005      	movs	r5, r0
 80039fc:	2900      	cmp	r1, #0
 80039fe:	d010      	beq.n	8003a22 <_free_r+0x2a>
 8003a00:	1f0c      	subs	r4, r1, #4
 8003a02:	6823      	ldr	r3, [r4, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	da00      	bge.n	8003a0a <_free_r+0x12>
 8003a08:	18e4      	adds	r4, r4, r3
 8003a0a:	0028      	movs	r0, r5
 8003a0c:	f000 f918 	bl	8003c40 <__malloc_lock>
 8003a10:	4a1d      	ldr	r2, [pc, #116]	; (8003a88 <_free_r+0x90>)
 8003a12:	6813      	ldr	r3, [r2, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d105      	bne.n	8003a24 <_free_r+0x2c>
 8003a18:	6063      	str	r3, [r4, #4]
 8003a1a:	6014      	str	r4, [r2, #0]
 8003a1c:	0028      	movs	r0, r5
 8003a1e:	f000 f917 	bl	8003c50 <__malloc_unlock>
 8003a22:	bd70      	pop	{r4, r5, r6, pc}
 8003a24:	42a3      	cmp	r3, r4
 8003a26:	d908      	bls.n	8003a3a <_free_r+0x42>
 8003a28:	6821      	ldr	r1, [r4, #0]
 8003a2a:	1860      	adds	r0, r4, r1
 8003a2c:	4283      	cmp	r3, r0
 8003a2e:	d1f3      	bne.n	8003a18 <_free_r+0x20>
 8003a30:	6818      	ldr	r0, [r3, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	1841      	adds	r1, r0, r1
 8003a36:	6021      	str	r1, [r4, #0]
 8003a38:	e7ee      	b.n	8003a18 <_free_r+0x20>
 8003a3a:	001a      	movs	r2, r3
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <_free_r+0x4e>
 8003a42:	42a3      	cmp	r3, r4
 8003a44:	d9f9      	bls.n	8003a3a <_free_r+0x42>
 8003a46:	6811      	ldr	r1, [r2, #0]
 8003a48:	1850      	adds	r0, r2, r1
 8003a4a:	42a0      	cmp	r0, r4
 8003a4c:	d10b      	bne.n	8003a66 <_free_r+0x6e>
 8003a4e:	6820      	ldr	r0, [r4, #0]
 8003a50:	1809      	adds	r1, r1, r0
 8003a52:	1850      	adds	r0, r2, r1
 8003a54:	6011      	str	r1, [r2, #0]
 8003a56:	4283      	cmp	r3, r0
 8003a58:	d1e0      	bne.n	8003a1c <_free_r+0x24>
 8003a5a:	6818      	ldr	r0, [r3, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	1841      	adds	r1, r0, r1
 8003a60:	6011      	str	r1, [r2, #0]
 8003a62:	6053      	str	r3, [r2, #4]
 8003a64:	e7da      	b.n	8003a1c <_free_r+0x24>
 8003a66:	42a0      	cmp	r0, r4
 8003a68:	d902      	bls.n	8003a70 <_free_r+0x78>
 8003a6a:	230c      	movs	r3, #12
 8003a6c:	602b      	str	r3, [r5, #0]
 8003a6e:	e7d5      	b.n	8003a1c <_free_r+0x24>
 8003a70:	6821      	ldr	r1, [r4, #0]
 8003a72:	1860      	adds	r0, r4, r1
 8003a74:	4283      	cmp	r3, r0
 8003a76:	d103      	bne.n	8003a80 <_free_r+0x88>
 8003a78:	6818      	ldr	r0, [r3, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	1841      	adds	r1, r0, r1
 8003a7e:	6021      	str	r1, [r4, #0]
 8003a80:	6063      	str	r3, [r4, #4]
 8003a82:	6054      	str	r4, [r2, #4]
 8003a84:	e7ca      	b.n	8003a1c <_free_r+0x24>
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	20000270 	.word	0x20000270

08003a8c <sbrk_aligned>:
 8003a8c:	b570      	push	{r4, r5, r6, lr}
 8003a8e:	4e0f      	ldr	r6, [pc, #60]	; (8003acc <sbrk_aligned+0x40>)
 8003a90:	000d      	movs	r5, r1
 8003a92:	6831      	ldr	r1, [r6, #0]
 8003a94:	0004      	movs	r4, r0
 8003a96:	2900      	cmp	r1, #0
 8003a98:	d102      	bne.n	8003aa0 <sbrk_aligned+0x14>
 8003a9a:	f000 f8bf 	bl	8003c1c <_sbrk_r>
 8003a9e:	6030      	str	r0, [r6, #0]
 8003aa0:	0029      	movs	r1, r5
 8003aa2:	0020      	movs	r0, r4
 8003aa4:	f000 f8ba 	bl	8003c1c <_sbrk_r>
 8003aa8:	1c43      	adds	r3, r0, #1
 8003aaa:	d00a      	beq.n	8003ac2 <sbrk_aligned+0x36>
 8003aac:	2303      	movs	r3, #3
 8003aae:	1cc5      	adds	r5, r0, #3
 8003ab0:	439d      	bics	r5, r3
 8003ab2:	42a8      	cmp	r0, r5
 8003ab4:	d007      	beq.n	8003ac6 <sbrk_aligned+0x3a>
 8003ab6:	1a29      	subs	r1, r5, r0
 8003ab8:	0020      	movs	r0, r4
 8003aba:	f000 f8af 	bl	8003c1c <_sbrk_r>
 8003abe:	1c43      	adds	r3, r0, #1
 8003ac0:	d101      	bne.n	8003ac6 <sbrk_aligned+0x3a>
 8003ac2:	2501      	movs	r5, #1
 8003ac4:	426d      	negs	r5, r5
 8003ac6:	0028      	movs	r0, r5
 8003ac8:	bd70      	pop	{r4, r5, r6, pc}
 8003aca:	46c0      	nop			; (mov r8, r8)
 8003acc:	20000274 	.word	0x20000274

08003ad0 <_malloc_r>:
 8003ad0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ad2:	2203      	movs	r2, #3
 8003ad4:	1ccb      	adds	r3, r1, #3
 8003ad6:	4393      	bics	r3, r2
 8003ad8:	3308      	adds	r3, #8
 8003ada:	0006      	movs	r6, r0
 8003adc:	001f      	movs	r7, r3
 8003ade:	2b0c      	cmp	r3, #12
 8003ae0:	d232      	bcs.n	8003b48 <_malloc_r+0x78>
 8003ae2:	270c      	movs	r7, #12
 8003ae4:	42b9      	cmp	r1, r7
 8003ae6:	d831      	bhi.n	8003b4c <_malloc_r+0x7c>
 8003ae8:	0030      	movs	r0, r6
 8003aea:	f000 f8a9 	bl	8003c40 <__malloc_lock>
 8003aee:	4d32      	ldr	r5, [pc, #200]	; (8003bb8 <_malloc_r+0xe8>)
 8003af0:	682b      	ldr	r3, [r5, #0]
 8003af2:	001c      	movs	r4, r3
 8003af4:	2c00      	cmp	r4, #0
 8003af6:	d12e      	bne.n	8003b56 <_malloc_r+0x86>
 8003af8:	0039      	movs	r1, r7
 8003afa:	0030      	movs	r0, r6
 8003afc:	f7ff ffc6 	bl	8003a8c <sbrk_aligned>
 8003b00:	0004      	movs	r4, r0
 8003b02:	1c43      	adds	r3, r0, #1
 8003b04:	d11e      	bne.n	8003b44 <_malloc_r+0x74>
 8003b06:	682c      	ldr	r4, [r5, #0]
 8003b08:	0025      	movs	r5, r4
 8003b0a:	2d00      	cmp	r5, #0
 8003b0c:	d14a      	bne.n	8003ba4 <_malloc_r+0xd4>
 8003b0e:	6823      	ldr	r3, [r4, #0]
 8003b10:	0029      	movs	r1, r5
 8003b12:	18e3      	adds	r3, r4, r3
 8003b14:	0030      	movs	r0, r6
 8003b16:	9301      	str	r3, [sp, #4]
 8003b18:	f000 f880 	bl	8003c1c <_sbrk_r>
 8003b1c:	9b01      	ldr	r3, [sp, #4]
 8003b1e:	4283      	cmp	r3, r0
 8003b20:	d143      	bne.n	8003baa <_malloc_r+0xda>
 8003b22:	6823      	ldr	r3, [r4, #0]
 8003b24:	3703      	adds	r7, #3
 8003b26:	1aff      	subs	r7, r7, r3
 8003b28:	2303      	movs	r3, #3
 8003b2a:	439f      	bics	r7, r3
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	2f0c      	cmp	r7, #12
 8003b30:	d200      	bcs.n	8003b34 <_malloc_r+0x64>
 8003b32:	270c      	movs	r7, #12
 8003b34:	0039      	movs	r1, r7
 8003b36:	0030      	movs	r0, r6
 8003b38:	f7ff ffa8 	bl	8003a8c <sbrk_aligned>
 8003b3c:	1c43      	adds	r3, r0, #1
 8003b3e:	d034      	beq.n	8003baa <_malloc_r+0xda>
 8003b40:	6823      	ldr	r3, [r4, #0]
 8003b42:	19df      	adds	r7, r3, r7
 8003b44:	6027      	str	r7, [r4, #0]
 8003b46:	e013      	b.n	8003b70 <_malloc_r+0xa0>
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	dacb      	bge.n	8003ae4 <_malloc_r+0x14>
 8003b4c:	230c      	movs	r3, #12
 8003b4e:	2500      	movs	r5, #0
 8003b50:	6033      	str	r3, [r6, #0]
 8003b52:	0028      	movs	r0, r5
 8003b54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003b56:	6822      	ldr	r2, [r4, #0]
 8003b58:	1bd1      	subs	r1, r2, r7
 8003b5a:	d420      	bmi.n	8003b9e <_malloc_r+0xce>
 8003b5c:	290b      	cmp	r1, #11
 8003b5e:	d917      	bls.n	8003b90 <_malloc_r+0xc0>
 8003b60:	19e2      	adds	r2, r4, r7
 8003b62:	6027      	str	r7, [r4, #0]
 8003b64:	42a3      	cmp	r3, r4
 8003b66:	d111      	bne.n	8003b8c <_malloc_r+0xbc>
 8003b68:	602a      	str	r2, [r5, #0]
 8003b6a:	6863      	ldr	r3, [r4, #4]
 8003b6c:	6011      	str	r1, [r2, #0]
 8003b6e:	6053      	str	r3, [r2, #4]
 8003b70:	0030      	movs	r0, r6
 8003b72:	0025      	movs	r5, r4
 8003b74:	f000 f86c 	bl	8003c50 <__malloc_unlock>
 8003b78:	2207      	movs	r2, #7
 8003b7a:	350b      	adds	r5, #11
 8003b7c:	1d23      	adds	r3, r4, #4
 8003b7e:	4395      	bics	r5, r2
 8003b80:	1aea      	subs	r2, r5, r3
 8003b82:	429d      	cmp	r5, r3
 8003b84:	d0e5      	beq.n	8003b52 <_malloc_r+0x82>
 8003b86:	1b5b      	subs	r3, r3, r5
 8003b88:	50a3      	str	r3, [r4, r2]
 8003b8a:	e7e2      	b.n	8003b52 <_malloc_r+0x82>
 8003b8c:	605a      	str	r2, [r3, #4]
 8003b8e:	e7ec      	b.n	8003b6a <_malloc_r+0x9a>
 8003b90:	6862      	ldr	r2, [r4, #4]
 8003b92:	42a3      	cmp	r3, r4
 8003b94:	d101      	bne.n	8003b9a <_malloc_r+0xca>
 8003b96:	602a      	str	r2, [r5, #0]
 8003b98:	e7ea      	b.n	8003b70 <_malloc_r+0xa0>
 8003b9a:	605a      	str	r2, [r3, #4]
 8003b9c:	e7e8      	b.n	8003b70 <_malloc_r+0xa0>
 8003b9e:	0023      	movs	r3, r4
 8003ba0:	6864      	ldr	r4, [r4, #4]
 8003ba2:	e7a7      	b.n	8003af4 <_malloc_r+0x24>
 8003ba4:	002c      	movs	r4, r5
 8003ba6:	686d      	ldr	r5, [r5, #4]
 8003ba8:	e7af      	b.n	8003b0a <_malloc_r+0x3a>
 8003baa:	230c      	movs	r3, #12
 8003bac:	0030      	movs	r0, r6
 8003bae:	6033      	str	r3, [r6, #0]
 8003bb0:	f000 f84e 	bl	8003c50 <__malloc_unlock>
 8003bb4:	e7cd      	b.n	8003b52 <_malloc_r+0x82>
 8003bb6:	46c0      	nop			; (mov r8, r8)
 8003bb8:	20000270 	.word	0x20000270

08003bbc <_realloc_r>:
 8003bbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bbe:	0007      	movs	r7, r0
 8003bc0:	000e      	movs	r6, r1
 8003bc2:	0014      	movs	r4, r2
 8003bc4:	2900      	cmp	r1, #0
 8003bc6:	d105      	bne.n	8003bd4 <_realloc_r+0x18>
 8003bc8:	0011      	movs	r1, r2
 8003bca:	f7ff ff81 	bl	8003ad0 <_malloc_r>
 8003bce:	0005      	movs	r5, r0
 8003bd0:	0028      	movs	r0, r5
 8003bd2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003bd4:	2a00      	cmp	r2, #0
 8003bd6:	d103      	bne.n	8003be0 <_realloc_r+0x24>
 8003bd8:	f7ff ff0e 	bl	80039f8 <_free_r>
 8003bdc:	0025      	movs	r5, r4
 8003bde:	e7f7      	b.n	8003bd0 <_realloc_r+0x14>
 8003be0:	f000 f83e 	bl	8003c60 <_malloc_usable_size_r>
 8003be4:	9001      	str	r0, [sp, #4]
 8003be6:	4284      	cmp	r4, r0
 8003be8:	d803      	bhi.n	8003bf2 <_realloc_r+0x36>
 8003bea:	0035      	movs	r5, r6
 8003bec:	0843      	lsrs	r3, r0, #1
 8003bee:	42a3      	cmp	r3, r4
 8003bf0:	d3ee      	bcc.n	8003bd0 <_realloc_r+0x14>
 8003bf2:	0021      	movs	r1, r4
 8003bf4:	0038      	movs	r0, r7
 8003bf6:	f7ff ff6b 	bl	8003ad0 <_malloc_r>
 8003bfa:	1e05      	subs	r5, r0, #0
 8003bfc:	d0e8      	beq.n	8003bd0 <_realloc_r+0x14>
 8003bfe:	9b01      	ldr	r3, [sp, #4]
 8003c00:	0022      	movs	r2, r4
 8003c02:	429c      	cmp	r4, r3
 8003c04:	d900      	bls.n	8003c08 <_realloc_r+0x4c>
 8003c06:	001a      	movs	r2, r3
 8003c08:	0031      	movs	r1, r6
 8003c0a:	0028      	movs	r0, r5
 8003c0c:	f7ff fed7 	bl	80039be <memcpy>
 8003c10:	0031      	movs	r1, r6
 8003c12:	0038      	movs	r0, r7
 8003c14:	f7ff fef0 	bl	80039f8 <_free_r>
 8003c18:	e7da      	b.n	8003bd0 <_realloc_r+0x14>
	...

08003c1c <_sbrk_r>:
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	b570      	push	{r4, r5, r6, lr}
 8003c20:	4d06      	ldr	r5, [pc, #24]	; (8003c3c <_sbrk_r+0x20>)
 8003c22:	0004      	movs	r4, r0
 8003c24:	0008      	movs	r0, r1
 8003c26:	602b      	str	r3, [r5, #0]
 8003c28:	f7fc fe6e 	bl	8000908 <_sbrk>
 8003c2c:	1c43      	adds	r3, r0, #1
 8003c2e:	d103      	bne.n	8003c38 <_sbrk_r+0x1c>
 8003c30:	682b      	ldr	r3, [r5, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d000      	beq.n	8003c38 <_sbrk_r+0x1c>
 8003c36:	6023      	str	r3, [r4, #0]
 8003c38:	bd70      	pop	{r4, r5, r6, pc}
 8003c3a:	46c0      	nop			; (mov r8, r8)
 8003c3c:	20000278 	.word	0x20000278

08003c40 <__malloc_lock>:
 8003c40:	b510      	push	{r4, lr}
 8003c42:	4802      	ldr	r0, [pc, #8]	; (8003c4c <__malloc_lock+0xc>)
 8003c44:	f000 f814 	bl	8003c70 <__retarget_lock_acquire_recursive>
 8003c48:	bd10      	pop	{r4, pc}
 8003c4a:	46c0      	nop			; (mov r8, r8)
 8003c4c:	2000027c 	.word	0x2000027c

08003c50 <__malloc_unlock>:
 8003c50:	b510      	push	{r4, lr}
 8003c52:	4802      	ldr	r0, [pc, #8]	; (8003c5c <__malloc_unlock+0xc>)
 8003c54:	f000 f80d 	bl	8003c72 <__retarget_lock_release_recursive>
 8003c58:	bd10      	pop	{r4, pc}
 8003c5a:	46c0      	nop			; (mov r8, r8)
 8003c5c:	2000027c 	.word	0x2000027c

08003c60 <_malloc_usable_size_r>:
 8003c60:	1f0b      	subs	r3, r1, #4
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	1f18      	subs	r0, r3, #4
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	da01      	bge.n	8003c6e <_malloc_usable_size_r+0xe>
 8003c6a:	580b      	ldr	r3, [r1, r0]
 8003c6c:	18c0      	adds	r0, r0, r3
 8003c6e:	4770      	bx	lr

08003c70 <__retarget_lock_acquire_recursive>:
 8003c70:	4770      	bx	lr

08003c72 <__retarget_lock_release_recursive>:
 8003c72:	4770      	bx	lr

08003c74 <_init>:
 8003c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c76:	46c0      	nop			; (mov r8, r8)
 8003c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c7a:	bc08      	pop	{r3}
 8003c7c:	469e      	mov	lr, r3
 8003c7e:	4770      	bx	lr

08003c80 <_fini>:
 8003c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c82:	46c0      	nop			; (mov r8, r8)
 8003c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c86:	bc08      	pop	{r3}
 8003c88:	469e      	mov	lr, r3
 8003c8a:	4770      	bx	lr
