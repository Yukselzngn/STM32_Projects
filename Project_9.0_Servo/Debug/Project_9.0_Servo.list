
Project_9.0_Servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dc0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08003e80  08003e80  00013e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f30  08003f30  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003f30  08003f30  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f30  08003f30  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f30  08003f30  00013f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f34  08003f34  00013f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003f38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08003f44  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08003f44  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ed3  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001549  00000000  00000000  00027f07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e8  00000000  00000000  00029450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000830  00000000  00000000  00029d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018603  00000000  00000000  0002a568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f97  00000000  00000000  00042b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fe28  00000000  00000000  0004cb02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dc92a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021f4  00000000  00000000  000dc97c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003e68 	.word	0x08003e68

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003e68 	.word	0x08003e68

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_d2uiz>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2200      	movs	r2, #0
 8000224:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <__aeabi_d2uiz+0x38>)
 8000226:	0004      	movs	r4, r0
 8000228:	000d      	movs	r5, r1
 800022a:	f001 fc31 	bl	8001a90 <__aeabi_dcmpge>
 800022e:	2800      	cmp	r0, #0
 8000230:	d104      	bne.n	800023c <__aeabi_d2uiz+0x1c>
 8000232:	0020      	movs	r0, r4
 8000234:	0029      	movs	r1, r5
 8000236:	f001 fb49 	bl	80018cc <__aeabi_d2iz>
 800023a:	bd70      	pop	{r4, r5, r6, pc}
 800023c:	4b06      	ldr	r3, [pc, #24]	; (8000258 <__aeabi_d2uiz+0x38>)
 800023e:	2200      	movs	r2, #0
 8000240:	0020      	movs	r0, r4
 8000242:	0029      	movs	r1, r5
 8000244:	f000 ffb0 	bl	80011a8 <__aeabi_dsub>
 8000248:	f001 fb40 	bl	80018cc <__aeabi_d2iz>
 800024c:	2380      	movs	r3, #128	; 0x80
 800024e:	061b      	lsls	r3, r3, #24
 8000250:	469c      	mov	ip, r3
 8000252:	4460      	add	r0, ip
 8000254:	e7f1      	b.n	800023a <__aeabi_d2uiz+0x1a>
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	41e00000 	.word	0x41e00000

0800025c <__aeabi_fmul>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	464f      	mov	r7, r9
 8000260:	4646      	mov	r6, r8
 8000262:	46d6      	mov	lr, sl
 8000264:	0244      	lsls	r4, r0, #9
 8000266:	0045      	lsls	r5, r0, #1
 8000268:	b5c0      	push	{r6, r7, lr}
 800026a:	0a64      	lsrs	r4, r4, #9
 800026c:	1c0f      	adds	r7, r1, #0
 800026e:	0e2d      	lsrs	r5, r5, #24
 8000270:	0fc6      	lsrs	r6, r0, #31
 8000272:	2d00      	cmp	r5, #0
 8000274:	d100      	bne.n	8000278 <__aeabi_fmul+0x1c>
 8000276:	e08d      	b.n	8000394 <__aeabi_fmul+0x138>
 8000278:	2dff      	cmp	r5, #255	; 0xff
 800027a:	d100      	bne.n	800027e <__aeabi_fmul+0x22>
 800027c:	e092      	b.n	80003a4 <__aeabi_fmul+0x148>
 800027e:	2300      	movs	r3, #0
 8000280:	2080      	movs	r0, #128	; 0x80
 8000282:	4699      	mov	r9, r3
 8000284:	469a      	mov	sl, r3
 8000286:	00e4      	lsls	r4, r4, #3
 8000288:	04c0      	lsls	r0, r0, #19
 800028a:	4304      	orrs	r4, r0
 800028c:	3d7f      	subs	r5, #127	; 0x7f
 800028e:	0278      	lsls	r0, r7, #9
 8000290:	0a43      	lsrs	r3, r0, #9
 8000292:	4698      	mov	r8, r3
 8000294:	007b      	lsls	r3, r7, #1
 8000296:	0e1b      	lsrs	r3, r3, #24
 8000298:	0fff      	lsrs	r7, r7, #31
 800029a:	2b00      	cmp	r3, #0
 800029c:	d100      	bne.n	80002a0 <__aeabi_fmul+0x44>
 800029e:	e070      	b.n	8000382 <__aeabi_fmul+0x126>
 80002a0:	2bff      	cmp	r3, #255	; 0xff
 80002a2:	d100      	bne.n	80002a6 <__aeabi_fmul+0x4a>
 80002a4:	e086      	b.n	80003b4 <__aeabi_fmul+0x158>
 80002a6:	4642      	mov	r2, r8
 80002a8:	00d0      	lsls	r0, r2, #3
 80002aa:	2280      	movs	r2, #128	; 0x80
 80002ac:	3b7f      	subs	r3, #127	; 0x7f
 80002ae:	18ed      	adds	r5, r5, r3
 80002b0:	2300      	movs	r3, #0
 80002b2:	04d2      	lsls	r2, r2, #19
 80002b4:	4302      	orrs	r2, r0
 80002b6:	4690      	mov	r8, r2
 80002b8:	469c      	mov	ip, r3
 80002ba:	0031      	movs	r1, r6
 80002bc:	464b      	mov	r3, r9
 80002be:	4079      	eors	r1, r7
 80002c0:	1c68      	adds	r0, r5, #1
 80002c2:	2b0f      	cmp	r3, #15
 80002c4:	d81c      	bhi.n	8000300 <__aeabi_fmul+0xa4>
 80002c6:	4a76      	ldr	r2, [pc, #472]	; (80004a0 <__aeabi_fmul+0x244>)
 80002c8:	009b      	lsls	r3, r3, #2
 80002ca:	58d3      	ldr	r3, [r2, r3]
 80002cc:	469f      	mov	pc, r3
 80002ce:	0039      	movs	r1, r7
 80002d0:	4644      	mov	r4, r8
 80002d2:	46e2      	mov	sl, ip
 80002d4:	4653      	mov	r3, sl
 80002d6:	2b02      	cmp	r3, #2
 80002d8:	d00f      	beq.n	80002fa <__aeabi_fmul+0x9e>
 80002da:	2b03      	cmp	r3, #3
 80002dc:	d100      	bne.n	80002e0 <__aeabi_fmul+0x84>
 80002de:	e0d7      	b.n	8000490 <__aeabi_fmul+0x234>
 80002e0:	2b01      	cmp	r3, #1
 80002e2:	d137      	bne.n	8000354 <__aeabi_fmul+0xf8>
 80002e4:	2000      	movs	r0, #0
 80002e6:	2400      	movs	r4, #0
 80002e8:	05c0      	lsls	r0, r0, #23
 80002ea:	4320      	orrs	r0, r4
 80002ec:	07c9      	lsls	r1, r1, #31
 80002ee:	4308      	orrs	r0, r1
 80002f0:	bce0      	pop	{r5, r6, r7}
 80002f2:	46ba      	mov	sl, r7
 80002f4:	46b1      	mov	r9, r6
 80002f6:	46a8      	mov	r8, r5
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	20ff      	movs	r0, #255	; 0xff
 80002fc:	2400      	movs	r4, #0
 80002fe:	e7f3      	b.n	80002e8 <__aeabi_fmul+0x8c>
 8000300:	0c26      	lsrs	r6, r4, #16
 8000302:	0424      	lsls	r4, r4, #16
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	4644      	mov	r4, r8
 8000308:	0424      	lsls	r4, r4, #16
 800030a:	0c24      	lsrs	r4, r4, #16
 800030c:	4643      	mov	r3, r8
 800030e:	0027      	movs	r7, r4
 8000310:	0c1b      	lsrs	r3, r3, #16
 8000312:	4357      	muls	r7, r2
 8000314:	4374      	muls	r4, r6
 8000316:	435a      	muls	r2, r3
 8000318:	435e      	muls	r6, r3
 800031a:	1912      	adds	r2, r2, r4
 800031c:	0c3b      	lsrs	r3, r7, #16
 800031e:	189b      	adds	r3, r3, r2
 8000320:	429c      	cmp	r4, r3
 8000322:	d903      	bls.n	800032c <__aeabi_fmul+0xd0>
 8000324:	2280      	movs	r2, #128	; 0x80
 8000326:	0252      	lsls	r2, r2, #9
 8000328:	4694      	mov	ip, r2
 800032a:	4466      	add	r6, ip
 800032c:	043f      	lsls	r7, r7, #16
 800032e:	041a      	lsls	r2, r3, #16
 8000330:	0c3f      	lsrs	r7, r7, #16
 8000332:	19d2      	adds	r2, r2, r7
 8000334:	0194      	lsls	r4, r2, #6
 8000336:	1e67      	subs	r7, r4, #1
 8000338:	41bc      	sbcs	r4, r7
 800033a:	0c1b      	lsrs	r3, r3, #16
 800033c:	0e92      	lsrs	r2, r2, #26
 800033e:	199b      	adds	r3, r3, r6
 8000340:	4314      	orrs	r4, r2
 8000342:	019b      	lsls	r3, r3, #6
 8000344:	431c      	orrs	r4, r3
 8000346:	011b      	lsls	r3, r3, #4
 8000348:	d400      	bmi.n	800034c <__aeabi_fmul+0xf0>
 800034a:	e09b      	b.n	8000484 <__aeabi_fmul+0x228>
 800034c:	2301      	movs	r3, #1
 800034e:	0862      	lsrs	r2, r4, #1
 8000350:	401c      	ands	r4, r3
 8000352:	4314      	orrs	r4, r2
 8000354:	0002      	movs	r2, r0
 8000356:	327f      	adds	r2, #127	; 0x7f
 8000358:	2a00      	cmp	r2, #0
 800035a:	dd64      	ble.n	8000426 <__aeabi_fmul+0x1ca>
 800035c:	0763      	lsls	r3, r4, #29
 800035e:	d004      	beq.n	800036a <__aeabi_fmul+0x10e>
 8000360:	230f      	movs	r3, #15
 8000362:	4023      	ands	r3, r4
 8000364:	2b04      	cmp	r3, #4
 8000366:	d000      	beq.n	800036a <__aeabi_fmul+0x10e>
 8000368:	3404      	adds	r4, #4
 800036a:	0123      	lsls	r3, r4, #4
 800036c:	d503      	bpl.n	8000376 <__aeabi_fmul+0x11a>
 800036e:	0002      	movs	r2, r0
 8000370:	4b4c      	ldr	r3, [pc, #304]	; (80004a4 <__aeabi_fmul+0x248>)
 8000372:	3280      	adds	r2, #128	; 0x80
 8000374:	401c      	ands	r4, r3
 8000376:	2afe      	cmp	r2, #254	; 0xfe
 8000378:	dcbf      	bgt.n	80002fa <__aeabi_fmul+0x9e>
 800037a:	01a4      	lsls	r4, r4, #6
 800037c:	0a64      	lsrs	r4, r4, #9
 800037e:	b2d0      	uxtb	r0, r2
 8000380:	e7b2      	b.n	80002e8 <__aeabi_fmul+0x8c>
 8000382:	4643      	mov	r3, r8
 8000384:	2b00      	cmp	r3, #0
 8000386:	d13d      	bne.n	8000404 <__aeabi_fmul+0x1a8>
 8000388:	464a      	mov	r2, r9
 800038a:	3301      	adds	r3, #1
 800038c:	431a      	orrs	r2, r3
 800038e:	4691      	mov	r9, r2
 8000390:	469c      	mov	ip, r3
 8000392:	e792      	b.n	80002ba <__aeabi_fmul+0x5e>
 8000394:	2c00      	cmp	r4, #0
 8000396:	d129      	bne.n	80003ec <__aeabi_fmul+0x190>
 8000398:	2304      	movs	r3, #4
 800039a:	4699      	mov	r9, r3
 800039c:	3b03      	subs	r3, #3
 800039e:	2500      	movs	r5, #0
 80003a0:	469a      	mov	sl, r3
 80003a2:	e774      	b.n	800028e <__aeabi_fmul+0x32>
 80003a4:	2c00      	cmp	r4, #0
 80003a6:	d11b      	bne.n	80003e0 <__aeabi_fmul+0x184>
 80003a8:	2308      	movs	r3, #8
 80003aa:	4699      	mov	r9, r3
 80003ac:	3b06      	subs	r3, #6
 80003ae:	25ff      	movs	r5, #255	; 0xff
 80003b0:	469a      	mov	sl, r3
 80003b2:	e76c      	b.n	800028e <__aeabi_fmul+0x32>
 80003b4:	4643      	mov	r3, r8
 80003b6:	35ff      	adds	r5, #255	; 0xff
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d10b      	bne.n	80003d4 <__aeabi_fmul+0x178>
 80003bc:	2302      	movs	r3, #2
 80003be:	464a      	mov	r2, r9
 80003c0:	431a      	orrs	r2, r3
 80003c2:	4691      	mov	r9, r2
 80003c4:	469c      	mov	ip, r3
 80003c6:	e778      	b.n	80002ba <__aeabi_fmul+0x5e>
 80003c8:	4653      	mov	r3, sl
 80003ca:	0031      	movs	r1, r6
 80003cc:	2b02      	cmp	r3, #2
 80003ce:	d000      	beq.n	80003d2 <__aeabi_fmul+0x176>
 80003d0:	e783      	b.n	80002da <__aeabi_fmul+0x7e>
 80003d2:	e792      	b.n	80002fa <__aeabi_fmul+0x9e>
 80003d4:	2303      	movs	r3, #3
 80003d6:	464a      	mov	r2, r9
 80003d8:	431a      	orrs	r2, r3
 80003da:	4691      	mov	r9, r2
 80003dc:	469c      	mov	ip, r3
 80003de:	e76c      	b.n	80002ba <__aeabi_fmul+0x5e>
 80003e0:	230c      	movs	r3, #12
 80003e2:	4699      	mov	r9, r3
 80003e4:	3b09      	subs	r3, #9
 80003e6:	25ff      	movs	r5, #255	; 0xff
 80003e8:	469a      	mov	sl, r3
 80003ea:	e750      	b.n	800028e <__aeabi_fmul+0x32>
 80003ec:	0020      	movs	r0, r4
 80003ee:	f001 fb59 	bl	8001aa4 <__clzsi2>
 80003f2:	2576      	movs	r5, #118	; 0x76
 80003f4:	1f43      	subs	r3, r0, #5
 80003f6:	409c      	lsls	r4, r3
 80003f8:	2300      	movs	r3, #0
 80003fa:	426d      	negs	r5, r5
 80003fc:	4699      	mov	r9, r3
 80003fe:	469a      	mov	sl, r3
 8000400:	1a2d      	subs	r5, r5, r0
 8000402:	e744      	b.n	800028e <__aeabi_fmul+0x32>
 8000404:	4640      	mov	r0, r8
 8000406:	f001 fb4d 	bl	8001aa4 <__clzsi2>
 800040a:	4642      	mov	r2, r8
 800040c:	1f43      	subs	r3, r0, #5
 800040e:	409a      	lsls	r2, r3
 8000410:	2300      	movs	r3, #0
 8000412:	1a2d      	subs	r5, r5, r0
 8000414:	4690      	mov	r8, r2
 8000416:	469c      	mov	ip, r3
 8000418:	3d76      	subs	r5, #118	; 0x76
 800041a:	e74e      	b.n	80002ba <__aeabi_fmul+0x5e>
 800041c:	2480      	movs	r4, #128	; 0x80
 800041e:	2100      	movs	r1, #0
 8000420:	20ff      	movs	r0, #255	; 0xff
 8000422:	03e4      	lsls	r4, r4, #15
 8000424:	e760      	b.n	80002e8 <__aeabi_fmul+0x8c>
 8000426:	2301      	movs	r3, #1
 8000428:	1a9b      	subs	r3, r3, r2
 800042a:	2b1b      	cmp	r3, #27
 800042c:	dd00      	ble.n	8000430 <__aeabi_fmul+0x1d4>
 800042e:	e759      	b.n	80002e4 <__aeabi_fmul+0x88>
 8000430:	0022      	movs	r2, r4
 8000432:	309e      	adds	r0, #158	; 0x9e
 8000434:	40da      	lsrs	r2, r3
 8000436:	4084      	lsls	r4, r0
 8000438:	0013      	movs	r3, r2
 800043a:	1e62      	subs	r2, r4, #1
 800043c:	4194      	sbcs	r4, r2
 800043e:	431c      	orrs	r4, r3
 8000440:	0763      	lsls	r3, r4, #29
 8000442:	d004      	beq.n	800044e <__aeabi_fmul+0x1f2>
 8000444:	230f      	movs	r3, #15
 8000446:	4023      	ands	r3, r4
 8000448:	2b04      	cmp	r3, #4
 800044a:	d000      	beq.n	800044e <__aeabi_fmul+0x1f2>
 800044c:	3404      	adds	r4, #4
 800044e:	0163      	lsls	r3, r4, #5
 8000450:	d51a      	bpl.n	8000488 <__aeabi_fmul+0x22c>
 8000452:	2001      	movs	r0, #1
 8000454:	2400      	movs	r4, #0
 8000456:	e747      	b.n	80002e8 <__aeabi_fmul+0x8c>
 8000458:	2080      	movs	r0, #128	; 0x80
 800045a:	03c0      	lsls	r0, r0, #15
 800045c:	4204      	tst	r4, r0
 800045e:	d009      	beq.n	8000474 <__aeabi_fmul+0x218>
 8000460:	4643      	mov	r3, r8
 8000462:	4203      	tst	r3, r0
 8000464:	d106      	bne.n	8000474 <__aeabi_fmul+0x218>
 8000466:	4644      	mov	r4, r8
 8000468:	4304      	orrs	r4, r0
 800046a:	0264      	lsls	r4, r4, #9
 800046c:	0039      	movs	r1, r7
 800046e:	20ff      	movs	r0, #255	; 0xff
 8000470:	0a64      	lsrs	r4, r4, #9
 8000472:	e739      	b.n	80002e8 <__aeabi_fmul+0x8c>
 8000474:	2080      	movs	r0, #128	; 0x80
 8000476:	03c0      	lsls	r0, r0, #15
 8000478:	4304      	orrs	r4, r0
 800047a:	0264      	lsls	r4, r4, #9
 800047c:	0031      	movs	r1, r6
 800047e:	20ff      	movs	r0, #255	; 0xff
 8000480:	0a64      	lsrs	r4, r4, #9
 8000482:	e731      	b.n	80002e8 <__aeabi_fmul+0x8c>
 8000484:	0028      	movs	r0, r5
 8000486:	e765      	b.n	8000354 <__aeabi_fmul+0xf8>
 8000488:	01a4      	lsls	r4, r4, #6
 800048a:	2000      	movs	r0, #0
 800048c:	0a64      	lsrs	r4, r4, #9
 800048e:	e72b      	b.n	80002e8 <__aeabi_fmul+0x8c>
 8000490:	2080      	movs	r0, #128	; 0x80
 8000492:	03c0      	lsls	r0, r0, #15
 8000494:	4304      	orrs	r4, r0
 8000496:	0264      	lsls	r4, r4, #9
 8000498:	20ff      	movs	r0, #255	; 0xff
 800049a:	0a64      	lsrs	r4, r4, #9
 800049c:	e724      	b.n	80002e8 <__aeabi_fmul+0x8c>
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	08003e80 	.word	0x08003e80
 80004a4:	f7ffffff 	.word	0xf7ffffff

080004a8 <__aeabi_i2f>:
 80004a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004aa:	2800      	cmp	r0, #0
 80004ac:	d013      	beq.n	80004d6 <__aeabi_i2f+0x2e>
 80004ae:	17c3      	asrs	r3, r0, #31
 80004b0:	18c6      	adds	r6, r0, r3
 80004b2:	405e      	eors	r6, r3
 80004b4:	0fc4      	lsrs	r4, r0, #31
 80004b6:	0030      	movs	r0, r6
 80004b8:	f001 faf4 	bl	8001aa4 <__clzsi2>
 80004bc:	239e      	movs	r3, #158	; 0x9e
 80004be:	0005      	movs	r5, r0
 80004c0:	1a1b      	subs	r3, r3, r0
 80004c2:	2b96      	cmp	r3, #150	; 0x96
 80004c4:	dc0f      	bgt.n	80004e6 <__aeabi_i2f+0x3e>
 80004c6:	2808      	cmp	r0, #8
 80004c8:	dd01      	ble.n	80004ce <__aeabi_i2f+0x26>
 80004ca:	3d08      	subs	r5, #8
 80004cc:	40ae      	lsls	r6, r5
 80004ce:	0276      	lsls	r6, r6, #9
 80004d0:	0a76      	lsrs	r6, r6, #9
 80004d2:	b2d8      	uxtb	r0, r3
 80004d4:	e002      	b.n	80004dc <__aeabi_i2f+0x34>
 80004d6:	2400      	movs	r4, #0
 80004d8:	2000      	movs	r0, #0
 80004da:	2600      	movs	r6, #0
 80004dc:	05c0      	lsls	r0, r0, #23
 80004de:	4330      	orrs	r0, r6
 80004e0:	07e4      	lsls	r4, r4, #31
 80004e2:	4320      	orrs	r0, r4
 80004e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004e6:	2b99      	cmp	r3, #153	; 0x99
 80004e8:	dd0c      	ble.n	8000504 <__aeabi_i2f+0x5c>
 80004ea:	2205      	movs	r2, #5
 80004ec:	0031      	movs	r1, r6
 80004ee:	1a12      	subs	r2, r2, r0
 80004f0:	40d1      	lsrs	r1, r2
 80004f2:	000a      	movs	r2, r1
 80004f4:	0001      	movs	r1, r0
 80004f6:	0030      	movs	r0, r6
 80004f8:	311b      	adds	r1, #27
 80004fa:	4088      	lsls	r0, r1
 80004fc:	1e41      	subs	r1, r0, #1
 80004fe:	4188      	sbcs	r0, r1
 8000500:	4302      	orrs	r2, r0
 8000502:	0016      	movs	r6, r2
 8000504:	2d05      	cmp	r5, #5
 8000506:	dc12      	bgt.n	800052e <__aeabi_i2f+0x86>
 8000508:	0031      	movs	r1, r6
 800050a:	4f0d      	ldr	r7, [pc, #52]	; (8000540 <__aeabi_i2f+0x98>)
 800050c:	4039      	ands	r1, r7
 800050e:	0772      	lsls	r2, r6, #29
 8000510:	d009      	beq.n	8000526 <__aeabi_i2f+0x7e>
 8000512:	200f      	movs	r0, #15
 8000514:	4030      	ands	r0, r6
 8000516:	2804      	cmp	r0, #4
 8000518:	d005      	beq.n	8000526 <__aeabi_i2f+0x7e>
 800051a:	3104      	adds	r1, #4
 800051c:	014a      	lsls	r2, r1, #5
 800051e:	d502      	bpl.n	8000526 <__aeabi_i2f+0x7e>
 8000520:	239f      	movs	r3, #159	; 0x9f
 8000522:	4039      	ands	r1, r7
 8000524:	1b5b      	subs	r3, r3, r5
 8000526:	0189      	lsls	r1, r1, #6
 8000528:	0a4e      	lsrs	r6, r1, #9
 800052a:	b2d8      	uxtb	r0, r3
 800052c:	e7d6      	b.n	80004dc <__aeabi_i2f+0x34>
 800052e:	1f6a      	subs	r2, r5, #5
 8000530:	4096      	lsls	r6, r2
 8000532:	0031      	movs	r1, r6
 8000534:	4f02      	ldr	r7, [pc, #8]	; (8000540 <__aeabi_i2f+0x98>)
 8000536:	4039      	ands	r1, r7
 8000538:	0772      	lsls	r2, r6, #29
 800053a:	d0f4      	beq.n	8000526 <__aeabi_i2f+0x7e>
 800053c:	e7e9      	b.n	8000512 <__aeabi_i2f+0x6a>
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	fbffffff 	.word	0xfbffffff

08000544 <__aeabi_dadd>:
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000546:	464f      	mov	r7, r9
 8000548:	4646      	mov	r6, r8
 800054a:	46d6      	mov	lr, sl
 800054c:	000d      	movs	r5, r1
 800054e:	0004      	movs	r4, r0
 8000550:	b5c0      	push	{r6, r7, lr}
 8000552:	001f      	movs	r7, r3
 8000554:	0011      	movs	r1, r2
 8000556:	0328      	lsls	r0, r5, #12
 8000558:	0f62      	lsrs	r2, r4, #29
 800055a:	0a40      	lsrs	r0, r0, #9
 800055c:	4310      	orrs	r0, r2
 800055e:	007a      	lsls	r2, r7, #1
 8000560:	0d52      	lsrs	r2, r2, #21
 8000562:	00e3      	lsls	r3, r4, #3
 8000564:	033c      	lsls	r4, r7, #12
 8000566:	4691      	mov	r9, r2
 8000568:	0a64      	lsrs	r4, r4, #9
 800056a:	0ffa      	lsrs	r2, r7, #31
 800056c:	0f4f      	lsrs	r7, r1, #29
 800056e:	006e      	lsls	r6, r5, #1
 8000570:	4327      	orrs	r7, r4
 8000572:	4692      	mov	sl, r2
 8000574:	46b8      	mov	r8, r7
 8000576:	0d76      	lsrs	r6, r6, #21
 8000578:	0fed      	lsrs	r5, r5, #31
 800057a:	00c9      	lsls	r1, r1, #3
 800057c:	4295      	cmp	r5, r2
 800057e:	d100      	bne.n	8000582 <__aeabi_dadd+0x3e>
 8000580:	e099      	b.n	80006b6 <__aeabi_dadd+0x172>
 8000582:	464c      	mov	r4, r9
 8000584:	1b34      	subs	r4, r6, r4
 8000586:	46a4      	mov	ip, r4
 8000588:	2c00      	cmp	r4, #0
 800058a:	dc00      	bgt.n	800058e <__aeabi_dadd+0x4a>
 800058c:	e07c      	b.n	8000688 <__aeabi_dadd+0x144>
 800058e:	464a      	mov	r2, r9
 8000590:	2a00      	cmp	r2, #0
 8000592:	d100      	bne.n	8000596 <__aeabi_dadd+0x52>
 8000594:	e0b8      	b.n	8000708 <__aeabi_dadd+0x1c4>
 8000596:	4ac5      	ldr	r2, [pc, #788]	; (80008ac <__aeabi_dadd+0x368>)
 8000598:	4296      	cmp	r6, r2
 800059a:	d100      	bne.n	800059e <__aeabi_dadd+0x5a>
 800059c:	e11c      	b.n	80007d8 <__aeabi_dadd+0x294>
 800059e:	2280      	movs	r2, #128	; 0x80
 80005a0:	003c      	movs	r4, r7
 80005a2:	0412      	lsls	r2, r2, #16
 80005a4:	4314      	orrs	r4, r2
 80005a6:	46a0      	mov	r8, r4
 80005a8:	4662      	mov	r2, ip
 80005aa:	2a38      	cmp	r2, #56	; 0x38
 80005ac:	dd00      	ble.n	80005b0 <__aeabi_dadd+0x6c>
 80005ae:	e161      	b.n	8000874 <__aeabi_dadd+0x330>
 80005b0:	2a1f      	cmp	r2, #31
 80005b2:	dd00      	ble.n	80005b6 <__aeabi_dadd+0x72>
 80005b4:	e1cc      	b.n	8000950 <__aeabi_dadd+0x40c>
 80005b6:	4664      	mov	r4, ip
 80005b8:	2220      	movs	r2, #32
 80005ba:	1b12      	subs	r2, r2, r4
 80005bc:	4644      	mov	r4, r8
 80005be:	4094      	lsls	r4, r2
 80005c0:	000f      	movs	r7, r1
 80005c2:	46a1      	mov	r9, r4
 80005c4:	4664      	mov	r4, ip
 80005c6:	4091      	lsls	r1, r2
 80005c8:	40e7      	lsrs	r7, r4
 80005ca:	464c      	mov	r4, r9
 80005cc:	1e4a      	subs	r2, r1, #1
 80005ce:	4191      	sbcs	r1, r2
 80005d0:	433c      	orrs	r4, r7
 80005d2:	4642      	mov	r2, r8
 80005d4:	4321      	orrs	r1, r4
 80005d6:	4664      	mov	r4, ip
 80005d8:	40e2      	lsrs	r2, r4
 80005da:	1a80      	subs	r0, r0, r2
 80005dc:	1a5c      	subs	r4, r3, r1
 80005de:	42a3      	cmp	r3, r4
 80005e0:	419b      	sbcs	r3, r3
 80005e2:	425f      	negs	r7, r3
 80005e4:	1bc7      	subs	r7, r0, r7
 80005e6:	023b      	lsls	r3, r7, #8
 80005e8:	d400      	bmi.n	80005ec <__aeabi_dadd+0xa8>
 80005ea:	e0d0      	b.n	800078e <__aeabi_dadd+0x24a>
 80005ec:	027f      	lsls	r7, r7, #9
 80005ee:	0a7f      	lsrs	r7, r7, #9
 80005f0:	2f00      	cmp	r7, #0
 80005f2:	d100      	bne.n	80005f6 <__aeabi_dadd+0xb2>
 80005f4:	e0ff      	b.n	80007f6 <__aeabi_dadd+0x2b2>
 80005f6:	0038      	movs	r0, r7
 80005f8:	f001 fa54 	bl	8001aa4 <__clzsi2>
 80005fc:	0001      	movs	r1, r0
 80005fe:	3908      	subs	r1, #8
 8000600:	2320      	movs	r3, #32
 8000602:	0022      	movs	r2, r4
 8000604:	1a5b      	subs	r3, r3, r1
 8000606:	408f      	lsls	r7, r1
 8000608:	40da      	lsrs	r2, r3
 800060a:	408c      	lsls	r4, r1
 800060c:	4317      	orrs	r7, r2
 800060e:	42b1      	cmp	r1, r6
 8000610:	da00      	bge.n	8000614 <__aeabi_dadd+0xd0>
 8000612:	e0ff      	b.n	8000814 <__aeabi_dadd+0x2d0>
 8000614:	1b89      	subs	r1, r1, r6
 8000616:	1c4b      	adds	r3, r1, #1
 8000618:	2b1f      	cmp	r3, #31
 800061a:	dd00      	ble.n	800061e <__aeabi_dadd+0xda>
 800061c:	e0a8      	b.n	8000770 <__aeabi_dadd+0x22c>
 800061e:	2220      	movs	r2, #32
 8000620:	0039      	movs	r1, r7
 8000622:	1ad2      	subs	r2, r2, r3
 8000624:	0020      	movs	r0, r4
 8000626:	4094      	lsls	r4, r2
 8000628:	4091      	lsls	r1, r2
 800062a:	40d8      	lsrs	r0, r3
 800062c:	1e62      	subs	r2, r4, #1
 800062e:	4194      	sbcs	r4, r2
 8000630:	40df      	lsrs	r7, r3
 8000632:	2600      	movs	r6, #0
 8000634:	4301      	orrs	r1, r0
 8000636:	430c      	orrs	r4, r1
 8000638:	0763      	lsls	r3, r4, #29
 800063a:	d009      	beq.n	8000650 <__aeabi_dadd+0x10c>
 800063c:	230f      	movs	r3, #15
 800063e:	4023      	ands	r3, r4
 8000640:	2b04      	cmp	r3, #4
 8000642:	d005      	beq.n	8000650 <__aeabi_dadd+0x10c>
 8000644:	1d23      	adds	r3, r4, #4
 8000646:	42a3      	cmp	r3, r4
 8000648:	41a4      	sbcs	r4, r4
 800064a:	4264      	negs	r4, r4
 800064c:	193f      	adds	r7, r7, r4
 800064e:	001c      	movs	r4, r3
 8000650:	023b      	lsls	r3, r7, #8
 8000652:	d400      	bmi.n	8000656 <__aeabi_dadd+0x112>
 8000654:	e09e      	b.n	8000794 <__aeabi_dadd+0x250>
 8000656:	4b95      	ldr	r3, [pc, #596]	; (80008ac <__aeabi_dadd+0x368>)
 8000658:	3601      	adds	r6, #1
 800065a:	429e      	cmp	r6, r3
 800065c:	d100      	bne.n	8000660 <__aeabi_dadd+0x11c>
 800065e:	e0b7      	b.n	80007d0 <__aeabi_dadd+0x28c>
 8000660:	4a93      	ldr	r2, [pc, #588]	; (80008b0 <__aeabi_dadd+0x36c>)
 8000662:	08e4      	lsrs	r4, r4, #3
 8000664:	4017      	ands	r7, r2
 8000666:	077b      	lsls	r3, r7, #29
 8000668:	0571      	lsls	r1, r6, #21
 800066a:	027f      	lsls	r7, r7, #9
 800066c:	4323      	orrs	r3, r4
 800066e:	0b3f      	lsrs	r7, r7, #12
 8000670:	0d4a      	lsrs	r2, r1, #21
 8000672:	0512      	lsls	r2, r2, #20
 8000674:	433a      	orrs	r2, r7
 8000676:	07ed      	lsls	r5, r5, #31
 8000678:	432a      	orrs	r2, r5
 800067a:	0018      	movs	r0, r3
 800067c:	0011      	movs	r1, r2
 800067e:	bce0      	pop	{r5, r6, r7}
 8000680:	46ba      	mov	sl, r7
 8000682:	46b1      	mov	r9, r6
 8000684:	46a8      	mov	r8, r5
 8000686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000688:	2c00      	cmp	r4, #0
 800068a:	d04b      	beq.n	8000724 <__aeabi_dadd+0x1e0>
 800068c:	464c      	mov	r4, r9
 800068e:	1ba4      	subs	r4, r4, r6
 8000690:	46a4      	mov	ip, r4
 8000692:	2e00      	cmp	r6, #0
 8000694:	d000      	beq.n	8000698 <__aeabi_dadd+0x154>
 8000696:	e123      	b.n	80008e0 <__aeabi_dadd+0x39c>
 8000698:	0004      	movs	r4, r0
 800069a:	431c      	orrs	r4, r3
 800069c:	d100      	bne.n	80006a0 <__aeabi_dadd+0x15c>
 800069e:	e1af      	b.n	8000a00 <__aeabi_dadd+0x4bc>
 80006a0:	4662      	mov	r2, ip
 80006a2:	1e54      	subs	r4, r2, #1
 80006a4:	2a01      	cmp	r2, #1
 80006a6:	d100      	bne.n	80006aa <__aeabi_dadd+0x166>
 80006a8:	e215      	b.n	8000ad6 <__aeabi_dadd+0x592>
 80006aa:	4d80      	ldr	r5, [pc, #512]	; (80008ac <__aeabi_dadd+0x368>)
 80006ac:	45ac      	cmp	ip, r5
 80006ae:	d100      	bne.n	80006b2 <__aeabi_dadd+0x16e>
 80006b0:	e1c8      	b.n	8000a44 <__aeabi_dadd+0x500>
 80006b2:	46a4      	mov	ip, r4
 80006b4:	e11b      	b.n	80008ee <__aeabi_dadd+0x3aa>
 80006b6:	464a      	mov	r2, r9
 80006b8:	1ab2      	subs	r2, r6, r2
 80006ba:	4694      	mov	ip, r2
 80006bc:	2a00      	cmp	r2, #0
 80006be:	dc00      	bgt.n	80006c2 <__aeabi_dadd+0x17e>
 80006c0:	e0ac      	b.n	800081c <__aeabi_dadd+0x2d8>
 80006c2:	464a      	mov	r2, r9
 80006c4:	2a00      	cmp	r2, #0
 80006c6:	d043      	beq.n	8000750 <__aeabi_dadd+0x20c>
 80006c8:	4a78      	ldr	r2, [pc, #480]	; (80008ac <__aeabi_dadd+0x368>)
 80006ca:	4296      	cmp	r6, r2
 80006cc:	d100      	bne.n	80006d0 <__aeabi_dadd+0x18c>
 80006ce:	e1af      	b.n	8000a30 <__aeabi_dadd+0x4ec>
 80006d0:	2280      	movs	r2, #128	; 0x80
 80006d2:	003c      	movs	r4, r7
 80006d4:	0412      	lsls	r2, r2, #16
 80006d6:	4314      	orrs	r4, r2
 80006d8:	46a0      	mov	r8, r4
 80006da:	4662      	mov	r2, ip
 80006dc:	2a38      	cmp	r2, #56	; 0x38
 80006de:	dc67      	bgt.n	80007b0 <__aeabi_dadd+0x26c>
 80006e0:	2a1f      	cmp	r2, #31
 80006e2:	dc00      	bgt.n	80006e6 <__aeabi_dadd+0x1a2>
 80006e4:	e15f      	b.n	80009a6 <__aeabi_dadd+0x462>
 80006e6:	4647      	mov	r7, r8
 80006e8:	3a20      	subs	r2, #32
 80006ea:	40d7      	lsrs	r7, r2
 80006ec:	4662      	mov	r2, ip
 80006ee:	2a20      	cmp	r2, #32
 80006f0:	d005      	beq.n	80006fe <__aeabi_dadd+0x1ba>
 80006f2:	4664      	mov	r4, ip
 80006f4:	2240      	movs	r2, #64	; 0x40
 80006f6:	1b12      	subs	r2, r2, r4
 80006f8:	4644      	mov	r4, r8
 80006fa:	4094      	lsls	r4, r2
 80006fc:	4321      	orrs	r1, r4
 80006fe:	1e4a      	subs	r2, r1, #1
 8000700:	4191      	sbcs	r1, r2
 8000702:	000c      	movs	r4, r1
 8000704:	433c      	orrs	r4, r7
 8000706:	e057      	b.n	80007b8 <__aeabi_dadd+0x274>
 8000708:	003a      	movs	r2, r7
 800070a:	430a      	orrs	r2, r1
 800070c:	d100      	bne.n	8000710 <__aeabi_dadd+0x1cc>
 800070e:	e105      	b.n	800091c <__aeabi_dadd+0x3d8>
 8000710:	0022      	movs	r2, r4
 8000712:	3a01      	subs	r2, #1
 8000714:	2c01      	cmp	r4, #1
 8000716:	d100      	bne.n	800071a <__aeabi_dadd+0x1d6>
 8000718:	e182      	b.n	8000a20 <__aeabi_dadd+0x4dc>
 800071a:	4c64      	ldr	r4, [pc, #400]	; (80008ac <__aeabi_dadd+0x368>)
 800071c:	45a4      	cmp	ip, r4
 800071e:	d05b      	beq.n	80007d8 <__aeabi_dadd+0x294>
 8000720:	4694      	mov	ip, r2
 8000722:	e741      	b.n	80005a8 <__aeabi_dadd+0x64>
 8000724:	4c63      	ldr	r4, [pc, #396]	; (80008b4 <__aeabi_dadd+0x370>)
 8000726:	1c77      	adds	r7, r6, #1
 8000728:	4227      	tst	r7, r4
 800072a:	d000      	beq.n	800072e <__aeabi_dadd+0x1ea>
 800072c:	e0c4      	b.n	80008b8 <__aeabi_dadd+0x374>
 800072e:	0004      	movs	r4, r0
 8000730:	431c      	orrs	r4, r3
 8000732:	2e00      	cmp	r6, #0
 8000734:	d000      	beq.n	8000738 <__aeabi_dadd+0x1f4>
 8000736:	e169      	b.n	8000a0c <__aeabi_dadd+0x4c8>
 8000738:	2c00      	cmp	r4, #0
 800073a:	d100      	bne.n	800073e <__aeabi_dadd+0x1fa>
 800073c:	e1bf      	b.n	8000abe <__aeabi_dadd+0x57a>
 800073e:	4644      	mov	r4, r8
 8000740:	430c      	orrs	r4, r1
 8000742:	d000      	beq.n	8000746 <__aeabi_dadd+0x202>
 8000744:	e1d0      	b.n	8000ae8 <__aeabi_dadd+0x5a4>
 8000746:	0742      	lsls	r2, r0, #29
 8000748:	08db      	lsrs	r3, r3, #3
 800074a:	4313      	orrs	r3, r2
 800074c:	08c0      	lsrs	r0, r0, #3
 800074e:	e029      	b.n	80007a4 <__aeabi_dadd+0x260>
 8000750:	003a      	movs	r2, r7
 8000752:	430a      	orrs	r2, r1
 8000754:	d100      	bne.n	8000758 <__aeabi_dadd+0x214>
 8000756:	e170      	b.n	8000a3a <__aeabi_dadd+0x4f6>
 8000758:	4662      	mov	r2, ip
 800075a:	4664      	mov	r4, ip
 800075c:	3a01      	subs	r2, #1
 800075e:	2c01      	cmp	r4, #1
 8000760:	d100      	bne.n	8000764 <__aeabi_dadd+0x220>
 8000762:	e0e0      	b.n	8000926 <__aeabi_dadd+0x3e2>
 8000764:	4c51      	ldr	r4, [pc, #324]	; (80008ac <__aeabi_dadd+0x368>)
 8000766:	45a4      	cmp	ip, r4
 8000768:	d100      	bne.n	800076c <__aeabi_dadd+0x228>
 800076a:	e161      	b.n	8000a30 <__aeabi_dadd+0x4ec>
 800076c:	4694      	mov	ip, r2
 800076e:	e7b4      	b.n	80006da <__aeabi_dadd+0x196>
 8000770:	003a      	movs	r2, r7
 8000772:	391f      	subs	r1, #31
 8000774:	40ca      	lsrs	r2, r1
 8000776:	0011      	movs	r1, r2
 8000778:	2b20      	cmp	r3, #32
 800077a:	d003      	beq.n	8000784 <__aeabi_dadd+0x240>
 800077c:	2240      	movs	r2, #64	; 0x40
 800077e:	1ad3      	subs	r3, r2, r3
 8000780:	409f      	lsls	r7, r3
 8000782:	433c      	orrs	r4, r7
 8000784:	1e63      	subs	r3, r4, #1
 8000786:	419c      	sbcs	r4, r3
 8000788:	2700      	movs	r7, #0
 800078a:	2600      	movs	r6, #0
 800078c:	430c      	orrs	r4, r1
 800078e:	0763      	lsls	r3, r4, #29
 8000790:	d000      	beq.n	8000794 <__aeabi_dadd+0x250>
 8000792:	e753      	b.n	800063c <__aeabi_dadd+0xf8>
 8000794:	46b4      	mov	ip, r6
 8000796:	08e4      	lsrs	r4, r4, #3
 8000798:	077b      	lsls	r3, r7, #29
 800079a:	4323      	orrs	r3, r4
 800079c:	08f8      	lsrs	r0, r7, #3
 800079e:	4a43      	ldr	r2, [pc, #268]	; (80008ac <__aeabi_dadd+0x368>)
 80007a0:	4594      	cmp	ip, r2
 80007a2:	d01d      	beq.n	80007e0 <__aeabi_dadd+0x29c>
 80007a4:	4662      	mov	r2, ip
 80007a6:	0307      	lsls	r7, r0, #12
 80007a8:	0552      	lsls	r2, r2, #21
 80007aa:	0b3f      	lsrs	r7, r7, #12
 80007ac:	0d52      	lsrs	r2, r2, #21
 80007ae:	e760      	b.n	8000672 <__aeabi_dadd+0x12e>
 80007b0:	4644      	mov	r4, r8
 80007b2:	430c      	orrs	r4, r1
 80007b4:	1e62      	subs	r2, r4, #1
 80007b6:	4194      	sbcs	r4, r2
 80007b8:	18e4      	adds	r4, r4, r3
 80007ba:	429c      	cmp	r4, r3
 80007bc:	419b      	sbcs	r3, r3
 80007be:	425f      	negs	r7, r3
 80007c0:	183f      	adds	r7, r7, r0
 80007c2:	023b      	lsls	r3, r7, #8
 80007c4:	d5e3      	bpl.n	800078e <__aeabi_dadd+0x24a>
 80007c6:	4b39      	ldr	r3, [pc, #228]	; (80008ac <__aeabi_dadd+0x368>)
 80007c8:	3601      	adds	r6, #1
 80007ca:	429e      	cmp	r6, r3
 80007cc:	d000      	beq.n	80007d0 <__aeabi_dadd+0x28c>
 80007ce:	e0b5      	b.n	800093c <__aeabi_dadd+0x3f8>
 80007d0:	0032      	movs	r2, r6
 80007d2:	2700      	movs	r7, #0
 80007d4:	2300      	movs	r3, #0
 80007d6:	e74c      	b.n	8000672 <__aeabi_dadd+0x12e>
 80007d8:	0742      	lsls	r2, r0, #29
 80007da:	08db      	lsrs	r3, r3, #3
 80007dc:	4313      	orrs	r3, r2
 80007de:	08c0      	lsrs	r0, r0, #3
 80007e0:	001a      	movs	r2, r3
 80007e2:	4302      	orrs	r2, r0
 80007e4:	d100      	bne.n	80007e8 <__aeabi_dadd+0x2a4>
 80007e6:	e1e1      	b.n	8000bac <__aeabi_dadd+0x668>
 80007e8:	2780      	movs	r7, #128	; 0x80
 80007ea:	033f      	lsls	r7, r7, #12
 80007ec:	4307      	orrs	r7, r0
 80007ee:	033f      	lsls	r7, r7, #12
 80007f0:	4a2e      	ldr	r2, [pc, #184]	; (80008ac <__aeabi_dadd+0x368>)
 80007f2:	0b3f      	lsrs	r7, r7, #12
 80007f4:	e73d      	b.n	8000672 <__aeabi_dadd+0x12e>
 80007f6:	0020      	movs	r0, r4
 80007f8:	f001 f954 	bl	8001aa4 <__clzsi2>
 80007fc:	0001      	movs	r1, r0
 80007fe:	3118      	adds	r1, #24
 8000800:	291f      	cmp	r1, #31
 8000802:	dc00      	bgt.n	8000806 <__aeabi_dadd+0x2c2>
 8000804:	e6fc      	b.n	8000600 <__aeabi_dadd+0xbc>
 8000806:	3808      	subs	r0, #8
 8000808:	4084      	lsls	r4, r0
 800080a:	0027      	movs	r7, r4
 800080c:	2400      	movs	r4, #0
 800080e:	42b1      	cmp	r1, r6
 8000810:	db00      	blt.n	8000814 <__aeabi_dadd+0x2d0>
 8000812:	e6ff      	b.n	8000614 <__aeabi_dadd+0xd0>
 8000814:	4a26      	ldr	r2, [pc, #152]	; (80008b0 <__aeabi_dadd+0x36c>)
 8000816:	1a76      	subs	r6, r6, r1
 8000818:	4017      	ands	r7, r2
 800081a:	e70d      	b.n	8000638 <__aeabi_dadd+0xf4>
 800081c:	2a00      	cmp	r2, #0
 800081e:	d02f      	beq.n	8000880 <__aeabi_dadd+0x33c>
 8000820:	464a      	mov	r2, r9
 8000822:	1b92      	subs	r2, r2, r6
 8000824:	4694      	mov	ip, r2
 8000826:	2e00      	cmp	r6, #0
 8000828:	d100      	bne.n	800082c <__aeabi_dadd+0x2e8>
 800082a:	e0ad      	b.n	8000988 <__aeabi_dadd+0x444>
 800082c:	4a1f      	ldr	r2, [pc, #124]	; (80008ac <__aeabi_dadd+0x368>)
 800082e:	4591      	cmp	r9, r2
 8000830:	d100      	bne.n	8000834 <__aeabi_dadd+0x2f0>
 8000832:	e10f      	b.n	8000a54 <__aeabi_dadd+0x510>
 8000834:	2280      	movs	r2, #128	; 0x80
 8000836:	0412      	lsls	r2, r2, #16
 8000838:	4310      	orrs	r0, r2
 800083a:	4662      	mov	r2, ip
 800083c:	2a38      	cmp	r2, #56	; 0x38
 800083e:	dd00      	ble.n	8000842 <__aeabi_dadd+0x2fe>
 8000840:	e10f      	b.n	8000a62 <__aeabi_dadd+0x51e>
 8000842:	2a1f      	cmp	r2, #31
 8000844:	dd00      	ble.n	8000848 <__aeabi_dadd+0x304>
 8000846:	e180      	b.n	8000b4a <__aeabi_dadd+0x606>
 8000848:	4664      	mov	r4, ip
 800084a:	2220      	movs	r2, #32
 800084c:	001e      	movs	r6, r3
 800084e:	1b12      	subs	r2, r2, r4
 8000850:	4667      	mov	r7, ip
 8000852:	0004      	movs	r4, r0
 8000854:	4093      	lsls	r3, r2
 8000856:	4094      	lsls	r4, r2
 8000858:	40fe      	lsrs	r6, r7
 800085a:	1e5a      	subs	r2, r3, #1
 800085c:	4193      	sbcs	r3, r2
 800085e:	40f8      	lsrs	r0, r7
 8000860:	4334      	orrs	r4, r6
 8000862:	431c      	orrs	r4, r3
 8000864:	4480      	add	r8, r0
 8000866:	1864      	adds	r4, r4, r1
 8000868:	428c      	cmp	r4, r1
 800086a:	41bf      	sbcs	r7, r7
 800086c:	427f      	negs	r7, r7
 800086e:	464e      	mov	r6, r9
 8000870:	4447      	add	r7, r8
 8000872:	e7a6      	b.n	80007c2 <__aeabi_dadd+0x27e>
 8000874:	4642      	mov	r2, r8
 8000876:	430a      	orrs	r2, r1
 8000878:	0011      	movs	r1, r2
 800087a:	1e4a      	subs	r2, r1, #1
 800087c:	4191      	sbcs	r1, r2
 800087e:	e6ad      	b.n	80005dc <__aeabi_dadd+0x98>
 8000880:	4c0c      	ldr	r4, [pc, #48]	; (80008b4 <__aeabi_dadd+0x370>)
 8000882:	1c72      	adds	r2, r6, #1
 8000884:	4222      	tst	r2, r4
 8000886:	d000      	beq.n	800088a <__aeabi_dadd+0x346>
 8000888:	e0a1      	b.n	80009ce <__aeabi_dadd+0x48a>
 800088a:	0002      	movs	r2, r0
 800088c:	431a      	orrs	r2, r3
 800088e:	2e00      	cmp	r6, #0
 8000890:	d000      	beq.n	8000894 <__aeabi_dadd+0x350>
 8000892:	e0fa      	b.n	8000a8a <__aeabi_dadd+0x546>
 8000894:	2a00      	cmp	r2, #0
 8000896:	d100      	bne.n	800089a <__aeabi_dadd+0x356>
 8000898:	e145      	b.n	8000b26 <__aeabi_dadd+0x5e2>
 800089a:	003a      	movs	r2, r7
 800089c:	430a      	orrs	r2, r1
 800089e:	d000      	beq.n	80008a2 <__aeabi_dadd+0x35e>
 80008a0:	e146      	b.n	8000b30 <__aeabi_dadd+0x5ec>
 80008a2:	0742      	lsls	r2, r0, #29
 80008a4:	08db      	lsrs	r3, r3, #3
 80008a6:	4313      	orrs	r3, r2
 80008a8:	08c0      	lsrs	r0, r0, #3
 80008aa:	e77b      	b.n	80007a4 <__aeabi_dadd+0x260>
 80008ac:	000007ff 	.word	0x000007ff
 80008b0:	ff7fffff 	.word	0xff7fffff
 80008b4:	000007fe 	.word	0x000007fe
 80008b8:	4647      	mov	r7, r8
 80008ba:	1a5c      	subs	r4, r3, r1
 80008bc:	1bc2      	subs	r2, r0, r7
 80008be:	42a3      	cmp	r3, r4
 80008c0:	41bf      	sbcs	r7, r7
 80008c2:	427f      	negs	r7, r7
 80008c4:	46b9      	mov	r9, r7
 80008c6:	0017      	movs	r7, r2
 80008c8:	464a      	mov	r2, r9
 80008ca:	1abf      	subs	r7, r7, r2
 80008cc:	023a      	lsls	r2, r7, #8
 80008ce:	d500      	bpl.n	80008d2 <__aeabi_dadd+0x38e>
 80008d0:	e08d      	b.n	80009ee <__aeabi_dadd+0x4aa>
 80008d2:	0023      	movs	r3, r4
 80008d4:	433b      	orrs	r3, r7
 80008d6:	d000      	beq.n	80008da <__aeabi_dadd+0x396>
 80008d8:	e68a      	b.n	80005f0 <__aeabi_dadd+0xac>
 80008da:	2000      	movs	r0, #0
 80008dc:	2500      	movs	r5, #0
 80008de:	e761      	b.n	80007a4 <__aeabi_dadd+0x260>
 80008e0:	4cb4      	ldr	r4, [pc, #720]	; (8000bb4 <__aeabi_dadd+0x670>)
 80008e2:	45a1      	cmp	r9, r4
 80008e4:	d100      	bne.n	80008e8 <__aeabi_dadd+0x3a4>
 80008e6:	e0ad      	b.n	8000a44 <__aeabi_dadd+0x500>
 80008e8:	2480      	movs	r4, #128	; 0x80
 80008ea:	0424      	lsls	r4, r4, #16
 80008ec:	4320      	orrs	r0, r4
 80008ee:	4664      	mov	r4, ip
 80008f0:	2c38      	cmp	r4, #56	; 0x38
 80008f2:	dc3d      	bgt.n	8000970 <__aeabi_dadd+0x42c>
 80008f4:	4662      	mov	r2, ip
 80008f6:	2c1f      	cmp	r4, #31
 80008f8:	dd00      	ble.n	80008fc <__aeabi_dadd+0x3b8>
 80008fa:	e0b7      	b.n	8000a6c <__aeabi_dadd+0x528>
 80008fc:	2520      	movs	r5, #32
 80008fe:	001e      	movs	r6, r3
 8000900:	1b2d      	subs	r5, r5, r4
 8000902:	0004      	movs	r4, r0
 8000904:	40ab      	lsls	r3, r5
 8000906:	40ac      	lsls	r4, r5
 8000908:	40d6      	lsrs	r6, r2
 800090a:	40d0      	lsrs	r0, r2
 800090c:	4642      	mov	r2, r8
 800090e:	1e5d      	subs	r5, r3, #1
 8000910:	41ab      	sbcs	r3, r5
 8000912:	4334      	orrs	r4, r6
 8000914:	1a12      	subs	r2, r2, r0
 8000916:	4690      	mov	r8, r2
 8000918:	4323      	orrs	r3, r4
 800091a:	e02c      	b.n	8000976 <__aeabi_dadd+0x432>
 800091c:	0742      	lsls	r2, r0, #29
 800091e:	08db      	lsrs	r3, r3, #3
 8000920:	4313      	orrs	r3, r2
 8000922:	08c0      	lsrs	r0, r0, #3
 8000924:	e73b      	b.n	800079e <__aeabi_dadd+0x25a>
 8000926:	185c      	adds	r4, r3, r1
 8000928:	429c      	cmp	r4, r3
 800092a:	419b      	sbcs	r3, r3
 800092c:	4440      	add	r0, r8
 800092e:	425b      	negs	r3, r3
 8000930:	18c7      	adds	r7, r0, r3
 8000932:	2601      	movs	r6, #1
 8000934:	023b      	lsls	r3, r7, #8
 8000936:	d400      	bmi.n	800093a <__aeabi_dadd+0x3f6>
 8000938:	e729      	b.n	800078e <__aeabi_dadd+0x24a>
 800093a:	2602      	movs	r6, #2
 800093c:	4a9e      	ldr	r2, [pc, #632]	; (8000bb8 <__aeabi_dadd+0x674>)
 800093e:	0863      	lsrs	r3, r4, #1
 8000940:	4017      	ands	r7, r2
 8000942:	2201      	movs	r2, #1
 8000944:	4014      	ands	r4, r2
 8000946:	431c      	orrs	r4, r3
 8000948:	07fb      	lsls	r3, r7, #31
 800094a:	431c      	orrs	r4, r3
 800094c:	087f      	lsrs	r7, r7, #1
 800094e:	e673      	b.n	8000638 <__aeabi_dadd+0xf4>
 8000950:	4644      	mov	r4, r8
 8000952:	3a20      	subs	r2, #32
 8000954:	40d4      	lsrs	r4, r2
 8000956:	4662      	mov	r2, ip
 8000958:	2a20      	cmp	r2, #32
 800095a:	d005      	beq.n	8000968 <__aeabi_dadd+0x424>
 800095c:	4667      	mov	r7, ip
 800095e:	2240      	movs	r2, #64	; 0x40
 8000960:	1bd2      	subs	r2, r2, r7
 8000962:	4647      	mov	r7, r8
 8000964:	4097      	lsls	r7, r2
 8000966:	4339      	orrs	r1, r7
 8000968:	1e4a      	subs	r2, r1, #1
 800096a:	4191      	sbcs	r1, r2
 800096c:	4321      	orrs	r1, r4
 800096e:	e635      	b.n	80005dc <__aeabi_dadd+0x98>
 8000970:	4303      	orrs	r3, r0
 8000972:	1e58      	subs	r0, r3, #1
 8000974:	4183      	sbcs	r3, r0
 8000976:	1acc      	subs	r4, r1, r3
 8000978:	42a1      	cmp	r1, r4
 800097a:	41bf      	sbcs	r7, r7
 800097c:	4643      	mov	r3, r8
 800097e:	427f      	negs	r7, r7
 8000980:	4655      	mov	r5, sl
 8000982:	464e      	mov	r6, r9
 8000984:	1bdf      	subs	r7, r3, r7
 8000986:	e62e      	b.n	80005e6 <__aeabi_dadd+0xa2>
 8000988:	0002      	movs	r2, r0
 800098a:	431a      	orrs	r2, r3
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x44c>
 800098e:	e0bd      	b.n	8000b0c <__aeabi_dadd+0x5c8>
 8000990:	4662      	mov	r2, ip
 8000992:	4664      	mov	r4, ip
 8000994:	3a01      	subs	r2, #1
 8000996:	2c01      	cmp	r4, #1
 8000998:	d100      	bne.n	800099c <__aeabi_dadd+0x458>
 800099a:	e0e5      	b.n	8000b68 <__aeabi_dadd+0x624>
 800099c:	4c85      	ldr	r4, [pc, #532]	; (8000bb4 <__aeabi_dadd+0x670>)
 800099e:	45a4      	cmp	ip, r4
 80009a0:	d058      	beq.n	8000a54 <__aeabi_dadd+0x510>
 80009a2:	4694      	mov	ip, r2
 80009a4:	e749      	b.n	800083a <__aeabi_dadd+0x2f6>
 80009a6:	4664      	mov	r4, ip
 80009a8:	2220      	movs	r2, #32
 80009aa:	1b12      	subs	r2, r2, r4
 80009ac:	4644      	mov	r4, r8
 80009ae:	4094      	lsls	r4, r2
 80009b0:	000f      	movs	r7, r1
 80009b2:	46a1      	mov	r9, r4
 80009b4:	4664      	mov	r4, ip
 80009b6:	4091      	lsls	r1, r2
 80009b8:	40e7      	lsrs	r7, r4
 80009ba:	464c      	mov	r4, r9
 80009bc:	1e4a      	subs	r2, r1, #1
 80009be:	4191      	sbcs	r1, r2
 80009c0:	433c      	orrs	r4, r7
 80009c2:	4642      	mov	r2, r8
 80009c4:	430c      	orrs	r4, r1
 80009c6:	4661      	mov	r1, ip
 80009c8:	40ca      	lsrs	r2, r1
 80009ca:	1880      	adds	r0, r0, r2
 80009cc:	e6f4      	b.n	80007b8 <__aeabi_dadd+0x274>
 80009ce:	4c79      	ldr	r4, [pc, #484]	; (8000bb4 <__aeabi_dadd+0x670>)
 80009d0:	42a2      	cmp	r2, r4
 80009d2:	d100      	bne.n	80009d6 <__aeabi_dadd+0x492>
 80009d4:	e6fd      	b.n	80007d2 <__aeabi_dadd+0x28e>
 80009d6:	1859      	adds	r1, r3, r1
 80009d8:	4299      	cmp	r1, r3
 80009da:	419b      	sbcs	r3, r3
 80009dc:	4440      	add	r0, r8
 80009de:	425f      	negs	r7, r3
 80009e0:	19c7      	adds	r7, r0, r7
 80009e2:	07fc      	lsls	r4, r7, #31
 80009e4:	0849      	lsrs	r1, r1, #1
 80009e6:	0016      	movs	r6, r2
 80009e8:	430c      	orrs	r4, r1
 80009ea:	087f      	lsrs	r7, r7, #1
 80009ec:	e6cf      	b.n	800078e <__aeabi_dadd+0x24a>
 80009ee:	1acc      	subs	r4, r1, r3
 80009f0:	42a1      	cmp	r1, r4
 80009f2:	41bf      	sbcs	r7, r7
 80009f4:	4643      	mov	r3, r8
 80009f6:	427f      	negs	r7, r7
 80009f8:	1a18      	subs	r0, r3, r0
 80009fa:	4655      	mov	r5, sl
 80009fc:	1bc7      	subs	r7, r0, r7
 80009fe:	e5f7      	b.n	80005f0 <__aeabi_dadd+0xac>
 8000a00:	08c9      	lsrs	r1, r1, #3
 8000a02:	077b      	lsls	r3, r7, #29
 8000a04:	4655      	mov	r5, sl
 8000a06:	430b      	orrs	r3, r1
 8000a08:	08f8      	lsrs	r0, r7, #3
 8000a0a:	e6c8      	b.n	800079e <__aeabi_dadd+0x25a>
 8000a0c:	2c00      	cmp	r4, #0
 8000a0e:	d000      	beq.n	8000a12 <__aeabi_dadd+0x4ce>
 8000a10:	e081      	b.n	8000b16 <__aeabi_dadd+0x5d2>
 8000a12:	4643      	mov	r3, r8
 8000a14:	430b      	orrs	r3, r1
 8000a16:	d115      	bne.n	8000a44 <__aeabi_dadd+0x500>
 8000a18:	2080      	movs	r0, #128	; 0x80
 8000a1a:	2500      	movs	r5, #0
 8000a1c:	0300      	lsls	r0, r0, #12
 8000a1e:	e6e3      	b.n	80007e8 <__aeabi_dadd+0x2a4>
 8000a20:	1a5c      	subs	r4, r3, r1
 8000a22:	42a3      	cmp	r3, r4
 8000a24:	419b      	sbcs	r3, r3
 8000a26:	1bc7      	subs	r7, r0, r7
 8000a28:	425b      	negs	r3, r3
 8000a2a:	2601      	movs	r6, #1
 8000a2c:	1aff      	subs	r7, r7, r3
 8000a2e:	e5da      	b.n	80005e6 <__aeabi_dadd+0xa2>
 8000a30:	0742      	lsls	r2, r0, #29
 8000a32:	08db      	lsrs	r3, r3, #3
 8000a34:	4313      	orrs	r3, r2
 8000a36:	08c0      	lsrs	r0, r0, #3
 8000a38:	e6d2      	b.n	80007e0 <__aeabi_dadd+0x29c>
 8000a3a:	0742      	lsls	r2, r0, #29
 8000a3c:	08db      	lsrs	r3, r3, #3
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	08c0      	lsrs	r0, r0, #3
 8000a42:	e6ac      	b.n	800079e <__aeabi_dadd+0x25a>
 8000a44:	4643      	mov	r3, r8
 8000a46:	4642      	mov	r2, r8
 8000a48:	08c9      	lsrs	r1, r1, #3
 8000a4a:	075b      	lsls	r3, r3, #29
 8000a4c:	4655      	mov	r5, sl
 8000a4e:	430b      	orrs	r3, r1
 8000a50:	08d0      	lsrs	r0, r2, #3
 8000a52:	e6c5      	b.n	80007e0 <__aeabi_dadd+0x29c>
 8000a54:	4643      	mov	r3, r8
 8000a56:	4642      	mov	r2, r8
 8000a58:	075b      	lsls	r3, r3, #29
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	430b      	orrs	r3, r1
 8000a5e:	08d0      	lsrs	r0, r2, #3
 8000a60:	e6be      	b.n	80007e0 <__aeabi_dadd+0x29c>
 8000a62:	4303      	orrs	r3, r0
 8000a64:	001c      	movs	r4, r3
 8000a66:	1e63      	subs	r3, r4, #1
 8000a68:	419c      	sbcs	r4, r3
 8000a6a:	e6fc      	b.n	8000866 <__aeabi_dadd+0x322>
 8000a6c:	0002      	movs	r2, r0
 8000a6e:	3c20      	subs	r4, #32
 8000a70:	40e2      	lsrs	r2, r4
 8000a72:	0014      	movs	r4, r2
 8000a74:	4662      	mov	r2, ip
 8000a76:	2a20      	cmp	r2, #32
 8000a78:	d003      	beq.n	8000a82 <__aeabi_dadd+0x53e>
 8000a7a:	2540      	movs	r5, #64	; 0x40
 8000a7c:	1aad      	subs	r5, r5, r2
 8000a7e:	40a8      	lsls	r0, r5
 8000a80:	4303      	orrs	r3, r0
 8000a82:	1e58      	subs	r0, r3, #1
 8000a84:	4183      	sbcs	r3, r0
 8000a86:	4323      	orrs	r3, r4
 8000a88:	e775      	b.n	8000976 <__aeabi_dadd+0x432>
 8000a8a:	2a00      	cmp	r2, #0
 8000a8c:	d0e2      	beq.n	8000a54 <__aeabi_dadd+0x510>
 8000a8e:	003a      	movs	r2, r7
 8000a90:	430a      	orrs	r2, r1
 8000a92:	d0cd      	beq.n	8000a30 <__aeabi_dadd+0x4ec>
 8000a94:	0742      	lsls	r2, r0, #29
 8000a96:	08db      	lsrs	r3, r3, #3
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	2280      	movs	r2, #128	; 0x80
 8000a9c:	08c0      	lsrs	r0, r0, #3
 8000a9e:	0312      	lsls	r2, r2, #12
 8000aa0:	4210      	tst	r0, r2
 8000aa2:	d006      	beq.n	8000ab2 <__aeabi_dadd+0x56e>
 8000aa4:	08fc      	lsrs	r4, r7, #3
 8000aa6:	4214      	tst	r4, r2
 8000aa8:	d103      	bne.n	8000ab2 <__aeabi_dadd+0x56e>
 8000aaa:	0020      	movs	r0, r4
 8000aac:	08cb      	lsrs	r3, r1, #3
 8000aae:	077a      	lsls	r2, r7, #29
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	0f5a      	lsrs	r2, r3, #29
 8000ab4:	00db      	lsls	r3, r3, #3
 8000ab6:	0752      	lsls	r2, r2, #29
 8000ab8:	08db      	lsrs	r3, r3, #3
 8000aba:	4313      	orrs	r3, r2
 8000abc:	e690      	b.n	80007e0 <__aeabi_dadd+0x29c>
 8000abe:	4643      	mov	r3, r8
 8000ac0:	430b      	orrs	r3, r1
 8000ac2:	d100      	bne.n	8000ac6 <__aeabi_dadd+0x582>
 8000ac4:	e709      	b.n	80008da <__aeabi_dadd+0x396>
 8000ac6:	4643      	mov	r3, r8
 8000ac8:	4642      	mov	r2, r8
 8000aca:	08c9      	lsrs	r1, r1, #3
 8000acc:	075b      	lsls	r3, r3, #29
 8000ace:	4655      	mov	r5, sl
 8000ad0:	430b      	orrs	r3, r1
 8000ad2:	08d0      	lsrs	r0, r2, #3
 8000ad4:	e666      	b.n	80007a4 <__aeabi_dadd+0x260>
 8000ad6:	1acc      	subs	r4, r1, r3
 8000ad8:	42a1      	cmp	r1, r4
 8000ada:	4189      	sbcs	r1, r1
 8000adc:	1a3f      	subs	r7, r7, r0
 8000ade:	4249      	negs	r1, r1
 8000ae0:	4655      	mov	r5, sl
 8000ae2:	2601      	movs	r6, #1
 8000ae4:	1a7f      	subs	r7, r7, r1
 8000ae6:	e57e      	b.n	80005e6 <__aeabi_dadd+0xa2>
 8000ae8:	4642      	mov	r2, r8
 8000aea:	1a5c      	subs	r4, r3, r1
 8000aec:	1a87      	subs	r7, r0, r2
 8000aee:	42a3      	cmp	r3, r4
 8000af0:	4192      	sbcs	r2, r2
 8000af2:	4252      	negs	r2, r2
 8000af4:	1abf      	subs	r7, r7, r2
 8000af6:	023a      	lsls	r2, r7, #8
 8000af8:	d53d      	bpl.n	8000b76 <__aeabi_dadd+0x632>
 8000afa:	1acc      	subs	r4, r1, r3
 8000afc:	42a1      	cmp	r1, r4
 8000afe:	4189      	sbcs	r1, r1
 8000b00:	4643      	mov	r3, r8
 8000b02:	4249      	negs	r1, r1
 8000b04:	1a1f      	subs	r7, r3, r0
 8000b06:	4655      	mov	r5, sl
 8000b08:	1a7f      	subs	r7, r7, r1
 8000b0a:	e595      	b.n	8000638 <__aeabi_dadd+0xf4>
 8000b0c:	077b      	lsls	r3, r7, #29
 8000b0e:	08c9      	lsrs	r1, r1, #3
 8000b10:	430b      	orrs	r3, r1
 8000b12:	08f8      	lsrs	r0, r7, #3
 8000b14:	e643      	b.n	800079e <__aeabi_dadd+0x25a>
 8000b16:	4644      	mov	r4, r8
 8000b18:	08db      	lsrs	r3, r3, #3
 8000b1a:	430c      	orrs	r4, r1
 8000b1c:	d130      	bne.n	8000b80 <__aeabi_dadd+0x63c>
 8000b1e:	0742      	lsls	r2, r0, #29
 8000b20:	4313      	orrs	r3, r2
 8000b22:	08c0      	lsrs	r0, r0, #3
 8000b24:	e65c      	b.n	80007e0 <__aeabi_dadd+0x29c>
 8000b26:	077b      	lsls	r3, r7, #29
 8000b28:	08c9      	lsrs	r1, r1, #3
 8000b2a:	430b      	orrs	r3, r1
 8000b2c:	08f8      	lsrs	r0, r7, #3
 8000b2e:	e639      	b.n	80007a4 <__aeabi_dadd+0x260>
 8000b30:	185c      	adds	r4, r3, r1
 8000b32:	429c      	cmp	r4, r3
 8000b34:	419b      	sbcs	r3, r3
 8000b36:	4440      	add	r0, r8
 8000b38:	425b      	negs	r3, r3
 8000b3a:	18c7      	adds	r7, r0, r3
 8000b3c:	023b      	lsls	r3, r7, #8
 8000b3e:	d400      	bmi.n	8000b42 <__aeabi_dadd+0x5fe>
 8000b40:	e625      	b.n	800078e <__aeabi_dadd+0x24a>
 8000b42:	4b1d      	ldr	r3, [pc, #116]	; (8000bb8 <__aeabi_dadd+0x674>)
 8000b44:	2601      	movs	r6, #1
 8000b46:	401f      	ands	r7, r3
 8000b48:	e621      	b.n	800078e <__aeabi_dadd+0x24a>
 8000b4a:	0004      	movs	r4, r0
 8000b4c:	3a20      	subs	r2, #32
 8000b4e:	40d4      	lsrs	r4, r2
 8000b50:	4662      	mov	r2, ip
 8000b52:	2a20      	cmp	r2, #32
 8000b54:	d004      	beq.n	8000b60 <__aeabi_dadd+0x61c>
 8000b56:	2240      	movs	r2, #64	; 0x40
 8000b58:	4666      	mov	r6, ip
 8000b5a:	1b92      	subs	r2, r2, r6
 8000b5c:	4090      	lsls	r0, r2
 8000b5e:	4303      	orrs	r3, r0
 8000b60:	1e5a      	subs	r2, r3, #1
 8000b62:	4193      	sbcs	r3, r2
 8000b64:	431c      	orrs	r4, r3
 8000b66:	e67e      	b.n	8000866 <__aeabi_dadd+0x322>
 8000b68:	185c      	adds	r4, r3, r1
 8000b6a:	428c      	cmp	r4, r1
 8000b6c:	4189      	sbcs	r1, r1
 8000b6e:	4440      	add	r0, r8
 8000b70:	4249      	negs	r1, r1
 8000b72:	1847      	adds	r7, r0, r1
 8000b74:	e6dd      	b.n	8000932 <__aeabi_dadd+0x3ee>
 8000b76:	0023      	movs	r3, r4
 8000b78:	433b      	orrs	r3, r7
 8000b7a:	d100      	bne.n	8000b7e <__aeabi_dadd+0x63a>
 8000b7c:	e6ad      	b.n	80008da <__aeabi_dadd+0x396>
 8000b7e:	e606      	b.n	800078e <__aeabi_dadd+0x24a>
 8000b80:	0744      	lsls	r4, r0, #29
 8000b82:	4323      	orrs	r3, r4
 8000b84:	2480      	movs	r4, #128	; 0x80
 8000b86:	08c0      	lsrs	r0, r0, #3
 8000b88:	0324      	lsls	r4, r4, #12
 8000b8a:	4220      	tst	r0, r4
 8000b8c:	d008      	beq.n	8000ba0 <__aeabi_dadd+0x65c>
 8000b8e:	4642      	mov	r2, r8
 8000b90:	08d6      	lsrs	r6, r2, #3
 8000b92:	4226      	tst	r6, r4
 8000b94:	d104      	bne.n	8000ba0 <__aeabi_dadd+0x65c>
 8000b96:	4655      	mov	r5, sl
 8000b98:	0030      	movs	r0, r6
 8000b9a:	08cb      	lsrs	r3, r1, #3
 8000b9c:	0751      	lsls	r1, r2, #29
 8000b9e:	430b      	orrs	r3, r1
 8000ba0:	0f5a      	lsrs	r2, r3, #29
 8000ba2:	00db      	lsls	r3, r3, #3
 8000ba4:	08db      	lsrs	r3, r3, #3
 8000ba6:	0752      	lsls	r2, r2, #29
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	e619      	b.n	80007e0 <__aeabi_dadd+0x29c>
 8000bac:	2300      	movs	r3, #0
 8000bae:	4a01      	ldr	r2, [pc, #4]	; (8000bb4 <__aeabi_dadd+0x670>)
 8000bb0:	001f      	movs	r7, r3
 8000bb2:	e55e      	b.n	8000672 <__aeabi_dadd+0x12e>
 8000bb4:	000007ff 	.word	0x000007ff
 8000bb8:	ff7fffff 	.word	0xff7fffff

08000bbc <__aeabi_ddiv>:
 8000bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bbe:	4657      	mov	r7, sl
 8000bc0:	464e      	mov	r6, r9
 8000bc2:	4645      	mov	r5, r8
 8000bc4:	46de      	mov	lr, fp
 8000bc6:	b5e0      	push	{r5, r6, r7, lr}
 8000bc8:	4681      	mov	r9, r0
 8000bca:	0005      	movs	r5, r0
 8000bcc:	030c      	lsls	r4, r1, #12
 8000bce:	0048      	lsls	r0, r1, #1
 8000bd0:	4692      	mov	sl, r2
 8000bd2:	001f      	movs	r7, r3
 8000bd4:	b085      	sub	sp, #20
 8000bd6:	0b24      	lsrs	r4, r4, #12
 8000bd8:	0d40      	lsrs	r0, r0, #21
 8000bda:	0fce      	lsrs	r6, r1, #31
 8000bdc:	2800      	cmp	r0, #0
 8000bde:	d100      	bne.n	8000be2 <__aeabi_ddiv+0x26>
 8000be0:	e156      	b.n	8000e90 <__aeabi_ddiv+0x2d4>
 8000be2:	4bd4      	ldr	r3, [pc, #848]	; (8000f34 <__aeabi_ddiv+0x378>)
 8000be4:	4298      	cmp	r0, r3
 8000be6:	d100      	bne.n	8000bea <__aeabi_ddiv+0x2e>
 8000be8:	e172      	b.n	8000ed0 <__aeabi_ddiv+0x314>
 8000bea:	0f6b      	lsrs	r3, r5, #29
 8000bec:	00e4      	lsls	r4, r4, #3
 8000bee:	431c      	orrs	r4, r3
 8000bf0:	2380      	movs	r3, #128	; 0x80
 8000bf2:	041b      	lsls	r3, r3, #16
 8000bf4:	4323      	orrs	r3, r4
 8000bf6:	4698      	mov	r8, r3
 8000bf8:	4bcf      	ldr	r3, [pc, #828]	; (8000f38 <__aeabi_ddiv+0x37c>)
 8000bfa:	00ed      	lsls	r5, r5, #3
 8000bfc:	469b      	mov	fp, r3
 8000bfe:	2300      	movs	r3, #0
 8000c00:	4699      	mov	r9, r3
 8000c02:	4483      	add	fp, r0
 8000c04:	9300      	str	r3, [sp, #0]
 8000c06:	033c      	lsls	r4, r7, #12
 8000c08:	007b      	lsls	r3, r7, #1
 8000c0a:	4650      	mov	r0, sl
 8000c0c:	0b24      	lsrs	r4, r4, #12
 8000c0e:	0d5b      	lsrs	r3, r3, #21
 8000c10:	0fff      	lsrs	r7, r7, #31
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d100      	bne.n	8000c18 <__aeabi_ddiv+0x5c>
 8000c16:	e11f      	b.n	8000e58 <__aeabi_ddiv+0x29c>
 8000c18:	4ac6      	ldr	r2, [pc, #792]	; (8000f34 <__aeabi_ddiv+0x378>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_ddiv+0x64>
 8000c1e:	e162      	b.n	8000ee6 <__aeabi_ddiv+0x32a>
 8000c20:	49c5      	ldr	r1, [pc, #788]	; (8000f38 <__aeabi_ddiv+0x37c>)
 8000c22:	0f42      	lsrs	r2, r0, #29
 8000c24:	468c      	mov	ip, r1
 8000c26:	00e4      	lsls	r4, r4, #3
 8000c28:	4659      	mov	r1, fp
 8000c2a:	4314      	orrs	r4, r2
 8000c2c:	2280      	movs	r2, #128	; 0x80
 8000c2e:	4463      	add	r3, ip
 8000c30:	0412      	lsls	r2, r2, #16
 8000c32:	1acb      	subs	r3, r1, r3
 8000c34:	4314      	orrs	r4, r2
 8000c36:	469b      	mov	fp, r3
 8000c38:	00c2      	lsls	r2, r0, #3
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	0033      	movs	r3, r6
 8000c3e:	407b      	eors	r3, r7
 8000c40:	469a      	mov	sl, r3
 8000c42:	464b      	mov	r3, r9
 8000c44:	2b0f      	cmp	r3, #15
 8000c46:	d827      	bhi.n	8000c98 <__aeabi_ddiv+0xdc>
 8000c48:	49bc      	ldr	r1, [pc, #752]	; (8000f3c <__aeabi_ddiv+0x380>)
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	58cb      	ldr	r3, [r1, r3]
 8000c4e:	469f      	mov	pc, r3
 8000c50:	46b2      	mov	sl, r6
 8000c52:	9b00      	ldr	r3, [sp, #0]
 8000c54:	2b02      	cmp	r3, #2
 8000c56:	d016      	beq.n	8000c86 <__aeabi_ddiv+0xca>
 8000c58:	2b03      	cmp	r3, #3
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_ddiv+0xa2>
 8000c5c:	e28e      	b.n	800117c <__aeabi_ddiv+0x5c0>
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d000      	beq.n	8000c64 <__aeabi_ddiv+0xa8>
 8000c62:	e0d9      	b.n	8000e18 <__aeabi_ddiv+0x25c>
 8000c64:	2300      	movs	r3, #0
 8000c66:	2400      	movs	r4, #0
 8000c68:	2500      	movs	r5, #0
 8000c6a:	4652      	mov	r2, sl
 8000c6c:	051b      	lsls	r3, r3, #20
 8000c6e:	4323      	orrs	r3, r4
 8000c70:	07d2      	lsls	r2, r2, #31
 8000c72:	4313      	orrs	r3, r2
 8000c74:	0028      	movs	r0, r5
 8000c76:	0019      	movs	r1, r3
 8000c78:	b005      	add	sp, #20
 8000c7a:	bcf0      	pop	{r4, r5, r6, r7}
 8000c7c:	46bb      	mov	fp, r7
 8000c7e:	46b2      	mov	sl, r6
 8000c80:	46a9      	mov	r9, r5
 8000c82:	46a0      	mov	r8, r4
 8000c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c86:	2400      	movs	r4, #0
 8000c88:	2500      	movs	r5, #0
 8000c8a:	4baa      	ldr	r3, [pc, #680]	; (8000f34 <__aeabi_ddiv+0x378>)
 8000c8c:	e7ed      	b.n	8000c6a <__aeabi_ddiv+0xae>
 8000c8e:	46ba      	mov	sl, r7
 8000c90:	46a0      	mov	r8, r4
 8000c92:	0015      	movs	r5, r2
 8000c94:	9000      	str	r0, [sp, #0]
 8000c96:	e7dc      	b.n	8000c52 <__aeabi_ddiv+0x96>
 8000c98:	4544      	cmp	r4, r8
 8000c9a:	d200      	bcs.n	8000c9e <__aeabi_ddiv+0xe2>
 8000c9c:	e1c7      	b.n	800102e <__aeabi_ddiv+0x472>
 8000c9e:	d100      	bne.n	8000ca2 <__aeabi_ddiv+0xe6>
 8000ca0:	e1c2      	b.n	8001028 <__aeabi_ddiv+0x46c>
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	425b      	negs	r3, r3
 8000ca6:	469c      	mov	ip, r3
 8000ca8:	002e      	movs	r6, r5
 8000caa:	4640      	mov	r0, r8
 8000cac:	2500      	movs	r5, #0
 8000cae:	44e3      	add	fp, ip
 8000cb0:	0223      	lsls	r3, r4, #8
 8000cb2:	0e14      	lsrs	r4, r2, #24
 8000cb4:	431c      	orrs	r4, r3
 8000cb6:	0c1b      	lsrs	r3, r3, #16
 8000cb8:	4699      	mov	r9, r3
 8000cba:	0423      	lsls	r3, r4, #16
 8000cbc:	0c1f      	lsrs	r7, r3, #16
 8000cbe:	0212      	lsls	r2, r2, #8
 8000cc0:	4649      	mov	r1, r9
 8000cc2:	9200      	str	r2, [sp, #0]
 8000cc4:	9701      	str	r7, [sp, #4]
 8000cc6:	f7ff faa5 	bl	8000214 <__aeabi_uidivmod>
 8000cca:	0002      	movs	r2, r0
 8000ccc:	437a      	muls	r2, r7
 8000cce:	040b      	lsls	r3, r1, #16
 8000cd0:	0c31      	lsrs	r1, r6, #16
 8000cd2:	4680      	mov	r8, r0
 8000cd4:	4319      	orrs	r1, r3
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	d907      	bls.n	8000cea <__aeabi_ddiv+0x12e>
 8000cda:	2301      	movs	r3, #1
 8000cdc:	425b      	negs	r3, r3
 8000cde:	469c      	mov	ip, r3
 8000ce0:	1909      	adds	r1, r1, r4
 8000ce2:	44e0      	add	r8, ip
 8000ce4:	428c      	cmp	r4, r1
 8000ce6:	d800      	bhi.n	8000cea <__aeabi_ddiv+0x12e>
 8000ce8:	e207      	b.n	80010fa <__aeabi_ddiv+0x53e>
 8000cea:	1a88      	subs	r0, r1, r2
 8000cec:	4649      	mov	r1, r9
 8000cee:	f7ff fa91 	bl	8000214 <__aeabi_uidivmod>
 8000cf2:	0409      	lsls	r1, r1, #16
 8000cf4:	468c      	mov	ip, r1
 8000cf6:	0431      	lsls	r1, r6, #16
 8000cf8:	4666      	mov	r6, ip
 8000cfa:	9a01      	ldr	r2, [sp, #4]
 8000cfc:	0c09      	lsrs	r1, r1, #16
 8000cfe:	4342      	muls	r2, r0
 8000d00:	0003      	movs	r3, r0
 8000d02:	4331      	orrs	r1, r6
 8000d04:	428a      	cmp	r2, r1
 8000d06:	d904      	bls.n	8000d12 <__aeabi_ddiv+0x156>
 8000d08:	1909      	adds	r1, r1, r4
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	428c      	cmp	r4, r1
 8000d0e:	d800      	bhi.n	8000d12 <__aeabi_ddiv+0x156>
 8000d10:	e1ed      	b.n	80010ee <__aeabi_ddiv+0x532>
 8000d12:	1a88      	subs	r0, r1, r2
 8000d14:	4642      	mov	r2, r8
 8000d16:	0412      	lsls	r2, r2, #16
 8000d18:	431a      	orrs	r2, r3
 8000d1a:	4690      	mov	r8, r2
 8000d1c:	4641      	mov	r1, r8
 8000d1e:	9b00      	ldr	r3, [sp, #0]
 8000d20:	040e      	lsls	r6, r1, #16
 8000d22:	0c1b      	lsrs	r3, r3, #16
 8000d24:	001f      	movs	r7, r3
 8000d26:	9302      	str	r3, [sp, #8]
 8000d28:	9b00      	ldr	r3, [sp, #0]
 8000d2a:	0c36      	lsrs	r6, r6, #16
 8000d2c:	041b      	lsls	r3, r3, #16
 8000d2e:	0c19      	lsrs	r1, r3, #16
 8000d30:	000b      	movs	r3, r1
 8000d32:	4373      	muls	r3, r6
 8000d34:	0c12      	lsrs	r2, r2, #16
 8000d36:	437e      	muls	r6, r7
 8000d38:	9103      	str	r1, [sp, #12]
 8000d3a:	4351      	muls	r1, r2
 8000d3c:	437a      	muls	r2, r7
 8000d3e:	0c1f      	lsrs	r7, r3, #16
 8000d40:	46bc      	mov	ip, r7
 8000d42:	1876      	adds	r6, r6, r1
 8000d44:	4466      	add	r6, ip
 8000d46:	42b1      	cmp	r1, r6
 8000d48:	d903      	bls.n	8000d52 <__aeabi_ddiv+0x196>
 8000d4a:	2180      	movs	r1, #128	; 0x80
 8000d4c:	0249      	lsls	r1, r1, #9
 8000d4e:	468c      	mov	ip, r1
 8000d50:	4462      	add	r2, ip
 8000d52:	0c31      	lsrs	r1, r6, #16
 8000d54:	188a      	adds	r2, r1, r2
 8000d56:	0431      	lsls	r1, r6, #16
 8000d58:	041e      	lsls	r6, r3, #16
 8000d5a:	0c36      	lsrs	r6, r6, #16
 8000d5c:	198e      	adds	r6, r1, r6
 8000d5e:	4290      	cmp	r0, r2
 8000d60:	d302      	bcc.n	8000d68 <__aeabi_ddiv+0x1ac>
 8000d62:	d112      	bne.n	8000d8a <__aeabi_ddiv+0x1ce>
 8000d64:	42b5      	cmp	r5, r6
 8000d66:	d210      	bcs.n	8000d8a <__aeabi_ddiv+0x1ce>
 8000d68:	4643      	mov	r3, r8
 8000d6a:	1e59      	subs	r1, r3, #1
 8000d6c:	9b00      	ldr	r3, [sp, #0]
 8000d6e:	469c      	mov	ip, r3
 8000d70:	4465      	add	r5, ip
 8000d72:	001f      	movs	r7, r3
 8000d74:	429d      	cmp	r5, r3
 8000d76:	419b      	sbcs	r3, r3
 8000d78:	425b      	negs	r3, r3
 8000d7a:	191b      	adds	r3, r3, r4
 8000d7c:	18c0      	adds	r0, r0, r3
 8000d7e:	4284      	cmp	r4, r0
 8000d80:	d200      	bcs.n	8000d84 <__aeabi_ddiv+0x1c8>
 8000d82:	e1a0      	b.n	80010c6 <__aeabi_ddiv+0x50a>
 8000d84:	d100      	bne.n	8000d88 <__aeabi_ddiv+0x1cc>
 8000d86:	e19b      	b.n	80010c0 <__aeabi_ddiv+0x504>
 8000d88:	4688      	mov	r8, r1
 8000d8a:	1bae      	subs	r6, r5, r6
 8000d8c:	42b5      	cmp	r5, r6
 8000d8e:	41ad      	sbcs	r5, r5
 8000d90:	1a80      	subs	r0, r0, r2
 8000d92:	426d      	negs	r5, r5
 8000d94:	1b40      	subs	r0, r0, r5
 8000d96:	4284      	cmp	r4, r0
 8000d98:	d100      	bne.n	8000d9c <__aeabi_ddiv+0x1e0>
 8000d9a:	e1d5      	b.n	8001148 <__aeabi_ddiv+0x58c>
 8000d9c:	4649      	mov	r1, r9
 8000d9e:	f7ff fa39 	bl	8000214 <__aeabi_uidivmod>
 8000da2:	9a01      	ldr	r2, [sp, #4]
 8000da4:	040b      	lsls	r3, r1, #16
 8000da6:	4342      	muls	r2, r0
 8000da8:	0c31      	lsrs	r1, r6, #16
 8000daa:	0005      	movs	r5, r0
 8000dac:	4319      	orrs	r1, r3
 8000dae:	428a      	cmp	r2, r1
 8000db0:	d900      	bls.n	8000db4 <__aeabi_ddiv+0x1f8>
 8000db2:	e16c      	b.n	800108e <__aeabi_ddiv+0x4d2>
 8000db4:	1a88      	subs	r0, r1, r2
 8000db6:	4649      	mov	r1, r9
 8000db8:	f7ff fa2c 	bl	8000214 <__aeabi_uidivmod>
 8000dbc:	9a01      	ldr	r2, [sp, #4]
 8000dbe:	0436      	lsls	r6, r6, #16
 8000dc0:	4342      	muls	r2, r0
 8000dc2:	0409      	lsls	r1, r1, #16
 8000dc4:	0c36      	lsrs	r6, r6, #16
 8000dc6:	0003      	movs	r3, r0
 8000dc8:	430e      	orrs	r6, r1
 8000dca:	42b2      	cmp	r2, r6
 8000dcc:	d900      	bls.n	8000dd0 <__aeabi_ddiv+0x214>
 8000dce:	e153      	b.n	8001078 <__aeabi_ddiv+0x4bc>
 8000dd0:	9803      	ldr	r0, [sp, #12]
 8000dd2:	1ab6      	subs	r6, r6, r2
 8000dd4:	0002      	movs	r2, r0
 8000dd6:	042d      	lsls	r5, r5, #16
 8000dd8:	431d      	orrs	r5, r3
 8000dda:	9f02      	ldr	r7, [sp, #8]
 8000ddc:	042b      	lsls	r3, r5, #16
 8000dde:	0c1b      	lsrs	r3, r3, #16
 8000de0:	435a      	muls	r2, r3
 8000de2:	437b      	muls	r3, r7
 8000de4:	469c      	mov	ip, r3
 8000de6:	0c29      	lsrs	r1, r5, #16
 8000de8:	4348      	muls	r0, r1
 8000dea:	0c13      	lsrs	r3, r2, #16
 8000dec:	4484      	add	ip, r0
 8000dee:	4463      	add	r3, ip
 8000df0:	4379      	muls	r1, r7
 8000df2:	4298      	cmp	r0, r3
 8000df4:	d903      	bls.n	8000dfe <__aeabi_ddiv+0x242>
 8000df6:	2080      	movs	r0, #128	; 0x80
 8000df8:	0240      	lsls	r0, r0, #9
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	4461      	add	r1, ip
 8000dfe:	0c18      	lsrs	r0, r3, #16
 8000e00:	0412      	lsls	r2, r2, #16
 8000e02:	041b      	lsls	r3, r3, #16
 8000e04:	0c12      	lsrs	r2, r2, #16
 8000e06:	1841      	adds	r1, r0, r1
 8000e08:	189b      	adds	r3, r3, r2
 8000e0a:	428e      	cmp	r6, r1
 8000e0c:	d200      	bcs.n	8000e10 <__aeabi_ddiv+0x254>
 8000e0e:	e0ff      	b.n	8001010 <__aeabi_ddiv+0x454>
 8000e10:	d100      	bne.n	8000e14 <__aeabi_ddiv+0x258>
 8000e12:	e0fa      	b.n	800100a <__aeabi_ddiv+0x44e>
 8000e14:	2301      	movs	r3, #1
 8000e16:	431d      	orrs	r5, r3
 8000e18:	4a49      	ldr	r2, [pc, #292]	; (8000f40 <__aeabi_ddiv+0x384>)
 8000e1a:	445a      	add	r2, fp
 8000e1c:	2a00      	cmp	r2, #0
 8000e1e:	dc00      	bgt.n	8000e22 <__aeabi_ddiv+0x266>
 8000e20:	e0aa      	b.n	8000f78 <__aeabi_ddiv+0x3bc>
 8000e22:	076b      	lsls	r3, r5, #29
 8000e24:	d000      	beq.n	8000e28 <__aeabi_ddiv+0x26c>
 8000e26:	e13d      	b.n	80010a4 <__aeabi_ddiv+0x4e8>
 8000e28:	08ed      	lsrs	r5, r5, #3
 8000e2a:	4643      	mov	r3, r8
 8000e2c:	01db      	lsls	r3, r3, #7
 8000e2e:	d506      	bpl.n	8000e3e <__aeabi_ddiv+0x282>
 8000e30:	4642      	mov	r2, r8
 8000e32:	4b44      	ldr	r3, [pc, #272]	; (8000f44 <__aeabi_ddiv+0x388>)
 8000e34:	401a      	ands	r2, r3
 8000e36:	4690      	mov	r8, r2
 8000e38:	2280      	movs	r2, #128	; 0x80
 8000e3a:	00d2      	lsls	r2, r2, #3
 8000e3c:	445a      	add	r2, fp
 8000e3e:	4b42      	ldr	r3, [pc, #264]	; (8000f48 <__aeabi_ddiv+0x38c>)
 8000e40:	429a      	cmp	r2, r3
 8000e42:	dd00      	ble.n	8000e46 <__aeabi_ddiv+0x28a>
 8000e44:	e71f      	b.n	8000c86 <__aeabi_ddiv+0xca>
 8000e46:	4643      	mov	r3, r8
 8000e48:	075b      	lsls	r3, r3, #29
 8000e4a:	431d      	orrs	r5, r3
 8000e4c:	4643      	mov	r3, r8
 8000e4e:	0552      	lsls	r2, r2, #21
 8000e50:	025c      	lsls	r4, r3, #9
 8000e52:	0b24      	lsrs	r4, r4, #12
 8000e54:	0d53      	lsrs	r3, r2, #21
 8000e56:	e708      	b.n	8000c6a <__aeabi_ddiv+0xae>
 8000e58:	4652      	mov	r2, sl
 8000e5a:	4322      	orrs	r2, r4
 8000e5c:	d100      	bne.n	8000e60 <__aeabi_ddiv+0x2a4>
 8000e5e:	e07b      	b.n	8000f58 <__aeabi_ddiv+0x39c>
 8000e60:	2c00      	cmp	r4, #0
 8000e62:	d100      	bne.n	8000e66 <__aeabi_ddiv+0x2aa>
 8000e64:	e0fa      	b.n	800105c <__aeabi_ddiv+0x4a0>
 8000e66:	0020      	movs	r0, r4
 8000e68:	f000 fe1c 	bl	8001aa4 <__clzsi2>
 8000e6c:	0002      	movs	r2, r0
 8000e6e:	3a0b      	subs	r2, #11
 8000e70:	231d      	movs	r3, #29
 8000e72:	0001      	movs	r1, r0
 8000e74:	1a9b      	subs	r3, r3, r2
 8000e76:	4652      	mov	r2, sl
 8000e78:	3908      	subs	r1, #8
 8000e7a:	40da      	lsrs	r2, r3
 8000e7c:	408c      	lsls	r4, r1
 8000e7e:	4314      	orrs	r4, r2
 8000e80:	4652      	mov	r2, sl
 8000e82:	408a      	lsls	r2, r1
 8000e84:	4b31      	ldr	r3, [pc, #196]	; (8000f4c <__aeabi_ddiv+0x390>)
 8000e86:	4458      	add	r0, fp
 8000e88:	469b      	mov	fp, r3
 8000e8a:	4483      	add	fp, r0
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	e6d5      	b.n	8000c3c <__aeabi_ddiv+0x80>
 8000e90:	464b      	mov	r3, r9
 8000e92:	4323      	orrs	r3, r4
 8000e94:	4698      	mov	r8, r3
 8000e96:	d044      	beq.n	8000f22 <__aeabi_ddiv+0x366>
 8000e98:	2c00      	cmp	r4, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0x2e2>
 8000e9c:	e0ce      	b.n	800103c <__aeabi_ddiv+0x480>
 8000e9e:	0020      	movs	r0, r4
 8000ea0:	f000 fe00 	bl	8001aa4 <__clzsi2>
 8000ea4:	0001      	movs	r1, r0
 8000ea6:	0002      	movs	r2, r0
 8000ea8:	390b      	subs	r1, #11
 8000eaa:	231d      	movs	r3, #29
 8000eac:	1a5b      	subs	r3, r3, r1
 8000eae:	4649      	mov	r1, r9
 8000eb0:	0010      	movs	r0, r2
 8000eb2:	40d9      	lsrs	r1, r3
 8000eb4:	3808      	subs	r0, #8
 8000eb6:	4084      	lsls	r4, r0
 8000eb8:	000b      	movs	r3, r1
 8000eba:	464d      	mov	r5, r9
 8000ebc:	4323      	orrs	r3, r4
 8000ebe:	4698      	mov	r8, r3
 8000ec0:	4085      	lsls	r5, r0
 8000ec2:	4823      	ldr	r0, [pc, #140]	; (8000f50 <__aeabi_ddiv+0x394>)
 8000ec4:	1a83      	subs	r3, r0, r2
 8000ec6:	469b      	mov	fp, r3
 8000ec8:	2300      	movs	r3, #0
 8000eca:	4699      	mov	r9, r3
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	e69a      	b.n	8000c06 <__aeabi_ddiv+0x4a>
 8000ed0:	464b      	mov	r3, r9
 8000ed2:	4323      	orrs	r3, r4
 8000ed4:	4698      	mov	r8, r3
 8000ed6:	d11d      	bne.n	8000f14 <__aeabi_ddiv+0x358>
 8000ed8:	2308      	movs	r3, #8
 8000eda:	4699      	mov	r9, r3
 8000edc:	3b06      	subs	r3, #6
 8000ede:	2500      	movs	r5, #0
 8000ee0:	4683      	mov	fp, r0
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	e68f      	b.n	8000c06 <__aeabi_ddiv+0x4a>
 8000ee6:	4652      	mov	r2, sl
 8000ee8:	4322      	orrs	r2, r4
 8000eea:	d109      	bne.n	8000f00 <__aeabi_ddiv+0x344>
 8000eec:	2302      	movs	r3, #2
 8000eee:	4649      	mov	r1, r9
 8000ef0:	4319      	orrs	r1, r3
 8000ef2:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <__aeabi_ddiv+0x398>)
 8000ef4:	4689      	mov	r9, r1
 8000ef6:	469c      	mov	ip, r3
 8000ef8:	2400      	movs	r4, #0
 8000efa:	2002      	movs	r0, #2
 8000efc:	44e3      	add	fp, ip
 8000efe:	e69d      	b.n	8000c3c <__aeabi_ddiv+0x80>
 8000f00:	2303      	movs	r3, #3
 8000f02:	464a      	mov	r2, r9
 8000f04:	431a      	orrs	r2, r3
 8000f06:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <__aeabi_ddiv+0x398>)
 8000f08:	4691      	mov	r9, r2
 8000f0a:	469c      	mov	ip, r3
 8000f0c:	4652      	mov	r2, sl
 8000f0e:	2003      	movs	r0, #3
 8000f10:	44e3      	add	fp, ip
 8000f12:	e693      	b.n	8000c3c <__aeabi_ddiv+0x80>
 8000f14:	230c      	movs	r3, #12
 8000f16:	4699      	mov	r9, r3
 8000f18:	3b09      	subs	r3, #9
 8000f1a:	46a0      	mov	r8, r4
 8000f1c:	4683      	mov	fp, r0
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	e671      	b.n	8000c06 <__aeabi_ddiv+0x4a>
 8000f22:	2304      	movs	r3, #4
 8000f24:	4699      	mov	r9, r3
 8000f26:	2300      	movs	r3, #0
 8000f28:	469b      	mov	fp, r3
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	2500      	movs	r5, #0
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	e669      	b.n	8000c06 <__aeabi_ddiv+0x4a>
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	000007ff 	.word	0x000007ff
 8000f38:	fffffc01 	.word	0xfffffc01
 8000f3c:	08003ec0 	.word	0x08003ec0
 8000f40:	000003ff 	.word	0x000003ff
 8000f44:	feffffff 	.word	0xfeffffff
 8000f48:	000007fe 	.word	0x000007fe
 8000f4c:	000003f3 	.word	0x000003f3
 8000f50:	fffffc0d 	.word	0xfffffc0d
 8000f54:	fffff801 	.word	0xfffff801
 8000f58:	4649      	mov	r1, r9
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	4319      	orrs	r1, r3
 8000f5e:	4689      	mov	r9, r1
 8000f60:	2400      	movs	r4, #0
 8000f62:	2001      	movs	r0, #1
 8000f64:	e66a      	b.n	8000c3c <__aeabi_ddiv+0x80>
 8000f66:	2300      	movs	r3, #0
 8000f68:	2480      	movs	r4, #128	; 0x80
 8000f6a:	469a      	mov	sl, r3
 8000f6c:	2500      	movs	r5, #0
 8000f6e:	4b8a      	ldr	r3, [pc, #552]	; (8001198 <__aeabi_ddiv+0x5dc>)
 8000f70:	0324      	lsls	r4, r4, #12
 8000f72:	e67a      	b.n	8000c6a <__aeabi_ddiv+0xae>
 8000f74:	2501      	movs	r5, #1
 8000f76:	426d      	negs	r5, r5
 8000f78:	2301      	movs	r3, #1
 8000f7a:	1a9b      	subs	r3, r3, r2
 8000f7c:	2b38      	cmp	r3, #56	; 0x38
 8000f7e:	dd00      	ble.n	8000f82 <__aeabi_ddiv+0x3c6>
 8000f80:	e670      	b.n	8000c64 <__aeabi_ddiv+0xa8>
 8000f82:	2b1f      	cmp	r3, #31
 8000f84:	dc00      	bgt.n	8000f88 <__aeabi_ddiv+0x3cc>
 8000f86:	e0bf      	b.n	8001108 <__aeabi_ddiv+0x54c>
 8000f88:	211f      	movs	r1, #31
 8000f8a:	4249      	negs	r1, r1
 8000f8c:	1a8a      	subs	r2, r1, r2
 8000f8e:	4641      	mov	r1, r8
 8000f90:	40d1      	lsrs	r1, r2
 8000f92:	000a      	movs	r2, r1
 8000f94:	2b20      	cmp	r3, #32
 8000f96:	d004      	beq.n	8000fa2 <__aeabi_ddiv+0x3e6>
 8000f98:	4641      	mov	r1, r8
 8000f9a:	4b80      	ldr	r3, [pc, #512]	; (800119c <__aeabi_ddiv+0x5e0>)
 8000f9c:	445b      	add	r3, fp
 8000f9e:	4099      	lsls	r1, r3
 8000fa0:	430d      	orrs	r5, r1
 8000fa2:	1e6b      	subs	r3, r5, #1
 8000fa4:	419d      	sbcs	r5, r3
 8000fa6:	2307      	movs	r3, #7
 8000fa8:	432a      	orrs	r2, r5
 8000faa:	001d      	movs	r5, r3
 8000fac:	2400      	movs	r4, #0
 8000fae:	4015      	ands	r5, r2
 8000fb0:	4213      	tst	r3, r2
 8000fb2:	d100      	bne.n	8000fb6 <__aeabi_ddiv+0x3fa>
 8000fb4:	e0d4      	b.n	8001160 <__aeabi_ddiv+0x5a4>
 8000fb6:	210f      	movs	r1, #15
 8000fb8:	2300      	movs	r3, #0
 8000fba:	4011      	ands	r1, r2
 8000fbc:	2904      	cmp	r1, #4
 8000fbe:	d100      	bne.n	8000fc2 <__aeabi_ddiv+0x406>
 8000fc0:	e0cb      	b.n	800115a <__aeabi_ddiv+0x59e>
 8000fc2:	1d11      	adds	r1, r2, #4
 8000fc4:	4291      	cmp	r1, r2
 8000fc6:	4192      	sbcs	r2, r2
 8000fc8:	4252      	negs	r2, r2
 8000fca:	189b      	adds	r3, r3, r2
 8000fcc:	000a      	movs	r2, r1
 8000fce:	0219      	lsls	r1, r3, #8
 8000fd0:	d400      	bmi.n	8000fd4 <__aeabi_ddiv+0x418>
 8000fd2:	e0c2      	b.n	800115a <__aeabi_ddiv+0x59e>
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	2400      	movs	r4, #0
 8000fd8:	2500      	movs	r5, #0
 8000fda:	e646      	b.n	8000c6a <__aeabi_ddiv+0xae>
 8000fdc:	2380      	movs	r3, #128	; 0x80
 8000fde:	4641      	mov	r1, r8
 8000fe0:	031b      	lsls	r3, r3, #12
 8000fe2:	4219      	tst	r1, r3
 8000fe4:	d008      	beq.n	8000ff8 <__aeabi_ddiv+0x43c>
 8000fe6:	421c      	tst	r4, r3
 8000fe8:	d106      	bne.n	8000ff8 <__aeabi_ddiv+0x43c>
 8000fea:	431c      	orrs	r4, r3
 8000fec:	0324      	lsls	r4, r4, #12
 8000fee:	46ba      	mov	sl, r7
 8000ff0:	0015      	movs	r5, r2
 8000ff2:	4b69      	ldr	r3, [pc, #420]	; (8001198 <__aeabi_ddiv+0x5dc>)
 8000ff4:	0b24      	lsrs	r4, r4, #12
 8000ff6:	e638      	b.n	8000c6a <__aeabi_ddiv+0xae>
 8000ff8:	2480      	movs	r4, #128	; 0x80
 8000ffa:	4643      	mov	r3, r8
 8000ffc:	0324      	lsls	r4, r4, #12
 8000ffe:	431c      	orrs	r4, r3
 8001000:	0324      	lsls	r4, r4, #12
 8001002:	46b2      	mov	sl, r6
 8001004:	4b64      	ldr	r3, [pc, #400]	; (8001198 <__aeabi_ddiv+0x5dc>)
 8001006:	0b24      	lsrs	r4, r4, #12
 8001008:	e62f      	b.n	8000c6a <__aeabi_ddiv+0xae>
 800100a:	2b00      	cmp	r3, #0
 800100c:	d100      	bne.n	8001010 <__aeabi_ddiv+0x454>
 800100e:	e703      	b.n	8000e18 <__aeabi_ddiv+0x25c>
 8001010:	19a6      	adds	r6, r4, r6
 8001012:	1e68      	subs	r0, r5, #1
 8001014:	42a6      	cmp	r6, r4
 8001016:	d200      	bcs.n	800101a <__aeabi_ddiv+0x45e>
 8001018:	e08d      	b.n	8001136 <__aeabi_ddiv+0x57a>
 800101a:	428e      	cmp	r6, r1
 800101c:	d200      	bcs.n	8001020 <__aeabi_ddiv+0x464>
 800101e:	e0a3      	b.n	8001168 <__aeabi_ddiv+0x5ac>
 8001020:	d100      	bne.n	8001024 <__aeabi_ddiv+0x468>
 8001022:	e0b3      	b.n	800118c <__aeabi_ddiv+0x5d0>
 8001024:	0005      	movs	r5, r0
 8001026:	e6f5      	b.n	8000e14 <__aeabi_ddiv+0x258>
 8001028:	42aa      	cmp	r2, r5
 800102a:	d900      	bls.n	800102e <__aeabi_ddiv+0x472>
 800102c:	e639      	b.n	8000ca2 <__aeabi_ddiv+0xe6>
 800102e:	4643      	mov	r3, r8
 8001030:	07de      	lsls	r6, r3, #31
 8001032:	0858      	lsrs	r0, r3, #1
 8001034:	086b      	lsrs	r3, r5, #1
 8001036:	431e      	orrs	r6, r3
 8001038:	07ed      	lsls	r5, r5, #31
 800103a:	e639      	b.n	8000cb0 <__aeabi_ddiv+0xf4>
 800103c:	4648      	mov	r0, r9
 800103e:	f000 fd31 	bl	8001aa4 <__clzsi2>
 8001042:	0001      	movs	r1, r0
 8001044:	0002      	movs	r2, r0
 8001046:	3115      	adds	r1, #21
 8001048:	3220      	adds	r2, #32
 800104a:	291c      	cmp	r1, #28
 800104c:	dc00      	bgt.n	8001050 <__aeabi_ddiv+0x494>
 800104e:	e72c      	b.n	8000eaa <__aeabi_ddiv+0x2ee>
 8001050:	464b      	mov	r3, r9
 8001052:	3808      	subs	r0, #8
 8001054:	4083      	lsls	r3, r0
 8001056:	2500      	movs	r5, #0
 8001058:	4698      	mov	r8, r3
 800105a:	e732      	b.n	8000ec2 <__aeabi_ddiv+0x306>
 800105c:	f000 fd22 	bl	8001aa4 <__clzsi2>
 8001060:	0003      	movs	r3, r0
 8001062:	001a      	movs	r2, r3
 8001064:	3215      	adds	r2, #21
 8001066:	3020      	adds	r0, #32
 8001068:	2a1c      	cmp	r2, #28
 800106a:	dc00      	bgt.n	800106e <__aeabi_ddiv+0x4b2>
 800106c:	e700      	b.n	8000e70 <__aeabi_ddiv+0x2b4>
 800106e:	4654      	mov	r4, sl
 8001070:	3b08      	subs	r3, #8
 8001072:	2200      	movs	r2, #0
 8001074:	409c      	lsls	r4, r3
 8001076:	e705      	b.n	8000e84 <__aeabi_ddiv+0x2c8>
 8001078:	1936      	adds	r6, r6, r4
 800107a:	3b01      	subs	r3, #1
 800107c:	42b4      	cmp	r4, r6
 800107e:	d900      	bls.n	8001082 <__aeabi_ddiv+0x4c6>
 8001080:	e6a6      	b.n	8000dd0 <__aeabi_ddiv+0x214>
 8001082:	42b2      	cmp	r2, r6
 8001084:	d800      	bhi.n	8001088 <__aeabi_ddiv+0x4cc>
 8001086:	e6a3      	b.n	8000dd0 <__aeabi_ddiv+0x214>
 8001088:	1e83      	subs	r3, r0, #2
 800108a:	1936      	adds	r6, r6, r4
 800108c:	e6a0      	b.n	8000dd0 <__aeabi_ddiv+0x214>
 800108e:	1909      	adds	r1, r1, r4
 8001090:	3d01      	subs	r5, #1
 8001092:	428c      	cmp	r4, r1
 8001094:	d900      	bls.n	8001098 <__aeabi_ddiv+0x4dc>
 8001096:	e68d      	b.n	8000db4 <__aeabi_ddiv+0x1f8>
 8001098:	428a      	cmp	r2, r1
 800109a:	d800      	bhi.n	800109e <__aeabi_ddiv+0x4e2>
 800109c:	e68a      	b.n	8000db4 <__aeabi_ddiv+0x1f8>
 800109e:	1e85      	subs	r5, r0, #2
 80010a0:	1909      	adds	r1, r1, r4
 80010a2:	e687      	b.n	8000db4 <__aeabi_ddiv+0x1f8>
 80010a4:	230f      	movs	r3, #15
 80010a6:	402b      	ands	r3, r5
 80010a8:	2b04      	cmp	r3, #4
 80010aa:	d100      	bne.n	80010ae <__aeabi_ddiv+0x4f2>
 80010ac:	e6bc      	b.n	8000e28 <__aeabi_ddiv+0x26c>
 80010ae:	2305      	movs	r3, #5
 80010b0:	425b      	negs	r3, r3
 80010b2:	42ab      	cmp	r3, r5
 80010b4:	419b      	sbcs	r3, r3
 80010b6:	3504      	adds	r5, #4
 80010b8:	425b      	negs	r3, r3
 80010ba:	08ed      	lsrs	r5, r5, #3
 80010bc:	4498      	add	r8, r3
 80010be:	e6b4      	b.n	8000e2a <__aeabi_ddiv+0x26e>
 80010c0:	42af      	cmp	r7, r5
 80010c2:	d900      	bls.n	80010c6 <__aeabi_ddiv+0x50a>
 80010c4:	e660      	b.n	8000d88 <__aeabi_ddiv+0x1cc>
 80010c6:	4282      	cmp	r2, r0
 80010c8:	d804      	bhi.n	80010d4 <__aeabi_ddiv+0x518>
 80010ca:	d000      	beq.n	80010ce <__aeabi_ddiv+0x512>
 80010cc:	e65c      	b.n	8000d88 <__aeabi_ddiv+0x1cc>
 80010ce:	42ae      	cmp	r6, r5
 80010d0:	d800      	bhi.n	80010d4 <__aeabi_ddiv+0x518>
 80010d2:	e659      	b.n	8000d88 <__aeabi_ddiv+0x1cc>
 80010d4:	2302      	movs	r3, #2
 80010d6:	425b      	negs	r3, r3
 80010d8:	469c      	mov	ip, r3
 80010da:	9b00      	ldr	r3, [sp, #0]
 80010dc:	44e0      	add	r8, ip
 80010de:	469c      	mov	ip, r3
 80010e0:	4465      	add	r5, ip
 80010e2:	429d      	cmp	r5, r3
 80010e4:	419b      	sbcs	r3, r3
 80010e6:	425b      	negs	r3, r3
 80010e8:	191b      	adds	r3, r3, r4
 80010ea:	18c0      	adds	r0, r0, r3
 80010ec:	e64d      	b.n	8000d8a <__aeabi_ddiv+0x1ce>
 80010ee:	428a      	cmp	r2, r1
 80010f0:	d800      	bhi.n	80010f4 <__aeabi_ddiv+0x538>
 80010f2:	e60e      	b.n	8000d12 <__aeabi_ddiv+0x156>
 80010f4:	1e83      	subs	r3, r0, #2
 80010f6:	1909      	adds	r1, r1, r4
 80010f8:	e60b      	b.n	8000d12 <__aeabi_ddiv+0x156>
 80010fa:	428a      	cmp	r2, r1
 80010fc:	d800      	bhi.n	8001100 <__aeabi_ddiv+0x544>
 80010fe:	e5f4      	b.n	8000cea <__aeabi_ddiv+0x12e>
 8001100:	1e83      	subs	r3, r0, #2
 8001102:	4698      	mov	r8, r3
 8001104:	1909      	adds	r1, r1, r4
 8001106:	e5f0      	b.n	8000cea <__aeabi_ddiv+0x12e>
 8001108:	4925      	ldr	r1, [pc, #148]	; (80011a0 <__aeabi_ddiv+0x5e4>)
 800110a:	0028      	movs	r0, r5
 800110c:	4459      	add	r1, fp
 800110e:	408d      	lsls	r5, r1
 8001110:	4642      	mov	r2, r8
 8001112:	408a      	lsls	r2, r1
 8001114:	1e69      	subs	r1, r5, #1
 8001116:	418d      	sbcs	r5, r1
 8001118:	4641      	mov	r1, r8
 800111a:	40d8      	lsrs	r0, r3
 800111c:	40d9      	lsrs	r1, r3
 800111e:	4302      	orrs	r2, r0
 8001120:	432a      	orrs	r2, r5
 8001122:	000b      	movs	r3, r1
 8001124:	0751      	lsls	r1, r2, #29
 8001126:	d100      	bne.n	800112a <__aeabi_ddiv+0x56e>
 8001128:	e751      	b.n	8000fce <__aeabi_ddiv+0x412>
 800112a:	210f      	movs	r1, #15
 800112c:	4011      	ands	r1, r2
 800112e:	2904      	cmp	r1, #4
 8001130:	d000      	beq.n	8001134 <__aeabi_ddiv+0x578>
 8001132:	e746      	b.n	8000fc2 <__aeabi_ddiv+0x406>
 8001134:	e74b      	b.n	8000fce <__aeabi_ddiv+0x412>
 8001136:	0005      	movs	r5, r0
 8001138:	428e      	cmp	r6, r1
 800113a:	d000      	beq.n	800113e <__aeabi_ddiv+0x582>
 800113c:	e66a      	b.n	8000e14 <__aeabi_ddiv+0x258>
 800113e:	9a00      	ldr	r2, [sp, #0]
 8001140:	4293      	cmp	r3, r2
 8001142:	d000      	beq.n	8001146 <__aeabi_ddiv+0x58a>
 8001144:	e666      	b.n	8000e14 <__aeabi_ddiv+0x258>
 8001146:	e667      	b.n	8000e18 <__aeabi_ddiv+0x25c>
 8001148:	4a16      	ldr	r2, [pc, #88]	; (80011a4 <__aeabi_ddiv+0x5e8>)
 800114a:	445a      	add	r2, fp
 800114c:	2a00      	cmp	r2, #0
 800114e:	dc00      	bgt.n	8001152 <__aeabi_ddiv+0x596>
 8001150:	e710      	b.n	8000f74 <__aeabi_ddiv+0x3b8>
 8001152:	2301      	movs	r3, #1
 8001154:	2500      	movs	r5, #0
 8001156:	4498      	add	r8, r3
 8001158:	e667      	b.n	8000e2a <__aeabi_ddiv+0x26e>
 800115a:	075d      	lsls	r5, r3, #29
 800115c:	025b      	lsls	r3, r3, #9
 800115e:	0b1c      	lsrs	r4, r3, #12
 8001160:	08d2      	lsrs	r2, r2, #3
 8001162:	2300      	movs	r3, #0
 8001164:	4315      	orrs	r5, r2
 8001166:	e580      	b.n	8000c6a <__aeabi_ddiv+0xae>
 8001168:	9800      	ldr	r0, [sp, #0]
 800116a:	3d02      	subs	r5, #2
 800116c:	0042      	lsls	r2, r0, #1
 800116e:	4282      	cmp	r2, r0
 8001170:	41bf      	sbcs	r7, r7
 8001172:	427f      	negs	r7, r7
 8001174:	193c      	adds	r4, r7, r4
 8001176:	1936      	adds	r6, r6, r4
 8001178:	9200      	str	r2, [sp, #0]
 800117a:	e7dd      	b.n	8001138 <__aeabi_ddiv+0x57c>
 800117c:	2480      	movs	r4, #128	; 0x80
 800117e:	4643      	mov	r3, r8
 8001180:	0324      	lsls	r4, r4, #12
 8001182:	431c      	orrs	r4, r3
 8001184:	0324      	lsls	r4, r4, #12
 8001186:	4b04      	ldr	r3, [pc, #16]	; (8001198 <__aeabi_ddiv+0x5dc>)
 8001188:	0b24      	lsrs	r4, r4, #12
 800118a:	e56e      	b.n	8000c6a <__aeabi_ddiv+0xae>
 800118c:	9a00      	ldr	r2, [sp, #0]
 800118e:	429a      	cmp	r2, r3
 8001190:	d3ea      	bcc.n	8001168 <__aeabi_ddiv+0x5ac>
 8001192:	0005      	movs	r5, r0
 8001194:	e7d3      	b.n	800113e <__aeabi_ddiv+0x582>
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	000007ff 	.word	0x000007ff
 800119c:	0000043e 	.word	0x0000043e
 80011a0:	0000041e 	.word	0x0000041e
 80011a4:	000003ff 	.word	0x000003ff

080011a8 <__aeabi_dsub>:
 80011a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011aa:	4657      	mov	r7, sl
 80011ac:	464e      	mov	r6, r9
 80011ae:	4645      	mov	r5, r8
 80011b0:	46de      	mov	lr, fp
 80011b2:	b5e0      	push	{r5, r6, r7, lr}
 80011b4:	001e      	movs	r6, r3
 80011b6:	0017      	movs	r7, r2
 80011b8:	004a      	lsls	r2, r1, #1
 80011ba:	030b      	lsls	r3, r1, #12
 80011bc:	0d52      	lsrs	r2, r2, #21
 80011be:	0a5b      	lsrs	r3, r3, #9
 80011c0:	4690      	mov	r8, r2
 80011c2:	0f42      	lsrs	r2, r0, #29
 80011c4:	431a      	orrs	r2, r3
 80011c6:	0fcd      	lsrs	r5, r1, #31
 80011c8:	4ccd      	ldr	r4, [pc, #820]	; (8001500 <__aeabi_dsub+0x358>)
 80011ca:	0331      	lsls	r1, r6, #12
 80011cc:	00c3      	lsls	r3, r0, #3
 80011ce:	4694      	mov	ip, r2
 80011d0:	0070      	lsls	r0, r6, #1
 80011d2:	0f7a      	lsrs	r2, r7, #29
 80011d4:	0a49      	lsrs	r1, r1, #9
 80011d6:	00ff      	lsls	r7, r7, #3
 80011d8:	469a      	mov	sl, r3
 80011da:	46b9      	mov	r9, r7
 80011dc:	0d40      	lsrs	r0, r0, #21
 80011de:	0ff6      	lsrs	r6, r6, #31
 80011e0:	4311      	orrs	r1, r2
 80011e2:	42a0      	cmp	r0, r4
 80011e4:	d100      	bne.n	80011e8 <__aeabi_dsub+0x40>
 80011e6:	e0b1      	b.n	800134c <__aeabi_dsub+0x1a4>
 80011e8:	2201      	movs	r2, #1
 80011ea:	4056      	eors	r6, r2
 80011ec:	46b3      	mov	fp, r6
 80011ee:	42b5      	cmp	r5, r6
 80011f0:	d100      	bne.n	80011f4 <__aeabi_dsub+0x4c>
 80011f2:	e088      	b.n	8001306 <__aeabi_dsub+0x15e>
 80011f4:	4642      	mov	r2, r8
 80011f6:	1a12      	subs	r2, r2, r0
 80011f8:	2a00      	cmp	r2, #0
 80011fa:	dc00      	bgt.n	80011fe <__aeabi_dsub+0x56>
 80011fc:	e0ae      	b.n	800135c <__aeabi_dsub+0x1b4>
 80011fe:	2800      	cmp	r0, #0
 8001200:	d100      	bne.n	8001204 <__aeabi_dsub+0x5c>
 8001202:	e0c1      	b.n	8001388 <__aeabi_dsub+0x1e0>
 8001204:	48be      	ldr	r0, [pc, #760]	; (8001500 <__aeabi_dsub+0x358>)
 8001206:	4580      	cmp	r8, r0
 8001208:	d100      	bne.n	800120c <__aeabi_dsub+0x64>
 800120a:	e151      	b.n	80014b0 <__aeabi_dsub+0x308>
 800120c:	2080      	movs	r0, #128	; 0x80
 800120e:	0400      	lsls	r0, r0, #16
 8001210:	4301      	orrs	r1, r0
 8001212:	2a38      	cmp	r2, #56	; 0x38
 8001214:	dd00      	ble.n	8001218 <__aeabi_dsub+0x70>
 8001216:	e17b      	b.n	8001510 <__aeabi_dsub+0x368>
 8001218:	2a1f      	cmp	r2, #31
 800121a:	dd00      	ble.n	800121e <__aeabi_dsub+0x76>
 800121c:	e1ee      	b.n	80015fc <__aeabi_dsub+0x454>
 800121e:	2020      	movs	r0, #32
 8001220:	003e      	movs	r6, r7
 8001222:	1a80      	subs	r0, r0, r2
 8001224:	000c      	movs	r4, r1
 8001226:	40d6      	lsrs	r6, r2
 8001228:	40d1      	lsrs	r1, r2
 800122a:	4087      	lsls	r7, r0
 800122c:	4662      	mov	r2, ip
 800122e:	4084      	lsls	r4, r0
 8001230:	1a52      	subs	r2, r2, r1
 8001232:	1e78      	subs	r0, r7, #1
 8001234:	4187      	sbcs	r7, r0
 8001236:	4694      	mov	ip, r2
 8001238:	4334      	orrs	r4, r6
 800123a:	4327      	orrs	r7, r4
 800123c:	1bdc      	subs	r4, r3, r7
 800123e:	42a3      	cmp	r3, r4
 8001240:	419b      	sbcs	r3, r3
 8001242:	4662      	mov	r2, ip
 8001244:	425b      	negs	r3, r3
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	4699      	mov	r9, r3
 800124a:	464b      	mov	r3, r9
 800124c:	021b      	lsls	r3, r3, #8
 800124e:	d400      	bmi.n	8001252 <__aeabi_dsub+0xaa>
 8001250:	e118      	b.n	8001484 <__aeabi_dsub+0x2dc>
 8001252:	464b      	mov	r3, r9
 8001254:	0258      	lsls	r0, r3, #9
 8001256:	0a43      	lsrs	r3, r0, #9
 8001258:	4699      	mov	r9, r3
 800125a:	464b      	mov	r3, r9
 800125c:	2b00      	cmp	r3, #0
 800125e:	d100      	bne.n	8001262 <__aeabi_dsub+0xba>
 8001260:	e137      	b.n	80014d2 <__aeabi_dsub+0x32a>
 8001262:	4648      	mov	r0, r9
 8001264:	f000 fc1e 	bl	8001aa4 <__clzsi2>
 8001268:	0001      	movs	r1, r0
 800126a:	3908      	subs	r1, #8
 800126c:	2320      	movs	r3, #32
 800126e:	0022      	movs	r2, r4
 8001270:	4648      	mov	r0, r9
 8001272:	1a5b      	subs	r3, r3, r1
 8001274:	40da      	lsrs	r2, r3
 8001276:	4088      	lsls	r0, r1
 8001278:	408c      	lsls	r4, r1
 800127a:	4643      	mov	r3, r8
 800127c:	4310      	orrs	r0, r2
 800127e:	4588      	cmp	r8, r1
 8001280:	dd00      	ble.n	8001284 <__aeabi_dsub+0xdc>
 8001282:	e136      	b.n	80014f2 <__aeabi_dsub+0x34a>
 8001284:	1ac9      	subs	r1, r1, r3
 8001286:	1c4b      	adds	r3, r1, #1
 8001288:	2b1f      	cmp	r3, #31
 800128a:	dd00      	ble.n	800128e <__aeabi_dsub+0xe6>
 800128c:	e0ea      	b.n	8001464 <__aeabi_dsub+0x2bc>
 800128e:	2220      	movs	r2, #32
 8001290:	0026      	movs	r6, r4
 8001292:	1ad2      	subs	r2, r2, r3
 8001294:	0001      	movs	r1, r0
 8001296:	4094      	lsls	r4, r2
 8001298:	40de      	lsrs	r6, r3
 800129a:	40d8      	lsrs	r0, r3
 800129c:	2300      	movs	r3, #0
 800129e:	4091      	lsls	r1, r2
 80012a0:	1e62      	subs	r2, r4, #1
 80012a2:	4194      	sbcs	r4, r2
 80012a4:	4681      	mov	r9, r0
 80012a6:	4698      	mov	r8, r3
 80012a8:	4331      	orrs	r1, r6
 80012aa:	430c      	orrs	r4, r1
 80012ac:	0763      	lsls	r3, r4, #29
 80012ae:	d009      	beq.n	80012c4 <__aeabi_dsub+0x11c>
 80012b0:	230f      	movs	r3, #15
 80012b2:	4023      	ands	r3, r4
 80012b4:	2b04      	cmp	r3, #4
 80012b6:	d005      	beq.n	80012c4 <__aeabi_dsub+0x11c>
 80012b8:	1d23      	adds	r3, r4, #4
 80012ba:	42a3      	cmp	r3, r4
 80012bc:	41a4      	sbcs	r4, r4
 80012be:	4264      	negs	r4, r4
 80012c0:	44a1      	add	r9, r4
 80012c2:	001c      	movs	r4, r3
 80012c4:	464b      	mov	r3, r9
 80012c6:	021b      	lsls	r3, r3, #8
 80012c8:	d400      	bmi.n	80012cc <__aeabi_dsub+0x124>
 80012ca:	e0de      	b.n	800148a <__aeabi_dsub+0x2e2>
 80012cc:	4641      	mov	r1, r8
 80012ce:	4b8c      	ldr	r3, [pc, #560]	; (8001500 <__aeabi_dsub+0x358>)
 80012d0:	3101      	adds	r1, #1
 80012d2:	4299      	cmp	r1, r3
 80012d4:	d100      	bne.n	80012d8 <__aeabi_dsub+0x130>
 80012d6:	e0e7      	b.n	80014a8 <__aeabi_dsub+0x300>
 80012d8:	464b      	mov	r3, r9
 80012da:	488a      	ldr	r0, [pc, #552]	; (8001504 <__aeabi_dsub+0x35c>)
 80012dc:	08e4      	lsrs	r4, r4, #3
 80012de:	4003      	ands	r3, r0
 80012e0:	0018      	movs	r0, r3
 80012e2:	0549      	lsls	r1, r1, #21
 80012e4:	075b      	lsls	r3, r3, #29
 80012e6:	0240      	lsls	r0, r0, #9
 80012e8:	4323      	orrs	r3, r4
 80012ea:	0d4a      	lsrs	r2, r1, #21
 80012ec:	0b04      	lsrs	r4, r0, #12
 80012ee:	0512      	lsls	r2, r2, #20
 80012f0:	07ed      	lsls	r5, r5, #31
 80012f2:	4322      	orrs	r2, r4
 80012f4:	432a      	orrs	r2, r5
 80012f6:	0018      	movs	r0, r3
 80012f8:	0011      	movs	r1, r2
 80012fa:	bcf0      	pop	{r4, r5, r6, r7}
 80012fc:	46bb      	mov	fp, r7
 80012fe:	46b2      	mov	sl, r6
 8001300:	46a9      	mov	r9, r5
 8001302:	46a0      	mov	r8, r4
 8001304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001306:	4642      	mov	r2, r8
 8001308:	1a12      	subs	r2, r2, r0
 800130a:	2a00      	cmp	r2, #0
 800130c:	dd52      	ble.n	80013b4 <__aeabi_dsub+0x20c>
 800130e:	2800      	cmp	r0, #0
 8001310:	d100      	bne.n	8001314 <__aeabi_dsub+0x16c>
 8001312:	e09c      	b.n	800144e <__aeabi_dsub+0x2a6>
 8001314:	45a0      	cmp	r8, r4
 8001316:	d100      	bne.n	800131a <__aeabi_dsub+0x172>
 8001318:	e0ca      	b.n	80014b0 <__aeabi_dsub+0x308>
 800131a:	2080      	movs	r0, #128	; 0x80
 800131c:	0400      	lsls	r0, r0, #16
 800131e:	4301      	orrs	r1, r0
 8001320:	2a38      	cmp	r2, #56	; 0x38
 8001322:	dd00      	ble.n	8001326 <__aeabi_dsub+0x17e>
 8001324:	e149      	b.n	80015ba <__aeabi_dsub+0x412>
 8001326:	2a1f      	cmp	r2, #31
 8001328:	dc00      	bgt.n	800132c <__aeabi_dsub+0x184>
 800132a:	e197      	b.n	800165c <__aeabi_dsub+0x4b4>
 800132c:	0010      	movs	r0, r2
 800132e:	000e      	movs	r6, r1
 8001330:	3820      	subs	r0, #32
 8001332:	40c6      	lsrs	r6, r0
 8001334:	2a20      	cmp	r2, #32
 8001336:	d004      	beq.n	8001342 <__aeabi_dsub+0x19a>
 8001338:	2040      	movs	r0, #64	; 0x40
 800133a:	1a82      	subs	r2, r0, r2
 800133c:	4091      	lsls	r1, r2
 800133e:	430f      	orrs	r7, r1
 8001340:	46b9      	mov	r9, r7
 8001342:	464c      	mov	r4, r9
 8001344:	1e62      	subs	r2, r4, #1
 8001346:	4194      	sbcs	r4, r2
 8001348:	4334      	orrs	r4, r6
 800134a:	e13a      	b.n	80015c2 <__aeabi_dsub+0x41a>
 800134c:	000a      	movs	r2, r1
 800134e:	433a      	orrs	r2, r7
 8001350:	d028      	beq.n	80013a4 <__aeabi_dsub+0x1fc>
 8001352:	46b3      	mov	fp, r6
 8001354:	42b5      	cmp	r5, r6
 8001356:	d02b      	beq.n	80013b0 <__aeabi_dsub+0x208>
 8001358:	4a6b      	ldr	r2, [pc, #428]	; (8001508 <__aeabi_dsub+0x360>)
 800135a:	4442      	add	r2, r8
 800135c:	2a00      	cmp	r2, #0
 800135e:	d05d      	beq.n	800141c <__aeabi_dsub+0x274>
 8001360:	4642      	mov	r2, r8
 8001362:	4644      	mov	r4, r8
 8001364:	1a82      	subs	r2, r0, r2
 8001366:	2c00      	cmp	r4, #0
 8001368:	d000      	beq.n	800136c <__aeabi_dsub+0x1c4>
 800136a:	e0f5      	b.n	8001558 <__aeabi_dsub+0x3b0>
 800136c:	4665      	mov	r5, ip
 800136e:	431d      	orrs	r5, r3
 8001370:	d100      	bne.n	8001374 <__aeabi_dsub+0x1cc>
 8001372:	e19c      	b.n	80016ae <__aeabi_dsub+0x506>
 8001374:	1e55      	subs	r5, r2, #1
 8001376:	2a01      	cmp	r2, #1
 8001378:	d100      	bne.n	800137c <__aeabi_dsub+0x1d4>
 800137a:	e1fb      	b.n	8001774 <__aeabi_dsub+0x5cc>
 800137c:	4c60      	ldr	r4, [pc, #384]	; (8001500 <__aeabi_dsub+0x358>)
 800137e:	42a2      	cmp	r2, r4
 8001380:	d100      	bne.n	8001384 <__aeabi_dsub+0x1dc>
 8001382:	e1bd      	b.n	8001700 <__aeabi_dsub+0x558>
 8001384:	002a      	movs	r2, r5
 8001386:	e0f0      	b.n	800156a <__aeabi_dsub+0x3c2>
 8001388:	0008      	movs	r0, r1
 800138a:	4338      	orrs	r0, r7
 800138c:	d100      	bne.n	8001390 <__aeabi_dsub+0x1e8>
 800138e:	e0c3      	b.n	8001518 <__aeabi_dsub+0x370>
 8001390:	1e50      	subs	r0, r2, #1
 8001392:	2a01      	cmp	r2, #1
 8001394:	d100      	bne.n	8001398 <__aeabi_dsub+0x1f0>
 8001396:	e1a8      	b.n	80016ea <__aeabi_dsub+0x542>
 8001398:	4c59      	ldr	r4, [pc, #356]	; (8001500 <__aeabi_dsub+0x358>)
 800139a:	42a2      	cmp	r2, r4
 800139c:	d100      	bne.n	80013a0 <__aeabi_dsub+0x1f8>
 800139e:	e087      	b.n	80014b0 <__aeabi_dsub+0x308>
 80013a0:	0002      	movs	r2, r0
 80013a2:	e736      	b.n	8001212 <__aeabi_dsub+0x6a>
 80013a4:	2201      	movs	r2, #1
 80013a6:	4056      	eors	r6, r2
 80013a8:	46b3      	mov	fp, r6
 80013aa:	42b5      	cmp	r5, r6
 80013ac:	d000      	beq.n	80013b0 <__aeabi_dsub+0x208>
 80013ae:	e721      	b.n	80011f4 <__aeabi_dsub+0x4c>
 80013b0:	4a55      	ldr	r2, [pc, #340]	; (8001508 <__aeabi_dsub+0x360>)
 80013b2:	4442      	add	r2, r8
 80013b4:	2a00      	cmp	r2, #0
 80013b6:	d100      	bne.n	80013ba <__aeabi_dsub+0x212>
 80013b8:	e0b5      	b.n	8001526 <__aeabi_dsub+0x37e>
 80013ba:	4642      	mov	r2, r8
 80013bc:	4644      	mov	r4, r8
 80013be:	1a82      	subs	r2, r0, r2
 80013c0:	2c00      	cmp	r4, #0
 80013c2:	d100      	bne.n	80013c6 <__aeabi_dsub+0x21e>
 80013c4:	e138      	b.n	8001638 <__aeabi_dsub+0x490>
 80013c6:	4e4e      	ldr	r6, [pc, #312]	; (8001500 <__aeabi_dsub+0x358>)
 80013c8:	42b0      	cmp	r0, r6
 80013ca:	d100      	bne.n	80013ce <__aeabi_dsub+0x226>
 80013cc:	e1de      	b.n	800178c <__aeabi_dsub+0x5e4>
 80013ce:	2680      	movs	r6, #128	; 0x80
 80013d0:	4664      	mov	r4, ip
 80013d2:	0436      	lsls	r6, r6, #16
 80013d4:	4334      	orrs	r4, r6
 80013d6:	46a4      	mov	ip, r4
 80013d8:	2a38      	cmp	r2, #56	; 0x38
 80013da:	dd00      	ble.n	80013de <__aeabi_dsub+0x236>
 80013dc:	e196      	b.n	800170c <__aeabi_dsub+0x564>
 80013de:	2a1f      	cmp	r2, #31
 80013e0:	dd00      	ble.n	80013e4 <__aeabi_dsub+0x23c>
 80013e2:	e224      	b.n	800182e <__aeabi_dsub+0x686>
 80013e4:	2620      	movs	r6, #32
 80013e6:	1ab4      	subs	r4, r6, r2
 80013e8:	46a2      	mov	sl, r4
 80013ea:	4664      	mov	r4, ip
 80013ec:	4656      	mov	r6, sl
 80013ee:	40b4      	lsls	r4, r6
 80013f0:	46a1      	mov	r9, r4
 80013f2:	001c      	movs	r4, r3
 80013f4:	464e      	mov	r6, r9
 80013f6:	40d4      	lsrs	r4, r2
 80013f8:	4326      	orrs	r6, r4
 80013fa:	0034      	movs	r4, r6
 80013fc:	4656      	mov	r6, sl
 80013fe:	40b3      	lsls	r3, r6
 8001400:	1e5e      	subs	r6, r3, #1
 8001402:	41b3      	sbcs	r3, r6
 8001404:	431c      	orrs	r4, r3
 8001406:	4663      	mov	r3, ip
 8001408:	40d3      	lsrs	r3, r2
 800140a:	18c9      	adds	r1, r1, r3
 800140c:	19e4      	adds	r4, r4, r7
 800140e:	42bc      	cmp	r4, r7
 8001410:	41bf      	sbcs	r7, r7
 8001412:	427f      	negs	r7, r7
 8001414:	46b9      	mov	r9, r7
 8001416:	4680      	mov	r8, r0
 8001418:	4489      	add	r9, r1
 800141a:	e0d8      	b.n	80015ce <__aeabi_dsub+0x426>
 800141c:	4640      	mov	r0, r8
 800141e:	4c3b      	ldr	r4, [pc, #236]	; (800150c <__aeabi_dsub+0x364>)
 8001420:	3001      	adds	r0, #1
 8001422:	4220      	tst	r0, r4
 8001424:	d000      	beq.n	8001428 <__aeabi_dsub+0x280>
 8001426:	e0b4      	b.n	8001592 <__aeabi_dsub+0x3ea>
 8001428:	4640      	mov	r0, r8
 800142a:	2800      	cmp	r0, #0
 800142c:	d000      	beq.n	8001430 <__aeabi_dsub+0x288>
 800142e:	e144      	b.n	80016ba <__aeabi_dsub+0x512>
 8001430:	4660      	mov	r0, ip
 8001432:	4318      	orrs	r0, r3
 8001434:	d100      	bne.n	8001438 <__aeabi_dsub+0x290>
 8001436:	e190      	b.n	800175a <__aeabi_dsub+0x5b2>
 8001438:	0008      	movs	r0, r1
 800143a:	4338      	orrs	r0, r7
 800143c:	d000      	beq.n	8001440 <__aeabi_dsub+0x298>
 800143e:	e1aa      	b.n	8001796 <__aeabi_dsub+0x5ee>
 8001440:	4661      	mov	r1, ip
 8001442:	08db      	lsrs	r3, r3, #3
 8001444:	0749      	lsls	r1, r1, #29
 8001446:	430b      	orrs	r3, r1
 8001448:	4661      	mov	r1, ip
 800144a:	08cc      	lsrs	r4, r1, #3
 800144c:	e027      	b.n	800149e <__aeabi_dsub+0x2f6>
 800144e:	0008      	movs	r0, r1
 8001450:	4338      	orrs	r0, r7
 8001452:	d061      	beq.n	8001518 <__aeabi_dsub+0x370>
 8001454:	1e50      	subs	r0, r2, #1
 8001456:	2a01      	cmp	r2, #1
 8001458:	d100      	bne.n	800145c <__aeabi_dsub+0x2b4>
 800145a:	e139      	b.n	80016d0 <__aeabi_dsub+0x528>
 800145c:	42a2      	cmp	r2, r4
 800145e:	d027      	beq.n	80014b0 <__aeabi_dsub+0x308>
 8001460:	0002      	movs	r2, r0
 8001462:	e75d      	b.n	8001320 <__aeabi_dsub+0x178>
 8001464:	0002      	movs	r2, r0
 8001466:	391f      	subs	r1, #31
 8001468:	40ca      	lsrs	r2, r1
 800146a:	0011      	movs	r1, r2
 800146c:	2b20      	cmp	r3, #32
 800146e:	d003      	beq.n	8001478 <__aeabi_dsub+0x2d0>
 8001470:	2240      	movs	r2, #64	; 0x40
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	4098      	lsls	r0, r3
 8001476:	4304      	orrs	r4, r0
 8001478:	1e63      	subs	r3, r4, #1
 800147a:	419c      	sbcs	r4, r3
 800147c:	2300      	movs	r3, #0
 800147e:	4699      	mov	r9, r3
 8001480:	4698      	mov	r8, r3
 8001482:	430c      	orrs	r4, r1
 8001484:	0763      	lsls	r3, r4, #29
 8001486:	d000      	beq.n	800148a <__aeabi_dsub+0x2e2>
 8001488:	e712      	b.n	80012b0 <__aeabi_dsub+0x108>
 800148a:	464b      	mov	r3, r9
 800148c:	464a      	mov	r2, r9
 800148e:	08e4      	lsrs	r4, r4, #3
 8001490:	075b      	lsls	r3, r3, #29
 8001492:	4323      	orrs	r3, r4
 8001494:	08d4      	lsrs	r4, r2, #3
 8001496:	4642      	mov	r2, r8
 8001498:	4919      	ldr	r1, [pc, #100]	; (8001500 <__aeabi_dsub+0x358>)
 800149a:	428a      	cmp	r2, r1
 800149c:	d00e      	beq.n	80014bc <__aeabi_dsub+0x314>
 800149e:	0324      	lsls	r4, r4, #12
 80014a0:	0552      	lsls	r2, r2, #21
 80014a2:	0b24      	lsrs	r4, r4, #12
 80014a4:	0d52      	lsrs	r2, r2, #21
 80014a6:	e722      	b.n	80012ee <__aeabi_dsub+0x146>
 80014a8:	000a      	movs	r2, r1
 80014aa:	2400      	movs	r4, #0
 80014ac:	2300      	movs	r3, #0
 80014ae:	e71e      	b.n	80012ee <__aeabi_dsub+0x146>
 80014b0:	08db      	lsrs	r3, r3, #3
 80014b2:	4662      	mov	r2, ip
 80014b4:	0752      	lsls	r2, r2, #29
 80014b6:	4313      	orrs	r3, r2
 80014b8:	4662      	mov	r2, ip
 80014ba:	08d4      	lsrs	r4, r2, #3
 80014bc:	001a      	movs	r2, r3
 80014be:	4322      	orrs	r2, r4
 80014c0:	d100      	bne.n	80014c4 <__aeabi_dsub+0x31c>
 80014c2:	e1fc      	b.n	80018be <__aeabi_dsub+0x716>
 80014c4:	2280      	movs	r2, #128	; 0x80
 80014c6:	0312      	lsls	r2, r2, #12
 80014c8:	4314      	orrs	r4, r2
 80014ca:	0324      	lsls	r4, r4, #12
 80014cc:	4a0c      	ldr	r2, [pc, #48]	; (8001500 <__aeabi_dsub+0x358>)
 80014ce:	0b24      	lsrs	r4, r4, #12
 80014d0:	e70d      	b.n	80012ee <__aeabi_dsub+0x146>
 80014d2:	0020      	movs	r0, r4
 80014d4:	f000 fae6 	bl	8001aa4 <__clzsi2>
 80014d8:	0001      	movs	r1, r0
 80014da:	3118      	adds	r1, #24
 80014dc:	291f      	cmp	r1, #31
 80014de:	dc00      	bgt.n	80014e2 <__aeabi_dsub+0x33a>
 80014e0:	e6c4      	b.n	800126c <__aeabi_dsub+0xc4>
 80014e2:	3808      	subs	r0, #8
 80014e4:	4084      	lsls	r4, r0
 80014e6:	4643      	mov	r3, r8
 80014e8:	0020      	movs	r0, r4
 80014ea:	2400      	movs	r4, #0
 80014ec:	4588      	cmp	r8, r1
 80014ee:	dc00      	bgt.n	80014f2 <__aeabi_dsub+0x34a>
 80014f0:	e6c8      	b.n	8001284 <__aeabi_dsub+0xdc>
 80014f2:	4a04      	ldr	r2, [pc, #16]	; (8001504 <__aeabi_dsub+0x35c>)
 80014f4:	1a5b      	subs	r3, r3, r1
 80014f6:	4010      	ands	r0, r2
 80014f8:	4698      	mov	r8, r3
 80014fa:	4681      	mov	r9, r0
 80014fc:	e6d6      	b.n	80012ac <__aeabi_dsub+0x104>
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	000007ff 	.word	0x000007ff
 8001504:	ff7fffff 	.word	0xff7fffff
 8001508:	fffff801 	.word	0xfffff801
 800150c:	000007fe 	.word	0x000007fe
 8001510:	430f      	orrs	r7, r1
 8001512:	1e7a      	subs	r2, r7, #1
 8001514:	4197      	sbcs	r7, r2
 8001516:	e691      	b.n	800123c <__aeabi_dsub+0x94>
 8001518:	4661      	mov	r1, ip
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	0749      	lsls	r1, r1, #29
 800151e:	430b      	orrs	r3, r1
 8001520:	4661      	mov	r1, ip
 8001522:	08cc      	lsrs	r4, r1, #3
 8001524:	e7b8      	b.n	8001498 <__aeabi_dsub+0x2f0>
 8001526:	4640      	mov	r0, r8
 8001528:	4cd3      	ldr	r4, [pc, #844]	; (8001878 <__aeabi_dsub+0x6d0>)
 800152a:	3001      	adds	r0, #1
 800152c:	4220      	tst	r0, r4
 800152e:	d000      	beq.n	8001532 <__aeabi_dsub+0x38a>
 8001530:	e0a2      	b.n	8001678 <__aeabi_dsub+0x4d0>
 8001532:	4640      	mov	r0, r8
 8001534:	2800      	cmp	r0, #0
 8001536:	d000      	beq.n	800153a <__aeabi_dsub+0x392>
 8001538:	e101      	b.n	800173e <__aeabi_dsub+0x596>
 800153a:	4660      	mov	r0, ip
 800153c:	4318      	orrs	r0, r3
 800153e:	d100      	bne.n	8001542 <__aeabi_dsub+0x39a>
 8001540:	e15e      	b.n	8001800 <__aeabi_dsub+0x658>
 8001542:	0008      	movs	r0, r1
 8001544:	4338      	orrs	r0, r7
 8001546:	d000      	beq.n	800154a <__aeabi_dsub+0x3a2>
 8001548:	e15f      	b.n	800180a <__aeabi_dsub+0x662>
 800154a:	4661      	mov	r1, ip
 800154c:	08db      	lsrs	r3, r3, #3
 800154e:	0749      	lsls	r1, r1, #29
 8001550:	430b      	orrs	r3, r1
 8001552:	4661      	mov	r1, ip
 8001554:	08cc      	lsrs	r4, r1, #3
 8001556:	e7a2      	b.n	800149e <__aeabi_dsub+0x2f6>
 8001558:	4dc8      	ldr	r5, [pc, #800]	; (800187c <__aeabi_dsub+0x6d4>)
 800155a:	42a8      	cmp	r0, r5
 800155c:	d100      	bne.n	8001560 <__aeabi_dsub+0x3b8>
 800155e:	e0cf      	b.n	8001700 <__aeabi_dsub+0x558>
 8001560:	2580      	movs	r5, #128	; 0x80
 8001562:	4664      	mov	r4, ip
 8001564:	042d      	lsls	r5, r5, #16
 8001566:	432c      	orrs	r4, r5
 8001568:	46a4      	mov	ip, r4
 800156a:	2a38      	cmp	r2, #56	; 0x38
 800156c:	dc56      	bgt.n	800161c <__aeabi_dsub+0x474>
 800156e:	2a1f      	cmp	r2, #31
 8001570:	dd00      	ble.n	8001574 <__aeabi_dsub+0x3cc>
 8001572:	e0d1      	b.n	8001718 <__aeabi_dsub+0x570>
 8001574:	2520      	movs	r5, #32
 8001576:	001e      	movs	r6, r3
 8001578:	1aad      	subs	r5, r5, r2
 800157a:	4664      	mov	r4, ip
 800157c:	40ab      	lsls	r3, r5
 800157e:	40ac      	lsls	r4, r5
 8001580:	40d6      	lsrs	r6, r2
 8001582:	1e5d      	subs	r5, r3, #1
 8001584:	41ab      	sbcs	r3, r5
 8001586:	4334      	orrs	r4, r6
 8001588:	4323      	orrs	r3, r4
 800158a:	4664      	mov	r4, ip
 800158c:	40d4      	lsrs	r4, r2
 800158e:	1b09      	subs	r1, r1, r4
 8001590:	e049      	b.n	8001626 <__aeabi_dsub+0x47e>
 8001592:	4660      	mov	r0, ip
 8001594:	1bdc      	subs	r4, r3, r7
 8001596:	1a46      	subs	r6, r0, r1
 8001598:	42a3      	cmp	r3, r4
 800159a:	4180      	sbcs	r0, r0
 800159c:	4240      	negs	r0, r0
 800159e:	4681      	mov	r9, r0
 80015a0:	0030      	movs	r0, r6
 80015a2:	464e      	mov	r6, r9
 80015a4:	1b80      	subs	r0, r0, r6
 80015a6:	4681      	mov	r9, r0
 80015a8:	0200      	lsls	r0, r0, #8
 80015aa:	d476      	bmi.n	800169a <__aeabi_dsub+0x4f2>
 80015ac:	464b      	mov	r3, r9
 80015ae:	4323      	orrs	r3, r4
 80015b0:	d000      	beq.n	80015b4 <__aeabi_dsub+0x40c>
 80015b2:	e652      	b.n	800125a <__aeabi_dsub+0xb2>
 80015b4:	2400      	movs	r4, #0
 80015b6:	2500      	movs	r5, #0
 80015b8:	e771      	b.n	800149e <__aeabi_dsub+0x2f6>
 80015ba:	4339      	orrs	r1, r7
 80015bc:	000c      	movs	r4, r1
 80015be:	1e62      	subs	r2, r4, #1
 80015c0:	4194      	sbcs	r4, r2
 80015c2:	18e4      	adds	r4, r4, r3
 80015c4:	429c      	cmp	r4, r3
 80015c6:	419b      	sbcs	r3, r3
 80015c8:	425b      	negs	r3, r3
 80015ca:	4463      	add	r3, ip
 80015cc:	4699      	mov	r9, r3
 80015ce:	464b      	mov	r3, r9
 80015d0:	021b      	lsls	r3, r3, #8
 80015d2:	d400      	bmi.n	80015d6 <__aeabi_dsub+0x42e>
 80015d4:	e756      	b.n	8001484 <__aeabi_dsub+0x2dc>
 80015d6:	2301      	movs	r3, #1
 80015d8:	469c      	mov	ip, r3
 80015da:	4ba8      	ldr	r3, [pc, #672]	; (800187c <__aeabi_dsub+0x6d4>)
 80015dc:	44e0      	add	r8, ip
 80015de:	4598      	cmp	r8, r3
 80015e0:	d038      	beq.n	8001654 <__aeabi_dsub+0x4ac>
 80015e2:	464b      	mov	r3, r9
 80015e4:	48a6      	ldr	r0, [pc, #664]	; (8001880 <__aeabi_dsub+0x6d8>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	4003      	ands	r3, r0
 80015ea:	0018      	movs	r0, r3
 80015ec:	0863      	lsrs	r3, r4, #1
 80015ee:	4014      	ands	r4, r2
 80015f0:	431c      	orrs	r4, r3
 80015f2:	07c3      	lsls	r3, r0, #31
 80015f4:	431c      	orrs	r4, r3
 80015f6:	0843      	lsrs	r3, r0, #1
 80015f8:	4699      	mov	r9, r3
 80015fa:	e657      	b.n	80012ac <__aeabi_dsub+0x104>
 80015fc:	0010      	movs	r0, r2
 80015fe:	000e      	movs	r6, r1
 8001600:	3820      	subs	r0, #32
 8001602:	40c6      	lsrs	r6, r0
 8001604:	2a20      	cmp	r2, #32
 8001606:	d004      	beq.n	8001612 <__aeabi_dsub+0x46a>
 8001608:	2040      	movs	r0, #64	; 0x40
 800160a:	1a82      	subs	r2, r0, r2
 800160c:	4091      	lsls	r1, r2
 800160e:	430f      	orrs	r7, r1
 8001610:	46b9      	mov	r9, r7
 8001612:	464f      	mov	r7, r9
 8001614:	1e7a      	subs	r2, r7, #1
 8001616:	4197      	sbcs	r7, r2
 8001618:	4337      	orrs	r7, r6
 800161a:	e60f      	b.n	800123c <__aeabi_dsub+0x94>
 800161c:	4662      	mov	r2, ip
 800161e:	431a      	orrs	r2, r3
 8001620:	0013      	movs	r3, r2
 8001622:	1e5a      	subs	r2, r3, #1
 8001624:	4193      	sbcs	r3, r2
 8001626:	1afc      	subs	r4, r7, r3
 8001628:	42a7      	cmp	r7, r4
 800162a:	41bf      	sbcs	r7, r7
 800162c:	427f      	negs	r7, r7
 800162e:	1bcb      	subs	r3, r1, r7
 8001630:	4699      	mov	r9, r3
 8001632:	465d      	mov	r5, fp
 8001634:	4680      	mov	r8, r0
 8001636:	e608      	b.n	800124a <__aeabi_dsub+0xa2>
 8001638:	4666      	mov	r6, ip
 800163a:	431e      	orrs	r6, r3
 800163c:	d100      	bne.n	8001640 <__aeabi_dsub+0x498>
 800163e:	e0be      	b.n	80017be <__aeabi_dsub+0x616>
 8001640:	1e56      	subs	r6, r2, #1
 8001642:	2a01      	cmp	r2, #1
 8001644:	d100      	bne.n	8001648 <__aeabi_dsub+0x4a0>
 8001646:	e109      	b.n	800185c <__aeabi_dsub+0x6b4>
 8001648:	4c8c      	ldr	r4, [pc, #560]	; (800187c <__aeabi_dsub+0x6d4>)
 800164a:	42a2      	cmp	r2, r4
 800164c:	d100      	bne.n	8001650 <__aeabi_dsub+0x4a8>
 800164e:	e119      	b.n	8001884 <__aeabi_dsub+0x6dc>
 8001650:	0032      	movs	r2, r6
 8001652:	e6c1      	b.n	80013d8 <__aeabi_dsub+0x230>
 8001654:	4642      	mov	r2, r8
 8001656:	2400      	movs	r4, #0
 8001658:	2300      	movs	r3, #0
 800165a:	e648      	b.n	80012ee <__aeabi_dsub+0x146>
 800165c:	2020      	movs	r0, #32
 800165e:	000c      	movs	r4, r1
 8001660:	1a80      	subs	r0, r0, r2
 8001662:	003e      	movs	r6, r7
 8001664:	4087      	lsls	r7, r0
 8001666:	4084      	lsls	r4, r0
 8001668:	40d6      	lsrs	r6, r2
 800166a:	1e78      	subs	r0, r7, #1
 800166c:	4187      	sbcs	r7, r0
 800166e:	40d1      	lsrs	r1, r2
 8001670:	4334      	orrs	r4, r6
 8001672:	433c      	orrs	r4, r7
 8001674:	448c      	add	ip, r1
 8001676:	e7a4      	b.n	80015c2 <__aeabi_dsub+0x41a>
 8001678:	4a80      	ldr	r2, [pc, #512]	; (800187c <__aeabi_dsub+0x6d4>)
 800167a:	4290      	cmp	r0, r2
 800167c:	d100      	bne.n	8001680 <__aeabi_dsub+0x4d8>
 800167e:	e0e9      	b.n	8001854 <__aeabi_dsub+0x6ac>
 8001680:	19df      	adds	r7, r3, r7
 8001682:	429f      	cmp	r7, r3
 8001684:	419b      	sbcs	r3, r3
 8001686:	4461      	add	r1, ip
 8001688:	425b      	negs	r3, r3
 800168a:	18c9      	adds	r1, r1, r3
 800168c:	07cc      	lsls	r4, r1, #31
 800168e:	087f      	lsrs	r7, r7, #1
 8001690:	084b      	lsrs	r3, r1, #1
 8001692:	4699      	mov	r9, r3
 8001694:	4680      	mov	r8, r0
 8001696:	433c      	orrs	r4, r7
 8001698:	e6f4      	b.n	8001484 <__aeabi_dsub+0x2dc>
 800169a:	1afc      	subs	r4, r7, r3
 800169c:	42a7      	cmp	r7, r4
 800169e:	41bf      	sbcs	r7, r7
 80016a0:	4663      	mov	r3, ip
 80016a2:	427f      	negs	r7, r7
 80016a4:	1ac9      	subs	r1, r1, r3
 80016a6:	1bcb      	subs	r3, r1, r7
 80016a8:	4699      	mov	r9, r3
 80016aa:	465d      	mov	r5, fp
 80016ac:	e5d5      	b.n	800125a <__aeabi_dsub+0xb2>
 80016ae:	08ff      	lsrs	r7, r7, #3
 80016b0:	074b      	lsls	r3, r1, #29
 80016b2:	465d      	mov	r5, fp
 80016b4:	433b      	orrs	r3, r7
 80016b6:	08cc      	lsrs	r4, r1, #3
 80016b8:	e6ee      	b.n	8001498 <__aeabi_dsub+0x2f0>
 80016ba:	4662      	mov	r2, ip
 80016bc:	431a      	orrs	r2, r3
 80016be:	d000      	beq.n	80016c2 <__aeabi_dsub+0x51a>
 80016c0:	e082      	b.n	80017c8 <__aeabi_dsub+0x620>
 80016c2:	000b      	movs	r3, r1
 80016c4:	433b      	orrs	r3, r7
 80016c6:	d11b      	bne.n	8001700 <__aeabi_dsub+0x558>
 80016c8:	2480      	movs	r4, #128	; 0x80
 80016ca:	2500      	movs	r5, #0
 80016cc:	0324      	lsls	r4, r4, #12
 80016ce:	e6f9      	b.n	80014c4 <__aeabi_dsub+0x31c>
 80016d0:	19dc      	adds	r4, r3, r7
 80016d2:	429c      	cmp	r4, r3
 80016d4:	419b      	sbcs	r3, r3
 80016d6:	4461      	add	r1, ip
 80016d8:	4689      	mov	r9, r1
 80016da:	425b      	negs	r3, r3
 80016dc:	4499      	add	r9, r3
 80016de:	464b      	mov	r3, r9
 80016e0:	021b      	lsls	r3, r3, #8
 80016e2:	d444      	bmi.n	800176e <__aeabi_dsub+0x5c6>
 80016e4:	2301      	movs	r3, #1
 80016e6:	4698      	mov	r8, r3
 80016e8:	e6cc      	b.n	8001484 <__aeabi_dsub+0x2dc>
 80016ea:	1bdc      	subs	r4, r3, r7
 80016ec:	4662      	mov	r2, ip
 80016ee:	42a3      	cmp	r3, r4
 80016f0:	419b      	sbcs	r3, r3
 80016f2:	1a51      	subs	r1, r2, r1
 80016f4:	425b      	negs	r3, r3
 80016f6:	1acb      	subs	r3, r1, r3
 80016f8:	4699      	mov	r9, r3
 80016fa:	2301      	movs	r3, #1
 80016fc:	4698      	mov	r8, r3
 80016fe:	e5a4      	b.n	800124a <__aeabi_dsub+0xa2>
 8001700:	08ff      	lsrs	r7, r7, #3
 8001702:	074b      	lsls	r3, r1, #29
 8001704:	465d      	mov	r5, fp
 8001706:	433b      	orrs	r3, r7
 8001708:	08cc      	lsrs	r4, r1, #3
 800170a:	e6d7      	b.n	80014bc <__aeabi_dsub+0x314>
 800170c:	4662      	mov	r2, ip
 800170e:	431a      	orrs	r2, r3
 8001710:	0014      	movs	r4, r2
 8001712:	1e63      	subs	r3, r4, #1
 8001714:	419c      	sbcs	r4, r3
 8001716:	e679      	b.n	800140c <__aeabi_dsub+0x264>
 8001718:	0015      	movs	r5, r2
 800171a:	4664      	mov	r4, ip
 800171c:	3d20      	subs	r5, #32
 800171e:	40ec      	lsrs	r4, r5
 8001720:	46a0      	mov	r8, r4
 8001722:	2a20      	cmp	r2, #32
 8001724:	d005      	beq.n	8001732 <__aeabi_dsub+0x58a>
 8001726:	2540      	movs	r5, #64	; 0x40
 8001728:	4664      	mov	r4, ip
 800172a:	1aaa      	subs	r2, r5, r2
 800172c:	4094      	lsls	r4, r2
 800172e:	4323      	orrs	r3, r4
 8001730:	469a      	mov	sl, r3
 8001732:	4654      	mov	r4, sl
 8001734:	1e63      	subs	r3, r4, #1
 8001736:	419c      	sbcs	r4, r3
 8001738:	4643      	mov	r3, r8
 800173a:	4323      	orrs	r3, r4
 800173c:	e773      	b.n	8001626 <__aeabi_dsub+0x47e>
 800173e:	4662      	mov	r2, ip
 8001740:	431a      	orrs	r2, r3
 8001742:	d023      	beq.n	800178c <__aeabi_dsub+0x5e4>
 8001744:	000a      	movs	r2, r1
 8001746:	433a      	orrs	r2, r7
 8001748:	d000      	beq.n	800174c <__aeabi_dsub+0x5a4>
 800174a:	e0a0      	b.n	800188e <__aeabi_dsub+0x6e6>
 800174c:	4662      	mov	r2, ip
 800174e:	08db      	lsrs	r3, r3, #3
 8001750:	0752      	lsls	r2, r2, #29
 8001752:	4313      	orrs	r3, r2
 8001754:	4662      	mov	r2, ip
 8001756:	08d4      	lsrs	r4, r2, #3
 8001758:	e6b0      	b.n	80014bc <__aeabi_dsub+0x314>
 800175a:	000b      	movs	r3, r1
 800175c:	433b      	orrs	r3, r7
 800175e:	d100      	bne.n	8001762 <__aeabi_dsub+0x5ba>
 8001760:	e728      	b.n	80015b4 <__aeabi_dsub+0x40c>
 8001762:	08ff      	lsrs	r7, r7, #3
 8001764:	074b      	lsls	r3, r1, #29
 8001766:	465d      	mov	r5, fp
 8001768:	433b      	orrs	r3, r7
 800176a:	08cc      	lsrs	r4, r1, #3
 800176c:	e697      	b.n	800149e <__aeabi_dsub+0x2f6>
 800176e:	2302      	movs	r3, #2
 8001770:	4698      	mov	r8, r3
 8001772:	e736      	b.n	80015e2 <__aeabi_dsub+0x43a>
 8001774:	1afc      	subs	r4, r7, r3
 8001776:	42a7      	cmp	r7, r4
 8001778:	41bf      	sbcs	r7, r7
 800177a:	4663      	mov	r3, ip
 800177c:	427f      	negs	r7, r7
 800177e:	1ac9      	subs	r1, r1, r3
 8001780:	1bcb      	subs	r3, r1, r7
 8001782:	4699      	mov	r9, r3
 8001784:	2301      	movs	r3, #1
 8001786:	465d      	mov	r5, fp
 8001788:	4698      	mov	r8, r3
 800178a:	e55e      	b.n	800124a <__aeabi_dsub+0xa2>
 800178c:	074b      	lsls	r3, r1, #29
 800178e:	08ff      	lsrs	r7, r7, #3
 8001790:	433b      	orrs	r3, r7
 8001792:	08cc      	lsrs	r4, r1, #3
 8001794:	e692      	b.n	80014bc <__aeabi_dsub+0x314>
 8001796:	1bdc      	subs	r4, r3, r7
 8001798:	4660      	mov	r0, ip
 800179a:	42a3      	cmp	r3, r4
 800179c:	41b6      	sbcs	r6, r6
 800179e:	1a40      	subs	r0, r0, r1
 80017a0:	4276      	negs	r6, r6
 80017a2:	1b80      	subs	r0, r0, r6
 80017a4:	4681      	mov	r9, r0
 80017a6:	0200      	lsls	r0, r0, #8
 80017a8:	d560      	bpl.n	800186c <__aeabi_dsub+0x6c4>
 80017aa:	1afc      	subs	r4, r7, r3
 80017ac:	42a7      	cmp	r7, r4
 80017ae:	41bf      	sbcs	r7, r7
 80017b0:	4663      	mov	r3, ip
 80017b2:	427f      	negs	r7, r7
 80017b4:	1ac9      	subs	r1, r1, r3
 80017b6:	1bcb      	subs	r3, r1, r7
 80017b8:	4699      	mov	r9, r3
 80017ba:	465d      	mov	r5, fp
 80017bc:	e576      	b.n	80012ac <__aeabi_dsub+0x104>
 80017be:	08ff      	lsrs	r7, r7, #3
 80017c0:	074b      	lsls	r3, r1, #29
 80017c2:	433b      	orrs	r3, r7
 80017c4:	08cc      	lsrs	r4, r1, #3
 80017c6:	e667      	b.n	8001498 <__aeabi_dsub+0x2f0>
 80017c8:	000a      	movs	r2, r1
 80017ca:	08db      	lsrs	r3, r3, #3
 80017cc:	433a      	orrs	r2, r7
 80017ce:	d100      	bne.n	80017d2 <__aeabi_dsub+0x62a>
 80017d0:	e66f      	b.n	80014b2 <__aeabi_dsub+0x30a>
 80017d2:	4662      	mov	r2, ip
 80017d4:	0752      	lsls	r2, r2, #29
 80017d6:	4313      	orrs	r3, r2
 80017d8:	4662      	mov	r2, ip
 80017da:	08d4      	lsrs	r4, r2, #3
 80017dc:	2280      	movs	r2, #128	; 0x80
 80017de:	0312      	lsls	r2, r2, #12
 80017e0:	4214      	tst	r4, r2
 80017e2:	d007      	beq.n	80017f4 <__aeabi_dsub+0x64c>
 80017e4:	08c8      	lsrs	r0, r1, #3
 80017e6:	4210      	tst	r0, r2
 80017e8:	d104      	bne.n	80017f4 <__aeabi_dsub+0x64c>
 80017ea:	465d      	mov	r5, fp
 80017ec:	0004      	movs	r4, r0
 80017ee:	08fb      	lsrs	r3, r7, #3
 80017f0:	0749      	lsls	r1, r1, #29
 80017f2:	430b      	orrs	r3, r1
 80017f4:	0f5a      	lsrs	r2, r3, #29
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	08db      	lsrs	r3, r3, #3
 80017fa:	0752      	lsls	r2, r2, #29
 80017fc:	4313      	orrs	r3, r2
 80017fe:	e65d      	b.n	80014bc <__aeabi_dsub+0x314>
 8001800:	074b      	lsls	r3, r1, #29
 8001802:	08ff      	lsrs	r7, r7, #3
 8001804:	433b      	orrs	r3, r7
 8001806:	08cc      	lsrs	r4, r1, #3
 8001808:	e649      	b.n	800149e <__aeabi_dsub+0x2f6>
 800180a:	19dc      	adds	r4, r3, r7
 800180c:	429c      	cmp	r4, r3
 800180e:	419b      	sbcs	r3, r3
 8001810:	4461      	add	r1, ip
 8001812:	4689      	mov	r9, r1
 8001814:	425b      	negs	r3, r3
 8001816:	4499      	add	r9, r3
 8001818:	464b      	mov	r3, r9
 800181a:	021b      	lsls	r3, r3, #8
 800181c:	d400      	bmi.n	8001820 <__aeabi_dsub+0x678>
 800181e:	e631      	b.n	8001484 <__aeabi_dsub+0x2dc>
 8001820:	464a      	mov	r2, r9
 8001822:	4b17      	ldr	r3, [pc, #92]	; (8001880 <__aeabi_dsub+0x6d8>)
 8001824:	401a      	ands	r2, r3
 8001826:	2301      	movs	r3, #1
 8001828:	4691      	mov	r9, r2
 800182a:	4698      	mov	r8, r3
 800182c:	e62a      	b.n	8001484 <__aeabi_dsub+0x2dc>
 800182e:	0016      	movs	r6, r2
 8001830:	4664      	mov	r4, ip
 8001832:	3e20      	subs	r6, #32
 8001834:	40f4      	lsrs	r4, r6
 8001836:	46a0      	mov	r8, r4
 8001838:	2a20      	cmp	r2, #32
 800183a:	d005      	beq.n	8001848 <__aeabi_dsub+0x6a0>
 800183c:	2640      	movs	r6, #64	; 0x40
 800183e:	4664      	mov	r4, ip
 8001840:	1ab2      	subs	r2, r6, r2
 8001842:	4094      	lsls	r4, r2
 8001844:	4323      	orrs	r3, r4
 8001846:	469a      	mov	sl, r3
 8001848:	4654      	mov	r4, sl
 800184a:	1e63      	subs	r3, r4, #1
 800184c:	419c      	sbcs	r4, r3
 800184e:	4643      	mov	r3, r8
 8001850:	431c      	orrs	r4, r3
 8001852:	e5db      	b.n	800140c <__aeabi_dsub+0x264>
 8001854:	0002      	movs	r2, r0
 8001856:	2400      	movs	r4, #0
 8001858:	2300      	movs	r3, #0
 800185a:	e548      	b.n	80012ee <__aeabi_dsub+0x146>
 800185c:	19dc      	adds	r4, r3, r7
 800185e:	42bc      	cmp	r4, r7
 8001860:	41bf      	sbcs	r7, r7
 8001862:	4461      	add	r1, ip
 8001864:	4689      	mov	r9, r1
 8001866:	427f      	negs	r7, r7
 8001868:	44b9      	add	r9, r7
 800186a:	e738      	b.n	80016de <__aeabi_dsub+0x536>
 800186c:	464b      	mov	r3, r9
 800186e:	4323      	orrs	r3, r4
 8001870:	d100      	bne.n	8001874 <__aeabi_dsub+0x6cc>
 8001872:	e69f      	b.n	80015b4 <__aeabi_dsub+0x40c>
 8001874:	e606      	b.n	8001484 <__aeabi_dsub+0x2dc>
 8001876:	46c0      	nop			; (mov r8, r8)
 8001878:	000007fe 	.word	0x000007fe
 800187c:	000007ff 	.word	0x000007ff
 8001880:	ff7fffff 	.word	0xff7fffff
 8001884:	08ff      	lsrs	r7, r7, #3
 8001886:	074b      	lsls	r3, r1, #29
 8001888:	433b      	orrs	r3, r7
 800188a:	08cc      	lsrs	r4, r1, #3
 800188c:	e616      	b.n	80014bc <__aeabi_dsub+0x314>
 800188e:	4662      	mov	r2, ip
 8001890:	08db      	lsrs	r3, r3, #3
 8001892:	0752      	lsls	r2, r2, #29
 8001894:	4313      	orrs	r3, r2
 8001896:	4662      	mov	r2, ip
 8001898:	08d4      	lsrs	r4, r2, #3
 800189a:	2280      	movs	r2, #128	; 0x80
 800189c:	0312      	lsls	r2, r2, #12
 800189e:	4214      	tst	r4, r2
 80018a0:	d007      	beq.n	80018b2 <__aeabi_dsub+0x70a>
 80018a2:	08c8      	lsrs	r0, r1, #3
 80018a4:	4210      	tst	r0, r2
 80018a6:	d104      	bne.n	80018b2 <__aeabi_dsub+0x70a>
 80018a8:	465d      	mov	r5, fp
 80018aa:	0004      	movs	r4, r0
 80018ac:	08fb      	lsrs	r3, r7, #3
 80018ae:	0749      	lsls	r1, r1, #29
 80018b0:	430b      	orrs	r3, r1
 80018b2:	0f5a      	lsrs	r2, r3, #29
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	0752      	lsls	r2, r2, #29
 80018b8:	08db      	lsrs	r3, r3, #3
 80018ba:	4313      	orrs	r3, r2
 80018bc:	e5fe      	b.n	80014bc <__aeabi_dsub+0x314>
 80018be:	2300      	movs	r3, #0
 80018c0:	4a01      	ldr	r2, [pc, #4]	; (80018c8 <__aeabi_dsub+0x720>)
 80018c2:	001c      	movs	r4, r3
 80018c4:	e513      	b.n	80012ee <__aeabi_dsub+0x146>
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	000007ff 	.word	0x000007ff

080018cc <__aeabi_d2iz>:
 80018cc:	000a      	movs	r2, r1
 80018ce:	b530      	push	{r4, r5, lr}
 80018d0:	4c13      	ldr	r4, [pc, #76]	; (8001920 <__aeabi_d2iz+0x54>)
 80018d2:	0053      	lsls	r3, r2, #1
 80018d4:	0309      	lsls	r1, r1, #12
 80018d6:	0005      	movs	r5, r0
 80018d8:	0b09      	lsrs	r1, r1, #12
 80018da:	2000      	movs	r0, #0
 80018dc:	0d5b      	lsrs	r3, r3, #21
 80018de:	0fd2      	lsrs	r2, r2, #31
 80018e0:	42a3      	cmp	r3, r4
 80018e2:	dd04      	ble.n	80018ee <__aeabi_d2iz+0x22>
 80018e4:	480f      	ldr	r0, [pc, #60]	; (8001924 <__aeabi_d2iz+0x58>)
 80018e6:	4283      	cmp	r3, r0
 80018e8:	dd02      	ble.n	80018f0 <__aeabi_d2iz+0x24>
 80018ea:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <__aeabi_d2iz+0x5c>)
 80018ec:	18d0      	adds	r0, r2, r3
 80018ee:	bd30      	pop	{r4, r5, pc}
 80018f0:	2080      	movs	r0, #128	; 0x80
 80018f2:	0340      	lsls	r0, r0, #13
 80018f4:	4301      	orrs	r1, r0
 80018f6:	480d      	ldr	r0, [pc, #52]	; (800192c <__aeabi_d2iz+0x60>)
 80018f8:	1ac0      	subs	r0, r0, r3
 80018fa:	281f      	cmp	r0, #31
 80018fc:	dd08      	ble.n	8001910 <__aeabi_d2iz+0x44>
 80018fe:	480c      	ldr	r0, [pc, #48]	; (8001930 <__aeabi_d2iz+0x64>)
 8001900:	1ac3      	subs	r3, r0, r3
 8001902:	40d9      	lsrs	r1, r3
 8001904:	000b      	movs	r3, r1
 8001906:	4258      	negs	r0, r3
 8001908:	2a00      	cmp	r2, #0
 800190a:	d1f0      	bne.n	80018ee <__aeabi_d2iz+0x22>
 800190c:	0018      	movs	r0, r3
 800190e:	e7ee      	b.n	80018ee <__aeabi_d2iz+0x22>
 8001910:	4c08      	ldr	r4, [pc, #32]	; (8001934 <__aeabi_d2iz+0x68>)
 8001912:	40c5      	lsrs	r5, r0
 8001914:	46a4      	mov	ip, r4
 8001916:	4463      	add	r3, ip
 8001918:	4099      	lsls	r1, r3
 800191a:	000b      	movs	r3, r1
 800191c:	432b      	orrs	r3, r5
 800191e:	e7f2      	b.n	8001906 <__aeabi_d2iz+0x3a>
 8001920:	000003fe 	.word	0x000003fe
 8001924:	0000041d 	.word	0x0000041d
 8001928:	7fffffff 	.word	0x7fffffff
 800192c:	00000433 	.word	0x00000433
 8001930:	00000413 	.word	0x00000413
 8001934:	fffffbed 	.word	0xfffffbed

08001938 <__aeabi_i2d>:
 8001938:	b570      	push	{r4, r5, r6, lr}
 800193a:	2800      	cmp	r0, #0
 800193c:	d016      	beq.n	800196c <__aeabi_i2d+0x34>
 800193e:	17c3      	asrs	r3, r0, #31
 8001940:	18c5      	adds	r5, r0, r3
 8001942:	405d      	eors	r5, r3
 8001944:	0fc4      	lsrs	r4, r0, #31
 8001946:	0028      	movs	r0, r5
 8001948:	f000 f8ac 	bl	8001aa4 <__clzsi2>
 800194c:	4a11      	ldr	r2, [pc, #68]	; (8001994 <__aeabi_i2d+0x5c>)
 800194e:	1a12      	subs	r2, r2, r0
 8001950:	280a      	cmp	r0, #10
 8001952:	dc16      	bgt.n	8001982 <__aeabi_i2d+0x4a>
 8001954:	0003      	movs	r3, r0
 8001956:	002e      	movs	r6, r5
 8001958:	3315      	adds	r3, #21
 800195a:	409e      	lsls	r6, r3
 800195c:	230b      	movs	r3, #11
 800195e:	1a18      	subs	r0, r3, r0
 8001960:	40c5      	lsrs	r5, r0
 8001962:	0552      	lsls	r2, r2, #21
 8001964:	032d      	lsls	r5, r5, #12
 8001966:	0b2d      	lsrs	r5, r5, #12
 8001968:	0d53      	lsrs	r3, r2, #21
 800196a:	e003      	b.n	8001974 <__aeabi_i2d+0x3c>
 800196c:	2400      	movs	r4, #0
 800196e:	2300      	movs	r3, #0
 8001970:	2500      	movs	r5, #0
 8001972:	2600      	movs	r6, #0
 8001974:	051b      	lsls	r3, r3, #20
 8001976:	432b      	orrs	r3, r5
 8001978:	07e4      	lsls	r4, r4, #31
 800197a:	4323      	orrs	r3, r4
 800197c:	0030      	movs	r0, r6
 800197e:	0019      	movs	r1, r3
 8001980:	bd70      	pop	{r4, r5, r6, pc}
 8001982:	380b      	subs	r0, #11
 8001984:	4085      	lsls	r5, r0
 8001986:	0552      	lsls	r2, r2, #21
 8001988:	032d      	lsls	r5, r5, #12
 800198a:	2600      	movs	r6, #0
 800198c:	0b2d      	lsrs	r5, r5, #12
 800198e:	0d53      	lsrs	r3, r2, #21
 8001990:	e7f0      	b.n	8001974 <__aeabi_i2d+0x3c>
 8001992:	46c0      	nop			; (mov r8, r8)
 8001994:	0000041e 	.word	0x0000041e

08001998 <__aeabi_f2d>:
 8001998:	b570      	push	{r4, r5, r6, lr}
 800199a:	0043      	lsls	r3, r0, #1
 800199c:	0246      	lsls	r6, r0, #9
 800199e:	0fc4      	lsrs	r4, r0, #31
 80019a0:	20fe      	movs	r0, #254	; 0xfe
 80019a2:	0e1b      	lsrs	r3, r3, #24
 80019a4:	1c59      	adds	r1, r3, #1
 80019a6:	0a75      	lsrs	r5, r6, #9
 80019a8:	4208      	tst	r0, r1
 80019aa:	d00c      	beq.n	80019c6 <__aeabi_f2d+0x2e>
 80019ac:	22e0      	movs	r2, #224	; 0xe0
 80019ae:	0092      	lsls	r2, r2, #2
 80019b0:	4694      	mov	ip, r2
 80019b2:	076d      	lsls	r5, r5, #29
 80019b4:	0b36      	lsrs	r6, r6, #12
 80019b6:	4463      	add	r3, ip
 80019b8:	051b      	lsls	r3, r3, #20
 80019ba:	4333      	orrs	r3, r6
 80019bc:	07e4      	lsls	r4, r4, #31
 80019be:	4323      	orrs	r3, r4
 80019c0:	0028      	movs	r0, r5
 80019c2:	0019      	movs	r1, r3
 80019c4:	bd70      	pop	{r4, r5, r6, pc}
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d114      	bne.n	80019f4 <__aeabi_f2d+0x5c>
 80019ca:	2d00      	cmp	r5, #0
 80019cc:	d01b      	beq.n	8001a06 <__aeabi_f2d+0x6e>
 80019ce:	0028      	movs	r0, r5
 80019d0:	f000 f868 	bl	8001aa4 <__clzsi2>
 80019d4:	280a      	cmp	r0, #10
 80019d6:	dc1c      	bgt.n	8001a12 <__aeabi_f2d+0x7a>
 80019d8:	230b      	movs	r3, #11
 80019da:	002e      	movs	r6, r5
 80019dc:	1a1b      	subs	r3, r3, r0
 80019de:	40de      	lsrs	r6, r3
 80019e0:	0003      	movs	r3, r0
 80019e2:	3315      	adds	r3, #21
 80019e4:	409d      	lsls	r5, r3
 80019e6:	4a0e      	ldr	r2, [pc, #56]	; (8001a20 <__aeabi_f2d+0x88>)
 80019e8:	0336      	lsls	r6, r6, #12
 80019ea:	1a12      	subs	r2, r2, r0
 80019ec:	0552      	lsls	r2, r2, #21
 80019ee:	0b36      	lsrs	r6, r6, #12
 80019f0:	0d53      	lsrs	r3, r2, #21
 80019f2:	e7e1      	b.n	80019b8 <__aeabi_f2d+0x20>
 80019f4:	2d00      	cmp	r5, #0
 80019f6:	d009      	beq.n	8001a0c <__aeabi_f2d+0x74>
 80019f8:	2280      	movs	r2, #128	; 0x80
 80019fa:	0b36      	lsrs	r6, r6, #12
 80019fc:	0312      	lsls	r2, r2, #12
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <__aeabi_f2d+0x8c>)
 8001a00:	076d      	lsls	r5, r5, #29
 8001a02:	4316      	orrs	r6, r2
 8001a04:	e7d8      	b.n	80019b8 <__aeabi_f2d+0x20>
 8001a06:	2300      	movs	r3, #0
 8001a08:	2600      	movs	r6, #0
 8001a0a:	e7d5      	b.n	80019b8 <__aeabi_f2d+0x20>
 8001a0c:	2600      	movs	r6, #0
 8001a0e:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <__aeabi_f2d+0x8c>)
 8001a10:	e7d2      	b.n	80019b8 <__aeabi_f2d+0x20>
 8001a12:	0003      	movs	r3, r0
 8001a14:	3b0b      	subs	r3, #11
 8001a16:	409d      	lsls	r5, r3
 8001a18:	002e      	movs	r6, r5
 8001a1a:	2500      	movs	r5, #0
 8001a1c:	e7e3      	b.n	80019e6 <__aeabi_f2d+0x4e>
 8001a1e:	46c0      	nop			; (mov r8, r8)
 8001a20:	00000389 	.word	0x00000389
 8001a24:	000007ff 	.word	0x000007ff

08001a28 <__aeabi_cdrcmple>:
 8001a28:	4684      	mov	ip, r0
 8001a2a:	0010      	movs	r0, r2
 8001a2c:	4662      	mov	r2, ip
 8001a2e:	468c      	mov	ip, r1
 8001a30:	0019      	movs	r1, r3
 8001a32:	4663      	mov	r3, ip
 8001a34:	e000      	b.n	8001a38 <__aeabi_cdcmpeq>
 8001a36:	46c0      	nop			; (mov r8, r8)

08001a38 <__aeabi_cdcmpeq>:
 8001a38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001a3a:	f000 f8f9 	bl	8001c30 <__ledf2>
 8001a3e:	2800      	cmp	r0, #0
 8001a40:	d401      	bmi.n	8001a46 <__aeabi_cdcmpeq+0xe>
 8001a42:	2100      	movs	r1, #0
 8001a44:	42c8      	cmn	r0, r1
 8001a46:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001a48 <__aeabi_dcmpeq>:
 8001a48:	b510      	push	{r4, lr}
 8001a4a:	f000 f849 	bl	8001ae0 <__eqdf2>
 8001a4e:	4240      	negs	r0, r0
 8001a50:	3001      	adds	r0, #1
 8001a52:	bd10      	pop	{r4, pc}

08001a54 <__aeabi_dcmplt>:
 8001a54:	b510      	push	{r4, lr}
 8001a56:	f000 f8eb 	bl	8001c30 <__ledf2>
 8001a5a:	2800      	cmp	r0, #0
 8001a5c:	db01      	blt.n	8001a62 <__aeabi_dcmplt+0xe>
 8001a5e:	2000      	movs	r0, #0
 8001a60:	bd10      	pop	{r4, pc}
 8001a62:	2001      	movs	r0, #1
 8001a64:	bd10      	pop	{r4, pc}
 8001a66:	46c0      	nop			; (mov r8, r8)

08001a68 <__aeabi_dcmple>:
 8001a68:	b510      	push	{r4, lr}
 8001a6a:	f000 f8e1 	bl	8001c30 <__ledf2>
 8001a6e:	2800      	cmp	r0, #0
 8001a70:	dd01      	ble.n	8001a76 <__aeabi_dcmple+0xe>
 8001a72:	2000      	movs	r0, #0
 8001a74:	bd10      	pop	{r4, pc}
 8001a76:	2001      	movs	r0, #1
 8001a78:	bd10      	pop	{r4, pc}
 8001a7a:	46c0      	nop			; (mov r8, r8)

08001a7c <__aeabi_dcmpgt>:
 8001a7c:	b510      	push	{r4, lr}
 8001a7e:	f000 f871 	bl	8001b64 <__gedf2>
 8001a82:	2800      	cmp	r0, #0
 8001a84:	dc01      	bgt.n	8001a8a <__aeabi_dcmpgt+0xe>
 8001a86:	2000      	movs	r0, #0
 8001a88:	bd10      	pop	{r4, pc}
 8001a8a:	2001      	movs	r0, #1
 8001a8c:	bd10      	pop	{r4, pc}
 8001a8e:	46c0      	nop			; (mov r8, r8)

08001a90 <__aeabi_dcmpge>:
 8001a90:	b510      	push	{r4, lr}
 8001a92:	f000 f867 	bl	8001b64 <__gedf2>
 8001a96:	2800      	cmp	r0, #0
 8001a98:	da01      	bge.n	8001a9e <__aeabi_dcmpge+0xe>
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	bd10      	pop	{r4, pc}
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	bd10      	pop	{r4, pc}
 8001aa2:	46c0      	nop			; (mov r8, r8)

08001aa4 <__clzsi2>:
 8001aa4:	211c      	movs	r1, #28
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	041b      	lsls	r3, r3, #16
 8001aaa:	4298      	cmp	r0, r3
 8001aac:	d301      	bcc.n	8001ab2 <__clzsi2+0xe>
 8001aae:	0c00      	lsrs	r0, r0, #16
 8001ab0:	3910      	subs	r1, #16
 8001ab2:	0a1b      	lsrs	r3, r3, #8
 8001ab4:	4298      	cmp	r0, r3
 8001ab6:	d301      	bcc.n	8001abc <__clzsi2+0x18>
 8001ab8:	0a00      	lsrs	r0, r0, #8
 8001aba:	3908      	subs	r1, #8
 8001abc:	091b      	lsrs	r3, r3, #4
 8001abe:	4298      	cmp	r0, r3
 8001ac0:	d301      	bcc.n	8001ac6 <__clzsi2+0x22>
 8001ac2:	0900      	lsrs	r0, r0, #4
 8001ac4:	3904      	subs	r1, #4
 8001ac6:	a202      	add	r2, pc, #8	; (adr r2, 8001ad0 <__clzsi2+0x2c>)
 8001ac8:	5c10      	ldrb	r0, [r2, r0]
 8001aca:	1840      	adds	r0, r0, r1
 8001acc:	4770      	bx	lr
 8001ace:	46c0      	nop			; (mov r8, r8)
 8001ad0:	02020304 	.word	0x02020304
 8001ad4:	01010101 	.word	0x01010101
	...

08001ae0 <__eqdf2>:
 8001ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ae2:	464e      	mov	r6, r9
 8001ae4:	4645      	mov	r5, r8
 8001ae6:	46de      	mov	lr, fp
 8001ae8:	4657      	mov	r7, sl
 8001aea:	4690      	mov	r8, r2
 8001aec:	b5e0      	push	{r5, r6, r7, lr}
 8001aee:	0017      	movs	r7, r2
 8001af0:	031a      	lsls	r2, r3, #12
 8001af2:	0b12      	lsrs	r2, r2, #12
 8001af4:	0005      	movs	r5, r0
 8001af6:	4684      	mov	ip, r0
 8001af8:	4819      	ldr	r0, [pc, #100]	; (8001b60 <__eqdf2+0x80>)
 8001afa:	030e      	lsls	r6, r1, #12
 8001afc:	004c      	lsls	r4, r1, #1
 8001afe:	4691      	mov	r9, r2
 8001b00:	005a      	lsls	r2, r3, #1
 8001b02:	0fdb      	lsrs	r3, r3, #31
 8001b04:	469b      	mov	fp, r3
 8001b06:	0b36      	lsrs	r6, r6, #12
 8001b08:	0d64      	lsrs	r4, r4, #21
 8001b0a:	0fc9      	lsrs	r1, r1, #31
 8001b0c:	0d52      	lsrs	r2, r2, #21
 8001b0e:	4284      	cmp	r4, r0
 8001b10:	d019      	beq.n	8001b46 <__eqdf2+0x66>
 8001b12:	4282      	cmp	r2, r0
 8001b14:	d010      	beq.n	8001b38 <__eqdf2+0x58>
 8001b16:	2001      	movs	r0, #1
 8001b18:	4294      	cmp	r4, r2
 8001b1a:	d10e      	bne.n	8001b3a <__eqdf2+0x5a>
 8001b1c:	454e      	cmp	r6, r9
 8001b1e:	d10c      	bne.n	8001b3a <__eqdf2+0x5a>
 8001b20:	2001      	movs	r0, #1
 8001b22:	45c4      	cmp	ip, r8
 8001b24:	d109      	bne.n	8001b3a <__eqdf2+0x5a>
 8001b26:	4559      	cmp	r1, fp
 8001b28:	d017      	beq.n	8001b5a <__eqdf2+0x7a>
 8001b2a:	2c00      	cmp	r4, #0
 8001b2c:	d105      	bne.n	8001b3a <__eqdf2+0x5a>
 8001b2e:	0030      	movs	r0, r6
 8001b30:	4328      	orrs	r0, r5
 8001b32:	1e43      	subs	r3, r0, #1
 8001b34:	4198      	sbcs	r0, r3
 8001b36:	e000      	b.n	8001b3a <__eqdf2+0x5a>
 8001b38:	2001      	movs	r0, #1
 8001b3a:	bcf0      	pop	{r4, r5, r6, r7}
 8001b3c:	46bb      	mov	fp, r7
 8001b3e:	46b2      	mov	sl, r6
 8001b40:	46a9      	mov	r9, r5
 8001b42:	46a0      	mov	r8, r4
 8001b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b46:	0033      	movs	r3, r6
 8001b48:	2001      	movs	r0, #1
 8001b4a:	432b      	orrs	r3, r5
 8001b4c:	d1f5      	bne.n	8001b3a <__eqdf2+0x5a>
 8001b4e:	42a2      	cmp	r2, r4
 8001b50:	d1f3      	bne.n	8001b3a <__eqdf2+0x5a>
 8001b52:	464b      	mov	r3, r9
 8001b54:	433b      	orrs	r3, r7
 8001b56:	d1f0      	bne.n	8001b3a <__eqdf2+0x5a>
 8001b58:	e7e2      	b.n	8001b20 <__eqdf2+0x40>
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	e7ed      	b.n	8001b3a <__eqdf2+0x5a>
 8001b5e:	46c0      	nop			; (mov r8, r8)
 8001b60:	000007ff 	.word	0x000007ff

08001b64 <__gedf2>:
 8001b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b66:	4647      	mov	r7, r8
 8001b68:	46ce      	mov	lr, r9
 8001b6a:	0004      	movs	r4, r0
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	0016      	movs	r6, r2
 8001b70:	031b      	lsls	r3, r3, #12
 8001b72:	0b1b      	lsrs	r3, r3, #12
 8001b74:	4d2d      	ldr	r5, [pc, #180]	; (8001c2c <__gedf2+0xc8>)
 8001b76:	004a      	lsls	r2, r1, #1
 8001b78:	4699      	mov	r9, r3
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	0043      	lsls	r3, r0, #1
 8001b7e:	030f      	lsls	r7, r1, #12
 8001b80:	46a4      	mov	ip, r4
 8001b82:	46b0      	mov	r8, r6
 8001b84:	0b3f      	lsrs	r7, r7, #12
 8001b86:	0d52      	lsrs	r2, r2, #21
 8001b88:	0fc9      	lsrs	r1, r1, #31
 8001b8a:	0d5b      	lsrs	r3, r3, #21
 8001b8c:	0fc0      	lsrs	r0, r0, #31
 8001b8e:	42aa      	cmp	r2, r5
 8001b90:	d021      	beq.n	8001bd6 <__gedf2+0x72>
 8001b92:	42ab      	cmp	r3, r5
 8001b94:	d013      	beq.n	8001bbe <__gedf2+0x5a>
 8001b96:	2a00      	cmp	r2, #0
 8001b98:	d122      	bne.n	8001be0 <__gedf2+0x7c>
 8001b9a:	433c      	orrs	r4, r7
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d102      	bne.n	8001ba6 <__gedf2+0x42>
 8001ba0:	464d      	mov	r5, r9
 8001ba2:	432e      	orrs	r6, r5
 8001ba4:	d022      	beq.n	8001bec <__gedf2+0x88>
 8001ba6:	2c00      	cmp	r4, #0
 8001ba8:	d010      	beq.n	8001bcc <__gedf2+0x68>
 8001baa:	4281      	cmp	r1, r0
 8001bac:	d022      	beq.n	8001bf4 <__gedf2+0x90>
 8001bae:	2002      	movs	r0, #2
 8001bb0:	3901      	subs	r1, #1
 8001bb2:	4008      	ands	r0, r1
 8001bb4:	3801      	subs	r0, #1
 8001bb6:	bcc0      	pop	{r6, r7}
 8001bb8:	46b9      	mov	r9, r7
 8001bba:	46b0      	mov	r8, r6
 8001bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bbe:	464d      	mov	r5, r9
 8001bc0:	432e      	orrs	r6, r5
 8001bc2:	d129      	bne.n	8001c18 <__gedf2+0xb4>
 8001bc4:	2a00      	cmp	r2, #0
 8001bc6:	d1f0      	bne.n	8001baa <__gedf2+0x46>
 8001bc8:	433c      	orrs	r4, r7
 8001bca:	d1ee      	bne.n	8001baa <__gedf2+0x46>
 8001bcc:	2800      	cmp	r0, #0
 8001bce:	d1f2      	bne.n	8001bb6 <__gedf2+0x52>
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	4240      	negs	r0, r0
 8001bd4:	e7ef      	b.n	8001bb6 <__gedf2+0x52>
 8001bd6:	003d      	movs	r5, r7
 8001bd8:	4325      	orrs	r5, r4
 8001bda:	d11d      	bne.n	8001c18 <__gedf2+0xb4>
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d0ee      	beq.n	8001bbe <__gedf2+0x5a>
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1e2      	bne.n	8001baa <__gedf2+0x46>
 8001be4:	464c      	mov	r4, r9
 8001be6:	4326      	orrs	r6, r4
 8001be8:	d1df      	bne.n	8001baa <__gedf2+0x46>
 8001bea:	e7e0      	b.n	8001bae <__gedf2+0x4a>
 8001bec:	2000      	movs	r0, #0
 8001bee:	2c00      	cmp	r4, #0
 8001bf0:	d0e1      	beq.n	8001bb6 <__gedf2+0x52>
 8001bf2:	e7dc      	b.n	8001bae <__gedf2+0x4a>
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	dc0a      	bgt.n	8001c0e <__gedf2+0xaa>
 8001bf8:	dbe8      	blt.n	8001bcc <__gedf2+0x68>
 8001bfa:	454f      	cmp	r7, r9
 8001bfc:	d8d7      	bhi.n	8001bae <__gedf2+0x4a>
 8001bfe:	d00e      	beq.n	8001c1e <__gedf2+0xba>
 8001c00:	2000      	movs	r0, #0
 8001c02:	454f      	cmp	r7, r9
 8001c04:	d2d7      	bcs.n	8001bb6 <__gedf2+0x52>
 8001c06:	2900      	cmp	r1, #0
 8001c08:	d0e2      	beq.n	8001bd0 <__gedf2+0x6c>
 8001c0a:	0008      	movs	r0, r1
 8001c0c:	e7d3      	b.n	8001bb6 <__gedf2+0x52>
 8001c0e:	4243      	negs	r3, r0
 8001c10:	4158      	adcs	r0, r3
 8001c12:	0040      	lsls	r0, r0, #1
 8001c14:	3801      	subs	r0, #1
 8001c16:	e7ce      	b.n	8001bb6 <__gedf2+0x52>
 8001c18:	2002      	movs	r0, #2
 8001c1a:	4240      	negs	r0, r0
 8001c1c:	e7cb      	b.n	8001bb6 <__gedf2+0x52>
 8001c1e:	45c4      	cmp	ip, r8
 8001c20:	d8c5      	bhi.n	8001bae <__gedf2+0x4a>
 8001c22:	2000      	movs	r0, #0
 8001c24:	45c4      	cmp	ip, r8
 8001c26:	d2c6      	bcs.n	8001bb6 <__gedf2+0x52>
 8001c28:	e7ed      	b.n	8001c06 <__gedf2+0xa2>
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	000007ff 	.word	0x000007ff

08001c30 <__ledf2>:
 8001c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c32:	4647      	mov	r7, r8
 8001c34:	46ce      	mov	lr, r9
 8001c36:	0004      	movs	r4, r0
 8001c38:	0018      	movs	r0, r3
 8001c3a:	0016      	movs	r6, r2
 8001c3c:	031b      	lsls	r3, r3, #12
 8001c3e:	0b1b      	lsrs	r3, r3, #12
 8001c40:	4d2c      	ldr	r5, [pc, #176]	; (8001cf4 <__ledf2+0xc4>)
 8001c42:	004a      	lsls	r2, r1, #1
 8001c44:	4699      	mov	r9, r3
 8001c46:	b580      	push	{r7, lr}
 8001c48:	0043      	lsls	r3, r0, #1
 8001c4a:	030f      	lsls	r7, r1, #12
 8001c4c:	46a4      	mov	ip, r4
 8001c4e:	46b0      	mov	r8, r6
 8001c50:	0b3f      	lsrs	r7, r7, #12
 8001c52:	0d52      	lsrs	r2, r2, #21
 8001c54:	0fc9      	lsrs	r1, r1, #31
 8001c56:	0d5b      	lsrs	r3, r3, #21
 8001c58:	0fc0      	lsrs	r0, r0, #31
 8001c5a:	42aa      	cmp	r2, r5
 8001c5c:	d00d      	beq.n	8001c7a <__ledf2+0x4a>
 8001c5e:	42ab      	cmp	r3, r5
 8001c60:	d010      	beq.n	8001c84 <__ledf2+0x54>
 8001c62:	2a00      	cmp	r2, #0
 8001c64:	d127      	bne.n	8001cb6 <__ledf2+0x86>
 8001c66:	433c      	orrs	r4, r7
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d111      	bne.n	8001c90 <__ledf2+0x60>
 8001c6c:	464d      	mov	r5, r9
 8001c6e:	432e      	orrs	r6, r5
 8001c70:	d10e      	bne.n	8001c90 <__ledf2+0x60>
 8001c72:	2000      	movs	r0, #0
 8001c74:	2c00      	cmp	r4, #0
 8001c76:	d015      	beq.n	8001ca4 <__ledf2+0x74>
 8001c78:	e00e      	b.n	8001c98 <__ledf2+0x68>
 8001c7a:	003d      	movs	r5, r7
 8001c7c:	4325      	orrs	r5, r4
 8001c7e:	d110      	bne.n	8001ca2 <__ledf2+0x72>
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d118      	bne.n	8001cb6 <__ledf2+0x86>
 8001c84:	464d      	mov	r5, r9
 8001c86:	432e      	orrs	r6, r5
 8001c88:	d10b      	bne.n	8001ca2 <__ledf2+0x72>
 8001c8a:	2a00      	cmp	r2, #0
 8001c8c:	d102      	bne.n	8001c94 <__ledf2+0x64>
 8001c8e:	433c      	orrs	r4, r7
 8001c90:	2c00      	cmp	r4, #0
 8001c92:	d00b      	beq.n	8001cac <__ledf2+0x7c>
 8001c94:	4281      	cmp	r1, r0
 8001c96:	d014      	beq.n	8001cc2 <__ledf2+0x92>
 8001c98:	2002      	movs	r0, #2
 8001c9a:	3901      	subs	r1, #1
 8001c9c:	4008      	ands	r0, r1
 8001c9e:	3801      	subs	r0, #1
 8001ca0:	e000      	b.n	8001ca4 <__ledf2+0x74>
 8001ca2:	2002      	movs	r0, #2
 8001ca4:	bcc0      	pop	{r6, r7}
 8001ca6:	46b9      	mov	r9, r7
 8001ca8:	46b0      	mov	r8, r6
 8001caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cac:	2800      	cmp	r0, #0
 8001cae:	d1f9      	bne.n	8001ca4 <__ledf2+0x74>
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	4240      	negs	r0, r0
 8001cb4:	e7f6      	b.n	8001ca4 <__ledf2+0x74>
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1ec      	bne.n	8001c94 <__ledf2+0x64>
 8001cba:	464c      	mov	r4, r9
 8001cbc:	4326      	orrs	r6, r4
 8001cbe:	d1e9      	bne.n	8001c94 <__ledf2+0x64>
 8001cc0:	e7ea      	b.n	8001c98 <__ledf2+0x68>
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	dd04      	ble.n	8001cd0 <__ledf2+0xa0>
 8001cc6:	4243      	negs	r3, r0
 8001cc8:	4158      	adcs	r0, r3
 8001cca:	0040      	lsls	r0, r0, #1
 8001ccc:	3801      	subs	r0, #1
 8001cce:	e7e9      	b.n	8001ca4 <__ledf2+0x74>
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	dbeb      	blt.n	8001cac <__ledf2+0x7c>
 8001cd4:	454f      	cmp	r7, r9
 8001cd6:	d8df      	bhi.n	8001c98 <__ledf2+0x68>
 8001cd8:	d006      	beq.n	8001ce8 <__ledf2+0xb8>
 8001cda:	2000      	movs	r0, #0
 8001cdc:	454f      	cmp	r7, r9
 8001cde:	d2e1      	bcs.n	8001ca4 <__ledf2+0x74>
 8001ce0:	2900      	cmp	r1, #0
 8001ce2:	d0e5      	beq.n	8001cb0 <__ledf2+0x80>
 8001ce4:	0008      	movs	r0, r1
 8001ce6:	e7dd      	b.n	8001ca4 <__ledf2+0x74>
 8001ce8:	45c4      	cmp	ip, r8
 8001cea:	d8d5      	bhi.n	8001c98 <__ledf2+0x68>
 8001cec:	2000      	movs	r0, #0
 8001cee:	45c4      	cmp	ip, r8
 8001cf0:	d2d8      	bcs.n	8001ca4 <__ledf2+0x74>
 8001cf2:	e7f5      	b.n	8001ce0 <__ledf2+0xb0>
 8001cf4:	000007ff 	.word	0x000007ff

08001cf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cfc:	f000 fa70 	bl	80021e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d00:	f000 f848 	bl	8001d94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d04:	f000 f902 	bl	8001f0c <MX_GPIO_Init>
  MX_TIM2_Init();
 8001d08:	f000 f880 	bl	8001e0c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
  SERVO_Init(SERVO_Motor_One,&htim2, TIM_CHANNEL_1);
 8001d0c:	4b1c      	ldr	r3, [pc, #112]	; (8001d80 <main+0x88>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	0019      	movs	r1, r3
 8001d12:	2000      	movs	r0, #0
 8001d14:	f000 f926 	bl	8001f64 <SERVO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SERVO_MoveTo(SERVO_Motor_One, 0);
 8001d18:	2300      	movs	r3, #0
 8001d1a:	1c19      	adds	r1, r3, #0
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	f000 f949 	bl	8001fb4 <SERVO_MoveTo>
	  HAL_Delay(1000);
 8001d22:	23fa      	movs	r3, #250	; 0xfa
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	0018      	movs	r0, r3
 8001d28:	f000 fabe 	bl	80022a8 <HAL_Delay>
	  SERVO_MoveTo(SERVO_Motor_One, 45);
 8001d2c:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <main+0x8c>)
 8001d2e:	1c19      	adds	r1, r3, #0
 8001d30:	2000      	movs	r0, #0
 8001d32:	f000 f93f 	bl	8001fb4 <SERVO_MoveTo>
	  HAL_Delay(500);
 8001d36:	23fa      	movs	r3, #250	; 0xfa
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	f000 fab4 	bl	80022a8 <HAL_Delay>
	  SERVO_MoveTo(SERVO_Motor_One, 90);
 8001d40:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <main+0x90>)
 8001d42:	1c19      	adds	r1, r3, #0
 8001d44:	2000      	movs	r0, #0
 8001d46:	f000 f935 	bl	8001fb4 <SERVO_MoveTo>
	  HAL_Delay(500);
 8001d4a:	23fa      	movs	r3, #250	; 0xfa
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	0018      	movs	r0, r3
 8001d50:	f000 faaa 	bl	80022a8 <HAL_Delay>
	  SERVO_MoveTo(SERVO_Motor_One, 135);
 8001d54:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <main+0x94>)
 8001d56:	1c19      	adds	r1, r3, #0
 8001d58:	2000      	movs	r0, #0
 8001d5a:	f000 f92b 	bl	8001fb4 <SERVO_MoveTo>
	  HAL_Delay(500);
 8001d5e:	23fa      	movs	r3, #250	; 0xfa
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	0018      	movs	r0, r3
 8001d64:	f000 faa0 	bl	80022a8 <HAL_Delay>
	  SERVO_MoveTo(SERVO_Motor_One, 180);
 8001d68:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <main+0x98>)
 8001d6a:	1c19      	adds	r1, r3, #0
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	f000 f921 	bl	8001fb4 <SERVO_MoveTo>
	  HAL_Delay(500);
 8001d72:	23fa      	movs	r3, #250	; 0xfa
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	0018      	movs	r0, r3
 8001d78:	f000 fa96 	bl	80022a8 <HAL_Delay>
	  SERVO_MoveTo(SERVO_Motor_One, 0);
 8001d7c:	e7cc      	b.n	8001d18 <main+0x20>
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	20000028 	.word	0x20000028
 8001d84:	42340000 	.word	0x42340000
 8001d88:	42b40000 	.word	0x42b40000
 8001d8c:	43070000 	.word	0x43070000
 8001d90:	43340000 	.word	0x43340000

08001d94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d94:	b590      	push	{r4, r7, lr}
 8001d96:	b093      	sub	sp, #76	; 0x4c
 8001d98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d9a:	2414      	movs	r4, #20
 8001d9c:	193b      	adds	r3, r7, r4
 8001d9e:	0018      	movs	r0, r3
 8001da0:	2334      	movs	r3, #52	; 0x34
 8001da2:	001a      	movs	r2, r3
 8001da4:	2100      	movs	r1, #0
 8001da6:	f002 f857 	bl	8003e58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001daa:	1d3b      	adds	r3, r7, #4
 8001dac:	0018      	movs	r0, r3
 8001dae:	2310      	movs	r3, #16
 8001db0:	001a      	movs	r2, r3
 8001db2:	2100      	movs	r1, #0
 8001db4:	f002 f850 	bl	8003e58 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8001db8:	193b      	adds	r3, r7, r4
 8001dba:	2220      	movs	r2, #32
 8001dbc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001dbe:	193b      	adds	r3, r7, r4
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001dc4:	193b      	adds	r3, r7, r4
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dca:	193b      	adds	r3, r7, r4
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f000 fcbb 	bl	8002748 <HAL_RCC_OscConfig>
 8001dd2:	1e03      	subs	r3, r0, #0
 8001dd4:	d001      	beq.n	8001dda <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001dd6:	f000 f8bf 	bl	8001f58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dda:	1d3b      	adds	r3, r7, #4
 8001ddc:	2207      	movs	r2, #7
 8001dde:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8001de0:	1d3b      	adds	r3, r7, #4
 8001de2:	2203      	movs	r2, #3
 8001de4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001de6:	1d3b      	adds	r3, r7, #4
 8001de8:	2200      	movs	r2, #0
 8001dea:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001dec:	1d3b      	adds	r3, r7, #4
 8001dee:	2200      	movs	r2, #0
 8001df0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	2101      	movs	r1, #1
 8001df6:	0018      	movs	r0, r3
 8001df8:	f001 f82c 	bl	8002e54 <HAL_RCC_ClockConfig>
 8001dfc:	1e03      	subs	r3, r0, #0
 8001dfe:	d001      	beq.n	8001e04 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8001e00:	f000 f8aa 	bl	8001f58 <Error_Handler>
  }
}
 8001e04:	46c0      	nop			; (mov r8, r8)
 8001e06:	46bd      	mov	sp, r7
 8001e08:	b013      	add	sp, #76	; 0x4c
 8001e0a:	bd90      	pop	{r4, r7, pc}

08001e0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08e      	sub	sp, #56	; 0x38
 8001e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e12:	2328      	movs	r3, #40	; 0x28
 8001e14:	18fb      	adds	r3, r7, r3
 8001e16:	0018      	movs	r0, r3
 8001e18:	2310      	movs	r3, #16
 8001e1a:	001a      	movs	r2, r3
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	f002 f81b 	bl	8003e58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e22:	2320      	movs	r3, #32
 8001e24:	18fb      	adds	r3, r7, r3
 8001e26:	0018      	movs	r0, r3
 8001e28:	2308      	movs	r3, #8
 8001e2a:	001a      	movs	r2, r3
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	f002 f813 	bl	8003e58 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e32:	1d3b      	adds	r3, r7, #4
 8001e34:	0018      	movs	r0, r3
 8001e36:	231c      	movs	r3, #28
 8001e38:	001a      	movs	r2, r3
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	f002 f80c 	bl	8003e58 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e40:	4b30      	ldr	r3, [pc, #192]	; (8001f04 <MX_TIM2_Init+0xf8>)
 8001e42:	2280      	movs	r2, #128	; 0x80
 8001e44:	05d2      	lsls	r2, r2, #23
 8001e46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 19;
 8001e48:	4b2e      	ldr	r3, [pc, #184]	; (8001f04 <MX_TIM2_Init+0xf8>)
 8001e4a:	2213      	movs	r2, #19
 8001e4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e4e:	4b2d      	ldr	r3, [pc, #180]	; (8001f04 <MX_TIM2_Init+0xf8>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 48000;
 8001e54:	4b2b      	ldr	r3, [pc, #172]	; (8001f04 <MX_TIM2_Init+0xf8>)
 8001e56:	4a2c      	ldr	r2, [pc, #176]	; (8001f08 <MX_TIM2_Init+0xfc>)
 8001e58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e5a:	4b2a      	ldr	r3, [pc, #168]	; (8001f04 <MX_TIM2_Init+0xf8>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e60:	4b28      	ldr	r3, [pc, #160]	; (8001f04 <MX_TIM2_Init+0xf8>)
 8001e62:	2280      	movs	r2, #128	; 0x80
 8001e64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e66:	4b27      	ldr	r3, [pc, #156]	; (8001f04 <MX_TIM2_Init+0xf8>)
 8001e68:	0018      	movs	r0, r3
 8001e6a:	f001 f93f 	bl	80030ec <HAL_TIM_Base_Init>
 8001e6e:	1e03      	subs	r3, r0, #0
 8001e70:	d001      	beq.n	8001e76 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001e72:	f000 f871 	bl	8001f58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e76:	2128      	movs	r1, #40	; 0x28
 8001e78:	187b      	adds	r3, r7, r1
 8001e7a:	2280      	movs	r2, #128	; 0x80
 8001e7c:	0152      	lsls	r2, r2, #5
 8001e7e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e80:	187a      	adds	r2, r7, r1
 8001e82:	4b20      	ldr	r3, [pc, #128]	; (8001f04 <MX_TIM2_Init+0xf8>)
 8001e84:	0011      	movs	r1, r2
 8001e86:	0018      	movs	r0, r3
 8001e88:	f001 fb56 	bl	8003538 <HAL_TIM_ConfigClockSource>
 8001e8c:	1e03      	subs	r3, r0, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001e90:	f000 f862 	bl	8001f58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e94:	4b1b      	ldr	r3, [pc, #108]	; (8001f04 <MX_TIM2_Init+0xf8>)
 8001e96:	0018      	movs	r0, r3
 8001e98:	f001 f978 	bl	800318c <HAL_TIM_PWM_Init>
 8001e9c:	1e03      	subs	r3, r0, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001ea0:	f000 f85a 	bl	8001f58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ea4:	2120      	movs	r1, #32
 8001ea6:	187b      	adds	r3, r7, r1
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eac:	187b      	adds	r3, r7, r1
 8001eae:	2200      	movs	r2, #0
 8001eb0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001eb2:	187a      	adds	r2, r7, r1
 8001eb4:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <MX_TIM2_Init+0xf8>)
 8001eb6:	0011      	movs	r1, r2
 8001eb8:	0018      	movs	r0, r3
 8001eba:	f001 ff4b 	bl	8003d54 <HAL_TIMEx_MasterConfigSynchronization>
 8001ebe:	1e03      	subs	r3, r0, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8001ec2:	f000 f849 	bl	8001f58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ec6:	1d3b      	adds	r3, r7, #4
 8001ec8:	2260      	movs	r2, #96	; 0x60
 8001eca:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001ecc:	1d3b      	adds	r3, r7, #4
 8001ece:	2200      	movs	r2, #0
 8001ed0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ed2:	1d3b      	adds	r3, r7, #4
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ed8:	1d3b      	adds	r3, r7, #4
 8001eda:	2200      	movs	r2, #0
 8001edc:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ede:	1d39      	adds	r1, r7, #4
 8001ee0:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <MX_TIM2_Init+0xf8>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f001 fa61 	bl	80033ac <HAL_TIM_PWM_ConfigChannel>
 8001eea:	1e03      	subs	r3, r0, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8001eee:	f000 f833 	bl	8001f58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ef2:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <MX_TIM2_Init+0xf8>)
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	f000 f8ef 	bl	80020d8 <HAL_TIM_MspPostInit>

}
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	46bd      	mov	sp, r7
 8001efe:	b00e      	add	sp, #56	; 0x38
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	20000028 	.word	0x20000028
 8001f08:	0000bb80 	.word	0x0000bb80

08001f0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f12:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <MX_GPIO_Init+0x48>)
 8001f14:	695a      	ldr	r2, [r3, #20]
 8001f16:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <MX_GPIO_Init+0x48>)
 8001f18:	2180      	movs	r1, #128	; 0x80
 8001f1a:	03c9      	lsls	r1, r1, #15
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	615a      	str	r2, [r3, #20]
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <MX_GPIO_Init+0x48>)
 8001f22:	695a      	ldr	r2, [r3, #20]
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	03db      	lsls	r3, r3, #15
 8001f28:	4013      	ands	r3, r2
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2e:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <MX_GPIO_Init+0x48>)
 8001f30:	695a      	ldr	r2, [r3, #20]
 8001f32:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <MX_GPIO_Init+0x48>)
 8001f34:	2180      	movs	r1, #128	; 0x80
 8001f36:	0289      	lsls	r1, r1, #10
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	615a      	str	r2, [r3, #20]
 8001f3c:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <MX_GPIO_Init+0x48>)
 8001f3e:	695a      	ldr	r2, [r3, #20]
 8001f40:	2380      	movs	r3, #128	; 0x80
 8001f42:	029b      	lsls	r3, r3, #10
 8001f44:	4013      	ands	r3, r2
 8001f46:	603b      	str	r3, [r7, #0]
 8001f48:	683b      	ldr	r3, [r7, #0]

}
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	b002      	add	sp, #8
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	46c0      	nop			; (mov r8, r8)
 8001f54:	40021000 	.word	0x40021000

08001f58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f5c:	b672      	cpsid	i
}
 8001f5e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f60:	e7fe      	b.n	8001f60 <Error_Handler+0x8>
	...

08001f64 <SERVO_Init>:

static SERVO_info SERVO_Info[SERVO_NUM] = {0};


void SERVO_Init(uint16_t SERVO_Number, uint32_t TIM,uint32_t CHANNEL)
{
 8001f64:	b590      	push	{r4, r7, lr}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	607a      	str	r2, [r7, #4]
 8001f6e:	240e      	movs	r4, #14
 8001f70:	193b      	adds	r3, r7, r4
 8001f72:	1c02      	adds	r2, r0, #0
 8001f74:	801a      	strh	r2, [r3, #0]
	HAL_TIM_PWM_Start(TIM,CHANNEL);
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	0011      	movs	r1, r2
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f001 f95d 	bl	800323c <HAL_TIM_PWM_Start>


	//	Calculate & Save The Servo Pulse Information

	SERVO_Info[SERVO_Number].period_Min = (uint16_t) (47999 * (0.5/20.0));
 8001f82:	0020      	movs	r0, r4
 8001f84:	183b      	adds	r3, r7, r0
 8001f86:	881a      	ldrh	r2, [r3, #0]
 8001f88:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <SERVO_Init+0x44>)
 8001f8a:	0092      	lsls	r2, r2, #2
 8001f8c:	4907      	ldr	r1, [pc, #28]	; (8001fac <SERVO_Init+0x48>)
 8001f8e:	52d1      	strh	r1, [r2, r3]
	SERVO_Info[SERVO_Number].period_Max = (uint16_t) (47999 * (2.4/20.0));
 8001f90:	183b      	adds	r3, r7, r0
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	4a04      	ldr	r2, [pc, #16]	; (8001fa8 <SERVO_Init+0x44>)
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	18d3      	adds	r3, r2, r3
 8001f9a:	3302      	adds	r3, #2
 8001f9c:	4a04      	ldr	r2, [pc, #16]	; (8001fb0 <SERVO_Init+0x4c>)
 8001f9e:	801a      	strh	r2, [r3, #0]


}
 8001fa0:	46c0      	nop			; (mov r8, r8)
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	b005      	add	sp, #20
 8001fa6:	bd90      	pop	{r4, r7, pc}
 8001fa8:	20000070 	.word	0x20000070
 8001fac:	000004af 	.word	0x000004af
 8001fb0:	0000167f 	.word	0x0000167f

08001fb4 <SERVO_MoveTo>:

void SERVO_MoveTo(uint16_t SERVO_Number, float Angle)
{
 8001fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	0002      	movs	r2, r0
 8001fbc:	6039      	str	r1, [r7, #0]
 8001fbe:	1dbb      	adds	r3, r7, #6
 8001fc0:	801a      	strh	r2, [r3, #0]
	uint16_t Pulse = 0;
 8001fc2:	260e      	movs	r6, #14
 8001fc4:	19bb      	adds	r3, r7, r6
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	801a      	strh	r2, [r3, #0]

	Pulse = ((Angle*(SERVO_Info[SERVO_Number].period_Max - SERVO_Info[SERVO_Number].period_Min))/180.0)
 8001fca:	1dbb      	adds	r3, r7, #6
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	4a1f      	ldr	r2, [pc, #124]	; (800204c <SERVO_MoveTo+0x98>)
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	18d3      	adds	r3, r2, r3
 8001fd4:	3302      	adds	r3, #2
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	0019      	movs	r1, r3
 8001fda:	1dbb      	adds	r3, r7, #6
 8001fdc:	881a      	ldrh	r2, [r3, #0]
 8001fde:	4b1b      	ldr	r3, [pc, #108]	; (800204c <SERVO_MoveTo+0x98>)
 8001fe0:	0092      	lsls	r2, r2, #2
 8001fe2:	5ad3      	ldrh	r3, [r2, r3]
 8001fe4:	1acb      	subs	r3, r1, r3
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	f7fe fa5e 	bl	80004a8 <__aeabi_i2f>
 8001fec:	1c03      	adds	r3, r0, #0
 8001fee:	6839      	ldr	r1, [r7, #0]
 8001ff0:	1c18      	adds	r0, r3, #0
 8001ff2:	f7fe f933 	bl	800025c <__aeabi_fmul>
 8001ff6:	1c03      	adds	r3, r0, #0
 8001ff8:	1c18      	adds	r0, r3, #0
 8001ffa:	f7ff fccd 	bl	8001998 <__aeabi_f2d>
 8001ffe:	2200      	movs	r2, #0
 8002000:	4b13      	ldr	r3, [pc, #76]	; (8002050 <SERVO_MoveTo+0x9c>)
 8002002:	f7fe fddb 	bl	8000bbc <__aeabi_ddiv>
 8002006:	0002      	movs	r2, r0
 8002008:	000b      	movs	r3, r1
 800200a:	0014      	movs	r4, r2
 800200c:	001d      	movs	r5, r3
			+ SERVO_Info[SERVO_Number].period_Min;
 800200e:	1dbb      	adds	r3, r7, #6
 8002010:	881a      	ldrh	r2, [r3, #0]
 8002012:	4b0e      	ldr	r3, [pc, #56]	; (800204c <SERVO_MoveTo+0x98>)
 8002014:	0092      	lsls	r2, r2, #2
 8002016:	5ad3      	ldrh	r3, [r2, r3]
 8002018:	0018      	movs	r0, r3
 800201a:	f7ff fc8d 	bl	8001938 <__aeabi_i2d>
 800201e:	0002      	movs	r2, r0
 8002020:	000b      	movs	r3, r1
 8002022:	0020      	movs	r0, r4
 8002024:	0029      	movs	r1, r5
 8002026:	f7fe fa8d 	bl	8000544 <__aeabi_dadd>
 800202a:	0002      	movs	r2, r0
 800202c:	000b      	movs	r3, r1
	Pulse = ((Angle*(SERVO_Info[SERVO_Number].period_Max - SERVO_Info[SERVO_Number].period_Min))/180.0)
 800202e:	19bc      	adds	r4, r7, r6
 8002030:	0010      	movs	r0, r2
 8002032:	0019      	movs	r1, r3
 8002034:	f7fe f8f4 	bl	8000220 <__aeabi_d2uiz>
 8002038:	0003      	movs	r3, r0
 800203a:	8023      	strh	r3, [r4, #0]

	*(&TIM2->CCR1) = Pulse;
 800203c:	4b05      	ldr	r3, [pc, #20]	; (8002054 <SERVO_MoveTo+0xa0>)
 800203e:	19ba      	adds	r2, r7, r6
 8002040:	8812      	ldrh	r2, [r2, #0]
 8002042:	601a      	str	r2, [r3, #0]
}
 8002044:	46c0      	nop			; (mov r8, r8)
 8002046:	46bd      	mov	sp, r7
 8002048:	b005      	add	sp, #20
 800204a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800204c:	20000070 	.word	0x20000070
 8002050:	40668000 	.word	0x40668000
 8002054:	40000034 	.word	0x40000034

08002058 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800205e:	4b0f      	ldr	r3, [pc, #60]	; (800209c <HAL_MspInit+0x44>)
 8002060:	699a      	ldr	r2, [r3, #24]
 8002062:	4b0e      	ldr	r3, [pc, #56]	; (800209c <HAL_MspInit+0x44>)
 8002064:	2101      	movs	r1, #1
 8002066:	430a      	orrs	r2, r1
 8002068:	619a      	str	r2, [r3, #24]
 800206a:	4b0c      	ldr	r3, [pc, #48]	; (800209c <HAL_MspInit+0x44>)
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	2201      	movs	r2, #1
 8002070:	4013      	ands	r3, r2
 8002072:	607b      	str	r3, [r7, #4]
 8002074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002076:	4b09      	ldr	r3, [pc, #36]	; (800209c <HAL_MspInit+0x44>)
 8002078:	69da      	ldr	r2, [r3, #28]
 800207a:	4b08      	ldr	r3, [pc, #32]	; (800209c <HAL_MspInit+0x44>)
 800207c:	2180      	movs	r1, #128	; 0x80
 800207e:	0549      	lsls	r1, r1, #21
 8002080:	430a      	orrs	r2, r1
 8002082:	61da      	str	r2, [r3, #28]
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <HAL_MspInit+0x44>)
 8002086:	69da      	ldr	r2, [r3, #28]
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	055b      	lsls	r3, r3, #21
 800208c:	4013      	ands	r3, r2
 800208e:	603b      	str	r3, [r7, #0]
 8002090:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	46bd      	mov	sp, r7
 8002096:	b002      	add	sp, #8
 8002098:	bd80      	pop	{r7, pc}
 800209a:	46c0      	nop			; (mov r8, r8)
 800209c:	40021000 	.word	0x40021000

080020a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	2380      	movs	r3, #128	; 0x80
 80020ae:	05db      	lsls	r3, r3, #23
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d10b      	bne.n	80020cc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020b4:	4b07      	ldr	r3, [pc, #28]	; (80020d4 <HAL_TIM_Base_MspInit+0x34>)
 80020b6:	69da      	ldr	r2, [r3, #28]
 80020b8:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <HAL_TIM_Base_MspInit+0x34>)
 80020ba:	2101      	movs	r1, #1
 80020bc:	430a      	orrs	r2, r1
 80020be:	61da      	str	r2, [r3, #28]
 80020c0:	4b04      	ldr	r3, [pc, #16]	; (80020d4 <HAL_TIM_Base_MspInit+0x34>)
 80020c2:	69db      	ldr	r3, [r3, #28]
 80020c4:	2201      	movs	r2, #1
 80020c6:	4013      	ands	r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80020cc:	46c0      	nop			; (mov r8, r8)
 80020ce:	46bd      	mov	sp, r7
 80020d0:	b004      	add	sp, #16
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40021000 	.word	0x40021000

080020d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020d8:	b590      	push	{r4, r7, lr}
 80020da:	b089      	sub	sp, #36	; 0x24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e0:	240c      	movs	r4, #12
 80020e2:	193b      	adds	r3, r7, r4
 80020e4:	0018      	movs	r0, r3
 80020e6:	2314      	movs	r3, #20
 80020e8:	001a      	movs	r2, r3
 80020ea:	2100      	movs	r1, #0
 80020ec:	f001 feb4 	bl	8003e58 <memset>
  if(htim->Instance==TIM2)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	2380      	movs	r3, #128	; 0x80
 80020f6:	05db      	lsls	r3, r3, #23
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d124      	bne.n	8002146 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fc:	4b14      	ldr	r3, [pc, #80]	; (8002150 <HAL_TIM_MspPostInit+0x78>)
 80020fe:	695a      	ldr	r2, [r3, #20]
 8002100:	4b13      	ldr	r3, [pc, #76]	; (8002150 <HAL_TIM_MspPostInit+0x78>)
 8002102:	2180      	movs	r1, #128	; 0x80
 8002104:	0289      	lsls	r1, r1, #10
 8002106:	430a      	orrs	r2, r1
 8002108:	615a      	str	r2, [r3, #20]
 800210a:	4b11      	ldr	r3, [pc, #68]	; (8002150 <HAL_TIM_MspPostInit+0x78>)
 800210c:	695a      	ldr	r2, [r3, #20]
 800210e:	2380      	movs	r3, #128	; 0x80
 8002110:	029b      	lsls	r3, r3, #10
 8002112:	4013      	ands	r3, r2
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002118:	0021      	movs	r1, r4
 800211a:	187b      	adds	r3, r7, r1
 800211c:	2201      	movs	r2, #1
 800211e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002120:	187b      	adds	r3, r7, r1
 8002122:	2202      	movs	r2, #2
 8002124:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002126:	187b      	adds	r3, r7, r1
 8002128:	2200      	movs	r2, #0
 800212a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212c:	187b      	adds	r3, r7, r1
 800212e:	2200      	movs	r2, #0
 8002130:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002132:	187b      	adds	r3, r7, r1
 8002134:	2202      	movs	r2, #2
 8002136:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002138:	187a      	adds	r2, r7, r1
 800213a:	2390      	movs	r3, #144	; 0x90
 800213c:	05db      	lsls	r3, r3, #23
 800213e:	0011      	movs	r1, r2
 8002140:	0018      	movs	r0, r3
 8002142:	f000 f989 	bl	8002458 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	46bd      	mov	sp, r7
 800214a:	b009      	add	sp, #36	; 0x24
 800214c:	bd90      	pop	{r4, r7, pc}
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	40021000 	.word	0x40021000

08002154 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002158:	e7fe      	b.n	8002158 <NMI_Handler+0x4>

0800215a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800215e:	e7fe      	b.n	800215e <HardFault_Handler+0x4>

08002160 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002164:	46c0      	nop			; (mov r8, r8)
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800216e:	46c0      	nop			; (mov r8, r8)
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002178:	f000 f87a 	bl	8002270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800217c:	46c0      	nop			; (mov r8, r8)
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002186:	46c0      	nop			; (mov r8, r8)
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800218c:	480d      	ldr	r0, [pc, #52]	; (80021c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800218e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002190:	f7ff fff7 	bl	8002182 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002194:	480c      	ldr	r0, [pc, #48]	; (80021c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002196:	490d      	ldr	r1, [pc, #52]	; (80021cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002198:	4a0d      	ldr	r2, [pc, #52]	; (80021d0 <LoopForever+0xe>)
  movs r3, #0
 800219a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800219c:	e002      	b.n	80021a4 <LoopCopyDataInit>

0800219e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800219e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021a2:	3304      	adds	r3, #4

080021a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021a8:	d3f9      	bcc.n	800219e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021aa:	4a0a      	ldr	r2, [pc, #40]	; (80021d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021ac:	4c0a      	ldr	r4, [pc, #40]	; (80021d8 <LoopForever+0x16>)
  movs r3, #0
 80021ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021b0:	e001      	b.n	80021b6 <LoopFillZerobss>

080021b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021b4:	3204      	adds	r2, #4

080021b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021b8:	d3fb      	bcc.n	80021b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80021ba:	f001 fe29 	bl	8003e10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021be:	f7ff fd9b 	bl	8001cf8 <main>

080021c2 <LoopForever>:

LoopForever:
    b LoopForever
 80021c2:	e7fe      	b.n	80021c2 <LoopForever>
  ldr   r0, =_estack
 80021c4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80021c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80021d0:	08003f38 	.word	0x08003f38
  ldr r2, =_sbss
 80021d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80021d8:	20000078 	.word	0x20000078

080021dc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021dc:	e7fe      	b.n	80021dc <ADC1_COMP_IRQHandler>
	...

080021e0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021e4:	4b07      	ldr	r3, [pc, #28]	; (8002204 <HAL_Init+0x24>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_Init+0x24>)
 80021ea:	2110      	movs	r1, #16
 80021ec:	430a      	orrs	r2, r1
 80021ee:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80021f0:	2003      	movs	r0, #3
 80021f2:	f000 f809 	bl	8002208 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021f6:	f7ff ff2f 	bl	8002058 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	0018      	movs	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	46c0      	nop			; (mov r8, r8)
 8002204:	40022000 	.word	0x40022000

08002208 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002208:	b590      	push	{r4, r7, lr}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002210:	4b14      	ldr	r3, [pc, #80]	; (8002264 <HAL_InitTick+0x5c>)
 8002212:	681c      	ldr	r4, [r3, #0]
 8002214:	4b14      	ldr	r3, [pc, #80]	; (8002268 <HAL_InitTick+0x60>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	0019      	movs	r1, r3
 800221a:	23fa      	movs	r3, #250	; 0xfa
 800221c:	0098      	lsls	r0, r3, #2
 800221e:	f7fd ff73 	bl	8000108 <__udivsi3>
 8002222:	0003      	movs	r3, r0
 8002224:	0019      	movs	r1, r3
 8002226:	0020      	movs	r0, r4
 8002228:	f7fd ff6e 	bl	8000108 <__udivsi3>
 800222c:	0003      	movs	r3, r0
 800222e:	0018      	movs	r0, r3
 8002230:	f000 f905 	bl	800243e <HAL_SYSTICK_Config>
 8002234:	1e03      	subs	r3, r0, #0
 8002236:	d001      	beq.n	800223c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e00f      	b.n	800225c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b03      	cmp	r3, #3
 8002240:	d80b      	bhi.n	800225a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	2301      	movs	r3, #1
 8002246:	425b      	negs	r3, r3
 8002248:	2200      	movs	r2, #0
 800224a:	0018      	movs	r0, r3
 800224c:	f000 f8e2 	bl	8002414 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002250:	4b06      	ldr	r3, [pc, #24]	; (800226c <HAL_InitTick+0x64>)
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002256:	2300      	movs	r3, #0
 8002258:	e000      	b.n	800225c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
}
 800225c:	0018      	movs	r0, r3
 800225e:	46bd      	mov	sp, r7
 8002260:	b003      	add	sp, #12
 8002262:	bd90      	pop	{r4, r7, pc}
 8002264:	20000000 	.word	0x20000000
 8002268:	20000008 	.word	0x20000008
 800226c:	20000004 	.word	0x20000004

08002270 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002274:	4b05      	ldr	r3, [pc, #20]	; (800228c <HAL_IncTick+0x1c>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	001a      	movs	r2, r3
 800227a:	4b05      	ldr	r3, [pc, #20]	; (8002290 <HAL_IncTick+0x20>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	18d2      	adds	r2, r2, r3
 8002280:	4b03      	ldr	r3, [pc, #12]	; (8002290 <HAL_IncTick+0x20>)
 8002282:	601a      	str	r2, [r3, #0]
}
 8002284:	46c0      	nop			; (mov r8, r8)
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	46c0      	nop			; (mov r8, r8)
 800228c:	20000008 	.word	0x20000008
 8002290:	20000074 	.word	0x20000074

08002294 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  return uwTick;
 8002298:	4b02      	ldr	r3, [pc, #8]	; (80022a4 <HAL_GetTick+0x10>)
 800229a:	681b      	ldr	r3, [r3, #0]
}
 800229c:	0018      	movs	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	46c0      	nop			; (mov r8, r8)
 80022a4:	20000074 	.word	0x20000074

080022a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022b0:	f7ff fff0 	bl	8002294 <HAL_GetTick>
 80022b4:	0003      	movs	r3, r0
 80022b6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	3301      	adds	r3, #1
 80022c0:	d005      	beq.n	80022ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022c2:	4b0a      	ldr	r3, [pc, #40]	; (80022ec <HAL_Delay+0x44>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	001a      	movs	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	189b      	adds	r3, r3, r2
 80022cc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	f7ff ffe0 	bl	8002294 <HAL_GetTick>
 80022d4:	0002      	movs	r2, r0
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d8f7      	bhi.n	80022d0 <HAL_Delay+0x28>
  {
  }
}
 80022e0:	46c0      	nop			; (mov r8, r8)
 80022e2:	46c0      	nop			; (mov r8, r8)
 80022e4:	46bd      	mov	sp, r7
 80022e6:	b004      	add	sp, #16
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	20000008 	.word	0x20000008

080022f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022f0:	b590      	push	{r4, r7, lr}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	0002      	movs	r2, r0
 80022f8:	6039      	str	r1, [r7, #0]
 80022fa:	1dfb      	adds	r3, r7, #7
 80022fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80022fe:	1dfb      	adds	r3, r7, #7
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b7f      	cmp	r3, #127	; 0x7f
 8002304:	d828      	bhi.n	8002358 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002306:	4a2f      	ldr	r2, [pc, #188]	; (80023c4 <__NVIC_SetPriority+0xd4>)
 8002308:	1dfb      	adds	r3, r7, #7
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	b25b      	sxtb	r3, r3
 800230e:	089b      	lsrs	r3, r3, #2
 8002310:	33c0      	adds	r3, #192	; 0xc0
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	589b      	ldr	r3, [r3, r2]
 8002316:	1dfa      	adds	r2, r7, #7
 8002318:	7812      	ldrb	r2, [r2, #0]
 800231a:	0011      	movs	r1, r2
 800231c:	2203      	movs	r2, #3
 800231e:	400a      	ands	r2, r1
 8002320:	00d2      	lsls	r2, r2, #3
 8002322:	21ff      	movs	r1, #255	; 0xff
 8002324:	4091      	lsls	r1, r2
 8002326:	000a      	movs	r2, r1
 8002328:	43d2      	mvns	r2, r2
 800232a:	401a      	ands	r2, r3
 800232c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	019b      	lsls	r3, r3, #6
 8002332:	22ff      	movs	r2, #255	; 0xff
 8002334:	401a      	ands	r2, r3
 8002336:	1dfb      	adds	r3, r7, #7
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	0018      	movs	r0, r3
 800233c:	2303      	movs	r3, #3
 800233e:	4003      	ands	r3, r0
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002344:	481f      	ldr	r0, [pc, #124]	; (80023c4 <__NVIC_SetPriority+0xd4>)
 8002346:	1dfb      	adds	r3, r7, #7
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	b25b      	sxtb	r3, r3
 800234c:	089b      	lsrs	r3, r3, #2
 800234e:	430a      	orrs	r2, r1
 8002350:	33c0      	adds	r3, #192	; 0xc0
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002356:	e031      	b.n	80023bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002358:	4a1b      	ldr	r2, [pc, #108]	; (80023c8 <__NVIC_SetPriority+0xd8>)
 800235a:	1dfb      	adds	r3, r7, #7
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	0019      	movs	r1, r3
 8002360:	230f      	movs	r3, #15
 8002362:	400b      	ands	r3, r1
 8002364:	3b08      	subs	r3, #8
 8002366:	089b      	lsrs	r3, r3, #2
 8002368:	3306      	adds	r3, #6
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	18d3      	adds	r3, r2, r3
 800236e:	3304      	adds	r3, #4
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	1dfa      	adds	r2, r7, #7
 8002374:	7812      	ldrb	r2, [r2, #0]
 8002376:	0011      	movs	r1, r2
 8002378:	2203      	movs	r2, #3
 800237a:	400a      	ands	r2, r1
 800237c:	00d2      	lsls	r2, r2, #3
 800237e:	21ff      	movs	r1, #255	; 0xff
 8002380:	4091      	lsls	r1, r2
 8002382:	000a      	movs	r2, r1
 8002384:	43d2      	mvns	r2, r2
 8002386:	401a      	ands	r2, r3
 8002388:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	019b      	lsls	r3, r3, #6
 800238e:	22ff      	movs	r2, #255	; 0xff
 8002390:	401a      	ands	r2, r3
 8002392:	1dfb      	adds	r3, r7, #7
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	0018      	movs	r0, r3
 8002398:	2303      	movs	r3, #3
 800239a:	4003      	ands	r3, r0
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023a0:	4809      	ldr	r0, [pc, #36]	; (80023c8 <__NVIC_SetPriority+0xd8>)
 80023a2:	1dfb      	adds	r3, r7, #7
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	001c      	movs	r4, r3
 80023a8:	230f      	movs	r3, #15
 80023aa:	4023      	ands	r3, r4
 80023ac:	3b08      	subs	r3, #8
 80023ae:	089b      	lsrs	r3, r3, #2
 80023b0:	430a      	orrs	r2, r1
 80023b2:	3306      	adds	r3, #6
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	18c3      	adds	r3, r0, r3
 80023b8:	3304      	adds	r3, #4
 80023ba:	601a      	str	r2, [r3, #0]
}
 80023bc:	46c0      	nop			; (mov r8, r8)
 80023be:	46bd      	mov	sp, r7
 80023c0:	b003      	add	sp, #12
 80023c2:	bd90      	pop	{r4, r7, pc}
 80023c4:	e000e100 	.word	0xe000e100
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	1e5a      	subs	r2, r3, #1
 80023d8:	2380      	movs	r3, #128	; 0x80
 80023da:	045b      	lsls	r3, r3, #17
 80023dc:	429a      	cmp	r2, r3
 80023de:	d301      	bcc.n	80023e4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023e0:	2301      	movs	r3, #1
 80023e2:	e010      	b.n	8002406 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023e4:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <SysTick_Config+0x44>)
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	3a01      	subs	r2, #1
 80023ea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ec:	2301      	movs	r3, #1
 80023ee:	425b      	negs	r3, r3
 80023f0:	2103      	movs	r1, #3
 80023f2:	0018      	movs	r0, r3
 80023f4:	f7ff ff7c 	bl	80022f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <SysTick_Config+0x44>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023fe:	4b04      	ldr	r3, [pc, #16]	; (8002410 <SysTick_Config+0x44>)
 8002400:	2207      	movs	r2, #7
 8002402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002404:	2300      	movs	r3, #0
}
 8002406:	0018      	movs	r0, r3
 8002408:	46bd      	mov	sp, r7
 800240a:	b002      	add	sp, #8
 800240c:	bd80      	pop	{r7, pc}
 800240e:	46c0      	nop			; (mov r8, r8)
 8002410:	e000e010 	.word	0xe000e010

08002414 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	60b9      	str	r1, [r7, #8]
 800241c:	607a      	str	r2, [r7, #4]
 800241e:	210f      	movs	r1, #15
 8002420:	187b      	adds	r3, r7, r1
 8002422:	1c02      	adds	r2, r0, #0
 8002424:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	187b      	adds	r3, r7, r1
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	b25b      	sxtb	r3, r3
 800242e:	0011      	movs	r1, r2
 8002430:	0018      	movs	r0, r3
 8002432:	f7ff ff5d 	bl	80022f0 <__NVIC_SetPriority>
}
 8002436:	46c0      	nop			; (mov r8, r8)
 8002438:	46bd      	mov	sp, r7
 800243a:	b004      	add	sp, #16
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b082      	sub	sp, #8
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	0018      	movs	r0, r3
 800244a:	f7ff ffbf 	bl	80023cc <SysTick_Config>
 800244e:	0003      	movs	r3, r0
}
 8002450:	0018      	movs	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	b002      	add	sp, #8
 8002456:	bd80      	pop	{r7, pc}

08002458 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002462:	2300      	movs	r3, #0
 8002464:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002466:	e155      	b.n	8002714 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2101      	movs	r1, #1
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	4091      	lsls	r1, r2
 8002472:	000a      	movs	r2, r1
 8002474:	4013      	ands	r3, r2
 8002476:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d100      	bne.n	8002480 <HAL_GPIO_Init+0x28>
 800247e:	e146      	b.n	800270e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2203      	movs	r2, #3
 8002486:	4013      	ands	r3, r2
 8002488:	2b01      	cmp	r3, #1
 800248a:	d005      	beq.n	8002498 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2203      	movs	r2, #3
 8002492:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002494:	2b02      	cmp	r3, #2
 8002496:	d130      	bne.n	80024fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	2203      	movs	r2, #3
 80024a4:	409a      	lsls	r2, r3
 80024a6:	0013      	movs	r3, r2
 80024a8:	43da      	mvns	r2, r3
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4013      	ands	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	68da      	ldr	r2, [r3, #12]
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	409a      	lsls	r2, r3
 80024ba:	0013      	movs	r3, r2
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	4313      	orrs	r3, r2
 80024c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024ce:	2201      	movs	r2, #1
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	409a      	lsls	r2, r3
 80024d4:	0013      	movs	r3, r2
 80024d6:	43da      	mvns	r2, r3
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	4013      	ands	r3, r2
 80024dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	091b      	lsrs	r3, r3, #4
 80024e4:	2201      	movs	r2, #1
 80024e6:	401a      	ands	r2, r3
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	409a      	lsls	r2, r3
 80024ec:	0013      	movs	r3, r2
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2203      	movs	r2, #3
 8002500:	4013      	ands	r3, r2
 8002502:	2b03      	cmp	r3, #3
 8002504:	d017      	beq.n	8002536 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	2203      	movs	r2, #3
 8002512:	409a      	lsls	r2, r3
 8002514:	0013      	movs	r3, r2
 8002516:	43da      	mvns	r2, r3
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	4013      	ands	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	689a      	ldr	r2, [r3, #8]
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	409a      	lsls	r2, r3
 8002528:	0013      	movs	r3, r2
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4313      	orrs	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2203      	movs	r2, #3
 800253c:	4013      	ands	r3, r2
 800253e:	2b02      	cmp	r3, #2
 8002540:	d123      	bne.n	800258a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	08da      	lsrs	r2, r3, #3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3208      	adds	r2, #8
 800254a:	0092      	lsls	r2, r2, #2
 800254c:	58d3      	ldr	r3, [r2, r3]
 800254e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	2207      	movs	r2, #7
 8002554:	4013      	ands	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	220f      	movs	r2, #15
 800255a:	409a      	lsls	r2, r3
 800255c:	0013      	movs	r3, r2
 800255e:	43da      	mvns	r2, r3
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	4013      	ands	r3, r2
 8002564:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	691a      	ldr	r2, [r3, #16]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	2107      	movs	r1, #7
 800256e:	400b      	ands	r3, r1
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	409a      	lsls	r2, r3
 8002574:	0013      	movs	r3, r2
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	4313      	orrs	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	08da      	lsrs	r2, r3, #3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3208      	adds	r2, #8
 8002584:	0092      	lsls	r2, r2, #2
 8002586:	6939      	ldr	r1, [r7, #16]
 8002588:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	2203      	movs	r2, #3
 8002596:	409a      	lsls	r2, r3
 8002598:	0013      	movs	r3, r2
 800259a:	43da      	mvns	r2, r3
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	4013      	ands	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2203      	movs	r2, #3
 80025a8:	401a      	ands	r2, r3
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	409a      	lsls	r2, r3
 80025b0:	0013      	movs	r3, r2
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	23c0      	movs	r3, #192	; 0xc0
 80025c4:	029b      	lsls	r3, r3, #10
 80025c6:	4013      	ands	r3, r2
 80025c8:	d100      	bne.n	80025cc <HAL_GPIO_Init+0x174>
 80025ca:	e0a0      	b.n	800270e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025cc:	4b57      	ldr	r3, [pc, #348]	; (800272c <HAL_GPIO_Init+0x2d4>)
 80025ce:	699a      	ldr	r2, [r3, #24]
 80025d0:	4b56      	ldr	r3, [pc, #344]	; (800272c <HAL_GPIO_Init+0x2d4>)
 80025d2:	2101      	movs	r1, #1
 80025d4:	430a      	orrs	r2, r1
 80025d6:	619a      	str	r2, [r3, #24]
 80025d8:	4b54      	ldr	r3, [pc, #336]	; (800272c <HAL_GPIO_Init+0x2d4>)
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	2201      	movs	r2, #1
 80025de:	4013      	ands	r3, r2
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025e4:	4a52      	ldr	r2, [pc, #328]	; (8002730 <HAL_GPIO_Init+0x2d8>)
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	089b      	lsrs	r3, r3, #2
 80025ea:	3302      	adds	r3, #2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	589b      	ldr	r3, [r3, r2]
 80025f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	2203      	movs	r2, #3
 80025f6:	4013      	ands	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	220f      	movs	r2, #15
 80025fc:	409a      	lsls	r2, r3
 80025fe:	0013      	movs	r3, r2
 8002600:	43da      	mvns	r2, r3
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	4013      	ands	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	2390      	movs	r3, #144	; 0x90
 800260c:	05db      	lsls	r3, r3, #23
 800260e:	429a      	cmp	r2, r3
 8002610:	d019      	beq.n	8002646 <HAL_GPIO_Init+0x1ee>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a47      	ldr	r2, [pc, #284]	; (8002734 <HAL_GPIO_Init+0x2dc>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d013      	beq.n	8002642 <HAL_GPIO_Init+0x1ea>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a46      	ldr	r2, [pc, #280]	; (8002738 <HAL_GPIO_Init+0x2e0>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d00d      	beq.n	800263e <HAL_GPIO_Init+0x1e6>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a45      	ldr	r2, [pc, #276]	; (800273c <HAL_GPIO_Init+0x2e4>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d007      	beq.n	800263a <HAL_GPIO_Init+0x1e2>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a44      	ldr	r2, [pc, #272]	; (8002740 <HAL_GPIO_Init+0x2e8>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d101      	bne.n	8002636 <HAL_GPIO_Init+0x1de>
 8002632:	2304      	movs	r3, #4
 8002634:	e008      	b.n	8002648 <HAL_GPIO_Init+0x1f0>
 8002636:	2305      	movs	r3, #5
 8002638:	e006      	b.n	8002648 <HAL_GPIO_Init+0x1f0>
 800263a:	2303      	movs	r3, #3
 800263c:	e004      	b.n	8002648 <HAL_GPIO_Init+0x1f0>
 800263e:	2302      	movs	r3, #2
 8002640:	e002      	b.n	8002648 <HAL_GPIO_Init+0x1f0>
 8002642:	2301      	movs	r3, #1
 8002644:	e000      	b.n	8002648 <HAL_GPIO_Init+0x1f0>
 8002646:	2300      	movs	r3, #0
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	2103      	movs	r1, #3
 800264c:	400a      	ands	r2, r1
 800264e:	0092      	lsls	r2, r2, #2
 8002650:	4093      	lsls	r3, r2
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	4313      	orrs	r3, r2
 8002656:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002658:	4935      	ldr	r1, [pc, #212]	; (8002730 <HAL_GPIO_Init+0x2d8>)
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	089b      	lsrs	r3, r3, #2
 800265e:	3302      	adds	r3, #2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002666:	4b37      	ldr	r3, [pc, #220]	; (8002744 <HAL_GPIO_Init+0x2ec>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	43da      	mvns	r2, r3
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	4013      	ands	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	2380      	movs	r3, #128	; 0x80
 800267c:	035b      	lsls	r3, r3, #13
 800267e:	4013      	ands	r3, r2
 8002680:	d003      	beq.n	800268a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4313      	orrs	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800268a:	4b2e      	ldr	r3, [pc, #184]	; (8002744 <HAL_GPIO_Init+0x2ec>)
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002690:	4b2c      	ldr	r3, [pc, #176]	; (8002744 <HAL_GPIO_Init+0x2ec>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	43da      	mvns	r2, r3
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	4013      	ands	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	2380      	movs	r3, #128	; 0x80
 80026a6:	039b      	lsls	r3, r3, #14
 80026a8:	4013      	ands	r3, r2
 80026aa:	d003      	beq.n	80026b4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80026b4:	4b23      	ldr	r3, [pc, #140]	; (8002744 <HAL_GPIO_Init+0x2ec>)
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80026ba:	4b22      	ldr	r3, [pc, #136]	; (8002744 <HAL_GPIO_Init+0x2ec>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	43da      	mvns	r2, r3
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	4013      	ands	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	2380      	movs	r3, #128	; 0x80
 80026d0:	029b      	lsls	r3, r3, #10
 80026d2:	4013      	ands	r3, r2
 80026d4:	d003      	beq.n	80026de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4313      	orrs	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80026de:	4b19      	ldr	r3, [pc, #100]	; (8002744 <HAL_GPIO_Init+0x2ec>)
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80026e4:	4b17      	ldr	r3, [pc, #92]	; (8002744 <HAL_GPIO_Init+0x2ec>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	43da      	mvns	r2, r3
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	4013      	ands	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	2380      	movs	r3, #128	; 0x80
 80026fa:	025b      	lsls	r3, r3, #9
 80026fc:	4013      	ands	r3, r2
 80026fe:	d003      	beq.n	8002708 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	4313      	orrs	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002708:	4b0e      	ldr	r3, [pc, #56]	; (8002744 <HAL_GPIO_Init+0x2ec>)
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	3301      	adds	r3, #1
 8002712:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	40da      	lsrs	r2, r3
 800271c:	1e13      	subs	r3, r2, #0
 800271e:	d000      	beq.n	8002722 <HAL_GPIO_Init+0x2ca>
 8002720:	e6a2      	b.n	8002468 <HAL_GPIO_Init+0x10>
  } 
}
 8002722:	46c0      	nop			; (mov r8, r8)
 8002724:	46c0      	nop			; (mov r8, r8)
 8002726:	46bd      	mov	sp, r7
 8002728:	b006      	add	sp, #24
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40021000 	.word	0x40021000
 8002730:	40010000 	.word	0x40010000
 8002734:	48000400 	.word	0x48000400
 8002738:	48000800 	.word	0x48000800
 800273c:	48000c00 	.word	0x48000c00
 8002740:	48001000 	.word	0x48001000
 8002744:	40010400 	.word	0x40010400

08002748 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b088      	sub	sp, #32
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d102      	bne.n	800275c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	f000 fb76 	bl	8002e48 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2201      	movs	r2, #1
 8002762:	4013      	ands	r3, r2
 8002764:	d100      	bne.n	8002768 <HAL_RCC_OscConfig+0x20>
 8002766:	e08e      	b.n	8002886 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002768:	4bc5      	ldr	r3, [pc, #788]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	220c      	movs	r2, #12
 800276e:	4013      	ands	r3, r2
 8002770:	2b04      	cmp	r3, #4
 8002772:	d00e      	beq.n	8002792 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002774:	4bc2      	ldr	r3, [pc, #776]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	220c      	movs	r2, #12
 800277a:	4013      	ands	r3, r2
 800277c:	2b08      	cmp	r3, #8
 800277e:	d117      	bne.n	80027b0 <HAL_RCC_OscConfig+0x68>
 8002780:	4bbf      	ldr	r3, [pc, #764]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	23c0      	movs	r3, #192	; 0xc0
 8002786:	025b      	lsls	r3, r3, #9
 8002788:	401a      	ands	r2, r3
 800278a:	2380      	movs	r3, #128	; 0x80
 800278c:	025b      	lsls	r3, r3, #9
 800278e:	429a      	cmp	r2, r3
 8002790:	d10e      	bne.n	80027b0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002792:	4bbb      	ldr	r3, [pc, #748]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	2380      	movs	r3, #128	; 0x80
 8002798:	029b      	lsls	r3, r3, #10
 800279a:	4013      	ands	r3, r2
 800279c:	d100      	bne.n	80027a0 <HAL_RCC_OscConfig+0x58>
 800279e:	e071      	b.n	8002884 <HAL_RCC_OscConfig+0x13c>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d000      	beq.n	80027aa <HAL_RCC_OscConfig+0x62>
 80027a8:	e06c      	b.n	8002884 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	f000 fb4c 	bl	8002e48 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d107      	bne.n	80027c8 <HAL_RCC_OscConfig+0x80>
 80027b8:	4bb1      	ldr	r3, [pc, #708]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	4bb0      	ldr	r3, [pc, #704]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 80027be:	2180      	movs	r1, #128	; 0x80
 80027c0:	0249      	lsls	r1, r1, #9
 80027c2:	430a      	orrs	r2, r1
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	e02f      	b.n	8002828 <HAL_RCC_OscConfig+0xe0>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10c      	bne.n	80027ea <HAL_RCC_OscConfig+0xa2>
 80027d0:	4bab      	ldr	r3, [pc, #684]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	4baa      	ldr	r3, [pc, #680]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 80027d6:	49ab      	ldr	r1, [pc, #684]	; (8002a84 <HAL_RCC_OscConfig+0x33c>)
 80027d8:	400a      	ands	r2, r1
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	4ba8      	ldr	r3, [pc, #672]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	4ba7      	ldr	r3, [pc, #668]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 80027e2:	49a9      	ldr	r1, [pc, #676]	; (8002a88 <HAL_RCC_OscConfig+0x340>)
 80027e4:	400a      	ands	r2, r1
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	e01e      	b.n	8002828 <HAL_RCC_OscConfig+0xe0>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b05      	cmp	r3, #5
 80027f0:	d10e      	bne.n	8002810 <HAL_RCC_OscConfig+0xc8>
 80027f2:	4ba3      	ldr	r3, [pc, #652]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	4ba2      	ldr	r3, [pc, #648]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 80027f8:	2180      	movs	r1, #128	; 0x80
 80027fa:	02c9      	lsls	r1, r1, #11
 80027fc:	430a      	orrs	r2, r1
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	4b9f      	ldr	r3, [pc, #636]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	4b9e      	ldr	r3, [pc, #632]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 8002806:	2180      	movs	r1, #128	; 0x80
 8002808:	0249      	lsls	r1, r1, #9
 800280a:	430a      	orrs	r2, r1
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	e00b      	b.n	8002828 <HAL_RCC_OscConfig+0xe0>
 8002810:	4b9b      	ldr	r3, [pc, #620]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	4b9a      	ldr	r3, [pc, #616]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 8002816:	499b      	ldr	r1, [pc, #620]	; (8002a84 <HAL_RCC_OscConfig+0x33c>)
 8002818:	400a      	ands	r2, r1
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	4b98      	ldr	r3, [pc, #608]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4b97      	ldr	r3, [pc, #604]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 8002822:	4999      	ldr	r1, [pc, #612]	; (8002a88 <HAL_RCC_OscConfig+0x340>)
 8002824:	400a      	ands	r2, r1
 8002826:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d014      	beq.n	800285a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002830:	f7ff fd30 	bl	8002294 <HAL_GetTick>
 8002834:	0003      	movs	r3, r0
 8002836:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800283a:	f7ff fd2b 	bl	8002294 <HAL_GetTick>
 800283e:	0002      	movs	r2, r0
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b64      	cmp	r3, #100	; 0x64
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e2fd      	b.n	8002e48 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800284c:	4b8c      	ldr	r3, [pc, #560]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	2380      	movs	r3, #128	; 0x80
 8002852:	029b      	lsls	r3, r3, #10
 8002854:	4013      	ands	r3, r2
 8002856:	d0f0      	beq.n	800283a <HAL_RCC_OscConfig+0xf2>
 8002858:	e015      	b.n	8002886 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285a:	f7ff fd1b 	bl	8002294 <HAL_GetTick>
 800285e:	0003      	movs	r3, r0
 8002860:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002864:	f7ff fd16 	bl	8002294 <HAL_GetTick>
 8002868:	0002      	movs	r2, r0
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b64      	cmp	r3, #100	; 0x64
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e2e8      	b.n	8002e48 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002876:	4b82      	ldr	r3, [pc, #520]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	2380      	movs	r3, #128	; 0x80
 800287c:	029b      	lsls	r3, r3, #10
 800287e:	4013      	ands	r3, r2
 8002880:	d1f0      	bne.n	8002864 <HAL_RCC_OscConfig+0x11c>
 8002882:	e000      	b.n	8002886 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002884:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2202      	movs	r2, #2
 800288c:	4013      	ands	r3, r2
 800288e:	d100      	bne.n	8002892 <HAL_RCC_OscConfig+0x14a>
 8002890:	e06c      	b.n	800296c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002892:	4b7b      	ldr	r3, [pc, #492]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	220c      	movs	r2, #12
 8002898:	4013      	ands	r3, r2
 800289a:	d00e      	beq.n	80028ba <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800289c:	4b78      	ldr	r3, [pc, #480]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	220c      	movs	r2, #12
 80028a2:	4013      	ands	r3, r2
 80028a4:	2b08      	cmp	r3, #8
 80028a6:	d11f      	bne.n	80028e8 <HAL_RCC_OscConfig+0x1a0>
 80028a8:	4b75      	ldr	r3, [pc, #468]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	23c0      	movs	r3, #192	; 0xc0
 80028ae:	025b      	lsls	r3, r3, #9
 80028b0:	401a      	ands	r2, r3
 80028b2:	2380      	movs	r3, #128	; 0x80
 80028b4:	021b      	lsls	r3, r3, #8
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d116      	bne.n	80028e8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ba:	4b71      	ldr	r3, [pc, #452]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2202      	movs	r2, #2
 80028c0:	4013      	ands	r3, r2
 80028c2:	d005      	beq.n	80028d0 <HAL_RCC_OscConfig+0x188>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d001      	beq.n	80028d0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e2bb      	b.n	8002e48 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d0:	4b6b      	ldr	r3, [pc, #428]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	22f8      	movs	r2, #248	; 0xf8
 80028d6:	4393      	bics	r3, r2
 80028d8:	0019      	movs	r1, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	00da      	lsls	r2, r3, #3
 80028e0:	4b67      	ldr	r3, [pc, #412]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 80028e2:	430a      	orrs	r2, r1
 80028e4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028e6:	e041      	b.n	800296c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d024      	beq.n	800293a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028f0:	4b63      	ldr	r3, [pc, #396]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	4b62      	ldr	r3, [pc, #392]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 80028f6:	2101      	movs	r1, #1
 80028f8:	430a      	orrs	r2, r1
 80028fa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fc:	f7ff fcca 	bl	8002294 <HAL_GetTick>
 8002900:	0003      	movs	r3, r0
 8002902:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002906:	f7ff fcc5 	bl	8002294 <HAL_GetTick>
 800290a:	0002      	movs	r2, r0
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e297      	b.n	8002e48 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002918:	4b59      	ldr	r3, [pc, #356]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2202      	movs	r2, #2
 800291e:	4013      	ands	r3, r2
 8002920:	d0f1      	beq.n	8002906 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002922:	4b57      	ldr	r3, [pc, #348]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	22f8      	movs	r2, #248	; 0xf8
 8002928:	4393      	bics	r3, r2
 800292a:	0019      	movs	r1, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	00da      	lsls	r2, r3, #3
 8002932:	4b53      	ldr	r3, [pc, #332]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 8002934:	430a      	orrs	r2, r1
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	e018      	b.n	800296c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800293a:	4b51      	ldr	r3, [pc, #324]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	4b50      	ldr	r3, [pc, #320]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 8002940:	2101      	movs	r1, #1
 8002942:	438a      	bics	r2, r1
 8002944:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002946:	f7ff fca5 	bl	8002294 <HAL_GetTick>
 800294a:	0003      	movs	r3, r0
 800294c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002950:	f7ff fca0 	bl	8002294 <HAL_GetTick>
 8002954:	0002      	movs	r2, r0
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e272      	b.n	8002e48 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002962:	4b47      	ldr	r3, [pc, #284]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2202      	movs	r2, #2
 8002968:	4013      	ands	r3, r2
 800296a:	d1f1      	bne.n	8002950 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2208      	movs	r2, #8
 8002972:	4013      	ands	r3, r2
 8002974:	d036      	beq.n	80029e4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d019      	beq.n	80029b2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800297e:	4b40      	ldr	r3, [pc, #256]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 8002980:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002982:	4b3f      	ldr	r3, [pc, #252]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 8002984:	2101      	movs	r1, #1
 8002986:	430a      	orrs	r2, r1
 8002988:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298a:	f7ff fc83 	bl	8002294 <HAL_GetTick>
 800298e:	0003      	movs	r3, r0
 8002990:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002994:	f7ff fc7e 	bl	8002294 <HAL_GetTick>
 8002998:	0002      	movs	r2, r0
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e250      	b.n	8002e48 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029a6:	4b36      	ldr	r3, [pc, #216]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	2202      	movs	r2, #2
 80029ac:	4013      	ands	r3, r2
 80029ae:	d0f1      	beq.n	8002994 <HAL_RCC_OscConfig+0x24c>
 80029b0:	e018      	b.n	80029e4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029b2:	4b33      	ldr	r3, [pc, #204]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 80029b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029b6:	4b32      	ldr	r3, [pc, #200]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 80029b8:	2101      	movs	r1, #1
 80029ba:	438a      	bics	r2, r1
 80029bc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029be:	f7ff fc69 	bl	8002294 <HAL_GetTick>
 80029c2:	0003      	movs	r3, r0
 80029c4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029c8:	f7ff fc64 	bl	8002294 <HAL_GetTick>
 80029cc:	0002      	movs	r2, r0
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e236      	b.n	8002e48 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029da:	4b29      	ldr	r3, [pc, #164]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	2202      	movs	r2, #2
 80029e0:	4013      	ands	r3, r2
 80029e2:	d1f1      	bne.n	80029c8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2204      	movs	r2, #4
 80029ea:	4013      	ands	r3, r2
 80029ec:	d100      	bne.n	80029f0 <HAL_RCC_OscConfig+0x2a8>
 80029ee:	e0b5      	b.n	8002b5c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029f0:	201f      	movs	r0, #31
 80029f2:	183b      	adds	r3, r7, r0
 80029f4:	2200      	movs	r2, #0
 80029f6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029f8:	4b21      	ldr	r3, [pc, #132]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 80029fa:	69da      	ldr	r2, [r3, #28]
 80029fc:	2380      	movs	r3, #128	; 0x80
 80029fe:	055b      	lsls	r3, r3, #21
 8002a00:	4013      	ands	r3, r2
 8002a02:	d110      	bne.n	8002a26 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a04:	4b1e      	ldr	r3, [pc, #120]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 8002a06:	69da      	ldr	r2, [r3, #28]
 8002a08:	4b1d      	ldr	r3, [pc, #116]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 8002a0a:	2180      	movs	r1, #128	; 0x80
 8002a0c:	0549      	lsls	r1, r1, #21
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	61da      	str	r2, [r3, #28]
 8002a12:	4b1b      	ldr	r3, [pc, #108]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 8002a14:	69da      	ldr	r2, [r3, #28]
 8002a16:	2380      	movs	r3, #128	; 0x80
 8002a18:	055b      	lsls	r3, r3, #21
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a20:	183b      	adds	r3, r7, r0
 8002a22:	2201      	movs	r2, #1
 8002a24:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a26:	4b19      	ldr	r3, [pc, #100]	; (8002a8c <HAL_RCC_OscConfig+0x344>)
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	2380      	movs	r3, #128	; 0x80
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d11a      	bne.n	8002a68 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a32:	4b16      	ldr	r3, [pc, #88]	; (8002a8c <HAL_RCC_OscConfig+0x344>)
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	4b15      	ldr	r3, [pc, #84]	; (8002a8c <HAL_RCC_OscConfig+0x344>)
 8002a38:	2180      	movs	r1, #128	; 0x80
 8002a3a:	0049      	lsls	r1, r1, #1
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a40:	f7ff fc28 	bl	8002294 <HAL_GetTick>
 8002a44:	0003      	movs	r3, r0
 8002a46:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a4a:	f7ff fc23 	bl	8002294 <HAL_GetTick>
 8002a4e:	0002      	movs	r2, r0
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b64      	cmp	r3, #100	; 0x64
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e1f5      	b.n	8002e48 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5c:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <HAL_RCC_OscConfig+0x344>)
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	2380      	movs	r3, #128	; 0x80
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	4013      	ands	r3, r2
 8002a66:	d0f0      	beq.n	8002a4a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d10f      	bne.n	8002a90 <HAL_RCC_OscConfig+0x348>
 8002a70:	4b03      	ldr	r3, [pc, #12]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 8002a72:	6a1a      	ldr	r2, [r3, #32]
 8002a74:	4b02      	ldr	r3, [pc, #8]	; (8002a80 <HAL_RCC_OscConfig+0x338>)
 8002a76:	2101      	movs	r1, #1
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	621a      	str	r2, [r3, #32]
 8002a7c:	e036      	b.n	8002aec <HAL_RCC_OscConfig+0x3a4>
 8002a7e:	46c0      	nop			; (mov r8, r8)
 8002a80:	40021000 	.word	0x40021000
 8002a84:	fffeffff 	.word	0xfffeffff
 8002a88:	fffbffff 	.word	0xfffbffff
 8002a8c:	40007000 	.word	0x40007000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10c      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x36a>
 8002a98:	4bca      	ldr	r3, [pc, #808]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002a9a:	6a1a      	ldr	r2, [r3, #32]
 8002a9c:	4bc9      	ldr	r3, [pc, #804]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	438a      	bics	r2, r1
 8002aa2:	621a      	str	r2, [r3, #32]
 8002aa4:	4bc7      	ldr	r3, [pc, #796]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002aa6:	6a1a      	ldr	r2, [r3, #32]
 8002aa8:	4bc6      	ldr	r3, [pc, #792]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002aaa:	2104      	movs	r1, #4
 8002aac:	438a      	bics	r2, r1
 8002aae:	621a      	str	r2, [r3, #32]
 8002ab0:	e01c      	b.n	8002aec <HAL_RCC_OscConfig+0x3a4>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	2b05      	cmp	r3, #5
 8002ab8:	d10c      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x38c>
 8002aba:	4bc2      	ldr	r3, [pc, #776]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002abc:	6a1a      	ldr	r2, [r3, #32]
 8002abe:	4bc1      	ldr	r3, [pc, #772]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002ac0:	2104      	movs	r1, #4
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	621a      	str	r2, [r3, #32]
 8002ac6:	4bbf      	ldr	r3, [pc, #764]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002ac8:	6a1a      	ldr	r2, [r3, #32]
 8002aca:	4bbe      	ldr	r3, [pc, #760]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002acc:	2101      	movs	r1, #1
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	621a      	str	r2, [r3, #32]
 8002ad2:	e00b      	b.n	8002aec <HAL_RCC_OscConfig+0x3a4>
 8002ad4:	4bbb      	ldr	r3, [pc, #748]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002ad6:	6a1a      	ldr	r2, [r3, #32]
 8002ad8:	4bba      	ldr	r3, [pc, #744]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002ada:	2101      	movs	r1, #1
 8002adc:	438a      	bics	r2, r1
 8002ade:	621a      	str	r2, [r3, #32]
 8002ae0:	4bb8      	ldr	r3, [pc, #736]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002ae2:	6a1a      	ldr	r2, [r3, #32]
 8002ae4:	4bb7      	ldr	r3, [pc, #732]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002ae6:	2104      	movs	r1, #4
 8002ae8:	438a      	bics	r2, r1
 8002aea:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d014      	beq.n	8002b1e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af4:	f7ff fbce 	bl	8002294 <HAL_GetTick>
 8002af8:	0003      	movs	r3, r0
 8002afa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002afc:	e009      	b.n	8002b12 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002afe:	f7ff fbc9 	bl	8002294 <HAL_GetTick>
 8002b02:	0002      	movs	r2, r0
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	4aaf      	ldr	r2, [pc, #700]	; (8002dc8 <HAL_RCC_OscConfig+0x680>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e19a      	b.n	8002e48 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b12:	4bac      	ldr	r3, [pc, #688]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	2202      	movs	r2, #2
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d0f0      	beq.n	8002afe <HAL_RCC_OscConfig+0x3b6>
 8002b1c:	e013      	b.n	8002b46 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b1e:	f7ff fbb9 	bl	8002294 <HAL_GetTick>
 8002b22:	0003      	movs	r3, r0
 8002b24:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b26:	e009      	b.n	8002b3c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b28:	f7ff fbb4 	bl	8002294 <HAL_GetTick>
 8002b2c:	0002      	movs	r2, r0
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	4aa5      	ldr	r2, [pc, #660]	; (8002dc8 <HAL_RCC_OscConfig+0x680>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e185      	b.n	8002e48 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b3c:	4ba1      	ldr	r3, [pc, #644]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	2202      	movs	r2, #2
 8002b42:	4013      	ands	r3, r2
 8002b44:	d1f0      	bne.n	8002b28 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b46:	231f      	movs	r3, #31
 8002b48:	18fb      	adds	r3, r7, r3
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d105      	bne.n	8002b5c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b50:	4b9c      	ldr	r3, [pc, #624]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002b52:	69da      	ldr	r2, [r3, #28]
 8002b54:	4b9b      	ldr	r3, [pc, #620]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002b56:	499d      	ldr	r1, [pc, #628]	; (8002dcc <HAL_RCC_OscConfig+0x684>)
 8002b58:	400a      	ands	r2, r1
 8002b5a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2210      	movs	r2, #16
 8002b62:	4013      	ands	r3, r2
 8002b64:	d063      	beq.n	8002c2e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d12a      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002b6e:	4b95      	ldr	r3, [pc, #596]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002b70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b72:	4b94      	ldr	r3, [pc, #592]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002b74:	2104      	movs	r1, #4
 8002b76:	430a      	orrs	r2, r1
 8002b78:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002b7a:	4b92      	ldr	r3, [pc, #584]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002b7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b7e:	4b91      	ldr	r3, [pc, #580]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002b80:	2101      	movs	r1, #1
 8002b82:	430a      	orrs	r2, r1
 8002b84:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b86:	f7ff fb85 	bl	8002294 <HAL_GetTick>
 8002b8a:	0003      	movs	r3, r0
 8002b8c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002b90:	f7ff fb80 	bl	8002294 <HAL_GetTick>
 8002b94:	0002      	movs	r2, r0
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e152      	b.n	8002e48 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002ba2:	4b88      	ldr	r3, [pc, #544]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	4013      	ands	r3, r2
 8002baa:	d0f1      	beq.n	8002b90 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002bac:	4b85      	ldr	r3, [pc, #532]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb0:	22f8      	movs	r2, #248	; 0xf8
 8002bb2:	4393      	bics	r3, r2
 8002bb4:	0019      	movs	r1, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	00da      	lsls	r2, r3, #3
 8002bbc:	4b81      	ldr	r3, [pc, #516]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	635a      	str	r2, [r3, #52]	; 0x34
 8002bc2:	e034      	b.n	8002c2e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	3305      	adds	r3, #5
 8002bca:	d111      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002bcc:	4b7d      	ldr	r3, [pc, #500]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002bce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bd0:	4b7c      	ldr	r3, [pc, #496]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002bd2:	2104      	movs	r1, #4
 8002bd4:	438a      	bics	r2, r1
 8002bd6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002bd8:	4b7a      	ldr	r3, [pc, #488]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bdc:	22f8      	movs	r2, #248	; 0xf8
 8002bde:	4393      	bics	r3, r2
 8002be0:	0019      	movs	r1, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	00da      	lsls	r2, r3, #3
 8002be8:	4b76      	ldr	r3, [pc, #472]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002bea:	430a      	orrs	r2, r1
 8002bec:	635a      	str	r2, [r3, #52]	; 0x34
 8002bee:	e01e      	b.n	8002c2e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002bf0:	4b74      	ldr	r3, [pc, #464]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002bf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bf4:	4b73      	ldr	r3, [pc, #460]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002bf6:	2104      	movs	r1, #4
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002bfc:	4b71      	ldr	r3, [pc, #452]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002bfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c00:	4b70      	ldr	r3, [pc, #448]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002c02:	2101      	movs	r1, #1
 8002c04:	438a      	bics	r2, r1
 8002c06:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c08:	f7ff fb44 	bl	8002294 <HAL_GetTick>
 8002c0c:	0003      	movs	r3, r0
 8002c0e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002c12:	f7ff fb3f 	bl	8002294 <HAL_GetTick>
 8002c16:	0002      	movs	r2, r0
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e111      	b.n	8002e48 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002c24:	4b67      	ldr	r3, [pc, #412]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c28:	2202      	movs	r2, #2
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d1f1      	bne.n	8002c12 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2220      	movs	r2, #32
 8002c34:	4013      	ands	r3, r2
 8002c36:	d05c      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002c38:	4b62      	ldr	r3, [pc, #392]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	220c      	movs	r2, #12
 8002c3e:	4013      	ands	r3, r2
 8002c40:	2b0c      	cmp	r3, #12
 8002c42:	d00e      	beq.n	8002c62 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002c44:	4b5f      	ldr	r3, [pc, #380]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	220c      	movs	r2, #12
 8002c4a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	d114      	bne.n	8002c7a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002c50:	4b5c      	ldr	r3, [pc, #368]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	23c0      	movs	r3, #192	; 0xc0
 8002c56:	025b      	lsls	r3, r3, #9
 8002c58:	401a      	ands	r2, r3
 8002c5a:	23c0      	movs	r3, #192	; 0xc0
 8002c5c:	025b      	lsls	r3, r3, #9
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d10b      	bne.n	8002c7a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002c62:	4b58      	ldr	r3, [pc, #352]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002c64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c66:	2380      	movs	r3, #128	; 0x80
 8002c68:	029b      	lsls	r3, r3, #10
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	d040      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x5a8>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d03c      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e0e6      	b.n	8002e48 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d01b      	beq.n	8002cba <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002c82:	4b50      	ldr	r3, [pc, #320]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002c84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c86:	4b4f      	ldr	r3, [pc, #316]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002c88:	2180      	movs	r1, #128	; 0x80
 8002c8a:	0249      	lsls	r1, r1, #9
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c90:	f7ff fb00 	bl	8002294 <HAL_GetTick>
 8002c94:	0003      	movs	r3, r0
 8002c96:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002c98:	e008      	b.n	8002cac <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c9a:	f7ff fafb 	bl	8002294 <HAL_GetTick>
 8002c9e:	0002      	movs	r2, r0
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e0cd      	b.n	8002e48 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002cac:	4b45      	ldr	r3, [pc, #276]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002cae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cb0:	2380      	movs	r3, #128	; 0x80
 8002cb2:	029b      	lsls	r3, r3, #10
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	d0f0      	beq.n	8002c9a <HAL_RCC_OscConfig+0x552>
 8002cb8:	e01b      	b.n	8002cf2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002cba:	4b42      	ldr	r3, [pc, #264]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cbe:	4b41      	ldr	r3, [pc, #260]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002cc0:	4943      	ldr	r1, [pc, #268]	; (8002dd0 <HAL_RCC_OscConfig+0x688>)
 8002cc2:	400a      	ands	r2, r1
 8002cc4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc6:	f7ff fae5 	bl	8002294 <HAL_GetTick>
 8002cca:	0003      	movs	r3, r0
 8002ccc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cd0:	f7ff fae0 	bl	8002294 <HAL_GetTick>
 8002cd4:	0002      	movs	r2, r0
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e0b2      	b.n	8002e48 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002ce2:	4b38      	ldr	r3, [pc, #224]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002ce4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ce6:	2380      	movs	r3, #128	; 0x80
 8002ce8:	029b      	lsls	r3, r3, #10
 8002cea:	4013      	ands	r3, r2
 8002cec:	d1f0      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x588>
 8002cee:	e000      	b.n	8002cf2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002cf0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d100      	bne.n	8002cfc <HAL_RCC_OscConfig+0x5b4>
 8002cfa:	e0a4      	b.n	8002e46 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cfc:	4b31      	ldr	r3, [pc, #196]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	220c      	movs	r2, #12
 8002d02:	4013      	ands	r3, r2
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d100      	bne.n	8002d0a <HAL_RCC_OscConfig+0x5c2>
 8002d08:	e078      	b.n	8002dfc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d14c      	bne.n	8002dac <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d12:	4b2c      	ldr	r3, [pc, #176]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	4b2b      	ldr	r3, [pc, #172]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002d18:	492e      	ldr	r1, [pc, #184]	; (8002dd4 <HAL_RCC_OscConfig+0x68c>)
 8002d1a:	400a      	ands	r2, r1
 8002d1c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1e:	f7ff fab9 	bl	8002294 <HAL_GetTick>
 8002d22:	0003      	movs	r3, r0
 8002d24:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d28:	f7ff fab4 	bl	8002294 <HAL_GetTick>
 8002d2c:	0002      	movs	r2, r0
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e086      	b.n	8002e48 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d3a:	4b22      	ldr	r3, [pc, #136]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	2380      	movs	r3, #128	; 0x80
 8002d40:	049b      	lsls	r3, r3, #18
 8002d42:	4013      	ands	r3, r2
 8002d44:	d1f0      	bne.n	8002d28 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d46:	4b1f      	ldr	r3, [pc, #124]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4a:	220f      	movs	r2, #15
 8002d4c:	4393      	bics	r3, r2
 8002d4e:	0019      	movs	r1, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d54:	4b1b      	ldr	r3, [pc, #108]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002d56:	430a      	orrs	r2, r1
 8002d58:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d5a:	4b1a      	ldr	r3, [pc, #104]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	4a1e      	ldr	r2, [pc, #120]	; (8002dd8 <HAL_RCC_OscConfig+0x690>)
 8002d60:	4013      	ands	r3, r2
 8002d62:	0019      	movs	r1, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	4b15      	ldr	r3, [pc, #84]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002d70:	430a      	orrs	r2, r1
 8002d72:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d74:	4b13      	ldr	r3, [pc, #76]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002d7a:	2180      	movs	r1, #128	; 0x80
 8002d7c:	0449      	lsls	r1, r1, #17
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d82:	f7ff fa87 	bl	8002294 <HAL_GetTick>
 8002d86:	0003      	movs	r3, r0
 8002d88:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d8c:	f7ff fa82 	bl	8002294 <HAL_GetTick>
 8002d90:	0002      	movs	r2, r0
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e054      	b.n	8002e48 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d9e:	4b09      	ldr	r3, [pc, #36]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	2380      	movs	r3, #128	; 0x80
 8002da4:	049b      	lsls	r3, r3, #18
 8002da6:	4013      	ands	r3, r2
 8002da8:	d0f0      	beq.n	8002d8c <HAL_RCC_OscConfig+0x644>
 8002daa:	e04c      	b.n	8002e46 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dac:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	4b04      	ldr	r3, [pc, #16]	; (8002dc4 <HAL_RCC_OscConfig+0x67c>)
 8002db2:	4908      	ldr	r1, [pc, #32]	; (8002dd4 <HAL_RCC_OscConfig+0x68c>)
 8002db4:	400a      	ands	r2, r1
 8002db6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db8:	f7ff fa6c 	bl	8002294 <HAL_GetTick>
 8002dbc:	0003      	movs	r3, r0
 8002dbe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dc0:	e015      	b.n	8002dee <HAL_RCC_OscConfig+0x6a6>
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	00001388 	.word	0x00001388
 8002dcc:	efffffff 	.word	0xefffffff
 8002dd0:	fffeffff 	.word	0xfffeffff
 8002dd4:	feffffff 	.word	0xfeffffff
 8002dd8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ddc:	f7ff fa5a 	bl	8002294 <HAL_GetTick>
 8002de0:	0002      	movs	r2, r0
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e02c      	b.n	8002e48 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dee:	4b18      	ldr	r3, [pc, #96]	; (8002e50 <HAL_RCC_OscConfig+0x708>)
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	2380      	movs	r3, #128	; 0x80
 8002df4:	049b      	lsls	r3, r3, #18
 8002df6:	4013      	ands	r3, r2
 8002df8:	d1f0      	bne.n	8002ddc <HAL_RCC_OscConfig+0x694>
 8002dfa:	e024      	b.n	8002e46 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d101      	bne.n	8002e08 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e01f      	b.n	8002e48 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002e08:	4b11      	ldr	r3, [pc, #68]	; (8002e50 <HAL_RCC_OscConfig+0x708>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002e0e:	4b10      	ldr	r3, [pc, #64]	; (8002e50 <HAL_RCC_OscConfig+0x708>)
 8002e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e12:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	23c0      	movs	r3, #192	; 0xc0
 8002e18:	025b      	lsls	r3, r3, #9
 8002e1a:	401a      	ands	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d10e      	bne.n	8002e42 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	220f      	movs	r2, #15
 8002e28:	401a      	ands	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d107      	bne.n	8002e42 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	23f0      	movs	r3, #240	; 0xf0
 8002e36:	039b      	lsls	r3, r3, #14
 8002e38:	401a      	ands	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d001      	beq.n	8002e46 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e000      	b.n	8002e48 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	0018      	movs	r0, r3
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	b008      	add	sp, #32
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40021000 	.word	0x40021000

08002e54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e0bf      	b.n	8002fe8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e68:	4b61      	ldr	r3, [pc, #388]	; (8002ff0 <HAL_RCC_ClockConfig+0x19c>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	4013      	ands	r3, r2
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d911      	bls.n	8002e9a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e76:	4b5e      	ldr	r3, [pc, #376]	; (8002ff0 <HAL_RCC_ClockConfig+0x19c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	4393      	bics	r3, r2
 8002e7e:	0019      	movs	r1, r3
 8002e80:	4b5b      	ldr	r3, [pc, #364]	; (8002ff0 <HAL_RCC_ClockConfig+0x19c>)
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e88:	4b59      	ldr	r3, [pc, #356]	; (8002ff0 <HAL_RCC_ClockConfig+0x19c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	4013      	ands	r3, r2
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d001      	beq.n	8002e9a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e0a6      	b.n	8002fe8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	d015      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2204      	movs	r2, #4
 8002eaa:	4013      	ands	r3, r2
 8002eac:	d006      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002eae:	4b51      	ldr	r3, [pc, #324]	; (8002ff4 <HAL_RCC_ClockConfig+0x1a0>)
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	4b50      	ldr	r3, [pc, #320]	; (8002ff4 <HAL_RCC_ClockConfig+0x1a0>)
 8002eb4:	21e0      	movs	r1, #224	; 0xe0
 8002eb6:	00c9      	lsls	r1, r1, #3
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ebc:	4b4d      	ldr	r3, [pc, #308]	; (8002ff4 <HAL_RCC_ClockConfig+0x1a0>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	22f0      	movs	r2, #240	; 0xf0
 8002ec2:	4393      	bics	r3, r2
 8002ec4:	0019      	movs	r1, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	4b4a      	ldr	r3, [pc, #296]	; (8002ff4 <HAL_RCC_ClockConfig+0x1a0>)
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d04c      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d107      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee2:	4b44      	ldr	r3, [pc, #272]	; (8002ff4 <HAL_RCC_ClockConfig+0x1a0>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	2380      	movs	r3, #128	; 0x80
 8002ee8:	029b      	lsls	r3, r3, #10
 8002eea:	4013      	ands	r3, r2
 8002eec:	d120      	bne.n	8002f30 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e07a      	b.n	8002fe8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d107      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002efa:	4b3e      	ldr	r3, [pc, #248]	; (8002ff4 <HAL_RCC_ClockConfig+0x1a0>)
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	2380      	movs	r3, #128	; 0x80
 8002f00:	049b      	lsls	r3, r3, #18
 8002f02:	4013      	ands	r3, r2
 8002f04:	d114      	bne.n	8002f30 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e06e      	b.n	8002fe8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b03      	cmp	r3, #3
 8002f10:	d107      	bne.n	8002f22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002f12:	4b38      	ldr	r3, [pc, #224]	; (8002ff4 <HAL_RCC_ClockConfig+0x1a0>)
 8002f14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f16:	2380      	movs	r3, #128	; 0x80
 8002f18:	029b      	lsls	r3, r3, #10
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	d108      	bne.n	8002f30 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e062      	b.n	8002fe8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f22:	4b34      	ldr	r3, [pc, #208]	; (8002ff4 <HAL_RCC_ClockConfig+0x1a0>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2202      	movs	r2, #2
 8002f28:	4013      	ands	r3, r2
 8002f2a:	d101      	bne.n	8002f30 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e05b      	b.n	8002fe8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f30:	4b30      	ldr	r3, [pc, #192]	; (8002ff4 <HAL_RCC_ClockConfig+0x1a0>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2203      	movs	r2, #3
 8002f36:	4393      	bics	r3, r2
 8002f38:	0019      	movs	r1, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	4b2d      	ldr	r3, [pc, #180]	; (8002ff4 <HAL_RCC_ClockConfig+0x1a0>)
 8002f40:	430a      	orrs	r2, r1
 8002f42:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f44:	f7ff f9a6 	bl	8002294 <HAL_GetTick>
 8002f48:	0003      	movs	r3, r0
 8002f4a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4c:	e009      	b.n	8002f62 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f4e:	f7ff f9a1 	bl	8002294 <HAL_GetTick>
 8002f52:	0002      	movs	r2, r0
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	4a27      	ldr	r2, [pc, #156]	; (8002ff8 <HAL_RCC_ClockConfig+0x1a4>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e042      	b.n	8002fe8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f62:	4b24      	ldr	r3, [pc, #144]	; (8002ff4 <HAL_RCC_ClockConfig+0x1a0>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	220c      	movs	r2, #12
 8002f68:	401a      	ands	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d1ec      	bne.n	8002f4e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f74:	4b1e      	ldr	r3, [pc, #120]	; (8002ff0 <HAL_RCC_ClockConfig+0x19c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d211      	bcs.n	8002fa6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f82:	4b1b      	ldr	r3, [pc, #108]	; (8002ff0 <HAL_RCC_ClockConfig+0x19c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2201      	movs	r2, #1
 8002f88:	4393      	bics	r3, r2
 8002f8a:	0019      	movs	r1, r3
 8002f8c:	4b18      	ldr	r3, [pc, #96]	; (8002ff0 <HAL_RCC_ClockConfig+0x19c>)
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f94:	4b16      	ldr	r3, [pc, #88]	; (8002ff0 <HAL_RCC_ClockConfig+0x19c>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d001      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e020      	b.n	8002fe8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2204      	movs	r2, #4
 8002fac:	4013      	ands	r3, r2
 8002fae:	d009      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002fb0:	4b10      	ldr	r3, [pc, #64]	; (8002ff4 <HAL_RCC_ClockConfig+0x1a0>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	4a11      	ldr	r2, [pc, #68]	; (8002ffc <HAL_RCC_ClockConfig+0x1a8>)
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	0019      	movs	r1, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	4b0d      	ldr	r3, [pc, #52]	; (8002ff4 <HAL_RCC_ClockConfig+0x1a0>)
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002fc4:	f000 f820 	bl	8003008 <HAL_RCC_GetSysClockFreq>
 8002fc8:	0001      	movs	r1, r0
 8002fca:	4b0a      	ldr	r3, [pc, #40]	; (8002ff4 <HAL_RCC_ClockConfig+0x1a0>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	091b      	lsrs	r3, r3, #4
 8002fd0:	220f      	movs	r2, #15
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	4a0a      	ldr	r2, [pc, #40]	; (8003000 <HAL_RCC_ClockConfig+0x1ac>)
 8002fd6:	5cd3      	ldrb	r3, [r2, r3]
 8002fd8:	000a      	movs	r2, r1
 8002fda:	40da      	lsrs	r2, r3
 8002fdc:	4b09      	ldr	r3, [pc, #36]	; (8003004 <HAL_RCC_ClockConfig+0x1b0>)
 8002fde:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002fe0:	2003      	movs	r0, #3
 8002fe2:	f7ff f911 	bl	8002208 <HAL_InitTick>
  
  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	0018      	movs	r0, r3
 8002fea:	46bd      	mov	sp, r7
 8002fec:	b004      	add	sp, #16
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40022000 	.word	0x40022000
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	00001388 	.word	0x00001388
 8002ffc:	fffff8ff 	.word	0xfffff8ff
 8003000:	08003f00 	.word	0x08003f00
 8003004:	20000000 	.word	0x20000000

08003008 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800300e:	2300      	movs	r3, #0
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	2300      	movs	r3, #0
 8003014:	60bb      	str	r3, [r7, #8]
 8003016:	2300      	movs	r3, #0
 8003018:	617b      	str	r3, [r7, #20]
 800301a:	2300      	movs	r3, #0
 800301c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800301e:	2300      	movs	r3, #0
 8003020:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003022:	4b2d      	ldr	r3, [pc, #180]	; (80030d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	220c      	movs	r2, #12
 800302c:	4013      	ands	r3, r2
 800302e:	2b0c      	cmp	r3, #12
 8003030:	d046      	beq.n	80030c0 <HAL_RCC_GetSysClockFreq+0xb8>
 8003032:	d848      	bhi.n	80030c6 <HAL_RCC_GetSysClockFreq+0xbe>
 8003034:	2b04      	cmp	r3, #4
 8003036:	d002      	beq.n	800303e <HAL_RCC_GetSysClockFreq+0x36>
 8003038:	2b08      	cmp	r3, #8
 800303a:	d003      	beq.n	8003044 <HAL_RCC_GetSysClockFreq+0x3c>
 800303c:	e043      	b.n	80030c6 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800303e:	4b27      	ldr	r3, [pc, #156]	; (80030dc <HAL_RCC_GetSysClockFreq+0xd4>)
 8003040:	613b      	str	r3, [r7, #16]
      break;
 8003042:	e043      	b.n	80030cc <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	0c9b      	lsrs	r3, r3, #18
 8003048:	220f      	movs	r2, #15
 800304a:	4013      	ands	r3, r2
 800304c:	4a24      	ldr	r2, [pc, #144]	; (80030e0 <HAL_RCC_GetSysClockFreq+0xd8>)
 800304e:	5cd3      	ldrb	r3, [r2, r3]
 8003050:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003052:	4b21      	ldr	r3, [pc, #132]	; (80030d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003056:	220f      	movs	r2, #15
 8003058:	4013      	ands	r3, r2
 800305a:	4a22      	ldr	r2, [pc, #136]	; (80030e4 <HAL_RCC_GetSysClockFreq+0xdc>)
 800305c:	5cd3      	ldrb	r3, [r2, r3]
 800305e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	23c0      	movs	r3, #192	; 0xc0
 8003064:	025b      	lsls	r3, r3, #9
 8003066:	401a      	ands	r2, r3
 8003068:	2380      	movs	r3, #128	; 0x80
 800306a:	025b      	lsls	r3, r3, #9
 800306c:	429a      	cmp	r2, r3
 800306e:	d109      	bne.n	8003084 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003070:	68b9      	ldr	r1, [r7, #8]
 8003072:	481a      	ldr	r0, [pc, #104]	; (80030dc <HAL_RCC_GetSysClockFreq+0xd4>)
 8003074:	f7fd f848 	bl	8000108 <__udivsi3>
 8003078:	0003      	movs	r3, r0
 800307a:	001a      	movs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4353      	muls	r3, r2
 8003080:	617b      	str	r3, [r7, #20]
 8003082:	e01a      	b.n	80030ba <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	23c0      	movs	r3, #192	; 0xc0
 8003088:	025b      	lsls	r3, r3, #9
 800308a:	401a      	ands	r2, r3
 800308c:	23c0      	movs	r3, #192	; 0xc0
 800308e:	025b      	lsls	r3, r3, #9
 8003090:	429a      	cmp	r2, r3
 8003092:	d109      	bne.n	80030a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003094:	68b9      	ldr	r1, [r7, #8]
 8003096:	4814      	ldr	r0, [pc, #80]	; (80030e8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003098:	f7fd f836 	bl	8000108 <__udivsi3>
 800309c:	0003      	movs	r3, r0
 800309e:	001a      	movs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4353      	muls	r3, r2
 80030a4:	617b      	str	r3, [r7, #20]
 80030a6:	e008      	b.n	80030ba <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80030a8:	68b9      	ldr	r1, [r7, #8]
 80030aa:	480c      	ldr	r0, [pc, #48]	; (80030dc <HAL_RCC_GetSysClockFreq+0xd4>)
 80030ac:	f7fd f82c 	bl	8000108 <__udivsi3>
 80030b0:	0003      	movs	r3, r0
 80030b2:	001a      	movs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4353      	muls	r3, r2
 80030b8:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	613b      	str	r3, [r7, #16]
      break;
 80030be:	e005      	b.n	80030cc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80030c0:	4b09      	ldr	r3, [pc, #36]	; (80030e8 <HAL_RCC_GetSysClockFreq+0xe0>)
 80030c2:	613b      	str	r3, [r7, #16]
      break;
 80030c4:	e002      	b.n	80030cc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030c6:	4b05      	ldr	r3, [pc, #20]	; (80030dc <HAL_RCC_GetSysClockFreq+0xd4>)
 80030c8:	613b      	str	r3, [r7, #16]
      break;
 80030ca:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80030cc:	693b      	ldr	r3, [r7, #16]
}
 80030ce:	0018      	movs	r0, r3
 80030d0:	46bd      	mov	sp, r7
 80030d2:	b006      	add	sp, #24
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	46c0      	nop			; (mov r8, r8)
 80030d8:	40021000 	.word	0x40021000
 80030dc:	007a1200 	.word	0x007a1200
 80030e0:	08003f10 	.word	0x08003f10
 80030e4:	08003f20 	.word	0x08003f20
 80030e8:	02dc6c00 	.word	0x02dc6c00

080030ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e042      	b.n	8003184 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	223d      	movs	r2, #61	; 0x3d
 8003102:	5c9b      	ldrb	r3, [r3, r2]
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d107      	bne.n	800311a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	223c      	movs	r2, #60	; 0x3c
 800310e:	2100      	movs	r1, #0
 8003110:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	0018      	movs	r0, r3
 8003116:	f7fe ffc3 	bl	80020a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	223d      	movs	r2, #61	; 0x3d
 800311e:	2102      	movs	r1, #2
 8003120:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3304      	adds	r3, #4
 800312a:	0019      	movs	r1, r3
 800312c:	0010      	movs	r0, r2
 800312e:	f000 fad7 	bl	80036e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2246      	movs	r2, #70	; 0x46
 8003136:	2101      	movs	r1, #1
 8003138:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	223e      	movs	r2, #62	; 0x3e
 800313e:	2101      	movs	r1, #1
 8003140:	5499      	strb	r1, [r3, r2]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	223f      	movs	r2, #63	; 0x3f
 8003146:	2101      	movs	r1, #1
 8003148:	5499      	strb	r1, [r3, r2]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2240      	movs	r2, #64	; 0x40
 800314e:	2101      	movs	r1, #1
 8003150:	5499      	strb	r1, [r3, r2]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2241      	movs	r2, #65	; 0x41
 8003156:	2101      	movs	r1, #1
 8003158:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2242      	movs	r2, #66	; 0x42
 800315e:	2101      	movs	r1, #1
 8003160:	5499      	strb	r1, [r3, r2]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2243      	movs	r2, #67	; 0x43
 8003166:	2101      	movs	r1, #1
 8003168:	5499      	strb	r1, [r3, r2]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2244      	movs	r2, #68	; 0x44
 800316e:	2101      	movs	r1, #1
 8003170:	5499      	strb	r1, [r3, r2]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2245      	movs	r2, #69	; 0x45
 8003176:	2101      	movs	r1, #1
 8003178:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	223d      	movs	r2, #61	; 0x3d
 800317e:	2101      	movs	r1, #1
 8003180:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	0018      	movs	r0, r3
 8003186:	46bd      	mov	sp, r7
 8003188:	b002      	add	sp, #8
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e042      	b.n	8003224 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	223d      	movs	r2, #61	; 0x3d
 80031a2:	5c9b      	ldrb	r3, [r3, r2]
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d107      	bne.n	80031ba <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	223c      	movs	r2, #60	; 0x3c
 80031ae:	2100      	movs	r1, #0
 80031b0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	0018      	movs	r0, r3
 80031b6:	f000 f839 	bl	800322c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	223d      	movs	r2, #61	; 0x3d
 80031be:	2102      	movs	r1, #2
 80031c0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	3304      	adds	r3, #4
 80031ca:	0019      	movs	r1, r3
 80031cc:	0010      	movs	r0, r2
 80031ce:	f000 fa87 	bl	80036e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2246      	movs	r2, #70	; 0x46
 80031d6:	2101      	movs	r1, #1
 80031d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	223e      	movs	r2, #62	; 0x3e
 80031de:	2101      	movs	r1, #1
 80031e0:	5499      	strb	r1, [r3, r2]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	223f      	movs	r2, #63	; 0x3f
 80031e6:	2101      	movs	r1, #1
 80031e8:	5499      	strb	r1, [r3, r2]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2240      	movs	r2, #64	; 0x40
 80031ee:	2101      	movs	r1, #1
 80031f0:	5499      	strb	r1, [r3, r2]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2241      	movs	r2, #65	; 0x41
 80031f6:	2101      	movs	r1, #1
 80031f8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2242      	movs	r2, #66	; 0x42
 80031fe:	2101      	movs	r1, #1
 8003200:	5499      	strb	r1, [r3, r2]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2243      	movs	r2, #67	; 0x43
 8003206:	2101      	movs	r1, #1
 8003208:	5499      	strb	r1, [r3, r2]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2244      	movs	r2, #68	; 0x44
 800320e:	2101      	movs	r1, #1
 8003210:	5499      	strb	r1, [r3, r2]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2245      	movs	r2, #69	; 0x45
 8003216:	2101      	movs	r1, #1
 8003218:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	223d      	movs	r2, #61	; 0x3d
 800321e:	2101      	movs	r1, #1
 8003220:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	0018      	movs	r0, r3
 8003226:	46bd      	mov	sp, r7
 8003228:	b002      	add	sp, #8
 800322a:	bd80      	pop	{r7, pc}

0800322c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003234:	46c0      	nop			; (mov r8, r8)
 8003236:	46bd      	mov	sp, r7
 8003238:	b002      	add	sp, #8
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d108      	bne.n	800325e <HAL_TIM_PWM_Start+0x22>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	223e      	movs	r2, #62	; 0x3e
 8003250:	5c9b      	ldrb	r3, [r3, r2]
 8003252:	b2db      	uxtb	r3, r3
 8003254:	3b01      	subs	r3, #1
 8003256:	1e5a      	subs	r2, r3, #1
 8003258:	4193      	sbcs	r3, r2
 800325a:	b2db      	uxtb	r3, r3
 800325c:	e01f      	b.n	800329e <HAL_TIM_PWM_Start+0x62>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2b04      	cmp	r3, #4
 8003262:	d108      	bne.n	8003276 <HAL_TIM_PWM_Start+0x3a>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	223f      	movs	r2, #63	; 0x3f
 8003268:	5c9b      	ldrb	r3, [r3, r2]
 800326a:	b2db      	uxtb	r3, r3
 800326c:	3b01      	subs	r3, #1
 800326e:	1e5a      	subs	r2, r3, #1
 8003270:	4193      	sbcs	r3, r2
 8003272:	b2db      	uxtb	r3, r3
 8003274:	e013      	b.n	800329e <HAL_TIM_PWM_Start+0x62>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	2b08      	cmp	r3, #8
 800327a:	d108      	bne.n	800328e <HAL_TIM_PWM_Start+0x52>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2240      	movs	r2, #64	; 0x40
 8003280:	5c9b      	ldrb	r3, [r3, r2]
 8003282:	b2db      	uxtb	r3, r3
 8003284:	3b01      	subs	r3, #1
 8003286:	1e5a      	subs	r2, r3, #1
 8003288:	4193      	sbcs	r3, r2
 800328a:	b2db      	uxtb	r3, r3
 800328c:	e007      	b.n	800329e <HAL_TIM_PWM_Start+0x62>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2241      	movs	r2, #65	; 0x41
 8003292:	5c9b      	ldrb	r3, [r3, r2]
 8003294:	b2db      	uxtb	r3, r3
 8003296:	3b01      	subs	r3, #1
 8003298:	1e5a      	subs	r2, r3, #1
 800329a:	4193      	sbcs	r3, r2
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e074      	b.n	8003390 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d104      	bne.n	80032b6 <HAL_TIM_PWM_Start+0x7a>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	223e      	movs	r2, #62	; 0x3e
 80032b0:	2102      	movs	r1, #2
 80032b2:	5499      	strb	r1, [r3, r2]
 80032b4:	e013      	b.n	80032de <HAL_TIM_PWM_Start+0xa2>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b04      	cmp	r3, #4
 80032ba:	d104      	bne.n	80032c6 <HAL_TIM_PWM_Start+0x8a>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	223f      	movs	r2, #63	; 0x3f
 80032c0:	2102      	movs	r1, #2
 80032c2:	5499      	strb	r1, [r3, r2]
 80032c4:	e00b      	b.n	80032de <HAL_TIM_PWM_Start+0xa2>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b08      	cmp	r3, #8
 80032ca:	d104      	bne.n	80032d6 <HAL_TIM_PWM_Start+0x9a>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2240      	movs	r2, #64	; 0x40
 80032d0:	2102      	movs	r1, #2
 80032d2:	5499      	strb	r1, [r3, r2]
 80032d4:	e003      	b.n	80032de <HAL_TIM_PWM_Start+0xa2>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2241      	movs	r2, #65	; 0x41
 80032da:	2102      	movs	r1, #2
 80032dc:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6839      	ldr	r1, [r7, #0]
 80032e4:	2201      	movs	r2, #1
 80032e6:	0018      	movs	r0, r3
 80032e8:	f000 fd10 	bl	8003d0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a29      	ldr	r2, [pc, #164]	; (8003398 <HAL_TIM_PWM_Start+0x15c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d00e      	beq.n	8003314 <HAL_TIM_PWM_Start+0xd8>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a28      	ldr	r2, [pc, #160]	; (800339c <HAL_TIM_PWM_Start+0x160>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d009      	beq.n	8003314 <HAL_TIM_PWM_Start+0xd8>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a26      	ldr	r2, [pc, #152]	; (80033a0 <HAL_TIM_PWM_Start+0x164>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d004      	beq.n	8003314 <HAL_TIM_PWM_Start+0xd8>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a25      	ldr	r2, [pc, #148]	; (80033a4 <HAL_TIM_PWM_Start+0x168>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d101      	bne.n	8003318 <HAL_TIM_PWM_Start+0xdc>
 8003314:	2301      	movs	r3, #1
 8003316:	e000      	b.n	800331a <HAL_TIM_PWM_Start+0xde>
 8003318:	2300      	movs	r3, #0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d008      	beq.n	8003330 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2180      	movs	r1, #128	; 0x80
 800332a:	0209      	lsls	r1, r1, #8
 800332c:	430a      	orrs	r2, r1
 800332e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a18      	ldr	r2, [pc, #96]	; (8003398 <HAL_TIM_PWM_Start+0x15c>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d00f      	beq.n	800335a <HAL_TIM_PWM_Start+0x11e>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	2380      	movs	r3, #128	; 0x80
 8003340:	05db      	lsls	r3, r3, #23
 8003342:	429a      	cmp	r2, r3
 8003344:	d009      	beq.n	800335a <HAL_TIM_PWM_Start+0x11e>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a17      	ldr	r2, [pc, #92]	; (80033a8 <HAL_TIM_PWM_Start+0x16c>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d004      	beq.n	800335a <HAL_TIM_PWM_Start+0x11e>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a11      	ldr	r2, [pc, #68]	; (800339c <HAL_TIM_PWM_Start+0x160>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d111      	bne.n	800337e <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	2207      	movs	r2, #7
 8003362:	4013      	ands	r3, r2
 8003364:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2b06      	cmp	r3, #6
 800336a:	d010      	beq.n	800338e <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2101      	movs	r1, #1
 8003378:	430a      	orrs	r2, r1
 800337a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800337c:	e007      	b.n	800338e <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2101      	movs	r1, #1
 800338a:	430a      	orrs	r2, r1
 800338c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	0018      	movs	r0, r3
 8003392:	46bd      	mov	sp, r7
 8003394:	b004      	add	sp, #16
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40012c00 	.word	0x40012c00
 800339c:	40014000 	.word	0x40014000
 80033a0:	40014400 	.word	0x40014400
 80033a4:	40014800 	.word	0x40014800
 80033a8:	40000400 	.word	0x40000400

080033ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033b8:	2317      	movs	r3, #23
 80033ba:	18fb      	adds	r3, r7, r3
 80033bc:	2200      	movs	r2, #0
 80033be:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	223c      	movs	r2, #60	; 0x3c
 80033c4:	5c9b      	ldrb	r3, [r3, r2]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d101      	bne.n	80033ce <HAL_TIM_PWM_ConfigChannel+0x22>
 80033ca:	2302      	movs	r3, #2
 80033cc:	e0ad      	b.n	800352a <HAL_TIM_PWM_ConfigChannel+0x17e>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	223c      	movs	r2, #60	; 0x3c
 80033d2:	2101      	movs	r1, #1
 80033d4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b0c      	cmp	r3, #12
 80033da:	d100      	bne.n	80033de <HAL_TIM_PWM_ConfigChannel+0x32>
 80033dc:	e076      	b.n	80034cc <HAL_TIM_PWM_ConfigChannel+0x120>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b0c      	cmp	r3, #12
 80033e2:	d900      	bls.n	80033e6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80033e4:	e095      	b.n	8003512 <HAL_TIM_PWM_ConfigChannel+0x166>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	d04e      	beq.n	800348a <HAL_TIM_PWM_ConfigChannel+0xde>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b08      	cmp	r3, #8
 80033f0:	d900      	bls.n	80033f4 <HAL_TIM_PWM_ConfigChannel+0x48>
 80033f2:	e08e      	b.n	8003512 <HAL_TIM_PWM_ConfigChannel+0x166>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_TIM_PWM_ConfigChannel+0x56>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b04      	cmp	r3, #4
 80033fe:	d021      	beq.n	8003444 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003400:	e087      	b.n	8003512 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	0011      	movs	r1, r2
 800340a:	0018      	movs	r0, r3
 800340c:	f000 f9e8 	bl	80037e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	699a      	ldr	r2, [r3, #24]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2108      	movs	r1, #8
 800341c:	430a      	orrs	r2, r1
 800341e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	699a      	ldr	r2, [r3, #24]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2104      	movs	r1, #4
 800342c:	438a      	bics	r2, r1
 800342e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6999      	ldr	r1, [r3, #24]
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	691a      	ldr	r2, [r3, #16]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	619a      	str	r2, [r3, #24]
      break;
 8003442:	e06b      	b.n	800351c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	0011      	movs	r1, r2
 800344c:	0018      	movs	r0, r3
 800344e:	f000 fa4f 	bl	80038f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	699a      	ldr	r2, [r3, #24]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2180      	movs	r1, #128	; 0x80
 800345e:	0109      	lsls	r1, r1, #4
 8003460:	430a      	orrs	r2, r1
 8003462:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699a      	ldr	r2, [r3, #24]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4931      	ldr	r1, [pc, #196]	; (8003534 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003470:	400a      	ands	r2, r1
 8003472:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6999      	ldr	r1, [r3, #24]
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	021a      	lsls	r2, r3, #8
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	619a      	str	r2, [r3, #24]
      break;
 8003488:	e048      	b.n	800351c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	0011      	movs	r1, r2
 8003492:	0018      	movs	r0, r3
 8003494:	f000 fab0 	bl	80039f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	69da      	ldr	r2, [r3, #28]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2108      	movs	r1, #8
 80034a4:	430a      	orrs	r2, r1
 80034a6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	69da      	ldr	r2, [r3, #28]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2104      	movs	r1, #4
 80034b4:	438a      	bics	r2, r1
 80034b6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	69d9      	ldr	r1, [r3, #28]
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	691a      	ldr	r2, [r3, #16]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	61da      	str	r2, [r3, #28]
      break;
 80034ca:	e027      	b.n	800351c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	0011      	movs	r1, r2
 80034d4:	0018      	movs	r0, r3
 80034d6:	f000 fb15 	bl	8003b04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	69da      	ldr	r2, [r3, #28]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2180      	movs	r1, #128	; 0x80
 80034e6:	0109      	lsls	r1, r1, #4
 80034e8:	430a      	orrs	r2, r1
 80034ea:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	69da      	ldr	r2, [r3, #28]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	490f      	ldr	r1, [pc, #60]	; (8003534 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80034f8:	400a      	ands	r2, r1
 80034fa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	69d9      	ldr	r1, [r3, #28]
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	021a      	lsls	r2, r3, #8
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	61da      	str	r2, [r3, #28]
      break;
 8003510:	e004      	b.n	800351c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003512:	2317      	movs	r3, #23
 8003514:	18fb      	adds	r3, r7, r3
 8003516:	2201      	movs	r2, #1
 8003518:	701a      	strb	r2, [r3, #0]
      break;
 800351a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	223c      	movs	r2, #60	; 0x3c
 8003520:	2100      	movs	r1, #0
 8003522:	5499      	strb	r1, [r3, r2]

  return status;
 8003524:	2317      	movs	r3, #23
 8003526:	18fb      	adds	r3, r7, r3
 8003528:	781b      	ldrb	r3, [r3, #0]
}
 800352a:	0018      	movs	r0, r3
 800352c:	46bd      	mov	sp, r7
 800352e:	b006      	add	sp, #24
 8003530:	bd80      	pop	{r7, pc}
 8003532:	46c0      	nop			; (mov r8, r8)
 8003534:	fffffbff 	.word	0xfffffbff

08003538 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003542:	230f      	movs	r3, #15
 8003544:	18fb      	adds	r3, r7, r3
 8003546:	2200      	movs	r2, #0
 8003548:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	223c      	movs	r2, #60	; 0x3c
 800354e:	5c9b      	ldrb	r3, [r3, r2]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d101      	bne.n	8003558 <HAL_TIM_ConfigClockSource+0x20>
 8003554:	2302      	movs	r3, #2
 8003556:	e0bc      	b.n	80036d2 <HAL_TIM_ConfigClockSource+0x19a>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	223c      	movs	r2, #60	; 0x3c
 800355c:	2101      	movs	r1, #1
 800355e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	223d      	movs	r2, #61	; 0x3d
 8003564:	2102      	movs	r1, #2
 8003566:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2277      	movs	r2, #119	; 0x77
 8003574:	4393      	bics	r3, r2
 8003576:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	4a58      	ldr	r2, [pc, #352]	; (80036dc <HAL_TIM_ConfigClockSource+0x1a4>)
 800357c:	4013      	ands	r3, r2
 800357e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2280      	movs	r2, #128	; 0x80
 800358e:	0192      	lsls	r2, r2, #6
 8003590:	4293      	cmp	r3, r2
 8003592:	d040      	beq.n	8003616 <HAL_TIM_ConfigClockSource+0xde>
 8003594:	2280      	movs	r2, #128	; 0x80
 8003596:	0192      	lsls	r2, r2, #6
 8003598:	4293      	cmp	r3, r2
 800359a:	d900      	bls.n	800359e <HAL_TIM_ConfigClockSource+0x66>
 800359c:	e088      	b.n	80036b0 <HAL_TIM_ConfigClockSource+0x178>
 800359e:	2280      	movs	r2, #128	; 0x80
 80035a0:	0152      	lsls	r2, r2, #5
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d100      	bne.n	80035a8 <HAL_TIM_ConfigClockSource+0x70>
 80035a6:	e088      	b.n	80036ba <HAL_TIM_ConfigClockSource+0x182>
 80035a8:	2280      	movs	r2, #128	; 0x80
 80035aa:	0152      	lsls	r2, r2, #5
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d900      	bls.n	80035b2 <HAL_TIM_ConfigClockSource+0x7a>
 80035b0:	e07e      	b.n	80036b0 <HAL_TIM_ConfigClockSource+0x178>
 80035b2:	2b70      	cmp	r3, #112	; 0x70
 80035b4:	d018      	beq.n	80035e8 <HAL_TIM_ConfigClockSource+0xb0>
 80035b6:	d900      	bls.n	80035ba <HAL_TIM_ConfigClockSource+0x82>
 80035b8:	e07a      	b.n	80036b0 <HAL_TIM_ConfigClockSource+0x178>
 80035ba:	2b60      	cmp	r3, #96	; 0x60
 80035bc:	d04f      	beq.n	800365e <HAL_TIM_ConfigClockSource+0x126>
 80035be:	d900      	bls.n	80035c2 <HAL_TIM_ConfigClockSource+0x8a>
 80035c0:	e076      	b.n	80036b0 <HAL_TIM_ConfigClockSource+0x178>
 80035c2:	2b50      	cmp	r3, #80	; 0x50
 80035c4:	d03b      	beq.n	800363e <HAL_TIM_ConfigClockSource+0x106>
 80035c6:	d900      	bls.n	80035ca <HAL_TIM_ConfigClockSource+0x92>
 80035c8:	e072      	b.n	80036b0 <HAL_TIM_ConfigClockSource+0x178>
 80035ca:	2b40      	cmp	r3, #64	; 0x40
 80035cc:	d057      	beq.n	800367e <HAL_TIM_ConfigClockSource+0x146>
 80035ce:	d900      	bls.n	80035d2 <HAL_TIM_ConfigClockSource+0x9a>
 80035d0:	e06e      	b.n	80036b0 <HAL_TIM_ConfigClockSource+0x178>
 80035d2:	2b30      	cmp	r3, #48	; 0x30
 80035d4:	d063      	beq.n	800369e <HAL_TIM_ConfigClockSource+0x166>
 80035d6:	d86b      	bhi.n	80036b0 <HAL_TIM_ConfigClockSource+0x178>
 80035d8:	2b20      	cmp	r3, #32
 80035da:	d060      	beq.n	800369e <HAL_TIM_ConfigClockSource+0x166>
 80035dc:	d868      	bhi.n	80036b0 <HAL_TIM_ConfigClockSource+0x178>
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d05d      	beq.n	800369e <HAL_TIM_ConfigClockSource+0x166>
 80035e2:	2b10      	cmp	r3, #16
 80035e4:	d05b      	beq.n	800369e <HAL_TIM_ConfigClockSource+0x166>
 80035e6:	e063      	b.n	80036b0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6818      	ldr	r0, [r3, #0]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	6899      	ldr	r1, [r3, #8]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f000 fb68 	bl	8003ccc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	2277      	movs	r2, #119	; 0x77
 8003608:	4313      	orrs	r3, r2
 800360a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	609a      	str	r2, [r3, #8]
      break;
 8003614:	e052      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6818      	ldr	r0, [r3, #0]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	6899      	ldr	r1, [r3, #8]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	f000 fb51 	bl	8003ccc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2180      	movs	r1, #128	; 0x80
 8003636:	01c9      	lsls	r1, r1, #7
 8003638:	430a      	orrs	r2, r1
 800363a:	609a      	str	r2, [r3, #8]
      break;
 800363c:	e03e      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6818      	ldr	r0, [r3, #0]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	6859      	ldr	r1, [r3, #4]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	001a      	movs	r2, r3
 800364c:	f000 fac4 	bl	8003bd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2150      	movs	r1, #80	; 0x50
 8003656:	0018      	movs	r0, r3
 8003658:	f000 fb1e 	bl	8003c98 <TIM_ITRx_SetConfig>
      break;
 800365c:	e02e      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6818      	ldr	r0, [r3, #0]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	6859      	ldr	r1, [r3, #4]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	001a      	movs	r2, r3
 800366c:	f000 fae2 	bl	8003c34 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2160      	movs	r1, #96	; 0x60
 8003676:	0018      	movs	r0, r3
 8003678:	f000 fb0e 	bl	8003c98 <TIM_ITRx_SetConfig>
      break;
 800367c:	e01e      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6818      	ldr	r0, [r3, #0]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	6859      	ldr	r1, [r3, #4]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	001a      	movs	r2, r3
 800368c:	f000 faa4 	bl	8003bd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2140      	movs	r1, #64	; 0x40
 8003696:	0018      	movs	r0, r3
 8003698:	f000 fafe 	bl	8003c98 <TIM_ITRx_SetConfig>
      break;
 800369c:	e00e      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	0019      	movs	r1, r3
 80036a8:	0010      	movs	r0, r2
 80036aa:	f000 faf5 	bl	8003c98 <TIM_ITRx_SetConfig>
      break;
 80036ae:	e005      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80036b0:	230f      	movs	r3, #15
 80036b2:	18fb      	adds	r3, r7, r3
 80036b4:	2201      	movs	r2, #1
 80036b6:	701a      	strb	r2, [r3, #0]
      break;
 80036b8:	e000      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x184>
      break;
 80036ba:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	223d      	movs	r2, #61	; 0x3d
 80036c0:	2101      	movs	r1, #1
 80036c2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	223c      	movs	r2, #60	; 0x3c
 80036c8:	2100      	movs	r1, #0
 80036ca:	5499      	strb	r1, [r3, r2]

  return status;
 80036cc:	230f      	movs	r3, #15
 80036ce:	18fb      	adds	r3, r7, r3
 80036d0:	781b      	ldrb	r3, [r3, #0]
}
 80036d2:	0018      	movs	r0, r3
 80036d4:	46bd      	mov	sp, r7
 80036d6:	b004      	add	sp, #16
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	46c0      	nop			; (mov r8, r8)
 80036dc:	ffff00ff 	.word	0xffff00ff

080036e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a34      	ldr	r2, [pc, #208]	; (80037c4 <TIM_Base_SetConfig+0xe4>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d008      	beq.n	800370a <TIM_Base_SetConfig+0x2a>
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	2380      	movs	r3, #128	; 0x80
 80036fc:	05db      	lsls	r3, r3, #23
 80036fe:	429a      	cmp	r2, r3
 8003700:	d003      	beq.n	800370a <TIM_Base_SetConfig+0x2a>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a30      	ldr	r2, [pc, #192]	; (80037c8 <TIM_Base_SetConfig+0xe8>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d108      	bne.n	800371c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2270      	movs	r2, #112	; 0x70
 800370e:	4393      	bics	r3, r2
 8003710:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	4313      	orrs	r3, r2
 800371a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a29      	ldr	r2, [pc, #164]	; (80037c4 <TIM_Base_SetConfig+0xe4>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d018      	beq.n	8003756 <TIM_Base_SetConfig+0x76>
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	2380      	movs	r3, #128	; 0x80
 8003728:	05db      	lsls	r3, r3, #23
 800372a:	429a      	cmp	r2, r3
 800372c:	d013      	beq.n	8003756 <TIM_Base_SetConfig+0x76>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a25      	ldr	r2, [pc, #148]	; (80037c8 <TIM_Base_SetConfig+0xe8>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d00f      	beq.n	8003756 <TIM_Base_SetConfig+0x76>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a24      	ldr	r2, [pc, #144]	; (80037cc <TIM_Base_SetConfig+0xec>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d00b      	beq.n	8003756 <TIM_Base_SetConfig+0x76>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a23      	ldr	r2, [pc, #140]	; (80037d0 <TIM_Base_SetConfig+0xf0>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d007      	beq.n	8003756 <TIM_Base_SetConfig+0x76>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a22      	ldr	r2, [pc, #136]	; (80037d4 <TIM_Base_SetConfig+0xf4>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d003      	beq.n	8003756 <TIM_Base_SetConfig+0x76>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a21      	ldr	r2, [pc, #132]	; (80037d8 <TIM_Base_SetConfig+0xf8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d108      	bne.n	8003768 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	4a20      	ldr	r2, [pc, #128]	; (80037dc <TIM_Base_SetConfig+0xfc>)
 800375a:	4013      	ands	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	4313      	orrs	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2280      	movs	r2, #128	; 0x80
 800376c:	4393      	bics	r3, r2
 800376e:	001a      	movs	r2, r3
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	4313      	orrs	r3, r2
 8003776:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	689a      	ldr	r2, [r3, #8]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a0c      	ldr	r2, [pc, #48]	; (80037c4 <TIM_Base_SetConfig+0xe4>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d00b      	beq.n	80037ae <TIM_Base_SetConfig+0xce>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a0d      	ldr	r2, [pc, #52]	; (80037d0 <TIM_Base_SetConfig+0xf0>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d007      	beq.n	80037ae <TIM_Base_SetConfig+0xce>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a0c      	ldr	r2, [pc, #48]	; (80037d4 <TIM_Base_SetConfig+0xf4>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d003      	beq.n	80037ae <TIM_Base_SetConfig+0xce>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a0b      	ldr	r2, [pc, #44]	; (80037d8 <TIM_Base_SetConfig+0xf8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d103      	bne.n	80037b6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	691a      	ldr	r2, [r3, #16]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	615a      	str	r2, [r3, #20]
}
 80037bc:	46c0      	nop			; (mov r8, r8)
 80037be:	46bd      	mov	sp, r7
 80037c0:	b004      	add	sp, #16
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40012c00 	.word	0x40012c00
 80037c8:	40000400 	.word	0x40000400
 80037cc:	40002000 	.word	0x40002000
 80037d0:	40014000 	.word	0x40014000
 80037d4:	40014400 	.word	0x40014400
 80037d8:	40014800 	.word	0x40014800
 80037dc:	fffffcff 	.word	0xfffffcff

080037e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	2201      	movs	r2, #1
 80037f0:	4393      	bics	r3, r2
 80037f2:	001a      	movs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2270      	movs	r2, #112	; 0x70
 800380e:	4393      	bics	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2203      	movs	r2, #3
 8003816:	4393      	bics	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	4313      	orrs	r3, r2
 8003822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	2202      	movs	r2, #2
 8003828:	4393      	bics	r3, r2
 800382a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	4313      	orrs	r3, r2
 8003834:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a27      	ldr	r2, [pc, #156]	; (80038d8 <TIM_OC1_SetConfig+0xf8>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d00b      	beq.n	8003856 <TIM_OC1_SetConfig+0x76>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a26      	ldr	r2, [pc, #152]	; (80038dc <TIM_OC1_SetConfig+0xfc>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d007      	beq.n	8003856 <TIM_OC1_SetConfig+0x76>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a25      	ldr	r2, [pc, #148]	; (80038e0 <TIM_OC1_SetConfig+0x100>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d003      	beq.n	8003856 <TIM_OC1_SetConfig+0x76>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a24      	ldr	r2, [pc, #144]	; (80038e4 <TIM_OC1_SetConfig+0x104>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d10c      	bne.n	8003870 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2208      	movs	r2, #8
 800385a:	4393      	bics	r3, r2
 800385c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	4313      	orrs	r3, r2
 8003866:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	2204      	movs	r2, #4
 800386c:	4393      	bics	r3, r2
 800386e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a19      	ldr	r2, [pc, #100]	; (80038d8 <TIM_OC1_SetConfig+0xf8>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d00b      	beq.n	8003890 <TIM_OC1_SetConfig+0xb0>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a18      	ldr	r2, [pc, #96]	; (80038dc <TIM_OC1_SetConfig+0xfc>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d007      	beq.n	8003890 <TIM_OC1_SetConfig+0xb0>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a17      	ldr	r2, [pc, #92]	; (80038e0 <TIM_OC1_SetConfig+0x100>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d003      	beq.n	8003890 <TIM_OC1_SetConfig+0xb0>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a16      	ldr	r2, [pc, #88]	; (80038e4 <TIM_OC1_SetConfig+0x104>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d111      	bne.n	80038b4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	4a15      	ldr	r2, [pc, #84]	; (80038e8 <TIM_OC1_SetConfig+0x108>)
 8003894:	4013      	ands	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	4a14      	ldr	r2, [pc, #80]	; (80038ec <TIM_OC1_SetConfig+0x10c>)
 800389c:	4013      	ands	r3, r2
 800389e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	621a      	str	r2, [r3, #32]
}
 80038ce:	46c0      	nop			; (mov r8, r8)
 80038d0:	46bd      	mov	sp, r7
 80038d2:	b006      	add	sp, #24
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	46c0      	nop			; (mov r8, r8)
 80038d8:	40012c00 	.word	0x40012c00
 80038dc:	40014000 	.word	0x40014000
 80038e0:	40014400 	.word	0x40014400
 80038e4:	40014800 	.word	0x40014800
 80038e8:	fffffeff 	.word	0xfffffeff
 80038ec:	fffffdff 	.word	0xfffffdff

080038f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	2210      	movs	r2, #16
 8003900:	4393      	bics	r3, r2
 8003902:	001a      	movs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	4a2e      	ldr	r2, [pc, #184]	; (80039d8 <TIM_OC2_SetConfig+0xe8>)
 800391e:	4013      	ands	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	4a2d      	ldr	r2, [pc, #180]	; (80039dc <TIM_OC2_SetConfig+0xec>)
 8003926:	4013      	ands	r3, r2
 8003928:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	021b      	lsls	r3, r3, #8
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	4313      	orrs	r3, r2
 8003934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	2220      	movs	r2, #32
 800393a:	4393      	bics	r3, r2
 800393c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	4313      	orrs	r3, r2
 8003948:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a24      	ldr	r2, [pc, #144]	; (80039e0 <TIM_OC2_SetConfig+0xf0>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d10d      	bne.n	800396e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2280      	movs	r2, #128	; 0x80
 8003956:	4393      	bics	r3, r2
 8003958:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	697a      	ldr	r2, [r7, #20]
 8003962:	4313      	orrs	r3, r2
 8003964:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	2240      	movs	r2, #64	; 0x40
 800396a:	4393      	bics	r3, r2
 800396c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a1b      	ldr	r2, [pc, #108]	; (80039e0 <TIM_OC2_SetConfig+0xf0>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d00b      	beq.n	800398e <TIM_OC2_SetConfig+0x9e>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a1a      	ldr	r2, [pc, #104]	; (80039e4 <TIM_OC2_SetConfig+0xf4>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d007      	beq.n	800398e <TIM_OC2_SetConfig+0x9e>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a19      	ldr	r2, [pc, #100]	; (80039e8 <TIM_OC2_SetConfig+0xf8>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d003      	beq.n	800398e <TIM_OC2_SetConfig+0x9e>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a18      	ldr	r2, [pc, #96]	; (80039ec <TIM_OC2_SetConfig+0xfc>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d113      	bne.n	80039b6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	4a17      	ldr	r2, [pc, #92]	; (80039f0 <TIM_OC2_SetConfig+0x100>)
 8003992:	4013      	ands	r3, r2
 8003994:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	4a16      	ldr	r2, [pc, #88]	; (80039f4 <TIM_OC2_SetConfig+0x104>)
 800399a:	4013      	ands	r3, r2
 800399c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	621a      	str	r2, [r3, #32]
}
 80039d0:	46c0      	nop			; (mov r8, r8)
 80039d2:	46bd      	mov	sp, r7
 80039d4:	b006      	add	sp, #24
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	ffff8fff 	.word	0xffff8fff
 80039dc:	fffffcff 	.word	0xfffffcff
 80039e0:	40012c00 	.word	0x40012c00
 80039e4:	40014000 	.word	0x40014000
 80039e8:	40014400 	.word	0x40014400
 80039ec:	40014800 	.word	0x40014800
 80039f0:	fffffbff 	.word	0xfffffbff
 80039f4:	fffff7ff 	.word	0xfffff7ff

080039f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	4a35      	ldr	r2, [pc, #212]	; (8003adc <TIM_OC3_SetConfig+0xe4>)
 8003a08:	401a      	ands	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2270      	movs	r2, #112	; 0x70
 8003a24:	4393      	bics	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2203      	movs	r2, #3
 8003a2c:	4393      	bics	r3, r2
 8003a2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	4a28      	ldr	r2, [pc, #160]	; (8003ae0 <TIM_OC3_SetConfig+0xe8>)
 8003a3e:	4013      	ands	r3, r2
 8003a40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	021b      	lsls	r3, r3, #8
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a24      	ldr	r2, [pc, #144]	; (8003ae4 <TIM_OC3_SetConfig+0xec>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d10d      	bne.n	8003a72 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	4a23      	ldr	r2, [pc, #140]	; (8003ae8 <TIM_OC3_SetConfig+0xf0>)
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	021b      	lsls	r3, r3, #8
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	4a1f      	ldr	r2, [pc, #124]	; (8003aec <TIM_OC3_SetConfig+0xf4>)
 8003a6e:	4013      	ands	r3, r2
 8003a70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a1b      	ldr	r2, [pc, #108]	; (8003ae4 <TIM_OC3_SetConfig+0xec>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d00b      	beq.n	8003a92 <TIM_OC3_SetConfig+0x9a>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a1c      	ldr	r2, [pc, #112]	; (8003af0 <TIM_OC3_SetConfig+0xf8>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d007      	beq.n	8003a92 <TIM_OC3_SetConfig+0x9a>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a1b      	ldr	r2, [pc, #108]	; (8003af4 <TIM_OC3_SetConfig+0xfc>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d003      	beq.n	8003a92 <TIM_OC3_SetConfig+0x9a>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a1a      	ldr	r2, [pc, #104]	; (8003af8 <TIM_OC3_SetConfig+0x100>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d113      	bne.n	8003aba <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	4a19      	ldr	r2, [pc, #100]	; (8003afc <TIM_OC3_SetConfig+0x104>)
 8003a96:	4013      	ands	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	4a18      	ldr	r2, [pc, #96]	; (8003b00 <TIM_OC3_SetConfig+0x108>)
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	011b      	lsls	r3, r3, #4
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	621a      	str	r2, [r3, #32]
}
 8003ad4:	46c0      	nop			; (mov r8, r8)
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	b006      	add	sp, #24
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	fffffeff 	.word	0xfffffeff
 8003ae0:	fffffdff 	.word	0xfffffdff
 8003ae4:	40012c00 	.word	0x40012c00
 8003ae8:	fffff7ff 	.word	0xfffff7ff
 8003aec:	fffffbff 	.word	0xfffffbff
 8003af0:	40014000 	.word	0x40014000
 8003af4:	40014400 	.word	0x40014400
 8003af8:	40014800 	.word	0x40014800
 8003afc:	ffffefff 	.word	0xffffefff
 8003b00:	ffffdfff 	.word	0xffffdfff

08003b04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	4a28      	ldr	r2, [pc, #160]	; (8003bb4 <TIM_OC4_SetConfig+0xb0>)
 8003b14:	401a      	ands	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4a22      	ldr	r2, [pc, #136]	; (8003bb8 <TIM_OC4_SetConfig+0xb4>)
 8003b30:	4013      	ands	r3, r2
 8003b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4a21      	ldr	r2, [pc, #132]	; (8003bbc <TIM_OC4_SetConfig+0xb8>)
 8003b38:	4013      	ands	r3, r2
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	021b      	lsls	r3, r3, #8
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	4a1d      	ldr	r2, [pc, #116]	; (8003bc0 <TIM_OC4_SetConfig+0xbc>)
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	031b      	lsls	r3, r3, #12
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a19      	ldr	r2, [pc, #100]	; (8003bc4 <TIM_OC4_SetConfig+0xc0>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d00b      	beq.n	8003b7c <TIM_OC4_SetConfig+0x78>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a18      	ldr	r2, [pc, #96]	; (8003bc8 <TIM_OC4_SetConfig+0xc4>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d007      	beq.n	8003b7c <TIM_OC4_SetConfig+0x78>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a17      	ldr	r2, [pc, #92]	; (8003bcc <TIM_OC4_SetConfig+0xc8>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d003      	beq.n	8003b7c <TIM_OC4_SetConfig+0x78>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a16      	ldr	r2, [pc, #88]	; (8003bd0 <TIM_OC4_SetConfig+0xcc>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d109      	bne.n	8003b90 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	4a15      	ldr	r2, [pc, #84]	; (8003bd4 <TIM_OC4_SetConfig+0xd0>)
 8003b80:	4013      	ands	r3, r2
 8003b82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	019b      	lsls	r3, r3, #6
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	621a      	str	r2, [r3, #32]
}
 8003baa:	46c0      	nop			; (mov r8, r8)
 8003bac:	46bd      	mov	sp, r7
 8003bae:	b006      	add	sp, #24
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	46c0      	nop			; (mov r8, r8)
 8003bb4:	ffffefff 	.word	0xffffefff
 8003bb8:	ffff8fff 	.word	0xffff8fff
 8003bbc:	fffffcff 	.word	0xfffffcff
 8003bc0:	ffffdfff 	.word	0xffffdfff
 8003bc4:	40012c00 	.word	0x40012c00
 8003bc8:	40014000 	.word	0x40014000
 8003bcc:	40014400 	.word	0x40014400
 8003bd0:	40014800 	.word	0x40014800
 8003bd4:	ffffbfff 	.word	0xffffbfff

08003bd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	4393      	bics	r3, r2
 8003bf2:	001a      	movs	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	22f0      	movs	r2, #240	; 0xf0
 8003c02:	4393      	bics	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	011b      	lsls	r3, r3, #4
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	220a      	movs	r2, #10
 8003c14:	4393      	bics	r3, r2
 8003c16:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	621a      	str	r2, [r3, #32]
}
 8003c2c:	46c0      	nop			; (mov r8, r8)
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	b006      	add	sp, #24
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	2210      	movs	r2, #16
 8003c46:	4393      	bics	r3, r2
 8003c48:	001a      	movs	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	4a0d      	ldr	r2, [pc, #52]	; (8003c94 <TIM_TI2_ConfigInputStage+0x60>)
 8003c5e:	4013      	ands	r3, r2
 8003c60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	031b      	lsls	r3, r3, #12
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	22a0      	movs	r2, #160	; 0xa0
 8003c70:	4393      	bics	r3, r2
 8003c72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	011b      	lsls	r3, r3, #4
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	621a      	str	r2, [r3, #32]
}
 8003c8a:	46c0      	nop			; (mov r8, r8)
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	b006      	add	sp, #24
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	46c0      	nop			; (mov r8, r8)
 8003c94:	ffff0fff 	.word	0xffff0fff

08003c98 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2270      	movs	r2, #112	; 0x70
 8003cac:	4393      	bics	r3, r2
 8003cae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	2207      	movs	r2, #7
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	609a      	str	r2, [r3, #8]
}
 8003cc2:	46c0      	nop			; (mov r8, r8)
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	b004      	add	sp, #16
 8003cc8:	bd80      	pop	{r7, pc}
	...

08003ccc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
 8003cd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	4a09      	ldr	r2, [pc, #36]	; (8003d08 <TIM_ETR_SetConfig+0x3c>)
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	021a      	lsls	r2, r3, #8
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	609a      	str	r2, [r3, #8]
}
 8003d00:	46c0      	nop			; (mov r8, r8)
 8003d02:	46bd      	mov	sp, r7
 8003d04:	b006      	add	sp, #24
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	ffff00ff 	.word	0xffff00ff

08003d0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	221f      	movs	r2, #31
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	2201      	movs	r2, #1
 8003d20:	409a      	lsls	r2, r3
 8003d22:	0013      	movs	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	43d2      	mvns	r2, r2
 8003d2e:	401a      	ands	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6a1a      	ldr	r2, [r3, #32]
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	211f      	movs	r1, #31
 8003d3c:	400b      	ands	r3, r1
 8003d3e:	6879      	ldr	r1, [r7, #4]
 8003d40:	4099      	lsls	r1, r3
 8003d42:	000b      	movs	r3, r1
 8003d44:	431a      	orrs	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	621a      	str	r2, [r3, #32]
}
 8003d4a:	46c0      	nop			; (mov r8, r8)
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	b006      	add	sp, #24
 8003d50:	bd80      	pop	{r7, pc}
	...

08003d54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	223c      	movs	r2, #60	; 0x3c
 8003d62:	5c9b      	ldrb	r3, [r3, r2]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e047      	b.n	8003dfc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	223c      	movs	r2, #60	; 0x3c
 8003d70:	2101      	movs	r1, #1
 8003d72:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	223d      	movs	r2, #61	; 0x3d
 8003d78:	2102      	movs	r1, #2
 8003d7a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2270      	movs	r2, #112	; 0x70
 8003d90:	4393      	bics	r3, r2
 8003d92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a16      	ldr	r2, [pc, #88]	; (8003e04 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d00f      	beq.n	8003dd0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	2380      	movs	r3, #128	; 0x80
 8003db6:	05db      	lsls	r3, r3, #23
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d009      	beq.n	8003dd0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a11      	ldr	r2, [pc, #68]	; (8003e08 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d004      	beq.n	8003dd0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a10      	ldr	r2, [pc, #64]	; (8003e0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d10c      	bne.n	8003dea <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	2280      	movs	r2, #128	; 0x80
 8003dd4:	4393      	bics	r3, r2
 8003dd6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	223d      	movs	r2, #61	; 0x3d
 8003dee:	2101      	movs	r1, #1
 8003df0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	223c      	movs	r2, #60	; 0x3c
 8003df6:	2100      	movs	r1, #0
 8003df8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	b004      	add	sp, #16
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	40012c00 	.word	0x40012c00
 8003e08:	40000400 	.word	0x40000400
 8003e0c:	40014000 	.word	0x40014000

08003e10 <__libc_init_array>:
 8003e10:	b570      	push	{r4, r5, r6, lr}
 8003e12:	2600      	movs	r6, #0
 8003e14:	4d0c      	ldr	r5, [pc, #48]	; (8003e48 <__libc_init_array+0x38>)
 8003e16:	4c0d      	ldr	r4, [pc, #52]	; (8003e4c <__libc_init_array+0x3c>)
 8003e18:	1b64      	subs	r4, r4, r5
 8003e1a:	10a4      	asrs	r4, r4, #2
 8003e1c:	42a6      	cmp	r6, r4
 8003e1e:	d109      	bne.n	8003e34 <__libc_init_array+0x24>
 8003e20:	2600      	movs	r6, #0
 8003e22:	f000 f821 	bl	8003e68 <_init>
 8003e26:	4d0a      	ldr	r5, [pc, #40]	; (8003e50 <__libc_init_array+0x40>)
 8003e28:	4c0a      	ldr	r4, [pc, #40]	; (8003e54 <__libc_init_array+0x44>)
 8003e2a:	1b64      	subs	r4, r4, r5
 8003e2c:	10a4      	asrs	r4, r4, #2
 8003e2e:	42a6      	cmp	r6, r4
 8003e30:	d105      	bne.n	8003e3e <__libc_init_array+0x2e>
 8003e32:	bd70      	pop	{r4, r5, r6, pc}
 8003e34:	00b3      	lsls	r3, r6, #2
 8003e36:	58eb      	ldr	r3, [r5, r3]
 8003e38:	4798      	blx	r3
 8003e3a:	3601      	adds	r6, #1
 8003e3c:	e7ee      	b.n	8003e1c <__libc_init_array+0xc>
 8003e3e:	00b3      	lsls	r3, r6, #2
 8003e40:	58eb      	ldr	r3, [r5, r3]
 8003e42:	4798      	blx	r3
 8003e44:	3601      	adds	r6, #1
 8003e46:	e7f2      	b.n	8003e2e <__libc_init_array+0x1e>
 8003e48:	08003f30 	.word	0x08003f30
 8003e4c:	08003f30 	.word	0x08003f30
 8003e50:	08003f30 	.word	0x08003f30
 8003e54:	08003f34 	.word	0x08003f34

08003e58 <memset>:
 8003e58:	0003      	movs	r3, r0
 8003e5a:	1882      	adds	r2, r0, r2
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d100      	bne.n	8003e62 <memset+0xa>
 8003e60:	4770      	bx	lr
 8003e62:	7019      	strb	r1, [r3, #0]
 8003e64:	3301      	adds	r3, #1
 8003e66:	e7f9      	b.n	8003e5c <memset+0x4>

08003e68 <_init>:
 8003e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e6a:	46c0      	nop			; (mov r8, r8)
 8003e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e6e:	bc08      	pop	{r3}
 8003e70:	469e      	mov	lr, r3
 8003e72:	4770      	bx	lr

08003e74 <_fini>:
 8003e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e76:	46c0      	nop			; (mov r8, r8)
 8003e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e7a:	bc08      	pop	{r3}
 8003e7c:	469e      	mov	lr, r3
 8003e7e:	4770      	bx	lr
